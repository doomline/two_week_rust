{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2","program":"/Users/AlexF/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","tokio","--edition=2018","/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytes\"","--cfg","feature=\"default\"","--cfg","feature=\"io-util\"","--cfg","feature=\"libc\"","--cfg","feature=\"memchr\"","--cfg","feature=\"mio\"","--cfg","feature=\"net\"","--cfg","feature=\"rt\"","--cfg","feature=\"sync\"","--cfg","feature=\"time\"","-C","metadata=b47697636f46fa20","-C","extra-filename=-b47697636f46fa20","--out-dir","/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps","-L","dependency=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps","--extern","bytes=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libbytes-82d292964be852e7.rmeta","--extern","libc=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/liblibc-4f1afac5b44418dd.rmeta","--extern","memchr=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libmemchr-ff8104fc5bd958d4.rmeta","--extern","mio=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libmio-8aec53e74b9e7cb8.rmeta","--extern","pin_project_lite=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libpin_project_lite-5395d5460189e857.rmeta","--cap-lints","allow","--cfg","tokio_track_caller","--error-format=json","--sysroot","/Users/AlexF/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libtokio-b47697636f46fa20.rmeta"},"prelude":{"crate_id":{"name":"tokio","disambiguator":[10030187288099224404,11177545360678261205]},"crate_root":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src","external_crates":[{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11263399830942021807,3354326593337767418]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","num":2,"id":{"name":"core","disambiguator":[6552575213732972370,4857478896615676938]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9368402477752345001,16510660328274119402]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11979046517868875526,4248718423519269454]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5389889921351115945,6106823979989002352]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18147862036360416397,10602909980673647499]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17806817554892560348,14725492049942068312]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[764992845537178953,4386711774585810915]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6726354693825255046,1562708793232137953]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13802537688027037173,7865830378773675775]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12634588057184811132,13278508508218871713]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5580722395240640672,9810153816205700700]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[451124501899321987,10206045407480806854]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[4126279991979072403,11569616848169612015]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[1864816784851368348,2345431951253805751]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","num":16,"id":{"name":"mio","disambiguator":[10875641806814574164,6783483307320677095]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","num":17,"id":{"name":"log","disambiguator":[6324800999915998487,506396420814187729]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","num":18,"id":{"name":"cfg_if","disambiguator":[2842719152716346652,13309214462252251415]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","num":19,"id":{"name":"libc","disambiguator":[2624980415912832056,1321477192649819246]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/seek.rs","num":20,"id":{"name":"pin_project_lite","disambiguator":[4780974279005373656,15252840094548328595]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","num":21,"id":{"name":"bytes","disambiguator":[12372896624429361894,2693718667056552145]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_until.rs","num":22,"id":{"name":"memchr","disambiguator":[2558111070204424716,3945823243777761199]}}],"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":0,"byte_end":17552,"line_start":1,"line_end":481,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":9541},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/support.rs","byte_start":31593,"byte_end":31599,"line_start":7,"line_end":7,"column_start":22,"column_end":28},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":75}},{"kind":"Use","ref_id":{"krate":2,"index":34759},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/support.rs","byte_start":31619,"byte_end":31622,"line_start":8,"line_end":8,"column_start":19,"column_end":22},"alias_span":null,"name":"Pin","value":"","parent":{"krate":0,"index":75}},{"kind":"Use","ref_id":{"krate":2,"index":37326},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/support.rs","byte_start":31643,"byte_end":31647,"line_start":9,"line_end":9,"column_start":20,"column_end":24},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":75}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40502,"byte_end":40514,"line_start":188,"line_end":188,"column_start":31,"column_end":43},"alias_span":null,"name":"AsyncBufRead","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":141},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40559,"byte_end":40568,"line_start":191,"line_end":191,"column_start":27,"column_end":36},"alias_span":null,"name":"AsyncRead","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40613,"byte_end":40622,"line_start":194,"line_end":194,"column_start":27,"column_end":36},"alias_span":null,"name":"AsyncSeek","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40669,"byte_end":40679,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"alias_span":null,"name":"AsyncWrite","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":248},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40720,"byte_end":40727,"line_start":200,"line_end":200,"column_start":25,"column_end":32},"alias_span":null,"name":"ReadBuf","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":1,"index":2761},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40897,"byte_end":40902,"line_start":205,"line_end":205,"column_start":19,"column_end":24},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":1,"index":7222},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40904,"byte_end":40913,"line_start":205,"line_end":205,"column_start":26,"column_end":35},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":1,"index":2759},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40915,"byte_end":40921,"line_start":205,"line_end":205,"column_start":37,"column_end":43},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":1,"index":7295},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40923,"byte_end":40931,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"alias_span":null,"name":"SeekFrom","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":969},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41025,"byte_end":41033,"line_start":211,"line_end":211,"column_start":26,"column_end":34},"alias_span":null,"name":"Interest","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":982},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41035,"byte_end":41040,"line_start":211,"line_end":211,"column_start":36,"column_end":41},"alias_span":null,"name":"Ready","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":1143},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41312,"byte_end":41319,"line_start":225,"line_end":225,"column_start":35,"column_end":42},"alias_span":null,"name":"AsyncFd","value":"","parent":{"krate":0,"index":1230}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41321,"byte_end":41338,"line_start":225,"line_end":225,"column_start":44,"column_end":61},"alias_span":null,"name":"AsyncFdReadyGuard","value":"","parent":{"krate":0,"index":1230}},{"kind":"Use","ref_id":{"krate":0,"index":1152},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41340,"byte_end":41360,"line_start":225,"line_end":225,"column_start":63,"column_end":83},"alias_span":null,"name":"AsyncFdReadyMutGuard","value":"","parent":{"krate":0,"index":1230}},{"kind":"Use","ref_id":{"krate":0,"index":1236},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41362,"byte_end":41372,"line_start":225,"line_end":225,"column_start":85,"column_end":95},"alias_span":null,"name":"TryIoError","value":"","parent":{"krate":0,"index":1230}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41634,"byte_end":41639,"line_start":244,"line_end":244,"column_start":21,"column_end":26},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":1348},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41641,"byte_end":41649,"line_start":244,"line_end":244,"column_start":28,"column_end":36},"alias_span":null,"name":"ReadHalf","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":1351},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41651,"byte_end":41660,"line_start":244,"line_end":244,"column_start":38,"column_end":47},"alias_span":null,"name":"WriteHalf","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2234},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41742,"byte_end":41746,"line_start":249,"line_end":249,"column_start":9,"column_end":13},"alias_span":null,"name":"copy","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2240},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41748,"byte_end":41756,"line_start":249,"line_end":249,"column_start":15,"column_end":23},"alias_span":null,"name":"copy_buf","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":1743},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41758,"byte_end":41764,"line_start":249,"line_end":249,"column_start":25,"column_end":31},"alias_span":null,"name":"duplex","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2260},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41766,"byte_end":41771,"line_start":249,"line_end":249,"column_start":33,"column_end":38},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2418},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41773,"byte_end":41779,"line_start":249,"line_end":249,"column_start":40,"column_end":46},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2425},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41781,"byte_end":41785,"line_start":249,"line_end":249,"column_start":48,"column_end":52},"alias_span":null,"name":"sink","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2110},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41787,"byte_end":41802,"line_start":249,"line_end":249,"column_start":54,"column_end":69},"alias_span":null,"name":"AsyncBufReadExt","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2118},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41804,"byte_end":41816,"line_start":249,"line_end":249,"column_start":71,"column_end":83},"alias_span":null,"name":"AsyncReadExt","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2169},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41818,"byte_end":41830,"line_start":249,"line_end":249,"column_start":85,"column_end":97},"alias_span":null,"name":"AsyncSeekExt","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41832,"byte_end":41845,"line_start":249,"line_end":249,"column_start":99,"column_end":112},"alias_span":null,"name":"AsyncWriteExt","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":9789},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41855,"byte_end":41864,"line_start":250,"line_end":250,"column_start":9,"column_end":18},"alias_span":null,"name":"BufReader","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":9758},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41866,"byte_end":41875,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"alias_span":null,"name":"BufStream","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":9712},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41877,"byte_end":41886,"line_start":250,"line_end":250,"column_start":31,"column_end":40},"alias_span":null,"name":"BufWriter","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2261},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41888,"byte_end":41900,"line_start":250,"line_end":250,"column_start":42,"column_end":54},"alias_span":null,"name":"DuplexStream","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41902,"byte_end":41907,"line_start":250,"line_end":250,"column_start":56,"column_end":61},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":9571},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41909,"byte_end":41914,"line_start":250,"line_end":250,"column_start":63,"column_end":68},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2419},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41916,"byte_end":41922,"line_start":250,"line_end":250,"column_start":70,"column_end":76},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41924,"byte_end":41928,"line_start":250,"line_end":250,"column_start":78,"column_end":82},"alias_span":null,"name":"Sink","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":8208},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41930,"byte_end":41935,"line_start":250,"line_end":250,"column_start":84,"column_end":89},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":8168},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41937,"byte_end":41941,"line_start":250,"line_end":250,"column_start":91,"column_end":95},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":291},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78849,"byte_end":78862,"line_start":28,"line_end":28,"column_start":15,"column_end":28},"alias_span":null,"name":"ToSocketAddrs","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3028},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78922,"byte_end":78933,"line_start":32,"line_end":32,"column_start":26,"column_end":37},"alias_span":null,"name":"lookup_host","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255660,"byte_end":10255668,"line_start":8,"line_end":8,"column_start":17,"column_end":25},"alias_span":null,"name":"ReadHalf","value":"","parent":{"krate":0,"index":2635}},{"kind":"Use","ref_id":{"krate":0,"index":3044},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255670,"byte_end":10255679,"line_start":8,"line_end":8,"column_start":27,"column_end":36},"alias_span":null,"name":"WriteHalf","value":"","parent":{"krate":0,"index":2635}},{"kind":"Use","ref_id":{"krate":0,"index":3051},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255722,"byte_end":10255735,"line_start":11,"line_end":11,"column_start":23,"column_end":36},"alias_span":null,"name":"OwnedReadHalf","value":"","parent":{"krate":0,"index":2635}},{"kind":"Use","ref_id":{"krate":0,"index":3055},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255737,"byte_end":10255751,"line_start":11,"line_end":11,"column_start":38,"column_end":52},"alias_span":null,"name":"OwnedWriteHalf","value":"","parent":{"krate":0,"index":2635}},{"kind":"Use","ref_id":{"krate":0,"index":3060},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255753,"byte_end":10255765,"line_start":11,"line_end":11,"column_start":54,"column_end":66},"alias_span":null,"name":"ReuniteError","value":"","parent":{"krate":0,"index":2635}},{"kind":"Use","ref_id":{"krate":0,"index":3061},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255753,"byte_end":10255765,"line_start":11,"line_end":11,"column_start":54,"column_end":66},"alias_span":null,"name":"ReuniteError","value":"","parent":{"krate":0,"index":2798}},{"kind":"Use","ref_id":{"krate":0,"index":3033},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78980,"byte_end":78991,"line_start":35,"line_end":35,"column_start":28,"column_end":39},"alias_span":null,"name":"TcpListener","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3035},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79018,"byte_end":79027,"line_start":36,"line_end":36,"column_start":26,"column_end":35},"alias_span":null,"name":"TcpSocket","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3066},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79054,"byte_end":79063,"line_start":37,"line_end":37,"column_start":26,"column_end":35},"alias_span":null,"name":"TcpStream","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3068},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79096,"byte_end":79105,"line_start":40,"line_end":40,"column_start":18,"column_end":27},"alias_span":null,"name":"UdpSocket","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3402},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375799,"byte_end":10375807,"line_start":8,"line_end":8,"column_start":17,"column_end":25},"alias_span":null,"name":"ReadHalf","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3409},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375809,"byte_end":10375818,"line_start":8,"line_end":8,"column_start":27,"column_end":36},"alias_span":null,"name":"WriteHalf","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3416},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375861,"byte_end":10375874,"line_start":11,"line_end":11,"column_start":23,"column_end":36},"alias_span":null,"name":"OwnedReadHalf","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3420},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375876,"byte_end":10375890,"line_start":11,"line_end":11,"column_start":38,"column_end":52},"alias_span":null,"name":"OwnedWriteHalf","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3425},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375892,"byte_end":10375904,"line_start":11,"line_end":11,"column_start":54,"column_end":66},"alias_span":null,"name":"ReuniteError","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3426},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375892,"byte_end":10375904,"line_start":11,"line_end":11,"column_start":54,"column_end":66},"alias_span":null,"name":"ReuniteError","value":"","parent":{"krate":0,"index":3263}},{"kind":"Use","ref_id":{"krate":0,"index":3267},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375944,"byte_end":10375954,"line_start":14,"line_end":14,"column_start":21,"column_end":31},"alias_span":null,"name":"SocketAddr","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3268},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375944,"byte_end":10375954,"line_start":14,"line_end":14,"column_start":21,"column_end":31},"alias_span":null,"name":"SocketAddr","value":"","parent":{"krate":0,"index":3275}},{"kind":"Use","ref_id":{"krate":0,"index":3433},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10376042,"byte_end":10376047,"line_start":20,"line_end":20,"column_start":16,"column_end":21},"alias_span":null,"name":"UCred","value":"","parent":{"krate":0,"index":3073}},{"kind":"Use","ref_id":{"krate":0,"index":3395},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79180,"byte_end":79192,"line_start":45,"line_end":45,"column_start":37,"column_end":49},"alias_span":null,"name":"UnixDatagram","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3399},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79222,"byte_end":79234,"line_start":46,"line_end":46,"column_start":29,"column_end":41},"alias_span":null,"name":"UnixListener","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":3431},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79262,"byte_end":79272,"line_start":47,"line_end":47,"column_start":27,"column_end":37},"alias_span":null,"name":"UnixStream","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":4277},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462549,"byte_end":10462556,"line_start":193,"line_end":193,"column_start":28,"column_end":35},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":3524}},{"kind":"Use","ref_id":{"krate":0,"index":4467},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462681,"byte_end":10462691,"line_start":201,"line_end":201,"column_start":22,"column_end":32},"alias_span":null,"name":"EnterGuard","value":"","parent":{"krate":0,"index":3524}},{"kind":"Use","ref_id":{"krate":0,"index":4456},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462693,"byte_end":10462699,"line_start":201,"line_end":201,"column_start":34,"column_end":40},"alias_span":null,"name":"Handle","value":"","parent":{"krate":0,"index":3524}},{"kind":"Use","ref_id":{"krate":0,"index":5743},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616112,"byte_end":10616119,"line_start":432,"line_end":432,"column_start":23,"column_end":30},"alias_span":null,"name":"Barrier","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5755},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616121,"byte_end":10616138,"line_start":432,"line_end":432,"column_start":32,"column_end":49},"alias_span":null,"name":"BarrierWaitResult","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":4830},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660576,"byte_end":10660583,"line_start":76,"line_end":76,"column_start":25,"column_end":32},"alias_span":null,"name":"channel","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":4823},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660585,"byte_end":10660591,"line_start":76,"line_end":76,"column_start":34,"column_end":40},"alias_span":null,"name":"Permit","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":4827},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660593,"byte_end":10660601,"line_start":76,"line_end":76,"column_start":42,"column_end":50},"alias_span":null,"name":"Receiver","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":4820},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660603,"byte_end":10660609,"line_start":76,"line_end":76,"column_start":52,"column_end":58},"alias_span":null,"name":"Sender","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":5087},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660687,"byte_end":10660704,"line_start":83,"line_end":83,"column_start":27,"column_end":44},"alias_span":null,"name":"unbounded_channel","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":5081},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660706,"byte_end":10660723,"line_start":83,"line_end":83,"column_start":46,"column_end":63},"alias_span":null,"name":"UnboundedReceiver","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":5072},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660725,"byte_end":10660740,"line_start":83,"line_end":83,"column_start":65,"column_end":80},"alias_span":null,"name":"UnboundedSender","value":"","parent":{"krate":0,"index":4735}},{"kind":"Use","ref_id":{"krate":0,"index":5147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616220,"byte_end":10616225,"line_start":439,"line_end":439,"column_start":21,"column_end":26},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5151},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616227,"byte_end":10616237,"line_start":439,"line_end":439,"column_start":28,"column_end":38},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5838},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616239,"byte_end":10616251,"line_start":439,"line_end":439,"column_start":40,"column_end":52},"alias_span":null,"name":"TryLockError","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5155},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616253,"byte_end":10616268,"line_start":439,"line_end":439,"column_start":54,"column_end":69},"alias_span":null,"name":"OwnedMutexGuard","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5843},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616319,"byte_end":10616325,"line_start":442,"line_end":442,"column_start":21,"column_end":27},"alias_span":null,"name":"Notify","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5936},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616416,"byte_end":10616428,"line_start":447,"line_end":447,"column_start":31,"column_end":43},"alias_span":null,"name":"AcquireError","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5926},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616430,"byte_end":10616445,"line_start":447,"line_end":447,"column_start":45,"column_end":60},"alias_span":null,"name":"TryAcquireError","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5941},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616492,"byte_end":10616501,"line_start":450,"line_end":450,"column_start":25,"column_end":34},"alias_span":null,"name":"Semaphore","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5945},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616503,"byte_end":10616518,"line_start":450,"line_end":450,"column_start":36,"column_end":51},"alias_span":null,"name":"SemaphorePermit","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5952},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616520,"byte_end":10616540,"line_start":450,"line_end":450,"column_start":53,"column_end":73},"alias_span":null,"name":"OwnedSemaphorePermit","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5957},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616581,"byte_end":10616587,"line_start":453,"line_end":453,"column_start":22,"column_end":28},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5550},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616589,"byte_end":10616604,"line_start":453,"line_end":453,"column_start":30,"column_end":45},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":5577},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616606,"byte_end":10616622,"line_start":453,"line_end":453,"column_start":47,"column_end":63},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":4546}},{"kind":"Use","ref_id":{"krate":0,"index":4012},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132808,"byte_end":132817,"line_start":219,"line_end":219,"column_start":36,"column_end":45},"alias_span":null,"name":"JoinError","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":4014},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132819,"byte_end":132829,"line_start":219,"line_end":219,"column_start":47,"column_end":57},"alias_span":null,"name":"JoinHandle","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6169},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132873,"byte_end":132887,"line_start":222,"line_end":222,"column_start":23,"column_end":37},"alias_span":null,"name":"spawn_blocking","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132924,"byte_end":132929,"line_start":225,"line_end":225,"column_start":20,"column_end":25},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6174},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":133050,"byte_end":133059,"line_start":232,"line_end":232,"column_start":24,"column_end":33},"alias_span":null,"name":"yield_now","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6191},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":133097,"byte_end":133108,"line_start":235,"line_end":235,"column_start":21,"column_end":32},"alias_span":null,"name":"spawn_local","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6182},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":133110,"byte_end":133118,"line_start":235,"line_end":235,"column_start":34,"column_end":42},"alias_span":null,"name":"LocalSet","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6121},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":133166,"byte_end":133174,"line_start":238,"line_end":238,"column_start":25,"column_end":33},"alias_span":null,"name":"LocalKey","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":6172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14880,"byte_end":14885,"line_start":398,"line_end":398,"column_start":19,"column_end":24},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6388},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905574,"byte_end":10905579,"line_start":99,"line_end":99,"column_start":25,"column_end":30},"alias_span":null,"name":"sleep","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6387},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905581,"byte_end":10905592,"line_start":99,"line_end":99,"column_start":32,"column_end":43},"alias_span":null,"name":"sleep_until","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":7003},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905594,"byte_end":10905599,"line_start":99,"line_end":99,"column_start":45,"column_end":50},"alias_span":null,"name":"Sleep","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6701},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905655,"byte_end":10905662,"line_start":104,"line_end":104,"column_start":24,"column_end":31},"alias_span":null,"name":"Instant","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6538},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905698,"byte_end":10905706,"line_start":107,"line_end":107,"column_start":20,"column_end":28},"alias_span":null,"name":"interval","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6539},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905708,"byte_end":10905719,"line_start":107,"line_end":107,"column_start":30,"column_end":41},"alias_span":null,"name":"interval_at","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6724},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905721,"byte_end":10905729,"line_start":107,"line_end":107,"column_start":43,"column_end":51},"alias_span":null,"name":"Interval","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6563},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905779,"byte_end":10905786,"line_start":111,"line_end":111,"column_start":19,"column_end":26},"alias_span":null,"name":"timeout","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6565},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905788,"byte_end":10905798,"line_start":111,"line_end":111,"column_start":28,"column_end":38},"alias_span":null,"name":"timeout_at","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":0,"index":6965},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905800,"byte_end":10905807,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"alias_span":null,"name":"Timeout","value":"","parent":{"krate":0,"index":6207}},{"kind":"Use","ref_id":{"krate":2,"index":37196},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905920,"byte_end":10905928,"line_start":119,"line_end":119,"column_start":20,"column_end":28},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":6207}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":0,"byte_end":17552,"line_start":1,"line_end":481,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":79},{"krate":0,"index":104},{"krate":0,"index":280},{"krate":0,"index":348},{"krate":0,"index":503},{"krate":0,"index":594},{"krate":0,"index":3524},{"krate":0,"index":595},{"krate":0,"index":4546},{"krate":0,"index":614},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":615},{"krate":0,"index":671}],"decl_id":null,"docs":" A runtime for writing reliable network applications without compromising speed.","sig":null,"attributes":[{"value":"allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n        :: needless_doctest_main)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":55,"byte_end":167,"line_start":2,"line_end":6,"column_start":1,"column_end":3}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":168,"byte_end":274,"line_start":7,"line_end":12,"column_start":1,"column_end":3}},{"value":"/ A runtime for writing reliable network applications without compromising speed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":483,"byte_end":566,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":567,"byte_end":570,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Tokio is an event-driven, non-blocking I/O platform for writing asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":571,"byte_end":651,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ applications with the Rust programming language. At a high level, it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":652,"byte_end":724,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ provides a few major components:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":725,"byte_end":761,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":762,"byte_end":765,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * Tools for [working with asynchronous tasks][tasks], including","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":766,"byte_end":833,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/   [synchronization primitives and channels][sync] and [timeouts, sleeps, and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":834,"byte_end":914,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/   intervals][time].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":915,"byte_end":938,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ * APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":939,"byte_end":1026,"line_start":29,"line_end":29,"column_start":1,"column_end":88}},{"value":"/   [filesystem][fs] operations, and [process] and [signal] management.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1027,"byte_end":1100,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ * A [runtime] for executing asynchronous code, including a task scheduler,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1101,"byte_end":1179,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/   an I/O driver backed by the operating system's event queue (epoll, kqueue,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1180,"byte_end":1260,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/   IOCP, etc...), and a high performance timer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1261,"byte_end":1311,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1312,"byte_end":1315,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Guide level documentation is found on the [website].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1316,"byte_end":1372,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1373,"byte_end":1376,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [tasks]: #working-with-tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1377,"byte_end":1409,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/ [sync]: crate::sync","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1410,"byte_end":1433,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"/ [time]: crate::time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1434,"byte_end":1457,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/ [io]: #asynchronous-io","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1458,"byte_end":1484,"line_start":40,"line_end":40,"column_start":1,"column_end":27}},{"value":"/ [net]: crate::net","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1485,"byte_end":1506,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/ [fs]: crate::fs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1507,"byte_end":1526,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/ [process]: crate::process","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1527,"byte_end":1556,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/ [signal]: crate::signal","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1557,"byte_end":1584,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/ [fs]: crate::fs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1585,"byte_end":1604,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/ [runtime]: crate::runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1605,"byte_end":1634,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/ [website]: https://tokio.rs/tokio/tutorial","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1635,"byte_end":1681,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1682,"byte_end":1685,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # A Tour of Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1686,"byte_end":1707,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1708,"byte_end":1711,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Tokio consists of a number of modules that provide a range of functionality","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1712,"byte_end":1791,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ essential for implementing asynchronous applications in Rust. In this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1792,"byte_end":1865,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ section, we will take a brief tour of Tokio, summarizing the major APIs and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1866,"byte_end":1945,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ their uses.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1946,"byte_end":1961,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1962,"byte_end":1965,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ The easiest way to get started is to enable all features. Do this by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":1966,"byte_end":2038,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/ enabling the `full` feature flag:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2039,"byte_end":2076,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2077,"byte_end":2080,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2081,"byte_end":2092,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/ tokio = { version = \"1\", features = [\"full\"] }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2093,"byte_end":2143,"line_start":60,"line_end":60,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2144,"byte_end":2151,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2152,"byte_end":2155,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ### Authoring applications","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2156,"byte_end":2186,"line_start":63,"line_end":63,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2187,"byte_end":2190,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Tokio is great for writing applications and most users in this case shouldn't","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2191,"byte_end":2272,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ worry too much about what features they should pick. If you're unsure, we suggest","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2273,"byte_end":2358,"line_start":66,"line_end":66,"column_start":1,"column_end":86}},{"value":"/ going with `full` to ensure that you don't run into any road blocks while you're","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2359,"byte_end":2443,"line_start":67,"line_end":67,"column_start":1,"column_end":85}},{"value":"/ building your application.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2444,"byte_end":2474,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2475,"byte_end":2478,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ #### Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2479,"byte_end":2495,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2496,"byte_end":2499,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This example shows the quickest way to get started with Tokio.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2500,"byte_end":2566,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2567,"byte_end":2570,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2571,"byte_end":2582,"line_start":74,"line_end":74,"column_start":1,"column_end":12}},{"value":"/ tokio = { version = \"1\", features = [\"full\"] }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2583,"byte_end":2633,"line_start":75,"line_end":75,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2634,"byte_end":2641,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2642,"byte_end":2645,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ### Authoring libraries","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2646,"byte_end":2673,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2674,"byte_end":2677,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ As a library author your goal should be to provide the lighest weight crate","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2678,"byte_end":2757,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ that is based on Tokio. To achieve this you should ensure that you only enable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2758,"byte_end":2840,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/ the features you need. This allows users to pick up your crate without having","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2841,"byte_end":2922,"line_start":82,"line_end":82,"column_start":1,"column_end":82}},{"value":"/ to enable unnecessary features.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2923,"byte_end":2958,"line_start":83,"line_end":83,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2959,"byte_end":2962,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ #### Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2963,"byte_end":2979,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2980,"byte_end":2983,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This example shows how you may want to import features for a library that just","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":2984,"byte_end":3066,"line_start":87,"line_end":87,"column_start":1,"column_end":83}},{"value":"/ needs to `tokio::spawn` and use a `TcpStream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3067,"byte_end":3117,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3118,"byte_end":3121,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3122,"byte_end":3133,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ tokio = { version = \"1\", features = [\"rt\", \"net\"] }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3134,"byte_end":3189,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3190,"byte_end":3197,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3198,"byte_end":3201,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ## Working With Tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3202,"byte_end":3227,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3228,"byte_end":3231,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Asynchronous programs in Rust are based around lightweight, non-blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3232,"byte_end":3308,"line_start":96,"line_end":96,"column_start":1,"column_end":77}},{"value":"/ units of execution called [_tasks_][tasks]. The [`tokio::task`] module provides","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3309,"byte_end":3392,"line_start":97,"line_end":97,"column_start":1,"column_end":84}},{"value":"/ important tools for working with tasks:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3393,"byte_end":3436,"line_start":98,"line_end":98,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3437,"byte_end":3440,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ * The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3441,"byte_end":3520,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   on the Tokio runtime and awaiting the output of a spawned task, respectively,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3521,"byte_end":3604,"line_start":101,"line_end":101,"column_start":1,"column_end":84}},{"value":"/ * Functions for [running blocking operations][blocking] in an asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3605,"byte_end":3683,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"/   task context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3684,"byte_end":3703,"line_start":103,"line_end":103,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3704,"byte_end":3707,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The [`tokio::task`] module is present only when the \"rt\" feature flag","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3708,"byte_end":3781,"line_start":105,"line_end":105,"column_start":1,"column_end":74}},{"value":"/ is enabled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3782,"byte_end":3797,"line_start":106,"line_end":106,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3798,"byte_end":3801,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [tasks]: task/index.html#what-are-tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3802,"byte_end":3845,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/ [`tokio::task`]: crate::task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3846,"byte_end":3878,"line_start":109,"line_end":109,"column_start":1,"column_end":33}},{"value":"/ [`spawn`]: crate::task::spawn()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3879,"byte_end":3914,"line_start":110,"line_end":110,"column_start":1,"column_end":36}},{"value":"/ [`JoinHandle`]: crate::task::JoinHandle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3915,"byte_end":3958,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/ [blocking]: task/index.html#blocking-and-yielding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":3959,"byte_end":4012,"line_start":112,"line_end":112,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4013,"byte_end":4016,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ The [`tokio::sync`] module contains synchronization primitives to use when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4017,"byte_end":4095,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ needing to communicate or share data. These include:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4096,"byte_end":4152,"line_start":115,"line_end":115,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4153,"byte_end":4156,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * channels ([`oneshot`], [`mpsc`], and [`watch`]), for sending values","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4157,"byte_end":4230,"line_start":117,"line_end":117,"column_start":1,"column_end":74}},{"value":"/   between tasks,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4231,"byte_end":4251,"line_start":118,"line_end":118,"column_start":1,"column_end":21}},{"value":"/ * a non-blocking [`Mutex`], for controlling access to a shared, mutable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4252,"byte_end":4327,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/   value,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4328,"byte_end":4340,"line_start":120,"line_end":120,"column_start":1,"column_end":13}},{"value":"/ * an asynchronous [`Barrier`] type, for multiple tasks to synchronize before","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4341,"byte_end":4421,"line_start":121,"line_end":121,"column_start":1,"column_end":81}},{"value":"/   beginning a computation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4422,"byte_end":4452,"line_start":122,"line_end":122,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4453,"byte_end":4456,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ The `tokio::sync` module is present only when the \"sync\" feature flag is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4457,"byte_end":4533,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ enabled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4534,"byte_end":4546,"line_start":125,"line_end":125,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4547,"byte_end":4550,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ [`tokio::sync`]: crate::sync","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4551,"byte_end":4583,"line_start":127,"line_end":127,"column_start":1,"column_end":33}},{"value":"/ [`Mutex`]: crate::sync::Mutex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4584,"byte_end":4617,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/ [`Barrier`]: crate::sync::Barrier","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4618,"byte_end":4655,"line_start":129,"line_end":129,"column_start":1,"column_end":38}},{"value":"/ [`oneshot`]: crate::sync::oneshot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4656,"byte_end":4693,"line_start":130,"line_end":130,"column_start":1,"column_end":38}},{"value":"/ [`mpsc`]: crate::sync::mpsc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4694,"byte_end":4725,"line_start":131,"line_end":131,"column_start":1,"column_end":32}},{"value":"/ [`watch`]: crate::sync::watch","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4726,"byte_end":4759,"line_start":132,"line_end":132,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4760,"byte_end":4763,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ The [`tokio::time`] module provides utilities for tracking time and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4764,"byte_end":4835,"line_start":134,"line_end":134,"column_start":1,"column_end":72}},{"value":"/ scheduling work. This includes functions for setting [timeouts][timeout] for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4836,"byte_end":4916,"line_start":135,"line_end":135,"column_start":1,"column_end":81}},{"value":"/ tasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":4917,"byte_end":5005,"line_start":136,"line_end":136,"column_start":1,"column_end":89}},{"value":"/ interval][interval].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5006,"byte_end":5030,"line_start":137,"line_end":137,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5031,"byte_end":5034,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ In order to use `tokio::time`, the \"time\" feature flag must be enabled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5035,"byte_end":5110,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5111,"byte_end":5114,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`tokio::time`]: crate::time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5115,"byte_end":5147,"line_start":141,"line_end":141,"column_start":1,"column_end":33}},{"value":"/ [sleep]: crate::time::sleep()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5148,"byte_end":5181,"line_start":142,"line_end":142,"column_start":1,"column_end":34}},{"value":"/ [interval]: crate::time::interval()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5182,"byte_end":5221,"line_start":143,"line_end":143,"column_start":1,"column_end":40}},{"value":"/ [timeout]: crate::time::timeout()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5222,"byte_end":5259,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5260,"byte_end":5263,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ Finally, Tokio provides a _runtime_ for executing asynchronous tasks. Most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5264,"byte_end":5342,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/ applications can use the [`#[tokio::main]`][main] macro to run their code on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5343,"byte_end":5427,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"/ Tokio runtime. However, this macro provides only basic configuration options. As","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5428,"byte_end":5512,"line_start":148,"line_end":148,"column_start":1,"column_end":85}},{"value":"/ an alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5513,"byte_end":5606,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"/ and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5607,"byte_end":5698,"line_start":150,"line_end":150,"column_start":1,"column_end":92}},{"value":"/ provide the functionality you need.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5699,"byte_end":5738,"line_start":151,"line_end":151,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5739,"byte_end":5742,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Using the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5743,"byte_end":5821,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ enable the basic [single-threaded scheduler][rt] and the [thread-pool","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5822,"byte_end":5895,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/ scheduler][rt-multi-thread], respectively. See the [`runtime` module","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5896,"byte_end":5968,"line_start":155,"line_end":155,"column_start":1,"column_end":73}},{"value":"/ documentation][rt-features] for details. In addition, the \"macros\" feature","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":5969,"byte_end":6047,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6048,"byte_end":6118,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6119,"byte_end":6122,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [main]: attr.main.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6123,"byte_end":6149,"line_start":159,"line_end":159,"column_start":1,"column_end":27}},{"value":"/ [`tokio::runtime`]: crate::runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6150,"byte_end":6188,"line_start":160,"line_end":160,"column_start":1,"column_end":39}},{"value":"/ [`Builder`]: crate::runtime::Builder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6189,"byte_end":6229,"line_start":161,"line_end":161,"column_start":1,"column_end":41}},{"value":"/ [`Runtime`]: crate::runtime::Runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6230,"byte_end":6270,"line_start":162,"line_end":162,"column_start":1,"column_end":41}},{"value":"/ [rt]: runtime/index.html#basic-scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6271,"byte_end":6315,"line_start":163,"line_end":163,"column_start":1,"column_end":45}},{"value":"/ [rt-multi-thread]: runtime/index.html#threaded-scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6316,"byte_end":6376,"line_start":164,"line_end":164,"column_start":1,"column_end":61}},{"value":"/ [rt-features]: runtime/index.html#runtime-scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6377,"byte_end":6432,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6433,"byte_end":6436,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ## CPU-bound tasks and blocking code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6437,"byte_end":6477,"line_start":167,"line_end":167,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6478,"byte_end":6481,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Tokio is able to concurrently run many tasks on a few threads by repeatedly","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6482,"byte_end":6561,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ swapping the currently running task on each thread. However, this kind of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6562,"byte_end":6639,"line_start":170,"line_end":170,"column_start":1,"column_end":78}},{"value":"/ swapping can only happen at `.await` points, so code that spends a long time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6640,"byte_end":6720,"line_start":171,"line_end":171,"column_start":1,"column_end":81}},{"value":"/ without reaching an `.await` will prevent other tasks from running. To","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6721,"byte_end":6795,"line_start":172,"line_end":172,"column_start":1,"column_end":75}},{"value":"/ combat this, Tokio provides two kinds of threads: Core threads and blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6796,"byte_end":6875,"line_start":173,"line_end":173,"column_start":1,"column_end":80}},{"value":"/ threads. The core threads are where all asynchronous code runs, and Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6876,"byte_end":6953,"line_start":174,"line_end":174,"column_start":1,"column_end":78}},{"value":"/ will by default spawn one for each CPU core. The blocking threads are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":6954,"byte_end":7027,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/ spawned on demand, can be used to run blocking code that would otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7028,"byte_end":7104,"line_start":176,"line_end":176,"column_start":1,"column_end":77}},{"value":"/ block other tasks from running and are kept alive when not used for a certain","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7105,"byte_end":7186,"line_start":177,"line_end":177,"column_start":1,"column_end":82}},{"value":"/ amount of time which can be configured with [`thread_keep_alive`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7187,"byte_end":7257,"line_start":178,"line_end":178,"column_start":1,"column_end":71}},{"value":"/ Since it is not possible for Tokio to swap out blocking tasks, like it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7258,"byte_end":7332,"line_start":179,"line_end":179,"column_start":1,"column_end":75}},{"value":"/ can do with asynchronous code, the upper limit on the number of blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7333,"byte_end":7409,"line_start":180,"line_end":180,"column_start":1,"column_end":77}},{"value":"/ threads is very large. These limits can be configured on the [`Builder`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7410,"byte_end":7487,"line_start":181,"line_end":181,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7488,"byte_end":7491,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ To spawn a blocking task, you should use the [`spawn_blocking`] function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7492,"byte_end":7569,"line_start":183,"line_end":183,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7570,"byte_end":7573,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ [`Builder`]: crate::runtime::Builder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7574,"byte_end":7614,"line_start":185,"line_end":185,"column_start":1,"column_end":41}},{"value":"/ [`spawn_blocking`]: crate::task::spawn_blocking()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7615,"byte_end":7668,"line_start":186,"line_end":186,"column_start":1,"column_end":54}},{"value":"/ [`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7669,"byte_end":7740,"line_start":187,"line_end":187,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7741,"byte_end":7744,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7745,"byte_end":7752,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7753,"byte_end":7771,"line_start":190,"line_end":190,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7772,"byte_end":7793,"line_start":191,"line_end":191,"column_start":1,"column_end":22}},{"value":"/     // This is running on a core thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7794,"byte_end":7838,"line_start":192,"line_end":192,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7839,"byte_end":7842,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/     let blocking_task = tokio::task::spawn_blocking(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7843,"byte_end":7903,"line_start":194,"line_end":194,"column_start":1,"column_end":61}},{"value":"/         // This is running on a blocking thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7904,"byte_end":7956,"line_start":195,"line_end":195,"column_start":1,"column_end":53}},{"value":"/         // Blocking here is ok.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7957,"byte_end":7992,"line_start":196,"line_end":196,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":7993,"byte_end":8004,"line_start":197,"line_end":197,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8005,"byte_end":8008,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/     // We can wait for the blocking task like this:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8009,"byte_end":8064,"line_start":199,"line_end":199,"column_start":1,"column_end":56}},{"value":"/     // If the blocking task panics, the unwrap below will propagate the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8065,"byte_end":8140,"line_start":200,"line_end":200,"column_start":1,"column_end":76}},{"value":"/     // panic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8141,"byte_end":8158,"line_start":201,"line_end":201,"column_start":1,"column_end":18}},{"value":"/     blocking_task.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8159,"byte_end":8196,"line_start":202,"line_end":202,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8197,"byte_end":8202,"line_start":203,"line_end":203,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8203,"byte_end":8210,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8211,"byte_end":8214,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ If your code is CPU-bound and you wish to limit the number of threads used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8215,"byte_end":8293,"line_start":206,"line_end":206,"column_start":1,"column_end":79}},{"value":"/ to run it, you should run it on another thread pool such as [rayon]. You","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8294,"byte_end":8370,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ can use an [`oneshot`] channel to send the result back to Tokio when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8371,"byte_end":8447,"line_start":208,"line_end":208,"column_start":1,"column_end":77}},{"value":"/ rayon task finishes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8448,"byte_end":8472,"line_start":209,"line_end":209,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8473,"byte_end":8476,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [rayon]: https://docs.rs/rayon","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8477,"byte_end":8511,"line_start":211,"line_end":211,"column_start":1,"column_end":35}},{"value":"/ [`oneshot`]: crate::sync::oneshot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8512,"byte_end":8549,"line_start":212,"line_end":212,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8550,"byte_end":8553,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ## Asynchronous IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8554,"byte_end":8576,"line_start":214,"line_end":214,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8577,"byte_end":8580,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ As well as scheduling and running tasks, Tokio provides everything you need","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8581,"byte_end":8660,"line_start":216,"line_end":216,"column_start":1,"column_end":80}},{"value":"/ to perform input and output asynchronously.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8661,"byte_end":8708,"line_start":217,"line_end":217,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8709,"byte_end":8712,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ The [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8713,"byte_end":8792,"line_start":219,"line_end":219,"column_start":1,"column_end":80}},{"value":"/ the [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8793,"byte_end":8873,"line_start":220,"line_end":220,"column_start":1,"column_end":81}},{"value":"/ when the \"io-util\" feature flag is enabled, it also provides combinators and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8874,"byte_end":8954,"line_start":221,"line_end":221,"column_start":1,"column_end":81}},{"value":"/ functions for working with these traits, forming as an asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":8955,"byte_end":9026,"line_start":222,"line_end":222,"column_start":1,"column_end":72}},{"value":"/ counterpart to [`std::io`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9027,"byte_end":9058,"line_start":223,"line_end":223,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9059,"byte_end":9062,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ Tokio also includes APIs for performing various kinds of I/O and interacting","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9063,"byte_end":9143,"line_start":225,"line_end":225,"column_start":1,"column_end":81}},{"value":"/ with the operating system asynchronously. These include:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9144,"byte_end":9204,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9205,"byte_end":9208,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ * [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9209,"byte_end":9288,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/   [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9289,"byte_end":9358,"line_start":229,"line_end":229,"column_start":1,"column_end":70}},{"value":"/ * [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9359,"byte_end":9436,"line_start":230,"line_end":230,"column_start":1,"column_end":78}},{"value":"/   asynchronously (enabled by the \"fs\" feature flag),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9437,"byte_end":9493,"line_start":231,"line_end":231,"column_start":1,"column_end":57}},{"value":"/ * [`tokio::signal`], for asynchronously handling Unix and Windows OS signals","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9494,"byte_end":9574,"line_start":232,"line_end":232,"column_start":1,"column_end":81}},{"value":"/   (enabled by the \"signal\" feature flag),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9575,"byte_end":9620,"line_start":233,"line_end":233,"column_start":1,"column_end":46}},{"value":"/ * [`tokio::process`], for spawning and managing child processes (enabled by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9621,"byte_end":9700,"line_start":234,"line_end":234,"column_start":1,"column_end":80}},{"value":"/   the \"process\" feature flag).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9701,"byte_end":9735,"line_start":235,"line_end":235,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9736,"byte_end":9739,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ [`tokio::io`]: crate::io","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9740,"byte_end":9768,"line_start":237,"line_end":237,"column_start":1,"column_end":29}},{"value":"/ [`AsyncRead`]: crate::io::AsyncRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9769,"byte_end":9808,"line_start":238,"line_end":238,"column_start":1,"column_end":40}},{"value":"/ [`AsyncWrite`]: crate::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9809,"byte_end":9850,"line_start":239,"line_end":239,"column_start":1,"column_end":42}},{"value":"/ [`AsyncBufRead`]: crate::io::AsyncBufRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9851,"byte_end":9896,"line_start":240,"line_end":240,"column_start":1,"column_end":46}},{"value":"/ [`std::io`]: std::io","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9897,"byte_end":9921,"line_start":241,"line_end":241,"column_start":1,"column_end":25}},{"value":"/ [`tokio::net`]: crate::net","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9922,"byte_end":9952,"line_start":242,"line_end":242,"column_start":1,"column_end":31}},{"value":"/ [TCP]: crate::net::tcp","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9953,"byte_end":9979,"line_start":243,"line_end":243,"column_start":1,"column_end":27}},{"value":"/ [UDP]: crate::net::UdpSocket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":9980,"byte_end":10012,"line_start":244,"line_end":244,"column_start":1,"column_end":33}},{"value":"/ [UDS]: crate::net::unix","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10013,"byte_end":10040,"line_start":245,"line_end":245,"column_start":1,"column_end":28}},{"value":"/ [`tokio::fs`]: crate::fs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10041,"byte_end":10069,"line_start":246,"line_end":246,"column_start":1,"column_end":29}},{"value":"/ [`std::fs`]: std::fs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10070,"byte_end":10094,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/ [`tokio::signal`]: crate::signal","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10095,"byte_end":10131,"line_start":248,"line_end":248,"column_start":1,"column_end":37}},{"value":"/ [`tokio::process`]: crate::process","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10132,"byte_end":10170,"line_start":249,"line_end":249,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10171,"byte_end":10174,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10175,"byte_end":10189,"line_start":251,"line_end":251,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10190,"byte_end":10193,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ A simple TCP echo server:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10194,"byte_end":10223,"line_start":253,"line_end":253,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10224,"byte_end":10227,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10228,"byte_end":10241,"line_start":255,"line_end":255,"column_start":1,"column_end":14}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10242,"byte_end":10274,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/ use tokio::io::{AsyncReadExt, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10275,"byte_end":10324,"line_start":257,"line_end":257,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10325,"byte_end":10328,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10329,"byte_end":10347,"line_start":259,"line_end":259,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10348,"byte_end":10411,"line_start":260,"line_end":260,"column_start":1,"column_end":64}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10412,"byte_end":10478,"line_start":261,"line_end":261,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10479,"byte_end":10482,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10483,"byte_end":10497,"line_start":263,"line_end":263,"column_start":1,"column_end":15}},{"value":"/         let (mut socket, _) = listener.accept().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10498,"byte_end":10557,"line_start":264,"line_end":264,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10558,"byte_end":10561,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10562,"byte_end":10599,"line_start":266,"line_end":266,"column_start":1,"column_end":38}},{"value":"/             let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10600,"byte_end":10640,"line_start":267,"line_end":267,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10641,"byte_end":10644,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/             // In a loop, read data from the socket and write the data back.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10645,"byte_end":10725,"line_start":269,"line_end":269,"column_start":1,"column_end":81}},{"value":"/             loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10726,"byte_end":10748,"line_start":270,"line_end":270,"column_start":1,"column_end":23}},{"value":"/                 let n = match socket.read(&mut buf).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10749,"byte_end":10812,"line_start":271,"line_end":271,"column_start":1,"column_end":64}},{"value":"/                     // socket closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10813,"byte_end":10853,"line_start":272,"line_end":272,"column_start":1,"column_end":41}},{"value":"/                     Ok(n) if n == 0 => return,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10854,"byte_end":10904,"line_start":273,"line_end":273,"column_start":1,"column_end":51}},{"value":"/                     Ok(n) => n,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10905,"byte_end":10940,"line_start":274,"line_end":274,"column_start":1,"column_end":36}},{"value":"/                     Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10941,"byte_end":10976,"line_start":275,"line_end":275,"column_start":1,"column_end":36}},{"value":"/                         eprintln!(\"failed to read from socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":10977,"byte_end":11060,"line_start":276,"line_end":276,"column_start":1,"column_end":84}},{"value":"/                         return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11061,"byte_end":11096,"line_start":277,"line_end":277,"column_start":1,"column_end":36}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11097,"byte_end":11122,"line_start":278,"line_end":278,"column_start":1,"column_end":26}},{"value":"/                 };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11123,"byte_end":11145,"line_start":279,"line_end":279,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11146,"byte_end":11149,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/                 // Write the data back","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11150,"byte_end":11192,"line_start":281,"line_end":281,"column_start":1,"column_end":43}},{"value":"/                 if let Err(e) = socket.write_all(&buf[0..n]).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11193,"byte_end":11265,"line_start":282,"line_end":282,"column_start":1,"column_end":73}},{"value":"/                     eprintln!(\"failed to write to socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11266,"byte_end":11344,"line_start":283,"line_end":283,"column_start":1,"column_end":79}},{"value":"/                     return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11345,"byte_end":11376,"line_start":284,"line_end":284,"column_start":1,"column_end":32}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11377,"byte_end":11398,"line_start":285,"line_end":285,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11399,"byte_end":11416,"line_start":286,"line_end":286,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11417,"byte_end":11432,"line_start":287,"line_end":287,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11433,"byte_end":11442,"line_start":288,"line_end":288,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11443,"byte_end":11448,"line_start":289,"line_end":289,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11449,"byte_end":11456,"line_start":290,"line_end":290,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11457,"byte_end":11460,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ## Feature flags","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11461,"byte_end":11481,"line_start":292,"line_end":292,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11482,"byte_end":11485,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Tokio uses a set of [feature flags] to reduce the amount of compiled code. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11486,"byte_end":11567,"line_start":294,"line_end":294,"column_start":1,"column_end":82}},{"value":"/ is possible to just enable certain features over others. By default, Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11568,"byte_end":11646,"line_start":295,"line_end":295,"column_start":1,"column_end":79}},{"value":"/ does not enable any features but allows one to enable a subset for their use","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11647,"byte_end":11727,"line_start":296,"line_end":296,"column_start":1,"column_end":81}},{"value":"/ case. Below is a list of the available feature flags. You may also notice","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11728,"byte_end":11805,"line_start":297,"line_end":297,"column_start":1,"column_end":78}},{"value":"/ above each function, struct and trait there is listed one or more feature flags","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11806,"byte_end":11889,"line_start":298,"line_end":298,"column_start":1,"column_end":84}},{"value":"/ that are required for that item to be used. If you are new to Tokio it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11890,"byte_end":11967,"line_start":299,"line_end":299,"column_start":1,"column_end":78}},{"value":"/ recommended that you use the `full` feature flag which will enable all public APIs.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":11968,"byte_end":12055,"line_start":300,"line_end":300,"column_start":1,"column_end":88}},{"value":"/ Beware though that this will pull in many extra dependencies that you may not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12056,"byte_end":12137,"line_start":301,"line_end":301,"column_start":1,"column_end":82}},{"value":"/ need.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12138,"byte_end":12147,"line_start":302,"line_end":302,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12148,"byte_end":12151,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ - `full`: Enables all Tokio public API features listed below.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12152,"byte_end":12217,"line_start":304,"line_end":304,"column_start":1,"column_end":66}},{"value":"/ - `rt`: Enables `tokio::spawn`, the basic (current thread) scheduler,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12218,"byte_end":12291,"line_start":305,"line_end":305,"column_start":1,"column_end":74}},{"value":"/         and non-scheduler utilities.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12292,"byte_end":12332,"line_start":306,"line_end":306,"column_start":1,"column_end":41}},{"value":"/ - `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12333,"byte_end":12419,"line_start":307,"line_end":307,"column_start":1,"column_end":87}},{"value":"/ - `io-util`: Enables the IO based `Ext` traits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12420,"byte_end":12471,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ - `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12472,"byte_end":12532,"line_start":309,"line_end":309,"column_start":1,"column_end":61}},{"value":"/ - `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12533,"byte_end":12623,"line_start":310,"line_end":310,"column_start":1,"column_end":91}},{"value":"/          as well as (on Unix-like systems) `AsyncFd`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12624,"byte_end":12680,"line_start":311,"line_end":311,"column_start":1,"column_end":57}},{"value":"/ - `time`: Enables `tokio::time` types and allows the schedulers to enable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12681,"byte_end":12758,"line_start":312,"line_end":312,"column_start":1,"column_end":78}},{"value":"/           the built in timer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12759,"byte_end":12792,"line_start":313,"line_end":313,"column_start":1,"column_end":34}},{"value":"/ - `process`: Enables `tokio::process` types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12793,"byte_end":12841,"line_start":314,"line_end":314,"column_start":1,"column_end":49}},{"value":"/ - `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12842,"byte_end":12911,"line_start":315,"line_end":315,"column_start":1,"column_end":70}},{"value":"/ - `sync`: Enables all `tokio::sync` types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12912,"byte_end":12958,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ - `signal`: Enables all `tokio::signal` types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":12959,"byte_end":13009,"line_start":317,"line_end":317,"column_start":1,"column_end":51}},{"value":"/ - `fs`: Enables `tokio::fs` types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13010,"byte_end":13048,"line_start":318,"line_end":318,"column_start":1,"column_end":39}},{"value":"/ - `test-util`: Enables testing based infrastructure for the Tokio runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13049,"byte_end":13127,"line_start":319,"line_end":319,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13128,"byte_end":13131,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ _Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13132,"byte_end":13214,"line_start":321,"line_end":321,"column_start":1,"column_end":83}},{"value":"/ always available._","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13215,"byte_end":13237,"line_start":322,"line_end":322,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13238,"byte_end":13241,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ ### Internal features","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13242,"byte_end":13267,"line_start":324,"line_end":324,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13268,"byte_end":13271,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ These features do not expose any new API, but influence internal","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13272,"byte_end":13340,"line_start":326,"line_end":326,"column_start":1,"column_end":69}},{"value":"/ implementation aspects of Tokio, and can pull in additional","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13341,"byte_end":13404,"line_start":327,"line_end":327,"column_start":1,"column_end":64}},{"value":"/ dependencies.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13405,"byte_end":13422,"line_start":328,"line_end":328,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13423,"byte_end":13426,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ - `parking_lot`: As a potential optimization, use the _parking_lot_ crate's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13427,"byte_end":13506,"line_start":330,"line_end":330,"column_start":1,"column_end":80}},{"value":"/ synchronization primitives internally. MSRV may increase according to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13507,"byte_end":13584,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/ _parking_lot_ release in use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13585,"byte_end":13618,"line_start":332,"line_end":332,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13619,"byte_end":13622,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ ### Unstable features","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13623,"byte_end":13648,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13649,"byte_end":13652,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ These feature flags enable **unstable** features. The public API may break in 1.x","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13653,"byte_end":13738,"line_start":336,"line_end":336,"column_start":1,"column_end":86}},{"value":"/ releases. To enable these features, the `--cfg tokio_unstable` must be passed to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13739,"byte_end":13823,"line_start":337,"line_end":337,"column_start":1,"column_end":85}},{"value":"/ `rustc` when compiling. This is easiest done using the `RUSTFLAGS` env variable:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13824,"byte_end":13908,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/ `RUSTFLAGS=\"--cfg tokio_unstable\"`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13909,"byte_end":13948,"line_start":339,"line_end":339,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13949,"byte_end":13952,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ - `tracing`: Enables tracing events.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13953,"byte_end":13993,"line_start":341,"line_end":341,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13994,"byte_end":13997,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":13998,"byte_end":14095,"line_start":343,"line_end":343,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":75}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14284,"byte_end":14296,"line_start":349,"line_end":349,"column_start":1,"column_end":13}},{"value":"allow(unused_macros)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/mod.rs","byte_start":17589,"byte_end":17609,"line_start":1,"line_end":1,"column_start":36,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":75},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/support.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"support","qualname":"::macros::support","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/support.rs","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":690},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997209,"byte_end":9997214,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Ready","qualname":"::future::ready::Ready","value":"","parent":null,"children":[],"decl_id":null,"docs":" Future for the [`ok`](ok()) function.","sig":null,"attributes":[{"value":"/ Future for the [`ok`](ok()) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9996980,"byte_end":9997021,"line_start":5,"line_end":5,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997022,"byte_end":9997025,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ `pub` in order to use the future as an associated type in a sealed trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997026,"byte_end":9997103,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"allow(unreachable_pub)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997172,"byte_end":9997197,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":722},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":942},{"krate":0,"index":968},{"krate":0,"index":1129},{"krate":0,"index":1230},{"krate":0,"index":1241},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347}],"decl_id":null,"docs":" Traits, helpers, and type definitions for asynchronous I/O functionality.","sig":null,"attributes":[{"value":"/ Traits, helpers, and type definitions for asynchronous I/O functionality.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":32954,"byte_end":33031,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33032,"byte_end":33035,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This module is the asynchronous version of `std::io`. Primarily, it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33036,"byte_end":33107,"line_start":5,"line_end":5,"column_start":1,"column_end":72}},{"value":"/ defines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33108,"byte_end":33188,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ versions of the [`Read`] and [`Write`] traits in the standard library.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33189,"byte_end":33263,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33264,"byte_end":33267,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # AsyncRead and AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33268,"byte_end":33298,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33299,"byte_end":33302,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33303,"byte_end":33383,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ [`AsyncWrite`] provide the most general interface for reading and writing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33384,"byte_end":33461,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ input and output. Unlike the standard library's traits, however, they are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33462,"byte_end":33539,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ _asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33540,"byte_end":33620,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ type will _yield_ to the Tokio scheduler when IO is not ready, rather than","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33621,"byte_end":33699,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ blocking. This allows other tasks to run while waiting on IO.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33700,"byte_end":33765,"line_start":16,"line_end":16,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33766,"byte_end":33769,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Another difference is that `AsyncRead` and `AsyncWrite` only contain","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33770,"byte_end":33842,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/ core methods needed to provide asynchronous reading and writing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33843,"byte_end":33910,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ functionality. Instead, utility methods are defined in the [`AsyncReadExt`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33911,"byte_end":33990,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ and [`AsyncWriteExt`] extension traits. These traits are automatically","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":33991,"byte_end":34065,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ implemented for all values that implement `AsyncRead` and `AsyncWrite`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34066,"byte_end":34140,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ respectively.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34141,"byte_end":34158,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34159,"byte_end":34162,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ End users will rarely interact directly with `AsyncRead` and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34163,"byte_end":34227,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ `AsyncWrite`. Instead, they will use the async functions defined in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34228,"byte_end":34303,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ extension traits. Library authors are expected to implement `AsyncRead`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34304,"byte_end":34379,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ and `AsyncWrite` in order to provide types that behave like byte streams.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34380,"byte_end":34457,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34458,"byte_end":34461,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Even with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34462,"byte_end":34538,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ can be used in almost exactly the same manner as the standard library's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34539,"byte_end":34614,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ `Read` and `Write`. Most types in the standard library that implement `Read`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34615,"byte_end":34695,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/ and `Write` have asynchronous equivalents in `tokio` that implement","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34696,"byte_end":34767,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ `AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34768,"byte_end":34837,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34838,"byte_end":34841,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ For example, the standard library documentation introduces `Read` by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34842,"byte_end":34914,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ [demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34915,"byte_end":34995,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ can do the same with [`tokio::fs::File`][`File`]:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":34996,"byte_end":35049,"line_start":38,"line_end":38,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35050,"byte_end":35053,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35054,"byte_end":35067,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::{self, AsyncReadExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35068,"byte_end":35108,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ use tokio::fs::File;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35109,"byte_end":35133,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35134,"byte_end":35137,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35138,"byte_end":35156,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35157,"byte_end":35196,"line_start":45,"line_end":45,"column_start":1,"column_end":40}},{"value":"/     let mut f = File::open(\"foo.txt\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35197,"byte_end":35246,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/     let mut buffer = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35247,"byte_end":35280,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35281,"byte_end":35284,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     // read up to 10 bytes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35285,"byte_end":35315,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/     let n = f.read(&mut buffer).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35316,"byte_end":35359,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35360,"byte_end":35363,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/     println!(\"The bytes: {:?}\", &buffer[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35364,"byte_end":35414,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35415,"byte_end":35429,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35430,"byte_end":35435,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35436,"byte_end":35443,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35444,"byte_end":35447,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`File`]: crate::fs::File","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35448,"byte_end":35477,"line_start":57,"line_end":57,"column_start":1,"column_end":30}},{"value":"/ [`TcpStream`]: crate::net::TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35478,"byte_end":35518,"line_start":58,"line_end":58,"column_start":1,"column_end":41}},{"value":"/ [`std::fs::File`]: std::fs::File","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35519,"byte_end":35555,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ [std_example]: std::io#read-and-write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35556,"byte_end":35597,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35598,"byte_end":35601,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Buffered Readers and Writers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35602,"byte_end":35637,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35638,"byte_end":35641,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Byte-based interfaces are unwieldy and can be inefficient, as we'd need to be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35642,"byte_end":35723,"line_start":64,"line_end":64,"column_start":1,"column_end":82}},{"value":"/ making near-constant calls to the operating system. To help with this,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35724,"byte_end":35798,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ `std::io` comes with [support for _buffered_ readers and writers][stdbuf],","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35799,"byte_end":35877,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ and therefore, `tokio::io` does as well.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35878,"byte_end":35922,"line_start":67,"line_end":67,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35923,"byte_end":35926,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Tokio provides an async version of the [`std::io::BufRead`] trait,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35927,"byte_end":35997,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/ [`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":35998,"byte_end":36076,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ wrap readers and writers. These wrappers use a buffer, reducing the number","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36077,"byte_end":36155,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ of calls and providing nicer methods for accessing exactly what you want.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36156,"byte_end":36233,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36234,"byte_end":36237,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ For example, [`BufReader`] works with the [`AsyncBufRead`] trait to add","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36238,"byte_end":36313,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ extra methods to any async reader:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36314,"byte_end":36352,"line_start":75,"line_end":75,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36353,"byte_end":36356,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36357,"byte_end":36370,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::{self, BufReader, AsyncBufReadExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36371,"byte_end":36425,"line_start":78,"line_end":78,"column_start":1,"column_end":55}},{"value":"/ use tokio::fs::File;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36426,"byte_end":36450,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36451,"byte_end":36454,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36455,"byte_end":36473,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36474,"byte_end":36513,"line_start":82,"line_end":82,"column_start":1,"column_end":40}},{"value":"/     let f = File::open(\"foo.txt\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36514,"byte_end":36559,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"/     let mut reader = BufReader::new(f);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36560,"byte_end":36603,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/     let mut buffer = String::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36604,"byte_end":36643,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36644,"byte_end":36647,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/     // read a line into buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36648,"byte_end":36682,"line_start":87,"line_end":87,"column_start":1,"column_end":35}},{"value":"/     reader.read_line(&mut buffer).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36683,"byte_end":36728,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36729,"byte_end":36732,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/     println!(\"{}\", buffer);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36733,"byte_end":36764,"line_start":90,"line_end":90,"column_start":1,"column_end":32}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36765,"byte_end":36779,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36780,"byte_end":36785,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36786,"byte_end":36793,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36794,"byte_end":36797,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ [`BufWriter`] doesn't add any new ways of writing; it just buffers every call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36798,"byte_end":36879,"line_start":95,"line_end":95,"column_start":1,"column_end":82}},{"value":"/ to [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36880,"byte_end":36958,"line_start":96,"line_end":96,"column_start":1,"column_end":79}},{"value":"/ [`BufWriter`] to ensure that any buffered data is written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":36959,"byte_end":37021,"line_start":97,"line_end":97,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37022,"byte_end":37025,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37026,"byte_end":37039,"line_start":99,"line_end":99,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::{self, BufWriter, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37040,"byte_end":37092,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"/ use tokio::fs::File;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37093,"byte_end":37117,"line_start":101,"line_end":101,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37118,"byte_end":37121,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37122,"byte_end":37140,"line_start":103,"line_end":103,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37141,"byte_end":37180,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/     let f = File::create(\"foo.txt\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37181,"byte_end":37228,"line_start":105,"line_end":105,"column_start":1,"column_end":48}},{"value":"/     {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37229,"byte_end":37238,"line_start":106,"line_end":106,"column_start":1,"column_end":10}},{"value":"/         let mut writer = BufWriter::new(f);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37239,"byte_end":37286,"line_start":107,"line_end":107,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37287,"byte_end":37290,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/         // Write a byte to the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37291,"byte_end":37333,"line_start":109,"line_end":109,"column_start":1,"column_end":43}},{"value":"/         writer.write(&[42u8]).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37334,"byte_end":37375,"line_start":110,"line_end":110,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37376,"byte_end":37379,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/         // Flush the buffer before it goes out of scope.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37380,"byte_end":37440,"line_start":112,"line_end":112,"column_start":1,"column_end":61}},{"value":"/         writer.flush().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37441,"byte_end":37475,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37476,"byte_end":37479,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/     } // Unless flushed or shut down, the contents of the buffer is discarded on drop.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37480,"byte_end":37570,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37571,"byte_end":37574,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37575,"byte_end":37589,"line_start":117,"line_end":117,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37590,"byte_end":37595,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37596,"byte_end":37603,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37604,"byte_end":37607,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [stdbuf]: std::io#bufreader-and-bufwriter","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37608,"byte_end":37653,"line_start":121,"line_end":121,"column_start":1,"column_end":46}},{"value":"/ [`std::io::BufRead`]: std::io::BufRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37654,"byte_end":37696,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/ [`AsyncBufRead`]: crate::io::AsyncBufRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37697,"byte_end":37742,"line_start":123,"line_end":123,"column_start":1,"column_end":46}},{"value":"/ [`BufReader`]: crate::io::BufReader","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37743,"byte_end":37782,"line_start":124,"line_end":124,"column_start":1,"column_end":40}},{"value":"/ [`BufWriter`]: crate::io::BufWriter","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37783,"byte_end":37822,"line_start":125,"line_end":125,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37823,"byte_end":37826,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ## Implementing AsyncRead and AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37827,"byte_end":37871,"line_start":127,"line_end":127,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37872,"byte_end":37875,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ Because they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37876,"byte_end":37958,"line_start":129,"line_end":129,"column_start":1,"column_end":83}},{"value":"/ our own types, as well. Note that these traits must only be implemented for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":37959,"byte_end":38038,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ non-blocking I/O types that integrate with the futures type system. In","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38039,"byte_end":38113,"line_start":131,"line_end":131,"column_start":1,"column_end":75}},{"value":"/ other words, these types must never block the thread, and instead the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38114,"byte_end":38187,"line_start":132,"line_end":132,"column_start":1,"column_end":74}},{"value":"/ current task is notified when the I/O resource is ready.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38188,"byte_end":38248,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38249,"byte_end":38252,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ ## Conversion to and from Sink/Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38253,"byte_end":38294,"line_start":135,"line_end":135,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38295,"byte_end":38298,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ It is often convenient to encapsulate the reading and writing of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38299,"byte_end":38367,"line_start":137,"line_end":137,"column_start":1,"column_end":69}},{"value":"/ bytes and instead work with a [`Sink`] or [`Stream`] of some data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38368,"byte_end":38437,"line_start":138,"line_end":138,"column_start":1,"column_end":70}},{"value":"/ type that is encoded as bytes and/or decoded from bytes. Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38438,"byte_end":38504,"line_start":139,"line_end":139,"column_start":1,"column_end":67}},{"value":"/ provides some utility traits in the [tokio-util] crate that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38505,"byte_end":38568,"line_start":140,"line_end":140,"column_start":1,"column_end":64}},{"value":"/ abstract the asynchronous buffering that is required and allows","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38569,"byte_end":38636,"line_start":141,"line_end":141,"column_start":1,"column_end":68}},{"value":"/ you to write [`Encoder`] and [`Decoder`] functions working with a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38637,"byte_end":38706,"line_start":142,"line_end":142,"column_start":1,"column_end":70}},{"value":"/ buffer of bytes, and then use that [\"codec\"] to transform anything","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38707,"byte_end":38777,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/ that implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38778,"byte_end":38856,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ your structured data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38857,"byte_end":38882,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38883,"byte_end":38886,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38887,"byte_end":38963,"line_start":147,"line_end":147,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38964,"byte_end":38967,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ # Standard input and output","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":38968,"byte_end":38999,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39000,"byte_end":39003,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Tokio provides asynchronous APIs to standard [input], [output], and [error].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39004,"byte_end":39084,"line_start":151,"line_end":151,"column_start":1,"column_end":81}},{"value":"/ These APIs are very similar to the ones provided by `std`, but they also","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39085,"byte_end":39161,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/ implement [`AsyncRead`] and [`AsyncWrite`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39162,"byte_end":39209,"line_start":153,"line_end":153,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39210,"byte_end":39213,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Note that the standard input / output APIs  **must** be used from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39214,"byte_end":39287,"line_start":155,"line_end":155,"column_start":1,"column_end":74}},{"value":"/ context of the Tokio runtime, as they require Tokio-specific features to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39288,"byte_end":39364,"line_start":156,"line_end":156,"column_start":1,"column_end":77}},{"value":"/ function. Calling these functions outside of a Tokio runtime will panic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39365,"byte_end":39441,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39442,"byte_end":39445,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [input]: fn@stdin","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39446,"byte_end":39467,"line_start":159,"line_end":159,"column_start":1,"column_end":22}},{"value":"/ [output]: fn@stdout","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39468,"byte_end":39491,"line_start":160,"line_end":160,"column_start":1,"column_end":24}},{"value":"/ [error]: fn@stderr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39492,"byte_end":39514,"line_start":161,"line_end":161,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39515,"byte_end":39518,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ # `std` re-exports","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39519,"byte_end":39541,"line_start":163,"line_end":163,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39542,"byte_end":39545,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ Additionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39546,"byte_end":39622,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/ re-exported from `std::io` for ease of use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39623,"byte_end":39670,"line_start":166,"line_end":166,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39671,"byte_end":39674,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ [`AsyncRead`]: trait@AsyncRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39675,"byte_end":39709,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/ [`AsyncWrite`]: trait@AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39710,"byte_end":39746,"line_start":169,"line_end":169,"column_start":1,"column_end":37}},{"value":"/ [`AsyncReadExt`]: trait@AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39747,"byte_end":39787,"line_start":170,"line_end":170,"column_start":1,"column_end":41}},{"value":"/ [`AsyncWriteExt`]: trait@AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39788,"byte_end":39830,"line_start":171,"line_end":171,"column_start":1,"column_end":43}},{"value":"/ [\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39831,"byte_end":39904,"line_start":172,"line_end":172,"column_start":1,"column_end":74}},{"value":"/ [`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39905,"byte_end":39988,"line_start":173,"line_end":173,"column_start":1,"column_end":84}},{"value":"/ [`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":39989,"byte_end":40072,"line_start":174,"line_end":174,"column_start":1,"column_end":84}},{"value":"/ [`Error`]: struct@Error","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40073,"byte_end":40100,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/ [`ErrorKind`]: enum@ErrorKind","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40101,"byte_end":40134,"line_start":176,"line_end":176,"column_start":1,"column_end":34}},{"value":"/ [`Result`]: type@Result","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40135,"byte_end":40162,"line_start":177,"line_end":177,"column_start":1,"column_end":28}},{"value":"/ [`Read`]: std::io::Read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40163,"byte_end":40190,"line_start":178,"line_end":178,"column_start":1,"column_end":28}},{"value":"/ [`SeekFrom`]: enum@SeekFrom","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40191,"byte_end":40222,"line_start":179,"line_end":179,"column_start":1,"column_end":32}},{"value":"/ [`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40223,"byte_end":40293,"line_start":180,"line_end":180,"column_start":1,"column_end":71}},{"value":"/ [`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40294,"byte_end":40370,"line_start":181,"line_end":181,"column_start":1,"column_end":77}},{"value":"/ [`Write`]: std::io::Write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":40371,"byte_end":40400,"line_start":182,"line_end":182,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":113},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43078,"byte_end":43090,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"name":"AsyncBufRead","qualname":"::io::async_buf_read::AsyncBufRead","value":"AsyncBufRead: AsyncRead","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Reads bytes asynchronously.","sig":null,"attributes":[{"value":"/ Reads bytes asynchronously.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42401,"byte_end":42432,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42433,"byte_end":42436,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This trait is analogous to [`std::io::BufRead`], but integrates with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42437,"byte_end":42509,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ the asynchronous task system. In particular, the [`poll_fill_buf`] method,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42510,"byte_end":42588,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ unlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42589,"byte_end":42675,"line_start":12,"line_end":12,"column_start":1,"column_end":87}},{"value":"/ and return if data is not yet available, rather than blocking the calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42676,"byte_end":42753,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42754,"byte_end":42765,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42766,"byte_end":42769,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Utilities for working with `AsyncBufRead` values are provided by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42770,"byte_end":42838,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ [`AsyncBufReadExt`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42839,"byte_end":42863,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42864,"byte_end":42867,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`std::io::BufRead`]: std::io::BufRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42868,"byte_end":42910,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/ [`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42911,"byte_end":42961,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ [`BufRead::fill_buf`]: std::io::BufRead::fill_buf","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":42962,"byte_end":43015,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ [`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43016,"byte_end":43067,"line_start":22,"line_end":22,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44188,"byte_end":44201,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"poll_fill_buf","qualname":"::io::async_buf_read::AsyncBufRead::poll_fill_buf","value":"pub fn poll_fill_buf(Pin<&mut Self>, &mut Context) -> Poll<io::Result<&[u8]>>","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Attempts to return the contents of the internal buffer, filling it with more data\n from the inner reader if it is empty.","sig":null,"attributes":[{"value":"/ Attempts to return the contents of the internal buffer, filling it with more data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43108,"byte_end":43193,"line_start":24,"line_end":24,"column_start":5,"column_end":90}},{"value":"/ from the inner reader if it is empty.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43198,"byte_end":43239,"line_start":25,"line_end":25,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43244,"byte_end":43247,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ On success, returns `Poll::Ready(Ok(buf))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43252,"byte_end":43299,"line_start":27,"line_end":27,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43304,"byte_end":43307,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43312,"byte_end":43371,"line_start":29,"line_end":29,"column_start":5,"column_end":64}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43376,"byte_end":43434,"line_start":30,"line_end":30,"column_start":5,"column_end":63}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43439,"byte_end":43520,"line_start":31,"line_end":31,"column_start":5,"column_end":86}},{"value":"/ readable or is closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43525,"byte_end":43551,"line_start":32,"line_end":32,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43556,"byte_end":43559,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43564,"byte_end":43635,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ [`consume`] method to function properly. When calling this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43640,"byte_end":43702,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ method, none of the contents will be \"read\" in the sense that later","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43707,"byte_end":43778,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"/ calling [`poll_read`] may return the same contents. As such, [`consume`] must","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43783,"byte_end":43864,"line_start":37,"line_end":37,"column_start":5,"column_end":86}},{"value":"/ be called with the number of bytes that are consumed from this buffer to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43869,"byte_end":43945,"line_start":38,"line_end":38,"column_start":5,"column_end":81}},{"value":"/ ensure that the bytes are never returned twice.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43950,"byte_end":44001,"line_start":39,"line_end":39,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44006,"byte_end":44009,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ An empty buffer returned indicates that the stream has reached EOF.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44014,"byte_end":44085,"line_start":41,"line_end":41,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44090,"byte_end":44093,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44098,"byte_end":44137,"line_start":43,"line_end":43,"column_start":5,"column_end":44}},{"value":"/ [`consume`]: AsyncBufRead::consume","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44142,"byte_end":44180,"line_start":44,"line_end":44,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45104,"byte_end":45111,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"consume","qualname":"::io::async_buf_read::AsyncBufRead::consume","value":"pub fn consume(Pin<&mut Self>, usize)","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Tells this buffer that `amt` bytes have been consumed from the buffer,\n so they should no longer be returned in calls to [`poll_read`].","sig":null,"attributes":[{"value":"/ Tells this buffer that `amt` bytes have been consumed from the buffer,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44279,"byte_end":44353,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/ so they should no longer be returned in calls to [`poll_read`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44358,"byte_end":44425,"line_start":48,"line_end":48,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44430,"byte_end":44433,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44438,"byte_end":44509,"line_start":50,"line_end":50,"column_start":5,"column_end":76}},{"value":"/ [`poll_fill_buf`] method to function properly. This function does","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44514,"byte_end":44583,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/ not perform any I/O, it simply informs this object that some amount of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44588,"byte_end":44662,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ its buffer, returned from [`poll_fill_buf`], has been consumed and should","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44667,"byte_end":44744,"line_start":53,"line_end":53,"column_start":5,"column_end":82}},{"value":"/ no longer be returned. As such, this function may do odd things if","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44749,"byte_end":44819,"line_start":54,"line_end":54,"column_start":5,"column_end":75}},{"value":"/ [`poll_fill_buf`] isn't called before calling it.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44824,"byte_end":44877,"line_start":55,"line_end":55,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44882,"byte_end":44885,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ The `amt` must be `<=` the number of bytes in the buffer returned by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44890,"byte_end":44962,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ [`poll_fill_buf`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44967,"byte_end":44989,"line_start":58,"line_end":58,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":44994,"byte_end":44997,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45002,"byte_end":45041,"line_start":60,"line_end":60,"column_start":5,"column_end":44}},{"value":"/ [`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45046,"byte_end":45096,"line_start":61,"line_end":61,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48425,"byte_end":48434,"line_start":43,"line_end":43,"column_start":11,"column_end":20},"name":"AsyncRead","qualname":"::io::async_read::AsyncRead","value":"AsyncRead","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" Reads bytes from a source.","sig":null,"attributes":[{"value":"/ Reads bytes from a source.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":46738,"byte_end":46768,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":46769,"byte_end":46772,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This trait is analogous to the [`std::io::Read`] trait, but integrates with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":46773,"byte_end":46852,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ the asynchronous task system. In particular, the [`poll_read`] method,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":46853,"byte_end":46927,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ unlike [`Read::read`], will automatically queue the current task for wakeup","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":46928,"byte_end":47007,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ and return if data is not yet available, rather than blocking the calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47008,"byte_end":47085,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47086,"byte_end":47097,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47098,"byte_end":47101,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Specifically, this means that the `poll_read` function will return one of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47102,"byte_end":47179,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ the following:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47180,"byte_end":47198,"line_start":16,"line_end":16,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47199,"byte_end":47202,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Ready(Ok(()))` means that data was immediately read and placed into","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47203,"byte_end":47283,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/   the output buffer. The amount of data read can be determined by the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47284,"byte_end":47357,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/   increase in the length of the slice returned by `ReadBuf::filled`. If the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47358,"byte_end":47437,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/   difference is 0, EOF has been reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47438,"byte_end":47482,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47483,"byte_end":47486,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Pending` means that no data was read into the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47487,"byte_end":47552,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/   provided. The I/O object is not currently readable but may become readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47553,"byte_end":47633,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/   in the future. Most importantly, **the current future's task is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47634,"byte_end":47713,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/   to get unparked when the object is readable**. This means that like","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47714,"byte_end":47787,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/   `Future::poll` you'll receive a notification when the I/O object is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47788,"byte_end":47861,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/   readable again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47862,"byte_end":47883,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47884,"byte_end":47887,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47888,"byte_end":47972,"line_start":30,"line_end":30,"column_start":1,"column_end":85}},{"value":"/   underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47973,"byte_end":47997,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":47998,"byte_end":48001,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This trait importantly means that the `read` method only works in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48002,"byte_end":48075,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ context of a future's task. The object may panic if used outside of a task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48076,"byte_end":48155,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48156,"byte_end":48159,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Utilities for working with `AsyncRead` values are provided by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48160,"byte_end":48225,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/ [`AsyncReadExt`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48226,"byte_end":48247,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48248,"byte_end":48251,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48252,"byte_end":48291,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ [`std::io::Read`]: std::io::Read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48292,"byte_end":48328,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ [`Read::read`]: std::io::Read::read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48329,"byte_end":48368,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ [`AsyncReadExt`]: crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48369,"byte_end":48414,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48924,"byte_end":48933,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"poll_read","qualname":"::io::async_read::AsyncRead::poll_read","value":"pub fn poll_read(Pin<&mut Self>, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<()>>","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Attempts to read from the `AsyncRead` into `buf`.","sig":null,"attributes":[{"value":"/ Attempts to read from the `AsyncRead` into `buf`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48441,"byte_end":48494,"line_start":44,"line_end":44,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48499,"byte_end":48502,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ On success, returns `Poll::Ready(Ok(()))` and fills `buf` with data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48507,"byte_end":48578,"line_start":46,"line_end":46,"column_start":5,"column_end":76}},{"value":"/ read. If no data was read (`buf.filled().is_empty()`) it implies that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48583,"byte_end":48656,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48661,"byte_end":48686,"line_start":48,"line_end":48,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48691,"byte_end":48694,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If no data is available for reading, the method returns `Poll::Pending`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48699,"byte_end":48774,"line_start":50,"line_end":50,"column_start":5,"column_end":80}},{"value":"/ and arranges for the current task (via `cx.waker()`) to receive a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48779,"byte_end":48848,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/ notification when the object becomes readable or is closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":48853,"byte_end":48916,"line_start":52,"line_end":52,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51529,"byte_end":51538,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"AsyncSeek","qualname":"::io::async_seek::AsyncSeek","value":"AsyncSeek","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" Seek bytes asynchronously.","sig":null,"attributes":[{"value":"/ Seek bytes asynchronously.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51047,"byte_end":51077,"line_start":6,"line_end":6,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51078,"byte_end":51081,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This trait is analogous to the [`std::io::Seek`] trait, but integrates","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51082,"byte_end":51156,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/ with the asynchronous task system. In particular, the `start_seek`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51157,"byte_end":51227,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ method, unlike [`Seek::seek`], will not block the calling thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51228,"byte_end":51297,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51298,"byte_end":51301,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Utilities for working with `AsyncSeek` values are provided by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51302,"byte_end":51367,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"/ [`AsyncSeekExt`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51368,"byte_end":51389,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51390,"byte_end":51393,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`std::io::Seek`]: std::io::Seek","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51394,"byte_end":51430,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ [`Seek::seek`]: std::io::Seek::seek()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51431,"byte_end":51472,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/ [`AsyncSeekExt`]: crate::io::AsyncSeekExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51473,"byte_end":51518,"line_start":17,"line_end":17,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52180,"byte_end":52190,"line_start":33,"line_end":33,"column_start":8,"column_end":18},"name":"start_seek","qualname":"::io::async_seek::AsyncSeek::start_seek","value":"pub fn start_seek(Pin<&mut Self>, SeekFrom) -> io::Result<()>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Attempts to seek to an offset, in bytes, in a stream.","sig":null,"attributes":[{"value":"/ Attempts to seek to an offset, in bytes, in a stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51545,"byte_end":51602,"line_start":19,"line_end":19,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51607,"byte_end":51610,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ A seek beyond the end of a stream is allowed, but behavior is defined","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51615,"byte_end":51688,"line_start":21,"line_end":21,"column_start":5,"column_end":78}},{"value":"/ by the implementation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51693,"byte_end":51719,"line_start":22,"line_end":22,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51724,"byte_end":51727,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ If this function returns successfully, then the job has been submitted.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51732,"byte_end":51807,"line_start":24,"line_end":24,"column_start":5,"column_end":80}},{"value":"/ To find out when it completes, call `poll_complete`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51812,"byte_end":51868,"line_start":25,"line_end":25,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51873,"byte_end":51876,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51881,"byte_end":51893,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51898,"byte_end":51901,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This function can return [`io::ErrorKind::Other`] in case there is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51906,"byte_end":51976,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ another seek in progress. To avoid this, it is advisable that any call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":51981,"byte_end":52055,"line_start":30,"line_end":30,"column_start":5,"column_end":79}},{"value":"/ to `start_seek` is preceded by a call to `poll_complete` to ensure all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52060,"byte_end":52134,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ pending seeks have completed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52139,"byte_end":52172,"line_start":32,"line_end":32,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52713,"byte_end":52726,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"poll_complete","qualname":"::io::async_seek::AsyncSeek::poll_complete","value":"pub fn poll_complete(Pin<&mut Self>, &mut Context) -> Poll<io::Result<u64>>","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Waits for a seek operation to complete.","sig":null,"attributes":[{"value":"/ Waits for a seek operation to complete.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52257,"byte_end":52300,"line_start":35,"line_end":35,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52305,"byte_end":52308,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ If the seek operation completed successfully,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52313,"byte_end":52362,"line_start":37,"line_end":37,"column_start":5,"column_end":54}},{"value":"/ this method returns the new position from the start of the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52367,"byte_end":52437,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ That position can be used later with [`SeekFrom::Start`]. Repeatedly","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52442,"byte_end":52514,"line_start":39,"line_end":39,"column_start":5,"column_end":77}},{"value":"/ calling this function without calling `start_seek` might return the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52519,"byte_end":52590,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ same result.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52595,"byte_end":52611,"line_start":41,"line_end":41,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52616,"byte_end":52619,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52624,"byte_end":52636,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52641,"byte_end":52644,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Seeking to a negative offset is considered an error.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":52649,"byte_end":52705,"line_start":45,"line_end":45,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56017,"byte_end":56027,"line_start":45,"line_end":45,"column_start":11,"column_end":21},"name":"AsyncWrite","qualname":"::io::async_write::AsyncWrite","value":"AsyncWrite","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":199}],"decl_id":null,"docs":" Writes bytes asynchronously.","sig":null,"attributes":[{"value":"/ Writes bytes asynchronously.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54154,"byte_end":54186,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54187,"byte_end":54190,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The trait inherits from [`std::io::Write`] and indicates that an I/O object is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54191,"byte_end":54273,"line_start":8,"line_end":8,"column_start":1,"column_end":83}},{"value":"/ **nonblocking**. All non-blocking I/O objects must return an error when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54274,"byte_end":54349,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ bytes cannot be written instead of blocking the current thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54350,"byte_end":54417,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54418,"byte_end":54421,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Specifically, this means that the [`poll_write`] function will return one of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54422,"byte_end":54502,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ the following:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54503,"byte_end":54521,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54522,"byte_end":54525,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54526,"byte_end":54597,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/   written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54598,"byte_end":54612,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54613,"byte_end":54616,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Pending` means that no data was written from the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54617,"byte_end":54685,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/   provided. The I/O object is not currently writable but may become writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54686,"byte_end":54766,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/   in the future. Most importantly, **the current future's task is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54767,"byte_end":54846,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/   to get unparked when the object is writable**. This means that like","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54847,"byte_end":54920,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/   `Future::poll` you'll receive a notification when the I/O object is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54921,"byte_end":54994,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/   writable again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":54995,"byte_end":55016,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55017,"byte_end":55020,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ * `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55021,"byte_end":55105,"line_start":25,"line_end":25,"column_start":1,"column_end":85}},{"value":"/   underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55106,"byte_end":55130,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55131,"byte_end":55134,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This trait importantly means that the [`write`][stdwrite] method only works in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55135,"byte_end":55217,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/ the context of a future's task. The object may panic if used outside of a task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55218,"byte_end":55301,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55302,"byte_end":55305,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Note that this trait also represents that the  [`Write::flush`][stdflush] method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55306,"byte_end":55390,"line_start":31,"line_end":31,"column_start":1,"column_end":85}},{"value":"/ works very similarly to the `write` method, notably that `Ok(())` means that the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55391,"byte_end":55475,"line_start":32,"line_end":32,"column_start":1,"column_end":85}},{"value":"/ writer has successfully been flushed, a \"would block\" error means that the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55476,"byte_end":55554,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ current task is ready to receive a notification when flushing can make more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55555,"byte_end":55634,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ progress, and otherwise normal errors can happen as well.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55635,"byte_end":55696,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55697,"byte_end":55700,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Utilities for working with `AsyncWrite` values are provided by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55701,"byte_end":55767,"line_start":37,"line_end":37,"column_start":1,"column_end":67}},{"value":"/ [`AsyncWriteExt`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55768,"byte_end":55790,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55791,"byte_end":55794,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`std::io::Write`]: std::io::Write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55795,"byte_end":55833,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ [`poll_write`]: AsyncWrite::poll_write()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55834,"byte_end":55878,"line_start":41,"line_end":41,"column_start":1,"column_end":45}},{"value":"/ [stdwrite]: std::io::Write::write()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55879,"byte_end":55918,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ [stdflush]: std::io::Write::flush()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55919,"byte_end":55958,"line_start":43,"line_end":43,"column_start":1,"column_end":40}},{"value":"/ [`AsyncWriteExt`]: crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":55959,"byte_end":56006,"line_start":44,"line_end":44,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56411,"byte_end":56421,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"poll_write","qualname":"::io::async_write::AsyncWrite::poll_write","value":"pub fn poll_write(Pin<&mut Self>, &mut Context, &[u8])\n-> Poll<Result<usize, io::Error>>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `buf` into the object.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `buf` into the object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56034,"byte_end":56088,"line_start":46,"line_end":46,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56093,"byte_end":56096,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56101,"byte_end":56162,"line_start":48,"line_end":48,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56167,"byte_end":56170,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56175,"byte_end":56237,"line_start":50,"line_end":50,"column_start":5,"column_end":67}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56242,"byte_end":56300,"line_start":51,"line_end":51,"column_start":5,"column_end":63}},{"value":"/ `cx.waker()`) to receive a notification when the object becomes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56305,"byte_end":56372,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/ writable or is closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56377,"byte_end":56403,"line_start":53,"line_end":53,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56962,"byte_end":56972,"line_start":69,"line_end":69,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"::io::async_write::AsyncWrite::poll_flush","value":"pub fn poll_flush(Pin<&mut Self>, &mut Context) -> Poll<Result<(), io::Error>>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Attempts to flush the object, ensuring that any buffered data reach\n their destination.","sig":null,"attributes":[{"value":"/ Attempts to flush the object, ensuring that any buffered data reach","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56549,"byte_end":56620,"line_start":60,"line_end":60,"column_start":5,"column_end":76}},{"value":"/ their destination.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56625,"byte_end":56647,"line_start":61,"line_end":61,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56652,"byte_end":56655,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56660,"byte_end":56706,"line_start":63,"line_end":63,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56711,"byte_end":56714,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ If flushing cannot immediately complete, this method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56719,"byte_end":56783,"line_start":65,"line_end":65,"column_start":5,"column_end":69}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56788,"byte_end":56846,"line_start":66,"line_end":66,"column_start":5,"column_end":63}},{"value":"/ `cx.waker()`) to receive a notification when the object can make","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56851,"byte_end":56919,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"/ progress towards flushing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":56924,"byte_end":56954,"line_start":68,"line_end":68,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60258,"byte_end":60271,"line_start":129,"line_end":129,"column_start":8,"column_end":21},"name":"poll_shutdown","qualname":"::io::async_write::AsyncWrite::poll_shutdown","value":"pub fn poll_shutdown(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), io::Error>>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Initiates or attempts to shut down this writer, returning success when\n the I/O connection has completely shut down.","sig":null,"attributes":[{"value":"/ Initiates or attempts to shut down this writer, returning success when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57054,"byte_end":57128,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ the I/O connection has completely shut down.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57133,"byte_end":57181,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57186,"byte_end":57189,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This method is intended to be used for asynchronous shutdown of I/O","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57194,"byte_end":57265,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ connections. For example this is suitable for implementing shutdown of a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57270,"byte_end":57346,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ TLS connection or calling `TcpStream::shutdown` on a proxied connection.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57351,"byte_end":57427,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ Protocols sometimes need to flush out final pieces of data or otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57432,"byte_end":57507,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ perform a graceful shutdown handshake, reading/writing more data as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57512,"byte_end":57583,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ appropriate. This method is the hook for such protocols to implement the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57588,"byte_end":57664,"line_start":79,"line_end":79,"column_start":5,"column_end":81}},{"value":"/ graceful shutdown logic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57669,"byte_end":57697,"line_start":80,"line_end":80,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57702,"byte_end":57705,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This `shutdown` method is required by implementers of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57710,"byte_end":57771,"line_start":82,"line_end":82,"column_start":5,"column_end":66}},{"value":"/ `AsyncWrite` trait. Wrappers typically just want to proxy this call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57776,"byte_end":57847,"line_start":83,"line_end":83,"column_start":5,"column_end":76}},{"value":"/ through to the wrapped type, and base types will typically implement","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57852,"byte_end":57924,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ shutdown logic here or just return `Ok(().into())`. Note that if you're","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":57929,"byte_end":58004,"line_start":85,"line_end":85,"column_start":5,"column_end":80}},{"value":"/ wrapping an underlying `AsyncWrite` a call to `shutdown` implies that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58009,"byte_end":58082,"line_start":86,"line_end":86,"column_start":5,"column_end":78}},{"value":"/ transitively the entire stream has been shut down. After your wrapper's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58087,"byte_end":58162,"line_start":87,"line_end":87,"column_start":5,"column_end":80}},{"value":"/ shutdown logic has been executed you should shut down the underlying","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58167,"byte_end":58239,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58244,"byte_end":58255,"line_start":89,"line_end":89,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58260,"byte_end":58263,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Invocation of a `shutdown` implies an invocation of `flush`. Once this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58268,"byte_end":58342,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ method returns `Ready` it implies that a flush successfully happened","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58347,"byte_end":58419,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/ before the shutdown happened. That is, callers don't need to call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58424,"byte_end":58493,"line_start":93,"line_end":93,"column_start":5,"column_end":74}},{"value":"/ `flush` before calling `shutdown`. They can rely that by calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58498,"byte_end":58566,"line_start":94,"line_end":94,"column_start":5,"column_end":73}},{"value":"/ `shutdown` any pending buffered data will be written out.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58571,"byte_end":58632,"line_start":95,"line_end":95,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58637,"byte_end":58640,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58645,"byte_end":58663,"line_start":97,"line_end":97,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58668,"byte_end":58671,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function returns a `Poll<io::Result<()>>` classified as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58676,"byte_end":58746,"line_start":99,"line_end":99,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58751,"byte_end":58754,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Ready(Ok(()))` - indicates that the connection was","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58759,"byte_end":58822,"line_start":101,"line_end":101,"column_start":5,"column_end":68}},{"value":"/   successfully shut down and is now safe to deallocate/drop/close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58827,"byte_end":58896,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/   resources associated with it. This method means that the current task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58901,"byte_end":58976,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/   will no longer receive any notifications due to this method and the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":58981,"byte_end":59054,"line_start":104,"line_end":104,"column_start":5,"column_end":78}},{"value":"/   I/O object itself is likely no longer usable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59059,"byte_end":59110,"line_start":105,"line_end":105,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59115,"byte_end":59118,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` - indicates that shutdown is initiated but could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59123,"byte_end":59193,"line_start":107,"line_end":107,"column_start":5,"column_end":75}},{"value":"/   not complete just yet. This may mean that more I/O needs to happen to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59198,"byte_end":59273,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/   continue this shutdown operation. The current task is scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59278,"byte_end":59350,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/   receive a notification when it's otherwise ready to continue the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59355,"byte_end":59425,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"/   shutdown operation. When woken up this method should be called again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59430,"byte_end":59505,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59510,"byte_end":59513,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59518,"byte_end":59599,"line_start":113,"line_end":113,"column_start":5,"column_end":86}},{"value":"/   indicating that the shutdown operation did not complete successfully.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59604,"byte_end":59679,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/   This typically means that the I/O object is no longer usable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59684,"byte_end":59751,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59756,"byte_end":59759,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59764,"byte_end":59776,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59781,"byte_end":59784,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This function can return normal I/O errors through `Err`, described","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59789,"byte_end":59860,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ above. Additionally this method may also render the underlying","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59865,"byte_end":59931,"line_start":120,"line_end":120,"column_start":5,"column_end":71}},{"value":"/ `Write::write` method no longer usable (e.g. will return errors in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":59936,"byte_end":60010,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ future). It's recommended that once `shutdown` is called the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60015,"byte_end":60079,"line_start":122,"line_end":122,"column_start":5,"column_end":69}},{"value":"/ `write` method is no longer called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60084,"byte_end":60123,"line_start":123,"line_end":123,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60128,"byte_end":60131,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60136,"byte_end":60148,"line_start":125,"line_end":125,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60153,"byte_end":60156,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This function will panic if not called within the context of a future's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60161,"byte_end":60236,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60241,"byte_end":60250,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61384,"byte_end":61403,"line_start":154,"line_end":154,"column_start":8,"column_end":27},"name":"poll_write_vectored","qualname":"::io::async_write::AsyncWrite::poll_write_vectored","value":"pub fn poll_write_vectored(Pin<&mut Self>, &mut Context, &[IoSlice])\n-> Poll<Result<usize, io::Error>>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Like [`poll_write`], except that it writes from a slice of buffers.","sig":null,"attributes":[{"value":"/ Like [`poll_write`], except that it writes from a slice of buffers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60353,"byte_end":60424,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60429,"byte_end":60432,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Data is copied from each buffer in order, with the final buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60437,"byte_end":60504,"line_start":133,"line_end":133,"column_start":5,"column_end":72}},{"value":"/ read from possibly being only partially consumed. This method must","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60509,"byte_end":60579,"line_start":134,"line_end":134,"column_start":5,"column_end":75}},{"value":"/ behave as a call to [`write`] with the buffers concatenated would.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60584,"byte_end":60654,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60659,"byte_end":60662,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ The default implementation calls [`poll_write`] with either the first nonempty","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60667,"byte_end":60749,"line_start":137,"line_end":137,"column_start":5,"column_end":87}},{"value":"/ buffer provided, or an empty one if none exists.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60754,"byte_end":60806,"line_start":138,"line_end":138,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60811,"byte_end":60814,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60819,"byte_end":60880,"line_start":140,"line_end":140,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60885,"byte_end":60888,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60893,"byte_end":60955,"line_start":142,"line_end":142,"column_start":5,"column_end":67}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":60960,"byte_end":61018,"line_start":143,"line_end":143,"column_start":5,"column_end":63}},{"value":"/ `cx.waker()`) to receive a notification when the object becomes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61023,"byte_end":61090,"line_start":144,"line_end":144,"column_start":5,"column_end":72}},{"value":"/ writable or is closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61095,"byte_end":61121,"line_start":145,"line_end":145,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61126,"byte_end":61129,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61134,"byte_end":61144,"line_start":147,"line_end":147,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61149,"byte_end":61152,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This should be implemented as a single \"atomic\" write action. If any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61157,"byte_end":61229,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/ data has been partially written, it is wrong to return an error or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61234,"byte_end":61304,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"/ pending.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61309,"byte_end":61321,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61326,"byte_end":61329,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ [`poll_write`]: AsyncWrite::poll_write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61334,"byte_end":61376,"line_start":153,"line_end":153,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":62171,"byte_end":62188,"line_start":176,"line_end":176,"column_start":8,"column_end":25},"name":"is_write_vectored","qualname":"::io::async_write::AsyncWrite::is_write_vectored","value":"pub fn is_write_vectored(&Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Determines if this writer has an efficient [`poll_write_vectored`]\n implementation.","sig":null,"attributes":[{"value":"/ Determines if this writer has an efficient [`poll_write_vectored`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61701,"byte_end":61771,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ implementation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61776,"byte_end":61795,"line_start":167,"line_end":167,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61800,"byte_end":61803,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ If a writer does not override the default [`poll_write_vectored`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61808,"byte_end":61877,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/ implementation, code using it may want to avoid the method all together","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61882,"byte_end":61957,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ and coalesce writes into a single buffer for higher performance.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":61962,"byte_end":62030,"line_start":171,"line_end":171,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":62035,"byte_end":62038,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `false`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":62043,"byte_end":62090,"line_start":173,"line_end":173,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":62095,"byte_end":62098,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ [`poll_write_vectored`]: AsyncWrite::poll_write_vectored","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":62103,"byte_end":62163,"line_start":175,"line_end":175,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":248},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69428,"byte_end":69435,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"ReadBuf","qualname":"::io::read_buf::ReadBuf","value":"ReadBuf {  }","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" A wrapper around a byte buffer that is incrementally filled and initialized.","sig":null,"attributes":[{"value":"/ A wrapper around a byte buffer that is incrementally filled and initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68480,"byte_end":68560,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68561,"byte_end":68564,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This type is a sort of \"double cursor\". It tracks three regions in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68565,"byte_end":68639,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ buffer: a region at the beginning of the buffer that has been logically","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68640,"byte_end":68715,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ filled with data, a region that has been initialized at some point but not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68716,"byte_end":68794,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ yet logically filled, and a region at the end that may be uninitialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68795,"byte_end":68871,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ The filled region is guaranteed to be a subset of the initialized region.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68872,"byte_end":68949,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68950,"byte_end":68953,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In summary, the contents of the buffer can be visualized as:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":68954,"byte_end":69018,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69019,"byte_end":69022,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```not_rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69023,"byte_end":69038,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/ [             capacity              ]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69039,"byte_end":69080,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/ [ filled |         unfilled         ]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69081,"byte_end":69122,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ [    initialized    | uninitialized ]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69123,"byte_end":69164,"line_start":21,"line_end":21,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69165,"byte_end":69172,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69173,"byte_end":69176,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ It is undefined behavior to de-initialize any bytes from the uninitialized","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69177,"byte_end":69255,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ region, since it is merely unknown whether this region is uninitialized or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69256,"byte_end":69334,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ not, and if part of it turns out to be initialized, it must stay initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69335,"byte_end":69416,"line_start":26,"line_end":26,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69637,"byte_end":69640,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadBuf>::new","value":"pub fn new(&'a mut [u8]) -> ReadBuf","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ReadBuf` from a fully initialized buffer.\n","sig":null,"attributes":[{"value":"/ Creates a new `ReadBuf` from a fully initialized buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69551,"byte_end":69611,"line_start":34,"line_end":34,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69616,"byte_end":69625,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70086,"byte_end":70092,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"uninit","qualname":"<ReadBuf>::uninit","value":"pub fn uninit(&'a mut [MaybeUninit<u8>]) -> ReadBuf","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ReadBuf` from a fully uninitialized buffer.","sig":null,"attributes":[{"value":"/ Creates a new `ReadBuf` from a fully uninitialized buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69905,"byte_end":69967,"line_start":46,"line_end":46,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69972,"byte_end":69975,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Use `assume_init` if part of the buffer is known to be already inintialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69980,"byte_end":70060,"line_start":48,"line_end":48,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70065,"byte_end":70074,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70320,"byte_end":70328,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"capacity","qualname":"<ReadBuf>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total capacity of the buffer.\n","sig":null,"attributes":[{"value":"/ Returns the total capacity of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70249,"byte_end":70294,"line_start":58,"line_end":58,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70299,"byte_end":70308,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70474,"byte_end":70480,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"filled","qualname":"<ReadBuf>::filled","value":"pub fn filled(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the filled portion of the buffer.\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the filled portion of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70381,"byte_end":70448,"line_start":64,"line_end":64,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70453,"byte_end":70462,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70934,"byte_end":70944,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"filled_mut","qualname":"<ReadBuf>::filled_mut","value":"pub fn filled_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the filled portion of the buffer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the filled portion of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70840,"byte_end":70908,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":70913,"byte_end":70922,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71422,"byte_end":71426,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"take","qualname":"<ReadBuf>::take","value":"pub fn take(&mut Self, usize) -> ReadBuf","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `ReadBuf` comprised of the unfilled section up to `n`.\n","sig":null,"attributes":[{"value":"/ Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71324,"byte_end":71396,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71401,"byte_end":71410,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71832,"byte_end":71843,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"initialized","qualname":"<ReadBuf>::initialized","value":"pub fn initialized(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the initialized portion of the buffer.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the initialized portion of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71684,"byte_end":71756,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71761,"byte_end":71764,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This includes the filled portion.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71769,"byte_end":71806,"line_start":94,"line_end":94,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":71811,"byte_end":71820,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72355,"byte_end":72370,"line_start":108,"line_end":108,"column_start":12,"column_end":27},"name":"initialized_mut","qualname":"<ReadBuf>::initialized_mut","value":"pub fn initialized_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the initialized portion of the buffer.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the initialized portion of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72206,"byte_end":72279,"line_start":104,"line_end":104,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72284,"byte_end":72287,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This includes the filled portion.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72292,"byte_end":72329,"line_start":106,"line_end":106,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72334,"byte_end":72343,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73131,"byte_end":73143,"line_start":124,"line_end":124,"column_start":19,"column_end":31},"name":"unfilled_mut","qualname":"<ReadBuf>::unfilled_mut","value":"pub unsafe fn unfilled_mut(&mut Self) -> &mut [MaybeUninit<u8>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\n initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72753,"byte_end":72859,"line_start":116,"line_end":116,"column_start":5,"column_end":111}},{"value":"/ initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72864,"byte_end":72880,"line_start":117,"line_end":117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72885,"byte_end":72888,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72893,"byte_end":72905,"line_start":119,"line_end":119,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72910,"byte_end":72913,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The caller must not de-initialize portions of the buffer that have already been initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":72918,"byte_end":73014,"line_start":121,"line_end":121,"column_start":5,"column_end":101}},{"value":"/ This includes any bytes in the region marked as uninitialized by `ReadBuf`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73019,"byte_end":73098,"line_start":122,"line_end":122,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73103,"byte_end":73112,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73505,"byte_end":73524,"line_start":133,"line_end":133,"column_start":12,"column_end":31},"name":"initialize_unfilled","qualname":"<ReadBuf>::initialize_unfilled","value":"pub fn initialize_unfilled(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73231,"byte_end":73332,"line_start":128,"line_end":128,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73337,"byte_end":73340,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Since `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73345,"byte_end":73456,"line_start":130,"line_end":130,"column_start":5,"column_end":116}},{"value":"/ the first use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73461,"byte_end":73479,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73484,"byte_end":73493,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73862,"byte_end":73884,"line_start":144,"line_end":144,"column_start":12,"column_end":34},"name":"initialize_unfilled_to","qualname":"<ReadBuf>::initialize_unfilled_to","value":"pub fn initialize_unfilled_to(&mut Self, usize) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\n fully initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73616,"byte_end":73721,"line_start":137,"line_end":137,"column_start":5,"column_end":110}},{"value":"/ fully initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73726,"byte_end":73748,"line_start":138,"line_end":138,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73753,"byte_end":73756,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73761,"byte_end":73773,"line_start":140,"line_end":140,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73778,"byte_end":73781,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Panics if `self.remaining()` is less than `n`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73786,"byte_end":73836,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":73841,"byte_end":73850,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74729,"byte_end":74738,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"remaining","qualname":"<ReadBuf>::remaining","value":"pub fn remaining(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes at the end of the slice that have not yet been filled.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes at the end of the slice that have not yet been filled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74617,"byte_end":74703,"line_start":165,"line_end":165,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74708,"byte_end":74717,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75005,"byte_end":75010,"line_start":175,"line_end":175,"column_start":12,"column_end":17},"name":"clear","qualname":"<ReadBuf>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, resetting the filled region to empty.","sig":null,"attributes":[{"value":"/ Clears the buffer, resetting the filled region to empty.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74806,"byte_end":74866,"line_start":171,"line_end":171,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74871,"byte_end":74874,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The number of initialized bytes is not changed, and the contents of the buffer are not modified.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74879,"byte_end":74979,"line_start":173,"line_end":173,"column_start":5,"column_end":105}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":74984,"byte_end":74993,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75339,"byte_end":75346,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"advance","qualname":"<ReadBuf>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Advances the size of the filled region of the buffer.","sig":null,"attributes":[{"value":"/ Advances the size of the filled region of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75060,"byte_end":75117,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75122,"byte_end":75125,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ The number of initialized bytes is not changed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75130,"byte_end":75181,"line_start":181,"line_end":181,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75186,"byte_end":75189,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75194,"byte_end":75206,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75211,"byte_end":75214,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Panics if the filled region of the buffer would become larger than the initialized region.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75219,"byte_end":75313,"line_start":185,"line_end":185,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75318,"byte_end":75327,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75956,"byte_end":75966,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"set_filled","qualname":"<ReadBuf>::set_filled","value":"pub fn set_filled(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the filled region of the buffer.","sig":null,"attributes":[{"value":"/ Sets the size of the filled region of the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75483,"byte_end":75536,"line_start":192,"line_end":192,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75541,"byte_end":75544,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ The number of initialized bytes is not changed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75549,"byte_end":75600,"line_start":194,"line_end":194,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75605,"byte_end":75608,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Note that this can be used to *shrink* the filled region of the buffer in addition to growing it (for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75613,"byte_end":75718,"line_start":196,"line_end":196,"column_start":5,"column_end":110}},{"value":"/ example, by a `AsyncRead` implementation that compresses data in-place).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75723,"byte_end":75799,"line_start":197,"line_end":197,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75804,"byte_end":75807,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75812,"byte_end":75824,"line_start":199,"line_end":199,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75829,"byte_end":75832,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Panics if the filled region of the buffer would become larger than the intialized region.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75837,"byte_end":75930,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":75935,"byte_end":75944,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76570,"byte_end":76581,"line_start":220,"line_end":220,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<ReadBuf>::assume_init","value":"pub unsafe fn assume_init(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that the first `n` unfilled bytes of the buffer are initialized.","sig":null,"attributes":[{"value":"/ Asserts that the first `n` unfilled bytes of the buffer are initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76150,"byte_end":76226,"line_start":211,"line_end":211,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76231,"byte_end":76234,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ `ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76239,"byte_end":76348,"line_start":213,"line_end":213,"column_start":5,"column_end":114}},{"value":"/ bytes than are already known to be initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76353,"byte_end":76404,"line_start":214,"line_end":214,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76409,"byte_end":76412,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76417,"byte_end":76429,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76434,"byte_end":76437,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76442,"byte_end":76537,"line_start":218,"line_end":218,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76542,"byte_end":76551,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76961,"byte_end":76970,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"put_slice","qualname":"<ReadBuf>::put_slice","value":"pub fn put_slice(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Appends data to the buffer, advancing the written position and possibly also the initialized position.","sig":null,"attributes":[{"value":"/ Appends data to the buffer, advancing the written position and possibly also the initialized position.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76733,"byte_end":76839,"line_start":227,"line_end":227,"column_start":5,"column_end":111}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76844,"byte_end":76847,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76852,"byte_end":76864,"line_start":229,"line_end":229,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76869,"byte_end":76872,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Panics if `self.remaining()` is less than `buf.len()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76877,"byte_end":76935,"line_start":231,"line_end":231,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":76940,"byte_end":76949,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":969},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008351,"byte_end":10008359,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Interest","qualname":"::io::driver::interest::Interest","value":"","parent":null,"children":[],"decl_id":null,"docs":" Readiness event interest","sig":null,"attributes":[{"value":"/ Readiness event interest","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008107,"byte_end":10008135,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008136,"byte_end":10008139,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Specifies the readiness events the caller is interested in when awaiting on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008140,"byte_end":10008219,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ I/O resource readiness states.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008220,"byte_end":10008254,"line_start":11,"line_end":11,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":728},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008511,"byte_end":10008519,"line_start":20,"line_end":20,"column_start":15,"column_end":23},"name":"READABLE","qualname":"::io::driver::interest::Interest::READABLE","value":"Interest","parent":{"krate":0,"index":727},"children":[],"decl_id":null,"docs":" Interest in all readable events.","sig":null,"attributes":[{"value":"/ Interest in all readable events.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008397,"byte_end":10008433,"line_start":17,"line_end":17,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008438,"byte_end":10008441,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ Readable interest includes read-closed events.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008446,"byte_end":10008496,"line_start":19,"line_end":19,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":729},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008686,"byte_end":10008694,"line_start":25,"line_end":25,"column_start":15,"column_end":23},"name":"WRITABLE","qualname":"::io::driver::interest::Interest::WRITABLE","value":"Interest","parent":{"krate":0,"index":727},"children":[],"decl_id":null,"docs":" Interest in all writable events","sig":null,"attributes":[{"value":"/ Interest in all writable events","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008572,"byte_end":10008607,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008612,"byte_end":10008615,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Writable interest includes write-closed events.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008620,"byte_end":10008671,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009130,"byte_end":10009141,"line_start":40,"line_end":40,"column_start":18,"column_end":29},"name":"is_readable","qualname":"<Interest>::is_readable","value":"pub const fn is_readable(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value includes readable interest.","sig":null,"attributes":[{"value":"/ Returns true if the value includes readable interest.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008747,"byte_end":10008804,"line_start":27,"line_end":27,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008809,"byte_end":10008812,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008817,"byte_end":10008831,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008836,"byte_end":10008839,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008844,"byte_end":10008851,"line_start":31,"line_end":31,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008856,"byte_end":10008884,"line_start":32,"line_end":32,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008889,"byte_end":10008892,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ assert!(Interest::READABLE.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008897,"byte_end":10008943,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/ assert!(!Interest::WRITABLE.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008948,"byte_end":10008995,"line_start":35,"line_end":35,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009000,"byte_end":10009003,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ let both = Interest::READABLE | Interest::WRITABLE;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009008,"byte_end":10009063,"line_start":37,"line_end":37,"column_start":5,"column_end":60}},{"value":"/ assert!(both.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009068,"byte_end":10009100,"line_start":38,"line_end":38,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009105,"byte_end":10009112,"line_start":39,"line_end":39,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009581,"byte_end":10009592,"line_start":57,"line_end":57,"column_start":18,"column_end":29},"name":"is_writable","qualname":"<Interest>::is_writable","value":"pub const fn is_writable(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value includes writable interest.","sig":null,"attributes":[{"value":"/ Returns true if the value includes writable interest.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009198,"byte_end":10009255,"line_start":44,"line_end":44,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009260,"byte_end":10009263,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009268,"byte_end":10009282,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009287,"byte_end":10009290,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009295,"byte_end":10009302,"line_start":48,"line_end":48,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009307,"byte_end":10009335,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009340,"byte_end":10009343,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert!(!Interest::READABLE.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009348,"byte_end":10009395,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/ assert!(Interest::WRITABLE.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009400,"byte_end":10009446,"line_start":52,"line_end":52,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009451,"byte_end":10009454,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let both = Interest::READABLE | Interest::WRITABLE;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009459,"byte_end":10009514,"line_start":54,"line_end":54,"column_start":5,"column_end":60}},{"value":"/ assert!(both.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009519,"byte_end":10009551,"line_start":55,"line_end":55,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009556,"byte_end":10009563,"line_start":56,"line_end":56,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010010,"byte_end":10010013,"line_start":74,"line_end":74,"column_start":18,"column_end":21},"name":"add","qualname":"<Interest>::add","value":"pub const fn add(Self, Interest) -> Interest","parent":null,"children":[],"decl_id":null,"docs":" Add together two `Interst` values.","sig":null,"attributes":[{"value":"/ Add together two `Interst` values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009649,"byte_end":10009687,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009692,"byte_end":10009695,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This function works from a `const` context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009700,"byte_end":10009747,"line_start":63,"line_end":63,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009752,"byte_end":10009755,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009760,"byte_end":10009774,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009779,"byte_end":10009782,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009787,"byte_end":10009794,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009799,"byte_end":10009827,"line_start":68,"line_end":68,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009832,"byte_end":10009835,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ const BOTH: Interest = Interest::READABLE.add(Interest::WRITABLE);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009840,"byte_end":10009910,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009915,"byte_end":10009918,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ assert!(BOTH.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009923,"byte_end":10009955,"line_start":72,"line_end":72,"column_start":5,"column_end":37}},{"value":"/ assert!(BOTH.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10009960,"byte_end":10009992,"line_start":73,"line_end":73,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":982},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011391,"byte_end":10011396,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"Ready","qualname":"::io::driver::ready::Ready","value":"","parent":null,"children":[],"decl_id":null,"docs":" Describes the readiness state of an I/O resources.","sig":null,"attributes":[{"value":"/ Describes the readiness state of an I/O resources.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011156,"byte_end":10011210,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011211,"byte_end":10011214,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Ready` tracks which operation an I/O resource is ready to perform.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011215,"byte_end":10011286,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":751},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011472,"byte_end":10011477,"line_start":20,"line_end":20,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::io::driver::ready::Ready::EMPTY","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns the empty `Ready` set.\n","sig":null,"attributes":[{"value":"/ Returns the empty `Ready` set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011423,"byte_end":10011457,"line_start":19,"line_end":19,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":752},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011571,"byte_end":10011579,"line_start":23,"line_end":23,"column_start":15,"column_end":23},"name":"READABLE","qualname":"::io::driver::ready::Ready::READABLE","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns a `Ready` representing readable readiness.\n","sig":null,"attributes":[{"value":"/ Returns a `Ready` representing readable readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011502,"byte_end":10011556,"line_start":22,"line_end":22,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":753},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011680,"byte_end":10011688,"line_start":26,"line_end":26,"column_start":15,"column_end":23},"name":"WRITABLE","qualname":"::io::driver::ready::Ready::WRITABLE","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns a `Ready` representing writable readiness.\n","sig":null,"attributes":[{"value":"/ Returns a `Ready` representing writable readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011611,"byte_end":10011665,"line_start":25,"line_end":25,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":754},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011792,"byte_end":10011803,"line_start":29,"line_end":29,"column_start":15,"column_end":26},"name":"READ_CLOSED","qualname":"::io::driver::ready::Ready::READ_CLOSED","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns a `Ready` representing read closed readiness.\n","sig":null,"attributes":[{"value":"/ Returns a `Ready` representing read closed readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011720,"byte_end":10011777,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":755},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011911,"byte_end":10011923,"line_start":32,"line_end":32,"column_start":15,"column_end":27},"name":"WRITE_CLOSED","qualname":"::io::driver::ready::Ready::WRITE_CLOSED","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns a `Ready` representing write closed readiness.\n","sig":null,"attributes":[{"value":"/ Returns a `Ready` representing write closed readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011838,"byte_end":10011896,"line_start":31,"line_end":31,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":756},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012038,"byte_end":10012041,"line_start":35,"line_end":35,"column_start":15,"column_end":18},"name":"ALL","qualname":"::io::driver::ready::Ready::ALL","value":"Ready","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns a `Ready` representing readiness for all operations.\n","sig":null,"attributes":[{"value":"/ Returns a `Ready` representing readiness for all operations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011959,"byte_end":10012023,"line_start":34,"line_end":34,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012898,"byte_end":10012906,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Ready>::is_empty","value":"pub fn is_empty(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `Ready` is the empty set","sig":null,"attributes":[{"value":"/ Returns true if `Ready` is the empty set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012657,"byte_end":10012701,"line_start":60,"line_end":60,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012706,"byte_end":10012709,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012714,"byte_end":10012728,"line_start":62,"line_end":62,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012733,"byte_end":10012736,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012741,"byte_end":10012748,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012753,"byte_end":10012778,"line_start":65,"line_end":65,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012783,"byte_end":10012786,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ assert!(Ready::EMPTY.is_empty());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012791,"byte_end":10012828,"line_start":67,"line_end":67,"column_start":5,"column_end":42}},{"value":"/ assert!(!Ready::READABLE.is_empty());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012833,"byte_end":10012874,"line_start":68,"line_end":68,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012879,"byte_end":10012886,"line_start":69,"line_end":69,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013317,"byte_end":10013328,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"is_readable","qualname":"<Ready>::is_readable","value":"pub fn is_readable(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value includes `readable`","sig":null,"attributes":[{"value":"/ Returns `true` if the value includes `readable`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10012963,"byte_end":10013014,"line_start":74,"line_end":74,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013019,"byte_end":10013022,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013027,"byte_end":10013041,"line_start":76,"line_end":76,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013046,"byte_end":10013049,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013054,"byte_end":10013061,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013066,"byte_end":10013091,"line_start":79,"line_end":79,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013096,"byte_end":10013099,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ assert!(!Ready::EMPTY.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013104,"byte_end":10013145,"line_start":81,"line_end":81,"column_start":5,"column_end":46}},{"value":"/ assert!(Ready::READABLE.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013150,"byte_end":10013193,"line_start":82,"line_end":82,"column_start":5,"column_end":48}},{"value":"/ assert!(Ready::READ_CLOSED.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013198,"byte_end":10013244,"line_start":83,"line_end":83,"column_start":5,"column_end":51}},{"value":"/ assert!(!Ready::WRITABLE.is_readable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013249,"byte_end":10013293,"line_start":84,"line_end":84,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013298,"byte_end":10013305,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013785,"byte_end":10013796,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"is_writable","qualname":"<Ready>::is_writable","value":"pub fn is_writable(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value includes writable `readiness`","sig":null,"attributes":[{"value":"/ Returns `true` if the value includes writable `readiness`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013420,"byte_end":10013481,"line_start":90,"line_end":90,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013486,"byte_end":10013489,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013494,"byte_end":10013508,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013513,"byte_end":10013516,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013521,"byte_end":10013528,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013533,"byte_end":10013558,"line_start":95,"line_end":95,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013563,"byte_end":10013566,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ assert!(!Ready::EMPTY.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013571,"byte_end":10013612,"line_start":97,"line_end":97,"column_start":5,"column_end":46}},{"value":"/ assert!(!Ready::READABLE.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013617,"byte_end":10013661,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"/ assert!(Ready::WRITABLE.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013666,"byte_end":10013709,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/ assert!(Ready::WRITE_CLOSED.is_writable());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013714,"byte_end":10013761,"line_start":100,"line_end":100,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013766,"byte_end":10013773,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014217,"byte_end":10014231,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"is_read_closed","qualname":"<Ready>::is_read_closed","value":"pub fn is_read_closed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value includes read-closed `readiness`","sig":null,"attributes":[{"value":"/ Returns `true` if the value includes read-closed `readiness`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013889,"byte_end":10013953,"line_start":106,"line_end":106,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013958,"byte_end":10013961,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013966,"byte_end":10013980,"line_start":108,"line_end":108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013985,"byte_end":10013988,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10013993,"byte_end":10014000,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014005,"byte_end":10014030,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014035,"byte_end":10014038,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ assert!(!Ready::EMPTY.is_read_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014043,"byte_end":10014087,"line_start":113,"line_end":113,"column_start":5,"column_end":49}},{"value":"/ assert!(!Ready::READABLE.is_read_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014092,"byte_end":10014139,"line_start":114,"line_end":114,"column_start":5,"column_end":52}},{"value":"/ assert!(Ready::READ_CLOSED.is_read_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014144,"byte_end":10014193,"line_start":115,"line_end":115,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014198,"byte_end":10014205,"line_start":116,"line_end":116,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014634,"byte_end":10014649,"line_start":132,"line_end":132,"column_start":12,"column_end":27},"name":"is_write_closed","qualname":"<Ready>::is_write_closed","value":"pub fn is_write_closed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value includes write-closed `readiness`","sig":null,"attributes":[{"value":"/ Returns `true` if the value includes write-closed `readiness`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014301,"byte_end":10014366,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014371,"byte_end":10014374,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014379,"byte_end":10014393,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014398,"byte_end":10014401,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014406,"byte_end":10014413,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use tokio::io::Ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014418,"byte_end":10014443,"line_start":126,"line_end":126,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014448,"byte_end":10014451,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert!(!Ready::EMPTY.is_write_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014456,"byte_end":10014501,"line_start":128,"line_end":128,"column_start":5,"column_end":50}},{"value":"/ assert!(!Ready::WRITABLE.is_write_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014506,"byte_end":10014554,"line_start":129,"line_end":129,"column_start":5,"column_end":53}},{"value":"/ assert!(Ready::WRITE_CLOSED.is_write_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014559,"byte_end":10014610,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10014615,"byte_end":10014622,"line_start":131,"line_end":131,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057580,"byte_end":10057587,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"AsyncFd","qualname":"::io::async_fd::AsyncFd","value":"AsyncFd {  }","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146}],"decl_id":null,"docs":" Associates an IO object backed by a Unix file descriptor with the tokio\n reactor, allowing for readiness to be polled. The file descriptor must be of\n a type that can be used with the OS polling facilities (ie, `poll`, `epoll`,\n `kqueue`, etc), such as a network socket or pipe.","sig":null,"attributes":[{"value":"/ Associates an IO object backed by a Unix file descriptor with the tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052345,"byte_end":10052420,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ reactor, allowing for readiness to be polled. The file descriptor must be of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052421,"byte_end":10052501,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ a type that can be used with the OS polling facilities (ie, `poll`, `epoll`,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052502,"byte_end":10052582,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `kqueue`, etc), such as a network socket or pipe.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052583,"byte_end":10052636,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052637,"byte_end":10052640,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Creating an AsyncFd registers the file descriptor with the current tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052641,"byte_end":10052717,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ Reactor, allowing you to directly await the file descriptor being readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052718,"byte_end":10052796,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ or writable. Once registered, the file descriptor remains registered until","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052797,"byte_end":10052875,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ the AsyncFd is dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052876,"byte_end":10052903,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052904,"byte_end":10052907,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The AsyncFd takes ownership of an arbitrary object to represent the IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052908,"byte_end":10052982,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ object. It is intended that this object will handle closing the file","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10052983,"byte_end":10053055,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ descriptor when it is dropped, avoiding resource leaks and ensuring that the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053056,"byte_end":10053136,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ AsyncFd can clean up the registration before closing the file descriptor.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053137,"byte_end":10053214,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ The [`AsyncFd::into_inner`] function can be used to extract the inner object","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053215,"byte_end":10053295,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ to retake control from the tokio IO reactor.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053296,"byte_end":10053344,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053345,"byte_end":10053348,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The inner object is required to implement [`AsRawFd`]. This file descriptor","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053349,"byte_end":10053428,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ must not change while [`AsyncFd`] owns the inner object. Changing the file","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053429,"byte_end":10053507,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ descriptor results in unspecified behavior in the IO driver, which may","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053508,"byte_end":10053582,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ include breaking notifications for other sockets/etc.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053583,"byte_end":10053640,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053641,"byte_end":10053644,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Polling for readiness is done by calling the async functions [`readable`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053645,"byte_end":10053722,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ and [`writable`]. These functions complete when the associated readiness","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053723,"byte_end":10053799,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/ condition is observed. Any number of tasks can query the same `AsyncFd` in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053800,"byte_end":10053878,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ parallel, on the same or different conditions.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053879,"byte_end":10053929,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053930,"byte_end":10053933,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ On some platforms, the readiness detecting mechanism relies on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10053934,"byte_end":10054000,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ edge-triggered notifications. This means that the OS will only notify Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054001,"byte_end":10054080,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ when the file descriptor transitions from not-ready to ready. Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054081,"byte_end":10054152,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/ internally tracks when it has received a ready notification, and when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054153,"byte_end":10054226,"line_start":38,"line_end":38,"column_start":1,"column_end":74}},{"value":"/ readiness checking functions like [`readable`] and [`writable`] are called,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054227,"byte_end":10054306,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ if the readiness flag is set, these async functions will complete","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054307,"byte_end":10054376,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ immediately.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054377,"byte_end":10054393,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054394,"byte_end":10054397,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This however does mean that it is critical to ensure that this ready flag is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054398,"byte_end":10054478,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/ cleared when (and only when) the file descriptor ceases to be ready. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054479,"byte_end":10054555,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ [`AsyncFdReadyGuard`] returned from readiness checking functions serves this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054556,"byte_end":10054636,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/ function; after calling a readiness-checking async function, you must use","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054637,"byte_end":10054714,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ this [`AsyncFdReadyGuard`] to signal to tokio whether the file descriptor is no","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054715,"byte_end":10054798,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"/ longer in a ready state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054799,"byte_end":10054827,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054828,"byte_end":10054831,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Use with to a poll-based API","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054832,"byte_end":10054867,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054868,"byte_end":10054871,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ In some cases it may be desirable to use `AsyncFd` from APIs similar to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054872,"byte_end":10054947,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ [`TcpStream::poll_read_ready`]. The [`AsyncFd::poll_read_ready`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10054948,"byte_end":10055020,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ [`AsyncFd::poll_write_ready`] functions are provided for this purpose.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055021,"byte_end":10055095,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ Because these functions don't create a future to hold their state, they have","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055096,"byte_end":10055176,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ the limitation that only one task can wait on each direction (read or write)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055177,"byte_end":10055257,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/ at a time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055258,"byte_end":10055272,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055273,"byte_end":10055276,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055277,"byte_end":10055291,"line_start":59,"line_end":59,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055292,"byte_end":10055295,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This example shows how to turn [`std::net::TcpStream`] asynchronous using","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055296,"byte_end":10055373,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ `AsyncFd`.  It implements `read` as an async fn, and `AsyncWrite` as a trait","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055374,"byte_end":10055454,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ to show how to implement both approaches.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055455,"byte_end":10055500,"line_start":63,"line_end":63,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055501,"byte_end":10055504,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055505,"byte_end":10055518,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/ use futures::ready;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055519,"byte_end":10055542,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/ use std::io::{self, Read, Write};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055543,"byte_end":10055580,"line_start":67,"line_end":67,"column_start":1,"column_end":38}},{"value":"/ use std::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055581,"byte_end":10055609,"line_start":68,"line_end":68,"column_start":1,"column_end":29}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055610,"byte_end":10055632,"line_start":69,"line_end":69,"column_start":1,"column_end":23}},{"value":"/ use std::task::{Context, Poll};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055633,"byte_end":10055668,"line_start":70,"line_end":70,"column_start":1,"column_end":36}},{"value":"/ use tokio::io::AsyncWrite;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055669,"byte_end":10055699,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/ use tokio::io::unix::AsyncFd;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055700,"byte_end":10055733,"line_start":72,"line_end":72,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055734,"byte_end":10055737,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ pub struct AsyncTcpStream {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055738,"byte_end":10055769,"line_start":74,"line_end":74,"column_start":1,"column_end":32}},{"value":"/     inner: AsyncFd<TcpStream>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055770,"byte_end":10055804,"line_start":75,"line_end":75,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055805,"byte_end":10055810,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055811,"byte_end":10055814,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ impl AsyncTcpStream {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055815,"byte_end":10055840,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"/     pub fn new(tcp: TcpStream) -> io::Result<Self> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055841,"byte_end":10055897,"line_start":79,"line_end":79,"column_start":1,"column_end":57}},{"value":"/         Ok(Self {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055898,"byte_end":10055919,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/             inner: AsyncFd::new(tcp)?,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055920,"byte_end":10055962,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/         })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055963,"byte_end":10055977,"line_start":82,"line_end":82,"column_start":1,"column_end":15}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055978,"byte_end":10055987,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055988,"byte_end":10055991,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/     pub async fn read(&self, out: &mut [u8]) -> io::Result<usize> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10055992,"byte_end":10056063,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/         loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056064,"byte_end":10056082,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"/             let mut guard = self.inner.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056083,"byte_end":10056144,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056145,"byte_end":10056148,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/             match guard.try_io(|inner| inner.get_ref().read(out)) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056149,"byte_end":10056220,"line_start":89,"line_end":89,"column_start":1,"column_end":72}},{"value":"/                 Ok(result) => return result,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056221,"byte_end":10056269,"line_start":90,"line_end":90,"column_start":1,"column_end":49}},{"value":"/                 Err(_would_block) => continue,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056270,"byte_end":10056320,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056321,"byte_end":10056338,"line_start":92,"line_end":92,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056339,"byte_end":10056352,"line_start":93,"line_end":93,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056353,"byte_end":10056362,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056363,"byte_end":10056368,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056369,"byte_end":10056372,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ impl AsyncWrite for AsyncTcpStream {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056373,"byte_end":10056413,"line_start":97,"line_end":97,"column_start":1,"column_end":41}},{"value":"/     fn poll_write(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056414,"byte_end":10056436,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/         self: Pin<&mut Self>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056437,"byte_end":10056470,"line_start":99,"line_end":99,"column_start":1,"column_end":34}},{"value":"/         cx: &mut Context<'_>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056471,"byte_end":10056504,"line_start":100,"line_end":100,"column_start":1,"column_end":34}},{"value":"/         buf: &[u8]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056505,"byte_end":10056527,"line_start":101,"line_end":101,"column_start":1,"column_end":23}},{"value":"/     ) -> Poll<io::Result<usize>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056528,"byte_end":10056566,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/         loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056567,"byte_end":10056585,"line_start":103,"line_end":103,"column_start":1,"column_end":19}},{"value":"/             let mut guard = ready!(self.inner.poll_write_ready(cx))?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056586,"byte_end":10056659,"line_start":104,"line_end":104,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056660,"byte_end":10056663,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/             match guard.try_io(|inner| inner.get_ref().write(buf)) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056664,"byte_end":10056736,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"/                 Ok(result) => return Poll::Ready(result),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056737,"byte_end":10056798,"line_start":107,"line_end":107,"column_start":1,"column_end":62}},{"value":"/                 Err(_would_block) => continue,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056799,"byte_end":10056849,"line_start":108,"line_end":108,"column_start":1,"column_end":51}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056850,"byte_end":10056867,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056868,"byte_end":10056881,"line_start":110,"line_end":110,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056882,"byte_end":10056891,"line_start":111,"line_end":111,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056892,"byte_end":10056895,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/     fn poll_flush(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056896,"byte_end":10056918,"line_start":113,"line_end":113,"column_start":1,"column_end":23}},{"value":"/         self: Pin<&mut Self>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056919,"byte_end":10056952,"line_start":114,"line_end":114,"column_start":1,"column_end":34}},{"value":"/         cx: &mut Context<'_>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056953,"byte_end":10056986,"line_start":115,"line_end":115,"column_start":1,"column_end":34}},{"value":"/     ) -> Poll<io::Result<()>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10056987,"byte_end":10057022,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/         // tcp flush is a no-op","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057023,"byte_end":10057058,"line_start":117,"line_end":117,"column_start":1,"column_end":36}},{"value":"/         Poll::Ready(Ok(()))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057059,"byte_end":10057090,"line_start":118,"line_end":118,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057091,"byte_end":10057100,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057101,"byte_end":10057104,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/     fn poll_shutdown(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057105,"byte_end":10057130,"line_start":121,"line_end":121,"column_start":1,"column_end":26}},{"value":"/         self: Pin<&mut Self>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057131,"byte_end":10057164,"line_start":122,"line_end":122,"column_start":1,"column_end":34}},{"value":"/         cx: &mut Context<'_>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057165,"byte_end":10057198,"line_start":123,"line_end":123,"column_start":1,"column_end":34}},{"value":"/     ) -> Poll<io::Result<()>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057199,"byte_end":10057234,"line_start":124,"line_end":124,"column_start":1,"column_end":36}},{"value":"/         self.inner.get_ref().shutdown(std::net::Shutdown::Write)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057235,"byte_end":10057305,"line_start":125,"line_end":125,"column_start":1,"column_end":71}},{"value":"/         Poll::Ready(Ok(()))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057306,"byte_end":10057337,"line_start":126,"line_end":126,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057338,"byte_end":10057347,"line_start":127,"line_end":127,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057348,"byte_end":10057353,"line_start":128,"line_end":128,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057354,"byte_end":10057361,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057362,"byte_end":10057365,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ [`readable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057366,"byte_end":10057405,"line_start":131,"line_end":131,"column_start":1,"column_end":40}},{"value":"/ [`writable`]: method@Self::writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057406,"byte_end":10057445,"line_start":132,"line_end":132,"column_start":1,"column_end":40}},{"value":"/ [`AsyncFdReadyGuard`]: struct@self::AsyncFdReadyGuard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057446,"byte_end":10057503,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"/ [`TcpStream::poll_read_ready`]: struct@crate::net::TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057504,"byte_end":10057568,"line_start":134,"line_end":134,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058095,"byte_end":10058112,"line_start":146,"line_end":146,"column_start":12,"column_end":29},"name":"AsyncFdReadyGuard","qualname":"::io::async_fd::AsyncFdReadyGuard","value":"AsyncFdReadyGuard {  }","parent":null,"children":[{"krate":0,"index":1150},{"krate":0,"index":1151}],"decl_id":null,"docs":" Represents an IO-ready event detected on a particular file descriptor that\n has not yet been acknowledged. This is a `must_use` structure to help ensure\n that you do not forget to explicitly clear (or not clear) the event.","sig":null,"attributes":[{"value":"/ Represents an IO-ready event detected on a particular file descriptor that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057659,"byte_end":10057737,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ has not yet been acknowledged. This is a `must_use` structure to help ensure","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057738,"byte_end":10057818,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ that you do not forget to explicitly clear (or not clear) the event.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057819,"byte_end":10057891,"line_start":142,"line_end":142,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057892,"byte_end":10057895,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ This type exposes an immutable reference to the underlying IO object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057896,"byte_end":10057969,"line_start":144,"line_end":144,"column_start":1,"column_end":74}},{"value":"must_use =\n  \"You must explicitly choose whether to clear the readiness state by calling a method on ReadyGuard\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10057970,"byte_end":10058083,"line_start":145,"line_end":145,"column_start":1,"column_end":114}}]},{"kind":"Struct","id":{"krate":0,"index":1152},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058628,"byte_end":10058648,"line_start":157,"line_end":157,"column_start":12,"column_end":32},"name":"AsyncFdReadyMutGuard","qualname":"::io::async_fd::AsyncFdReadyMutGuard","value":"AsyncFdReadyMutGuard {  }","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156}],"decl_id":null,"docs":" Represents an IO-ready event detected on a particular file descriptor that\n has not yet been acknowledged. This is a `must_use` structure to help ensure\n that you do not forget to explicitly clear (or not clear) the event.","sig":null,"attributes":[{"value":"/ Represents an IO-ready event detected on a particular file descriptor that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058195,"byte_end":10058273,"line_start":151,"line_end":151,"column_start":1,"column_end":79}},{"value":"/ has not yet been acknowledged. This is a `must_use` structure to help ensure","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058274,"byte_end":10058354,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ that you do not forget to explicitly clear (or not clear) the event.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058355,"byte_end":10058427,"line_start":153,"line_end":153,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058428,"byte_end":10058431,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This type exposes a mutable reference to the underlying IO object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058432,"byte_end":10058502,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"must_use =\n  \"You must explicitly choose whether to clear the readiness state by calling a method on ReadyGuard\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058503,"byte_end":10058616,"line_start":156,"line_end":156,"column_start":1,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059122,"byte_end":10059125,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<AsyncFd<T>>::new","value":"pub fn new(T) -> io::Result<Self> where T: AsRawFd","parent":null,"children":[],"decl_id":null,"docs":" Creates an AsyncFd backed by (and taking ownership of) an object\n implementing [`AsRawFd`]. The backing file descriptor is cached at the\n time of creation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058845,"byte_end":10058854,"line_start":165,"line_end":165,"column_start":5,"column_end":14}},{"value":"/ Creates an AsyncFd backed by (and taking ownership of) an object","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058859,"byte_end":10058927,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/ implementing [`AsRawFd`]. The backing file descriptor is cached at the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058932,"byte_end":10059006,"line_start":167,"line_end":167,"column_start":5,"column_end":79}},{"value":"/ time of creation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059011,"byte_end":10059032,"line_start":168,"line_end":168,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059037,"byte_end":10059040,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ This method must be called in the context of a tokio runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059045,"byte_end":10059110,"line_start":170,"line_end":170,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059450,"byte_end":10059463,"line_start":181,"line_end":181,"column_start":12,"column_end":25},"name":"with_interest","qualname":"<AsyncFd<T>>::with_interest","value":"pub fn with_interest(T, Interest) -> io::Result<Self> where T: AsRawFd","parent":null,"children":[],"decl_id":null,"docs":" Creates new instance as `new` with additional ability to customize interest,\n allowing to specify whether file descriptor will be polled for read, write or both.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059252,"byte_end":10059261,"line_start":178,"line_end":178,"column_start":5,"column_end":14}},{"value":"/ Creates new instance as `new` with additional ability to customize interest,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059266,"byte_end":10059346,"line_start":179,"line_end":179,"column_start":5,"column_end":85}},{"value":"/ allowing to specify whether file descriptor will be polled for read, write or both.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10059351,"byte_end":10059438,"line_start":180,"line_end":180,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060141,"byte_end":10060148,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AsyncFd<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the backing object of this [`AsyncFd`]\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the backing object of this [`AsyncFd`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060043,"byte_end":10060115,"line_start":204,"line_end":204,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060120,"byte_end":10060129,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060311,"byte_end":10060318,"line_start":212,"line_end":212,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AsyncFd<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the backing object of this [`AsyncFd`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the backing object of this [`AsyncFd`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060212,"byte_end":10060285,"line_start":210,"line_end":210,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060290,"byte_end":10060299,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060743,"byte_end":10060753,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AsyncFd<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Deregisters this file descriptor and returns ownership of the backing\n object.\n","sig":null,"attributes":[{"value":"/ Deregisters this file descriptor and returns ownership of the backing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060642,"byte_end":10060715,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060720,"byte_end":10060731,"line_start":227,"line_end":227,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062280,"byte_end":10062295,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"poll_read_ready","qualname":"<AsyncFd<T>>::poll_read_ready","value":"pub fn poll_read_ready<'a>(&'a Self, &mut Context)\n-> Poll<io::Result<AsyncFdReadyGuard>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for read readiness.","sig":null,"attributes":[{"value":"/ Polls for read readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060817,"byte_end":10060846,"line_start":232,"line_end":232,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060851,"byte_end":10060854,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ If the file descriptor is not currently ready for reading, this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060859,"byte_end":10060933,"line_start":234,"line_end":234,"column_start":5,"column_end":79}},{"value":"/ will store a clone of the [`Waker`] from the provided [`Context`]. When the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10060938,"byte_end":10061017,"line_start":235,"line_end":235,"column_start":5,"column_end":84}},{"value":"/ file descriptor becomes ready for reading, [`Waker::wake`] will be called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061022,"byte_end":10061100,"line_start":236,"line_end":236,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061105,"byte_end":10061108,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to [`poll_read_ready`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061113,"byte_end":10061170,"line_start":238,"line_end":238,"column_start":5,"column_end":62}},{"value":"/ [`poll_read_ready_mut`], only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061175,"byte_end":10061253,"line_start":239,"line_end":239,"column_start":5,"column_end":83}},{"value":"/ most recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061258,"byte_end":10061322,"line_start":240,"line_end":240,"column_start":5,"column_end":69}},{"value":"/ [`poll_write_ready`] retains a second, independent waker).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061327,"byte_end":10061389,"line_start":241,"line_end":241,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061394,"byte_end":10061397,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This method is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061402,"byte_end":10061475,"line_start":243,"line_end":243,"column_start":5,"column_end":78}},{"value":"/ via [`readable`] is not feasible. Where possible, using [`readable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061480,"byte_end":10061555,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061560,"byte_end":10061628,"line_start":245,"line_end":245,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061633,"byte_end":10061636,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method takes `&self`, so it is possible to call this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061641,"byte_end":10061709,"line_start":247,"line_end":247,"column_start":5,"column_end":73}},{"value":"/ concurrently with other methods on this struct. This method only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061714,"byte_end":10061782,"line_start":248,"line_end":248,"column_start":5,"column_end":73}},{"value":"/ provides shared access to the inner IO resource when handling the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061787,"byte_end":10061856,"line_start":249,"line_end":249,"column_start":5,"column_end":74}},{"value":"/ [`AsyncFdReadyGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061861,"byte_end":10061887,"line_start":250,"line_end":250,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061892,"byte_end":10061895,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ [`poll_read_ready`]: method@Self::poll_read_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061900,"byte_end":10061953,"line_start":252,"line_end":252,"column_start":5,"column_end":58}},{"value":"/ [`poll_read_ready_mut`]: method@Self::poll_read_ready_mut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10061958,"byte_end":10062019,"line_start":253,"line_end":253,"column_start":5,"column_end":66}},{"value":"/ [`poll_write_ready`]: method@Self::poll_write_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062024,"byte_end":10062079,"line_start":254,"line_end":254,"column_start":5,"column_end":60}},{"value":"/ [`readable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062084,"byte_end":10062123,"line_start":255,"line_end":255,"column_start":5,"column_end":44}},{"value":"/ [`Context`]: struct@std::task::Context","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062128,"byte_end":10062170,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"/ [`Waker`]: struct@std::task::Waker","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062175,"byte_end":10062213,"line_start":257,"line_end":257,"column_start":5,"column_end":43}},{"value":"/ [`Waker::wake`]: method@std::task::Waker::wake","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062218,"byte_end":10062268,"line_start":258,"line_end":258,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063962,"byte_end":10063981,"line_start":297,"line_end":297,"column_start":12,"column_end":31},"name":"poll_read_ready_mut","qualname":"<AsyncFd<T>>::poll_read_ready_mut","value":"pub fn poll_read_ready_mut<'a>(&'a mut Self, &mut Context)\n-> Poll<io::Result<AsyncFdReadyMutGuard>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for read readiness.","sig":null,"attributes":[{"value":"/ Polls for read readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062601,"byte_end":10062630,"line_start":272,"line_end":272,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062635,"byte_end":10062638,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ If the file descriptor is not currently ready for reading, this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062643,"byte_end":10062717,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ will store a clone of the [`Waker`] from the provided [`Context`]. When the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062722,"byte_end":10062801,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ file descriptor becomes ready for reading, [`Waker::wake`] will be called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062806,"byte_end":10062884,"line_start":276,"line_end":276,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062889,"byte_end":10062892,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to [`poll_read_ready`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062897,"byte_end":10062954,"line_start":278,"line_end":278,"column_start":5,"column_end":62}},{"value":"/ [`poll_read_ready_mut`], only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10062959,"byte_end":10063037,"line_start":279,"line_end":279,"column_start":5,"column_end":83}},{"value":"/ most recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063042,"byte_end":10063106,"line_start":280,"line_end":280,"column_start":5,"column_end":69}},{"value":"/ [`poll_write_ready`] retains a second, independent waker).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063111,"byte_end":10063173,"line_start":281,"line_end":281,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063178,"byte_end":10063181,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063186,"byte_end":10063259,"line_start":283,"line_end":283,"column_start":5,"column_end":78}},{"value":"/ via [`readable`] is not feasible. Where possible, using [`readable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063264,"byte_end":10063339,"line_start":284,"line_end":284,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063344,"byte_end":10063412,"line_start":285,"line_end":285,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063417,"byte_end":10063420,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This method takes `&mut self`, so it is possible to access the inner IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063425,"byte_end":10063500,"line_start":287,"line_end":287,"column_start":5,"column_end":80}},{"value":"/ resource mutably when handling the [`AsyncFdReadyMutGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063505,"byte_end":10063569,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063574,"byte_end":10063577,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ [`poll_read_ready`]: method@Self::poll_read_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063582,"byte_end":10063635,"line_start":290,"line_end":290,"column_start":5,"column_end":58}},{"value":"/ [`poll_read_ready_mut`]: method@Self::poll_read_ready_mut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063640,"byte_end":10063701,"line_start":291,"line_end":291,"column_start":5,"column_end":66}},{"value":"/ [`poll_write_ready`]: method@Self::poll_write_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063706,"byte_end":10063761,"line_start":292,"line_end":292,"column_start":5,"column_end":60}},{"value":"/ [`readable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063766,"byte_end":10063805,"line_start":293,"line_end":293,"column_start":5,"column_end":44}},{"value":"/ [`Context`]: struct@std::task::Context","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063810,"byte_end":10063852,"line_start":294,"line_end":294,"column_start":5,"column_end":47}},{"value":"/ [`Waker`]: struct@std::task::Waker","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063857,"byte_end":10063895,"line_start":295,"line_end":295,"column_start":5,"column_end":43}},{"value":"/ [`Waker::wake`]: method@std::task::Waker::wake","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10063900,"byte_end":10063950,"line_start":296,"line_end":296,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065764,"byte_end":10065780,"line_start":337,"line_end":337,"column_start":12,"column_end":28},"name":"poll_write_ready","qualname":"<AsyncFd<T>>::poll_write_ready","value":"pub fn poll_write_ready<'a>(&'a Self, &mut Context)\n-> Poll<io::Result<AsyncFdReadyGuard>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for write readiness.","sig":null,"attributes":[{"value":"/ Polls for write readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064297,"byte_end":10064327,"line_start":310,"line_end":310,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064332,"byte_end":10064335,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ If the file descriptor is not currently ready for writing, this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064340,"byte_end":10064414,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/ will store a clone of the [`Waker`] from the provided [`Context`]. When the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064419,"byte_end":10064498,"line_start":313,"line_end":313,"column_start":5,"column_end":84}},{"value":"/ file descriptor becomes ready for writing, [`Waker::wake`] will be called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064503,"byte_end":10064581,"line_start":314,"line_end":314,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064586,"byte_end":10064589,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to [`poll_write_ready`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064594,"byte_end":10064652,"line_start":316,"line_end":316,"column_start":5,"column_end":63}},{"value":"/ [`poll_write_ready_mut`], only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064657,"byte_end":10064736,"line_start":317,"line_end":317,"column_start":5,"column_end":84}},{"value":"/ most recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064741,"byte_end":10064805,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/ [`poll_read_ready`] retains a second, independent waker).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064810,"byte_end":10064871,"line_start":319,"line_end":319,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064876,"byte_end":10064879,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This method is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064884,"byte_end":10064957,"line_start":321,"line_end":321,"column_start":5,"column_end":78}},{"value":"/ via [`writable`] is not feasible. Where possible, using [`writable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10064962,"byte_end":10065037,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065042,"byte_end":10065110,"line_start":323,"line_end":323,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065115,"byte_end":10065118,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ This method takes `&self`, so it is possible to call this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065123,"byte_end":10065191,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ concurrently with other methods on this struct. This method only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065196,"byte_end":10065264,"line_start":326,"line_end":326,"column_start":5,"column_end":73}},{"value":"/ provides shared access to the inner IO resource when handling the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065269,"byte_end":10065338,"line_start":327,"line_end":327,"column_start":5,"column_end":74}},{"value":"/ [`AsyncFdReadyGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065343,"byte_end":10065369,"line_start":328,"line_end":328,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065374,"byte_end":10065377,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ [`poll_read_ready`]: method@Self::poll_read_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065382,"byte_end":10065435,"line_start":330,"line_end":330,"column_start":5,"column_end":58}},{"value":"/ [`poll_write_ready`]: method@Self::poll_write_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065440,"byte_end":10065495,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/ [`poll_write_ready_mut`]: method@Self::poll_write_ready_mut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065500,"byte_end":10065563,"line_start":332,"line_end":332,"column_start":5,"column_end":68}},{"value":"/ [`writable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065568,"byte_end":10065607,"line_start":333,"line_end":333,"column_start":5,"column_end":44}},{"value":"/ [`Context`]: struct@std::task::Context","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065612,"byte_end":10065654,"line_start":334,"line_end":334,"column_start":5,"column_end":47}},{"value":"/ [`Waker`]: struct@std::task::Waker","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065659,"byte_end":10065697,"line_start":335,"line_end":335,"column_start":5,"column_end":43}},{"value":"/ [`Waker::wake`]: method@std::task::Waker::wake","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10065702,"byte_end":10065752,"line_start":336,"line_end":336,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067452,"byte_end":10067472,"line_start":375,"line_end":375,"column_start":12,"column_end":32},"name":"poll_write_ready_mut","qualname":"<AsyncFd<T>>::poll_write_ready_mut","value":"pub fn poll_write_ready_mut<'a>(&'a mut Self, &mut Context)\n-> Poll<io::Result<AsyncFdReadyMutGuard>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for write readiness.","sig":null,"attributes":[{"value":"/ Polls for write readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066087,"byte_end":10066117,"line_start":350,"line_end":350,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066122,"byte_end":10066125,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ If the file descriptor is not currently ready for writing, this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066130,"byte_end":10066204,"line_start":352,"line_end":352,"column_start":5,"column_end":79}},{"value":"/ will store a clone of the [`Waker`] from the provided [`Context`]. When the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066209,"byte_end":10066288,"line_start":353,"line_end":353,"column_start":5,"column_end":84}},{"value":"/ file descriptor becomes ready for writing, [`Waker::wake`] will be called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066293,"byte_end":10066371,"line_start":354,"line_end":354,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066376,"byte_end":10066379,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to [`poll_write_ready`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066384,"byte_end":10066442,"line_start":356,"line_end":356,"column_start":5,"column_end":63}},{"value":"/ [`poll_write_ready_mut`], only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066447,"byte_end":10066526,"line_start":357,"line_end":357,"column_start":5,"column_end":84}},{"value":"/ most recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066531,"byte_end":10066595,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/ [`poll_read_ready`] retains a second, independent waker).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066600,"byte_end":10066661,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066666,"byte_end":10066669,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This method is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066674,"byte_end":10066747,"line_start":361,"line_end":361,"column_start":5,"column_end":78}},{"value":"/ via [`writable`] is not feasible. Where possible, using [`writable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066752,"byte_end":10066827,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066832,"byte_end":10066900,"line_start":363,"line_end":363,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066905,"byte_end":10066908,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This method takes `&mut self`, so it is possible to access the inner IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066913,"byte_end":10066988,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ resource mutably when handling the [`AsyncFdReadyMutGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10066993,"byte_end":10067057,"line_start":366,"line_end":366,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067062,"byte_end":10067065,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ [`poll_read_ready`]: method@Self::poll_read_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067070,"byte_end":10067123,"line_start":368,"line_end":368,"column_start":5,"column_end":58}},{"value":"/ [`poll_write_ready`]: method@Self::poll_write_ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067128,"byte_end":10067183,"line_start":369,"line_end":369,"column_start":5,"column_end":60}},{"value":"/ [`poll_write_ready_mut`]: method@Self::poll_write_ready_mut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067188,"byte_end":10067251,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ [`writable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067256,"byte_end":10067295,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ [`Context`]: struct@std::task::Context","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067300,"byte_end":10067342,"line_start":372,"line_end":372,"column_start":5,"column_end":47}},{"value":"/ [`Waker`]: struct@std::task::Waker","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067347,"byte_end":10067385,"line_start":373,"line_end":373,"column_start":5,"column_end":43}},{"value":"/ [`Waker::wake`]: method@std::task::Waker::wake","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10067390,"byte_end":10067440,"line_start":374,"line_end":374,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068882,"byte_end":10068890,"line_start":418,"line_end":418,"column_start":18,"column_end":26},"name":"readable","qualname":"<AsyncFd<T>>::readable","value":"pub async fn readable<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Waits for the file descriptor to become readable, returning a\n [`AsyncFdReadyGuard`] that must be dropped to resume read-readiness\n polling.","sig":null,"attributes":[{"value":"/ Waits for the file descriptor to become readable, returning a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068362,"byte_end":10068427,"line_start":409,"line_end":409,"column_start":5,"column_end":70}},{"value":"/ [`AsyncFdReadyGuard`] that must be dropped to resume read-readiness","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068432,"byte_end":10068503,"line_start":410,"line_end":410,"column_start":5,"column_end":76}},{"value":"/ polling.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068508,"byte_end":10068520,"line_start":411,"line_end":411,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068525,"byte_end":10068528,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ This method takes `&self`, so it is possible to call this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068533,"byte_end":10068601,"line_start":413,"line_end":413,"column_start":5,"column_end":73}},{"value":"/ concurrently with other methods on this struct. This method only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068606,"byte_end":10068674,"line_start":414,"line_end":414,"column_start":5,"column_end":73}},{"value":"/ provides shared access to the inner IO resource when handling the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068679,"byte_end":10068748,"line_start":415,"line_end":415,"column_start":5,"column_end":74}},{"value":"/ [`AsyncFdReadyGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068753,"byte_end":10068779,"line_start":416,"line_end":416,"column_start":5,"column_end":31}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10068784,"byte_end":10068820,"line_start":417,"line_end":417,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069428,"byte_end":10069440,"line_start":429,"line_end":429,"column_start":18,"column_end":30},"name":"readable_mut","qualname":"<AsyncFd<T>>::readable_mut","value":"pub async fn readable_mut<'a>(&'a mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Waits for the file descriptor to become readable, returning a\n [`AsyncFdReadyMutGuard`] that must be dropped to resume read-readiness\n polling.","sig":null,"attributes":[{"value":"/ Waits for the file descriptor to become readable, returning a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069007,"byte_end":10069072,"line_start":422,"line_end":422,"column_start":5,"column_end":70}},{"value":"/ [`AsyncFdReadyMutGuard`] that must be dropped to resume read-readiness","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069077,"byte_end":10069151,"line_start":423,"line_end":423,"column_start":5,"column_end":79}},{"value":"/ polling.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069156,"byte_end":10069168,"line_start":424,"line_end":424,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069173,"byte_end":10069176,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ This method takes `&mut self`, so it is possible to access the inner IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069181,"byte_end":10069256,"line_start":426,"line_end":426,"column_start":5,"column_end":80}},{"value":"/ resource mutably when handling the [`AsyncFdReadyMutGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069261,"byte_end":10069325,"line_start":427,"line_end":427,"column_start":5,"column_end":69}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069330,"byte_end":10069366,"line_start":428,"line_end":428,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070089,"byte_end":10070097,"line_start":442,"line_end":442,"column_start":18,"column_end":26},"name":"writable","qualname":"<AsyncFd<T>>::writable","value":"pub async fn writable<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Waits for the file descriptor to become writable, returning a\n [`AsyncFdReadyGuard`] that must be dropped to resume write-readiness\n polling.","sig":null,"attributes":[{"value":"/ Waits for the file descriptor to become writable, returning a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069568,"byte_end":10069633,"line_start":433,"line_end":433,"column_start":5,"column_end":70}},{"value":"/ [`AsyncFdReadyGuard`] that must be dropped to resume write-readiness","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069638,"byte_end":10069710,"line_start":434,"line_end":434,"column_start":5,"column_end":77}},{"value":"/ polling.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069715,"byte_end":10069727,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069732,"byte_end":10069735,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method takes `&self`, so it is possible to call this method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069740,"byte_end":10069808,"line_start":437,"line_end":437,"column_start":5,"column_end":73}},{"value":"/ concurrently with other methods on this struct. This method only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069813,"byte_end":10069881,"line_start":438,"line_end":438,"column_start":5,"column_end":73}},{"value":"/ provides shared access to the inner IO resource when handling the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069886,"byte_end":10069955,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/ [`AsyncFdReadyGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069960,"byte_end":10069986,"line_start":440,"line_end":440,"column_start":5,"column_end":31}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10069991,"byte_end":10070027,"line_start":441,"line_end":441,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070636,"byte_end":10070648,"line_start":453,"line_end":453,"column_start":18,"column_end":30},"name":"writable_mut","qualname":"<AsyncFd<T>>::writable_mut","value":"pub async fn writable_mut<'a>(&'a mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Waits for the file descriptor to become writable, returning a\n [`AsyncFdReadyMutGuard`] that must be dropped to resume write-readiness\n polling.","sig":null,"attributes":[{"value":"/ Waits for the file descriptor to become writable, returning a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070214,"byte_end":10070279,"line_start":446,"line_end":446,"column_start":5,"column_end":70}},{"value":"/ [`AsyncFdReadyMutGuard`] that must be dropped to resume write-readiness","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070284,"byte_end":10070359,"line_start":447,"line_end":447,"column_start":5,"column_end":80}},{"value":"/ polling.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070364,"byte_end":10070376,"line_start":448,"line_end":448,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070381,"byte_end":10070384,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ This method takes `&mut self`, so it is possible to access the inner IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070389,"byte_end":10070464,"line_start":450,"line_end":450,"column_start":5,"column_end":80}},{"value":"/ resource mutably when handling the [`AsyncFdReadyMutGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070469,"byte_end":10070533,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070538,"byte_end":10070574,"line_start":452,"line_end":452,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071878,"byte_end":10071889,"line_start":489,"line_end":489,"column_start":12,"column_end":23},"name":"clear_ready","qualname":"<AsyncFdReadyGuard>::clear_ready","value":"pub fn clear_ready(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Indicates to tokio that the file descriptor is no longer ready. The\n internal readiness flag will be cleared, and tokio will wait for the\n next edge-triggered readiness notification from the OS.","sig":null,"attributes":[{"value":"/ Indicates to tokio that the file descriptor is no longer ready. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071324,"byte_end":10071395,"line_start":479,"line_end":479,"column_start":5,"column_end":76}},{"value":"/ internal readiness flag will be cleared, and tokio will wait for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071400,"byte_end":10071472,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/ next edge-triggered readiness notification from the OS.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071477,"byte_end":10071536,"line_start":481,"line_end":481,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071541,"byte_end":10071544,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ It is critical that this function not be called unless your code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071549,"byte_end":10071617,"line_start":483,"line_end":483,"column_start":5,"column_end":73}},{"value":"/ _actually observes_ that the file descriptor is _not_ ready. Do not call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071622,"byte_end":10071698,"line_start":484,"line_end":484,"column_start":5,"column_end":81}},{"value":"/ it simply because, for example, a read succeeded; it should be called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071703,"byte_end":10071776,"line_start":485,"line_end":485,"column_start":5,"column_end":78}},{"value":"/ when a read is observed to block.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071781,"byte_end":10071818,"line_start":486,"line_end":486,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071823,"byte_end":10071826,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ [`drop`]: method@std::mem::drop","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071831,"byte_end":10071866,"line_start":488,"line_end":488,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072290,"byte_end":10072302,"line_start":500,"line_end":500,"column_start":12,"column_end":24},"name":"retain_ready","qualname":"<AsyncFdReadyGuard>::retain_ready","value":"pub fn retain_ready(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" This method should be invoked when you intentionally want to keep the\n ready flag asserted.","sig":null,"attributes":[{"value":"/ This method should be invoked when you intentionally want to keep the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072036,"byte_end":10072109,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/ ready flag asserted.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072114,"byte_end":10072138,"line_start":496,"line_end":496,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072143,"byte_end":10072146,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ While this function is itself a no-op, it satisfies the `#[must_use]`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072151,"byte_end":10072224,"line_start":498,"line_end":498,"column_start":5,"column_end":78}},{"value":"/ constraint on the [`AsyncFdReadyGuard`] type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072229,"byte_end":10072278,"line_start":499,"line_end":499,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073253,"byte_end":10073259,"line_start":520,"line_end":520,"column_start":12,"column_end":18},"name":"try_io","qualname":"<AsyncFdReadyGuard>::try_io","value":"pub fn try_io<R,\n              impl FnOnce(&AsyncFd<Inner>) -> io::Result<R>: FnOnce(&AsyncFd<Inner>)\n              ->\n              io::Result<R>>(&mut Self,\n                             impl FnOnce(&AsyncFd<Inner>) -> io::Result<R>)\n-> Result<io::Result<R>, TryIoError>","parent":null,"children":[],"decl_id":null,"docs":" Performs the provided IO operation.","sig":null,"attributes":[{"value":"/ Performs the provided IO operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072344,"byte_end":10072383,"line_start":504,"line_end":504,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072388,"byte_end":10072391,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ If `f` returns a [`WouldBlock`] error, the readiness state associated","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072396,"byte_end":10072469,"line_start":506,"line_end":506,"column_start":5,"column_end":78}},{"value":"/ with this file descriptor is cleared, and the method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072474,"byte_end":10072538,"line_start":507,"line_end":507,"column_start":5,"column_end":69}},{"value":"/ `Err(TryIoError::WouldBlock)`. You will typically need to poll the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072543,"byte_end":10072613,"line_start":508,"line_end":508,"column_start":5,"column_end":75}},{"value":"/ `AsyncFd` again when this happens.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072618,"byte_end":10072656,"line_start":509,"line_end":509,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072661,"byte_end":10072664,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ This method helps ensure that the readiness state of the underlying file","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072669,"byte_end":10072745,"line_start":511,"line_end":511,"column_start":5,"column_end":81}},{"value":"/ descriptor remains in sync with the tokio-side readiness state, by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072750,"byte_end":10072820,"line_start":512,"line_end":512,"column_start":5,"column_end":75}},{"value":"/ clearing the tokio-side state only when a [`WouldBlock`] condition","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072825,"byte_end":10072895,"line_start":513,"line_end":513,"column_start":5,"column_end":75}},{"value":"/ occurs. It is the responsibility of the caller to ensure that `f`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072900,"byte_end":10072969,"line_start":514,"line_end":514,"column_start":5,"column_end":74}},{"value":"/ returns [`WouldBlock`] only if the file descriptor that originated this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10072974,"byte_end":10073049,"line_start":515,"line_end":515,"column_start":5,"column_end":80}},{"value":"/ `AsyncFdReadyGuard` no longer expresses the readiness state that was queried to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073054,"byte_end":10073137,"line_start":516,"line_end":516,"column_start":5,"column_end":88}},{"value":"/ create this `AsyncFdReadyGuard`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073142,"byte_end":10073178,"line_start":517,"line_end":517,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073183,"byte_end":10073186,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ [`WouldBlock`]: std::io::ErrorKind::WouldBlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073191,"byte_end":10073241,"line_start":519,"line_end":519,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074365,"byte_end":10074376,"line_start":550,"line_end":550,"column_start":12,"column_end":23},"name":"clear_ready","qualname":"<AsyncFdReadyMutGuard>::clear_ready","value":"pub fn clear_ready(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Indicates to tokio that the file descriptor is no longer ready. The\n internal readiness flag will be cleared, and tokio will wait for the\n next edge-triggered readiness notification from the OS.","sig":null,"attributes":[{"value":"/ Indicates to tokio that the file descriptor is no longer ready. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073811,"byte_end":10073882,"line_start":540,"line_end":540,"column_start":5,"column_end":76}},{"value":"/ internal readiness flag will be cleared, and tokio will wait for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073887,"byte_end":10073959,"line_start":541,"line_end":541,"column_start":5,"column_end":77}},{"value":"/ next edge-triggered readiness notification from the OS.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073964,"byte_end":10074023,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074028,"byte_end":10074031,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ It is critical that this function not be called unless your code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074036,"byte_end":10074104,"line_start":544,"line_end":544,"column_start":5,"column_end":73}},{"value":"/ _actually observes_ that the file descriptor is _not_ ready. Do not call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074109,"byte_end":10074185,"line_start":545,"line_end":545,"column_start":5,"column_end":81}},{"value":"/ it simply because, for example, a read succeeded; it should be called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074190,"byte_end":10074263,"line_start":546,"line_end":546,"column_start":5,"column_end":78}},{"value":"/ when a read is observed to block.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074268,"byte_end":10074305,"line_start":547,"line_end":547,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074310,"byte_end":10074313,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ [`drop`]: method@std::mem::drop","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074318,"byte_end":10074353,"line_start":549,"line_end":549,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074777,"byte_end":10074789,"line_start":561,"line_end":561,"column_start":12,"column_end":24},"name":"retain_ready","qualname":"<AsyncFdReadyMutGuard>::retain_ready","value":"pub fn retain_ready(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" This method should be invoked when you intentionally want to keep the\n ready flag asserted.","sig":null,"attributes":[{"value":"/ This method should be invoked when you intentionally want to keep the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074523,"byte_end":10074596,"line_start":556,"line_end":556,"column_start":5,"column_end":78}},{"value":"/ ready flag asserted.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074601,"byte_end":10074625,"line_start":557,"line_end":557,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074630,"byte_end":10074633,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ While this function is itself a no-op, it satisfies the `#[must_use]`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074638,"byte_end":10074711,"line_start":559,"line_end":559,"column_start":5,"column_end":78}},{"value":"/ constraint on the [`AsyncFdReadyGuard`] type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074716,"byte_end":10074765,"line_start":560,"line_end":560,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075740,"byte_end":10075746,"line_start":581,"line_end":581,"column_start":12,"column_end":18},"name":"try_io","qualname":"<AsyncFdReadyMutGuard>::try_io","value":"pub fn try_io<R,\n              impl FnOnce(&mut AsyncFd<Inner>) -> io::Result<R>: FnOnce(&mut AsyncFd<Inner>)\n              ->\n              io::Result<R>>(&mut Self,\n                             impl FnOnce(&mut AsyncFd<Inner>) -> io::Result<R>)\n-> Result<io::Result<R>, TryIoError>","parent":null,"children":[],"decl_id":null,"docs":" Performs the provided IO operation.","sig":null,"attributes":[{"value":"/ Performs the provided IO operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074831,"byte_end":10074870,"line_start":565,"line_end":565,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074875,"byte_end":10074878,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ If `f` returns a [`WouldBlock`] error, the readiness state associated","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074883,"byte_end":10074956,"line_start":567,"line_end":567,"column_start":5,"column_end":78}},{"value":"/ with this file descriptor is cleared, and the method returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10074961,"byte_end":10075025,"line_start":568,"line_end":568,"column_start":5,"column_end":69}},{"value":"/ `Err(TryIoError::WouldBlock)`. You will typically need to poll the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075030,"byte_end":10075100,"line_start":569,"line_end":569,"column_start":5,"column_end":75}},{"value":"/ `AsyncFd` again when this happens.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075105,"byte_end":10075143,"line_start":570,"line_end":570,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075148,"byte_end":10075151,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This method helps ensure that the readiness state of the underlying file","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075156,"byte_end":10075232,"line_start":572,"line_end":572,"column_start":5,"column_end":81}},{"value":"/ descriptor remains in sync with the tokio-side readiness state, by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075237,"byte_end":10075307,"line_start":573,"line_end":573,"column_start":5,"column_end":75}},{"value":"/ clearing the tokio-side state only when a [`WouldBlock`] condition","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075312,"byte_end":10075382,"line_start":574,"line_end":574,"column_start":5,"column_end":75}},{"value":"/ occurs. It is the responsibility of the caller to ensure that `f`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075387,"byte_end":10075456,"line_start":575,"line_end":575,"column_start":5,"column_end":74}},{"value":"/ returns [`WouldBlock`] only if the file descriptor that originated this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075461,"byte_end":10075536,"line_start":576,"line_end":576,"column_start":5,"column_end":80}},{"value":"/ `AsyncFdReadyGuard` no longer expresses the readiness state that was queried to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075541,"byte_end":10075624,"line_start":577,"line_end":577,"column_start":5,"column_end":88}},{"value":"/ create this `AsyncFdReadyGuard`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075629,"byte_end":10075665,"line_start":578,"line_end":578,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075670,"byte_end":10075673,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ [`WouldBlock`]: std::io::ErrorKind::WouldBlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10075678,"byte_end":10075728,"line_start":580,"line_end":580,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10077056,"byte_end":10077066,"line_start":623,"line_end":623,"column_start":12,"column_end":22},"name":"TryIoError","qualname":"::io::async_fd::TryIoError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned by [`try_io`].","sig":null,"attributes":[{"value":"/ The error type returned by [`try_io`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076798,"byte_end":10076840,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076841,"byte_end":10076844,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ This error indicates that the IO resource returned a [`WouldBlock`] error.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076845,"byte_end":10076923,"line_start":618,"line_end":618,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076924,"byte_end":10076927,"line_start":619,"line_end":619,"column_start":1,"column_end":4}},{"value":"/ [`WouldBlock`]: std::io::ErrorKind::WouldBlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076928,"byte_end":10076978,"line_start":620,"line_end":620,"column_start":1,"column_end":51}},{"value":"/ [`try_io`]: method@AsyncFdReadyGuard::try_io","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076979,"byte_end":10077027,"line_start":621,"line_end":621,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":1230},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","byte_start":41191,"byte_end":41195,"line_start":223,"line_end":223,"column_start":13,"column_end":17},"name":"unix","qualname":"::io::unix","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/mod.rs","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235}],"decl_id":null,"docs":" Asynchronous IO structures specific to Unix-like operating systems.\n","sig":null,"attributes":[{"value":"cfg(all(unix, feature = \"net\"))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21623,"byte_end":21657,"line_start":179,"line_end":179,"column_start":13,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1348},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10077669,"byte_end":10077677,"line_start":20,"line_end":20,"column_start":16,"column_end":24},"name":"ReadHalf","qualname":"::io::split::ReadHalf","value":"ReadHalf {  }","parent":null,"children":[{"krate":0,"index":1350}],"decl_id":null,"docs":" The readable half of a value returned from [`split`](split()).\n","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10077806,"byte_end":10077815,"line_start":25,"line_end":25,"column_start":16,"column_end":25},"name":"WriteHalf","qualname":"::io::split::WriteHalf","value":"WriteHalf {  }","parent":null,"children":[{"krate":0,"index":1353}],"decl_id":null,"docs":" The writable half of a value returned from [`split`](split()).\n","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078129,"byte_end":10078134,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"split","qualname":"::io::split::split","value":"pub fn split<T>(T) -> (ReadHalf<T>, WriteHalf<T>) where T: AsyncRead +\nAsyncWrite","parent":null,"children":[],"decl_id":null,"docs":" Splits a single value implementing `AsyncRead + AsyncWrite` into separate\n `AsyncRead` and `AsyncWrite` handles.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078760,"byte_end":10078770,"line_start":65,"line_end":65,"column_start":12,"column_end":22},"name":"is_pair_of","qualname":"<ReadHalf<T>>::is_pair_of","value":"pub fn is_pair_of(&Self, &WriteHalf<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if this `ReadHalf` and some `WriteHalf` were split from the same\n stream.\n","sig":null,"attributes":[{"value":"/ Checks if this `ReadHalf` and some `WriteHalf` were split from the same","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078657,"byte_end":10078732,"line_start":63,"line_end":63,"column_start":5,"column_end":80}},{"value":"/ stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078737,"byte_end":10078748,"line_start":64,"line_end":64,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079177,"byte_end":10079184,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"unsplit","qualname":"<ReadHalf<T>>::unsplit","value":"pub fn unsplit(Self, WriteHalf<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reunites with a previously split `WriteHalf`.","sig":null,"attributes":[{"value":"/ Reunites with a previously split `WriteHalf`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078853,"byte_end":10078902,"line_start":69,"line_end":69,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078907,"byte_end":10078910,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078915,"byte_end":10078927,"line_start":71,"line_end":71,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078932,"byte_end":10078935,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ If this `ReadHalf` and the given `WriteHalf` do not originate from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078940,"byte_end":10079014,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ same `split` operation this method will panic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079019,"byte_end":10079069,"line_start":74,"line_end":74,"column_start":5,"column_end":55}},{"value":"/ This can be checked ahead of time by comparing the stream ID","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079074,"byte_end":10079138,"line_start":75,"line_end":75,"column_start":5,"column_end":69}},{"value":"/ of the two halves.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079143,"byte_end":10079165,"line_start":76,"line_end":76,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079685,"byte_end":10079695,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"is_pair_of","qualname":"<WriteHalf<T>>::is_pair_of","value":"pub fn is_pair_of(&Self, &ReadHalf<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this `WriteHalf` and some `ReadHalf` were split from the same\n stream.\n","sig":null,"attributes":[{"value":"/ Check if this `WriteHalf` and some `ReadHalf` were split from the same","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079583,"byte_end":10079657,"line_start":93,"line_end":93,"column_start":5,"column_end":79}},{"value":"/ stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079662,"byte_end":10079673,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":9841},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/seek.rs","byte_start":10082501,"byte_end":10082505,"line_start":14,"line_end":14,"column_start":16,"column_end":20},"name":"Seek","qualname":"::io::seek::Seek","value":"Seek {  }","parent":null,"children":[{"krate":0,"index":9844},{"krate":0,"index":9845},{"krate":0,"index":9846}],"decl_id":null,"docs":" Future for the [`seek`](crate::io::AsyncSeekExt::seek) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10085729,"byte_end":10085744,"line_start":11,"line_end":11,"column_start":15,"column_end":30},"name":"AsyncBufReadExt","qualname":"::io::util::async_buf_read_ext::AsyncBufReadExt","value":"AsyncBufReadExt: AsyncBufRead","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2116}],"decl_id":null,"docs":" An extension trait which adds utility methods to [`AsyncBufRead`] types.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10088454,"byte_end":10088464,"line_start":81,"line_end":81,"column_start":12,"column_end":22},"name":"read_until","qualname":"::io::util::async_buf_read_ext::AsyncBufReadExt::read_until","value":"pub fn read_until<'a>(&'a mut Self, u8, &'a mut Vec<u8>) -> ReadUntil where\nSelf: Unpin","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Reads all bytes into `buf` until the delimiter `byte` or EOF is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10091355,"byte_end":10091364,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"read_line","qualname":"::io::util::async_buf_read_ext::AsyncBufReadExt::read_line","value":"pub fn read_line<'a>(&'a mut Self, &'a mut String) -> ReadLine where\nSelf: Unpin","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Reads all bytes until a newline (the 0xA byte) is reached, and append\n them to the provided buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10092764,"byte_end":10092769,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"split","qualname":"::io::util::async_buf_read_ext::AsyncBufReadExt::split","value":"pub fn split(Self, u8) -> Split<Self> where Self: Sized + Unpin","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns a stream of the contents of this reader split on the byte\n `byte`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10094609,"byte_end":10094614,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"lines","qualname":"::io::util::async_buf_read_ext::AsyncBufReadExt::lines","value":"pub fn lines(Self) -> Lines<Self> where Self: Sized","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns a stream over the lines of this reader.\n This method is the async equivalent to [`BufRead::lines`](std::io::BufRead::lines).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10096687,"byte_end":10096699,"line_start":61,"line_end":61,"column_start":15,"column_end":27},"name":"AsyncReadExt","qualname":"::io::util::async_read_ext::AsyncReadExt","value":"AsyncReadExt: AsyncRead","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2121},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2137},{"krate":0,"index":2139},{"krate":0,"index":2141},{"krate":0,"index":2143},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2155},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2165},{"krate":0,"index":2167},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2132}],"decl_id":null,"docs":" Reads bytes from a source.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10097819,"byte_end":10097824,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"chain","qualname":"::io::util::async_read_ext::AsyncReadExt::chain","value":"pub fn chain<R>(Self, R) -> Chain<Self, R> where Self: Sized, R: AsyncRead","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Creates a new `AsyncRead` instance that chains this stream with\n `next`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10100653,"byte_end":10100657,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"read","qualname":"::io::util::async_read_ext::AsyncReadExt::read","value":"pub fn read<'a>(&'a mut Self, &'a mut [u8]) -> Read where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Pulls some bytes from this source into the specified buffer,\n returning how many bytes were read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10102960,"byte_end":10102968,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"read_buf","qualname":"::io::util::async_read_ext::AsyncReadExt::read_buf","value":"pub fn read_buf<'a, B>(&'a mut Self, &'a mut B) -> ReadBuf where Self: Sized +\nUnpin, B: BufMut","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Pulls some bytes from this source into the specified buffer,\n advancing the buffer's internal cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10104865,"byte_end":10104875,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"read_exact","qualname":"::io::util::async_read_ext::AsyncReadExt::read_exact","value":"pub fn read_exact<'a>(&'a mut Self, &'a mut [u8]) -> ReadExact where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads the exact number of bytes required to fill `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10106312,"byte_end":10106319,"line_start":321,"line_end":321,"column_start":16,"column_end":23},"name":"read_u8","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u8","value":"pub fn read_u8<'a>(&'a mut Self) -> ReadU8<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10107608,"byte_end":10107615,"line_start":359,"line_end":359,"column_start":16,"column_end":23},"name":"read_i8","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i8","value":"pub fn read_i8<'a>(&'a mut Self) -> ReadI8<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10108946,"byte_end":10108954,"line_start":397,"line_end":397,"column_start":16,"column_end":24},"name":"read_u16","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u16","value":"pub fn read_u16<'a>(&'a mut Self) -> ReadU16<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 16-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10110294,"byte_end":10110302,"line_start":435,"line_end":435,"column_start":16,"column_end":24},"name":"read_i16","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i16","value":"pub fn read_i16<'a>(&'a mut Self) -> ReadI16<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads a signed 16-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10111583,"byte_end":10111591,"line_start":472,"line_end":472,"column_start":16,"column_end":24},"name":"read_u32","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u32","value":"pub fn read_u32<'a>(&'a mut Self) -> ReadU32<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 32-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10112886,"byte_end":10112894,"line_start":510,"line_end":510,"column_start":16,"column_end":24},"name":"read_i32","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i32","value":"pub fn read_i32<'a>(&'a mut Self) -> ReadI32<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads a signed 32-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10114257,"byte_end":10114265,"line_start":549,"line_end":549,"column_start":16,"column_end":24},"name":"read_u64","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u64","value":"pub fn read_u64<'a>(&'a mut Self) -> ReadU64<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 64-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10115558,"byte_end":10115566,"line_start":586,"line_end":586,"column_start":16,"column_end":24},"name":"read_i64","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i64","value":"pub fn read_i64<'a>(&'a mut Self) -> ReadI64<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an signed 64-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10117026,"byte_end":10117035,"line_start":626,"line_end":626,"column_start":16,"column_end":25},"name":"read_u128","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u128","value":"pub fn read_u128<'a>(&'a mut Self) -> ReadU128<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 128-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10118429,"byte_end":10118438,"line_start":666,"line_end":666,"column_start":16,"column_end":25},"name":"read_i128","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i128","value":"pub fn read_i128<'a>(&'a mut Self) -> ReadI128<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an signed 128-bit integer in big-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10119785,"byte_end":10119796,"line_start":704,"line_end":704,"column_start":16,"column_end":27},"name":"read_u16_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u16_le","value":"pub fn read_u16_le<'a>(&'a mut Self) -> ReadU16Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 16-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10121157,"byte_end":10121168,"line_start":742,"line_end":742,"column_start":16,"column_end":27},"name":"read_i16_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i16_le","value":"pub fn read_i16_le<'a>(&'a mut Self) -> ReadI16Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads a signed 16-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10122469,"byte_end":10122480,"line_start":779,"line_end":779,"column_start":16,"column_end":27},"name":"read_u32_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u32_le","value":"pub fn read_u32_le<'a>(&'a mut Self) -> ReadU32Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 32-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2159},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10123792,"byte_end":10123803,"line_start":817,"line_end":817,"column_start":16,"column_end":27},"name":"read_i32_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i32_le","value":"pub fn read_i32_le<'a>(&'a mut Self) -> ReadI32Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads a signed 32-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10125184,"byte_end":10125195,"line_start":856,"line_end":856,"column_start":16,"column_end":27},"name":"read_u64_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u64_le","value":"pub fn read_u64_le<'a>(&'a mut Self) -> ReadU64Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 64-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2163},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10126489,"byte_end":10126500,"line_start":893,"line_end":893,"column_start":16,"column_end":27},"name":"read_i64_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i64_le","value":"pub fn read_i64_le<'a>(&'a mut Self) -> ReadI64Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an signed 64-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10127978,"byte_end":10127990,"line_start":933,"line_end":933,"column_start":16,"column_end":28},"name":"read_u128_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_u128_le","value":"pub fn read_u128_le<'a>(&'a mut Self) -> ReadU128Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an unsigned 128-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10129384,"byte_end":10129396,"line_start":973,"line_end":973,"column_start":16,"column_end":28},"name":"read_i128_le","qualname":"::io::util::async_read_ext::AsyncReadExt::read_i128_le","value":"pub fn read_i128_le<'a>(&'a mut Self) -> ReadI128Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads an signed 128-bit integer in little-endian order from the\n underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10131055,"byte_end":10131066,"line_start":1021,"line_end":1021,"column_start":12,"column_end":23},"name":"read_to_end","qualname":"::io::util::async_read_ext::AsyncReadExt::read_to_end","value":"pub fn read_to_end<'a>(&'a mut Self, &'a mut Vec<u8>) -> ReadToEnd where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads all bytes until EOF in this source, placing them into `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10132621,"byte_end":10132635,"line_start":1068,"line_end":1068,"column_start":12,"column_end":26},"name":"read_to_string","qualname":"::io::util::async_read_ext::AsyncReadExt::read_to_string","value":"pub fn read_to_string<'a>(&'a mut Self, &'a mut String) -> ReadToString where\nSelf: Unpin","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Reads all bytes until EOF in this source, appending them to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10133927,"byte_end":10133931,"line_start":1106,"line_end":1106,"column_start":12,"column_end":16},"name":"take","qualname":"::io::util::async_read_ext::AsyncReadExt::take","value":"pub fn take(Self, u64) -> Take<Self> where Self: Sized","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Creates an adaptor which reads at most `limit` bytes from it.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_seek_ext.rs","byte_start":10135019,"byte_end":10135031,"line_start":33,"line_end":33,"column_start":15,"column_end":27},"name":"AsyncSeekExt","qualname":"::io::util::async_seek_ext::AsyncSeekExt","value":"AsyncSeekExt: AsyncSeek","parent":null,"children":[{"krate":0,"index":2170}],"decl_id":null,"docs":" An extension trait that adds utility methods to [`AsyncSeek`] types.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_seek_ext.rs","byte_start":10136027,"byte_end":10136031,"line_start":63,"line_end":63,"column_start":12,"column_end":16},"name":"seek","qualname":"::io::util::async_seek_ext::AsyncSeekExt::seek","value":"pub fn seek(&mut Self, SeekFrom) -> Seek<, Self> where Self: Unpin","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Creates a future which will seek an IO object, and then yield the\n new position in the object and the object itself.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10138155,"byte_end":10138168,"line_start":65,"line_end":65,"column_start":15,"column_end":28},"name":"AsyncWriteExt","qualname":"::io::util::async_write_ext::AsyncWriteExt","value":"AsyncWriteExt: AsyncWrite","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2180},{"krate":0,"index":2181}],"decl_id":null,"docs":" Writes bytes to a sink.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10140010,"byte_end":10140015,"line_start":112,"line_end":112,"column_start":12,"column_end":17},"name":"write","qualname":"::io::util::async_write_ext::AsyncWriteExt::write","value":"pub fn write<'a>(&'a mut Self, &'a [u8]) -> Write where Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a buffer into this writer, returning how many bytes were\n written.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10142822,"byte_end":10142831,"line_start":185,"line_end":185,"column_start":12,"column_end":21},"name":"write_buf","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_buf","value":"pub fn write_buf<'a, B>(&'a mut Self, &'a mut B) -> WriteBuf where\nSelf: Sized + Unpin, B: Buf","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a buffer into this writer, advancing the buffer's internal\n cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10144173,"byte_end":10144182,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"write_all","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_all","value":"pub fn write_all<'a>(&'a mut Self, &'a [u8]) -> WriteAll where Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Attempts to write an entire buffer into this writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10145582,"byte_end":10145590,"line_start":269,"line_end":269,"column_start":16,"column_end":24},"name":"write_u8","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u8","value":"pub fn write_u8<'a>(&'a mut Self, u8) -> WriteU8<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 8-bit integer to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10146851,"byte_end":10146859,"line_start":306,"line_end":306,"column_start":16,"column_end":24},"name":"write_i8","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i8","value":"pub fn write_i8<'a>(&'a mut Self, i8) -> WriteI8<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 8-bit integer to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10148174,"byte_end":10148183,"line_start":344,"line_end":344,"column_start":16,"column_end":25},"name":"write_u16","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u16","value":"pub fn write_u16<'a>(&'a mut Self, u16) -> WriteU16<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 16-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10149496,"byte_end":10149505,"line_start":382,"line_end":382,"column_start":16,"column_end":25},"name":"write_i16","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i16","value":"pub fn write_i16<'a>(&'a mut Self, i16) -> WriteI16<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a signed 16-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10150845,"byte_end":10150854,"line_start":420,"line_end":420,"column_start":16,"column_end":25},"name":"write_u32","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u32","value":"pub fn write_u32<'a>(&'a mut Self, u32) -> WriteU32<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 32-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10152189,"byte_end":10152198,"line_start":458,"line_end":458,"column_start":16,"column_end":25},"name":"write_i32","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i32","value":"pub fn write_i32<'a>(&'a mut Self, i32) -> WriteI32<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a signed 32-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10153575,"byte_end":10153584,"line_start":496,"line_end":496,"column_start":16,"column_end":25},"name":"write_u64","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u64","value":"pub fn write_u64<'a>(&'a mut Self, u64) -> WriteU64<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 64-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10154971,"byte_end":10154980,"line_start":534,"line_end":534,"column_start":16,"column_end":25},"name":"write_i64","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i64","value":"pub fn write_i64<'a>(&'a mut Self, i64) -> WriteI64<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an signed 64-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10156435,"byte_end":10156445,"line_start":574,"line_end":574,"column_start":16,"column_end":26},"name":"write_u128","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u128","value":"pub fn write_u128<'a>(&'a mut Self, u128) -> WriteU128<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 128-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10157835,"byte_end":10157845,"line_start":614,"line_end":614,"column_start":16,"column_end":26},"name":"write_i128","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i128","value":"pub fn write_i128<'a>(&'a mut Self, i128) -> WriteI128<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an signed 128-bit integer in big-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10159177,"byte_end":10159189,"line_start":653,"line_end":653,"column_start":16,"column_end":28},"name":"write_u16_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u16_le","value":"pub fn write_u16_le<'a>(&'a mut Self, u16) -> WriteU16Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 16-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10160516,"byte_end":10160528,"line_start":691,"line_end":691,"column_start":16,"column_end":28},"name":"write_i16_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i16_le","value":"pub fn write_i16_le<'a>(&'a mut Self, i16) -> WriteI16Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a signed 16-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10161882,"byte_end":10161894,"line_start":729,"line_end":729,"column_start":16,"column_end":28},"name":"write_u32_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u32_le","value":"pub fn write_u32_le<'a>(&'a mut Self, u32) -> WriteU32Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 32-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10163243,"byte_end":10163255,"line_start":767,"line_end":767,"column_start":16,"column_end":28},"name":"write_i32_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i32_le","value":"pub fn write_i32_le<'a>(&'a mut Self, i32) -> WriteI32Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes a signed 32-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10164646,"byte_end":10164658,"line_start":805,"line_end":805,"column_start":16,"column_end":28},"name":"write_u64_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u64_le","value":"pub fn write_u64_le<'a>(&'a mut Self, u64) -> WriteU64Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 64-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10166059,"byte_end":10166071,"line_start":843,"line_end":843,"column_start":16,"column_end":28},"name":"write_i64_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i64_le","value":"pub fn write_i64_le<'a>(&'a mut Self, i64) -> WriteI64Le<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an signed 64-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10167538,"byte_end":10167551,"line_start":883,"line_end":883,"column_start":16,"column_end":29},"name":"write_u128_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_u128_le","value":"pub fn write_u128_le<'a>(&'a mut Self, u128) -> WriteU128Le<&'a mut Self>\nwhere Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an unsigned 128-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10168953,"byte_end":10168966,"line_start":923,"line_end":923,"column_start":16,"column_end":29},"name":"write_i128_le","qualname":"::io::util::async_write_ext::AsyncWriteExt::write_i128_le","value":"pub fn write_i128_le<'a>(&'a mut Self, i128) -> WriteI128Le<&'a mut Self>\nwhere Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Writes an signed 128-bit integer in little-endian order to the\n underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10169986,"byte_end":10169991,"line_start":956,"line_end":956,"column_start":12,"column_end":17},"name":"flush","qualname":"::io::util::async_write_ext::AsyncWriteExt::flush","value":"pub fn flush(&mut Self) -> Flush<, Self> where Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Flushes this output stream, ensuring that all intermediately buffered\n contents reach their destination.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10171281,"byte_end":10171289,"line_start":995,"line_end":995,"column_start":12,"column_end":20},"name":"shutdown","qualname":"::io::util::async_write_ext::AsyncWriteExt::shutdown","value":"pub fn shutdown(&mut Self) -> Shutdown<, Self> where Self: Unpin","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":" Shuts down the output stream, ensuring that the value can be dropped\n cleanly.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9789},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172650,"byte_end":10172659,"line_start":27,"line_end":27,"column_start":16,"column_end":25},"name":"BufReader","qualname":"::io::util::buf_reader::BufReader","value":"BufReader {  }","parent":null,"children":[{"krate":0,"index":9791},{"krate":0,"index":9792},{"krate":0,"index":9793},{"krate":0,"index":9794}],"decl_id":null,"docs":" The `BufReader` struct adds buffering to any reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172995,"byte_end":10172998,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<BufReader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,\n but may change in the future.\n","sig":null,"attributes":[{"value":"/ Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172853,"byte_end":10172945,"line_start":37,"line_end":37,"column_start":5,"column_end":97}},{"value":"/ but may change in the future.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172950,"byte_end":10172983,"line_start":38,"line_end":38,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173160,"byte_end":10173173,"line_start":44,"line_end":44,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BufReader<R>>::with_capacity","value":"pub fn with_capacity(usize, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BufReader` with the specified buffer capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new `BufReader` with the specified buffer capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173083,"byte_end":10173148,"line_start":43,"line_end":43,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173527,"byte_end":10173534,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BufReader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173390,"byte_end":10173436,"line_start":54,"line_end":54,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173441,"byte_end":10173444,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173449,"byte_end":10173515,"line_start":56,"line_end":56,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173726,"byte_end":10173733,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BufReader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173581,"byte_end":10173635,"line_start":61,"line_end":61,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173640,"byte_end":10173643,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173648,"byte_end":10173714,"line_start":63,"line_end":63,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173944,"byte_end":10173955,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<BufReader<R>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut R>","parent":null,"children":[],"decl_id":null,"docs":" Gets a pinned mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Gets a pinned mutable reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173792,"byte_end":10173853,"line_start":68,"line_end":68,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173858,"byte_end":10173861,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10173866,"byte_end":10173932,"line_start":70,"line_end":70,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174186,"byte_end":10174196,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BufReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `BufReader`, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this `BufReader`, returning the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174035,"byte_end":10174098,"line_start":75,"line_end":75,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174103,"byte_end":10174106,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data in the internal buffer is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174111,"byte_end":10174174,"line_start":77,"line_end":77,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174400,"byte_end":10174406,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"buffer","qualname":"<BufReader<R>>::buffer","value":"pub fn buffer(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the internally buffered data.","sig":null,"attributes":[{"value":"/ Returns a reference to the internally buffered data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174240,"byte_end":10174296,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174301,"byte_end":10174304,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Unlike `fill_buf`, this will not attempt to fill the buffer if it is empty.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174309,"byte_end":10174388,"line_start":84,"line_end":84,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":9758},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178345,"byte_end":10178354,"line_start":19,"line_end":19,"column_start":16,"column_end":25},"name":"BufStream","qualname":"::io::util::buf_stream::BufStream","value":"BufStream {  }","parent":null,"children":[{"krate":0,"index":9760}],"decl_id":null,"docs":" Wraps a type that is [`AsyncWrite`] and [`AsyncRead`], and buffers its input and output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178633,"byte_end":10178636,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<BufStream<RW>>::new","value":"pub fn new(RW) -> BufStream<RW>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a type in both [`BufWriter`] and [`BufReader`].","sig":null,"attributes":[{"value":"/ Wraps a type in both [`BufWriter`] and [`BufReader`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178479,"byte_end":10178536,"line_start":26,"line_end":26,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178541,"byte_end":10178544,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ See the documentation for those types and [`BufStream`] for details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178549,"byte_end":10178621,"line_start":28,"line_end":28,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178968,"byte_end":10178981,"line_start":39,"line_end":39,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BufStream<RW>>::with_capacity","value":"pub fn with_capacity(usize, usize, RW) -> BufStream<RW>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BufStream` with the specified [`BufReader`] capacity and [`BufWriter`]\n capacity.","sig":null,"attributes":[{"value":"/ Creates a `BufStream` with the specified [`BufReader`] capacity and [`BufWriter`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178768,"byte_end":10178853,"line_start":35,"line_end":35,"column_start":5,"column_end":90}},{"value":"/ capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178858,"byte_end":10178871,"line_start":36,"line_end":36,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178876,"byte_end":10178879,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ See the documentation for those types and [`BufStream`] for details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178884,"byte_end":10178956,"line_start":38,"line_end":38,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179438,"byte_end":10179445,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BufStream<RW>>::get_ref","value":"pub fn get_ref(&Self) -> &RW","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying I/O object.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179293,"byte_end":10179343,"line_start":52,"line_end":52,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179348,"byte_end":10179351,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179356,"byte_end":10179426,"line_start":54,"line_end":54,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179665,"byte_end":10179672,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BufStream<RW>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut RW","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying I/O object.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179512,"byte_end":10179570,"line_start":59,"line_end":59,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179575,"byte_end":10179578,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179583,"byte_end":10179653,"line_start":61,"line_end":61,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179907,"byte_end":10179918,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<BufStream<RW>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut RW>","parent":null,"children":[],"decl_id":null,"docs":" Gets a pinned mutable reference to the underlying I/O object.","sig":null,"attributes":[{"value":"/ Gets a pinned mutable reference to the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179747,"byte_end":10179812,"line_start":66,"line_end":66,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179817,"byte_end":10179820,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10179825,"byte_end":10179895,"line_start":68,"line_end":68,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180182,"byte_end":10180192,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BufStream<RW>>::into_inner","value":"pub fn into_inner(Self) -> RW","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `BufStream`, returning the underlying I/O object.","sig":null,"attributes":[{"value":"/ Consumes this `BufStream`, returning the underlying I/O object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180027,"byte_end":10180094,"line_start":73,"line_end":73,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180099,"byte_end":10180102,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data in the internal buffer is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180107,"byte_end":10180170,"line_start":75,"line_end":75,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":9712},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10183769,"byte_end":10183778,"line_start":32,"line_end":32,"column_start":16,"column_end":25},"name":"BufWriter","qualname":"::io::util::buf_writer::BufWriter","value":"BufWriter {  }","parent":null,"children":[{"krate":0,"index":9714},{"krate":0,"index":9715},{"krate":0,"index":9716}],"decl_id":null,"docs":" Wraps a writer and buffers its output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10184086,"byte_end":10184089,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<BufWriter<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,\n but may change in the future.\n","sig":null,"attributes":[{"value":"/ Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10183944,"byte_end":10184036,"line_start":41,"line_end":41,"column_start":5,"column_end":97}},{"value":"/ but may change in the future.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10184041,"byte_end":10184074,"line_start":42,"line_end":42,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10184251,"byte_end":10184264,"line_start":48,"line_end":48,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BufWriter<W>>::with_capacity","value":"pub fn with_capacity(usize, W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BufWriter` with the specified buffer capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new `BufWriter` with the specified buffer capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10184174,"byte_end":10184239,"line_start":47,"line_end":47,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185346,"byte_end":10185353,"line_start":85,"line_end":85,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BufWriter<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185288,"byte_end":10185334,"line_start":84,"line_end":84,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185544,"byte_end":10185551,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BufWriter<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185400,"byte_end":10185454,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185459,"byte_end":10185462,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185467,"byte_end":10185532,"line_start":91,"line_end":91,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185761,"byte_end":10185772,"line_start":99,"line_end":99,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<BufWriter<W>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut W>","parent":null,"children":[],"decl_id":null,"docs":" Gets a pinned mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Gets a pinned mutable reference to the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185610,"byte_end":10185671,"line_start":96,"line_end":96,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185676,"byte_end":10185679,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185684,"byte_end":10185749,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10186003,"byte_end":10186013,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BufWriter<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `BufWriter`, returning the underlying writer.","sig":null,"attributes":[{"value":"/ Consumes this `BufWriter`, returning the underlying writer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185852,"byte_end":10185915,"line_start":103,"line_end":103,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185920,"byte_end":10185923,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data in the internal buffer is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10185928,"byte_end":10185991,"line_start":105,"line_end":105,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10186125,"byte_end":10186131,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"buffer","qualname":"<BufWriter<W>>::buffer","value":"pub fn buffer(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the internally buffered data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the internally buffered data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10186057,"byte_end":10186113,"line_start":110,"line_end":110,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":9663},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10188545,"byte_end":10188550,"line_start":13,"line_end":13,"column_start":16,"column_end":21},"name":"Chain","qualname":"::io::util::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":9666},{"krate":0,"index":9667},{"krate":0,"index":9668}],"decl_id":null,"docs":" Stream for the [`chain`](super::AsyncReadExt::chain) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10188991,"byte_end":10188998,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Chain<T, U>>::get_ref","value":"pub fn get_ref(&Self) -> (&T, &U)","parent":null,"children":[],"decl_id":null,"docs":" Gets references to the underlying readers in this `Chain`.\n","sig":null,"attributes":[{"value":"/ Gets references to the underlying readers in this `Chain`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10188917,"byte_end":10188979,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1615},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189330,"byte_end":10189337,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Chain<T, U>>::get_mut","value":"pub fn get_mut(&mut Self) -> (&mut T, &mut U)","parent":null,"children":[],"decl_id":null,"docs":" Gets mutable references to the underlying readers in this `Chain`.","sig":null,"attributes":[{"value":"/ Gets mutable references to the underlying readers in this `Chain`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189067,"byte_end":10189137,"line_start":44,"line_end":44,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189142,"byte_end":10189145,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Care should be taken to avoid modifying the internal I/O state of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189150,"byte_end":10189223,"line_start":46,"line_end":46,"column_start":5,"column_end":78}},{"value":"/ underlying readers as doing so may corrupt the internal state of this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189228,"byte_end":10189301,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/ `Chain`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189306,"byte_end":10189318,"line_start":48,"line_end":48,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189696,"byte_end":10189707,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<Chain<T, U>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> (Pin<&mut T>, Pin<&mut U>)","parent":null,"children":[],"decl_id":null,"docs":" Gets pinned mutable references to the underlying readers in this `Chain`.","sig":null,"attributes":[{"value":"/ Gets pinned mutable references to the underlying readers in this `Chain`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189426,"byte_end":10189503,"line_start":53,"line_end":53,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189508,"byte_end":10189511,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Care should be taken to avoid modifying the internal I/O state of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189516,"byte_end":10189589,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ underlying readers as doing so may corrupt the internal state of this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189594,"byte_end":10189667,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ `Chain`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189672,"byte_end":10189684,"line_start":57,"line_end":57,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1617},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189904,"byte_end":10189914,"line_start":64,"line_end":64,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Chain<T, U>>::into_inner","value":"pub fn into_inner(Self) -> (T, U)","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Chain`, returning the wrapped readers.\n","sig":null,"attributes":[{"value":"/ Consumes the `Chain`, returning the wrapped readers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10189836,"byte_end":10189892,"line_start":63,"line_end":63,"column_start":5,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":2234},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy.rs","byte_start":10193307,"byte_end":10193311,"line_start":56,"line_end":56,"column_start":18,"column_end":22},"name":"copy","qualname":"::io::util::copy::copy","value":"pub async fn copy<'a, R: ?Sized, W: ?Sized>(&'a mut R, &'a mut W)\n-> /*impl Trait*/ where R: AsyncRead + Unpin, W: AsyncWrite + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously copies the entire contents of a reader into a writer.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy_buf.rs","byte_start":10197116,"byte_end":10197124,"line_start":54,"line_end":54,"column_start":18,"column_end":26},"name":"copy_buf","qualname":"::io::util::copy_buf::copy_buf","value":"pub async fn copy_buf<'a, R: ?Sized, W: ?Sized>(&'a mut R, &'a mut W)\n-> /*impl Trait*/ where R: AsyncBufRead + Unpin, W: AsyncWrite + Unpin","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously copies the entire contents of a reader into a writer.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2258},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10198933,"byte_end":10198938,"line_start":18,"line_end":18,"column_start":16,"column_end":21},"name":"Empty","qualname":"::io::util::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":2259}],"decl_id":null,"docs":" An async reader which is always at EOF.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10199617,"byte_end":10199622,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"empty","qualname":"::io::util::empty::empty","value":"pub fn empty() -> Empty","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty async reader.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":9621},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/flush.rs","byte_start":10200863,"byte_end":10200868,"line_start":17,"line_end":17,"column_start":16,"column_end":21},"name":"Flush","qualname":"::io::util::flush::Flush","value":"Flush {  }","parent":null,"children":[{"krate":0,"index":9624},{"krate":0,"index":9625}],"decl_id":null,"docs":" A future used to fully flush an I/O object.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9571},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10201967,"byte_end":10201972,"line_start":15,"line_end":15,"column_start":16,"column_end":21},"name":"Lines","qualname":"::io::util::lines::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":9573},{"krate":0,"index":9574},{"krate":0,"index":9575},{"krate":0,"index":9576}],"decl_id":null,"docs":" Stream for the [`lines`](crate::io::AsyncBufReadExt::lines) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202819,"byte_end":10202828,"line_start":57,"line_end":57,"column_start":18,"column_end":27},"name":"next_line","qualname":"<Lines<R>>::next_line","value":"pub async fn next_line<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns the next line in the stream.","sig":null,"attributes":[{"value":"/ Returns the next line in the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202329,"byte_end":10202369,"line_start":40,"line_end":40,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202374,"byte_end":10202377,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202382,"byte_end":10202396,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202401,"byte_end":10202404,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202409,"byte_end":10202416,"line_start":44,"line_end":44,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncBufRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202421,"byte_end":10202455,"line_start":45,"line_end":45,"column_start":5,"column_end":39}},{"value":"/ use tokio::io::AsyncBufReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202460,"byte_end":10202495,"line_start":46,"line_end":46,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202500,"byte_end":10202503,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # async fn dox(my_buf_read: impl AsyncBufRead + Unpin) -> std::io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202508,"byte_end":10202591,"line_start":48,"line_end":48,"column_start":5,"column_end":88}},{"value":"/ let mut lines = my_buf_read.lines();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202596,"byte_end":10202636,"line_start":49,"line_end":49,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202641,"byte_end":10202644,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ while let Some(line) = lines.next_line().await? {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202649,"byte_end":10202702,"line_start":51,"line_end":51,"column_start":5,"column_end":58}},{"value":"/     println!(\"length = {}\", line.len())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202707,"byte_end":10202750,"line_start":52,"line_end":52,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202755,"byte_end":10202760,"line_start":53,"line_end":53,"column_start":5,"column_end":10}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202765,"byte_end":10202777,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202782,"byte_end":10202789,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202794,"byte_end":10202801,"line_start":56,"line_end":56,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203055,"byte_end":10203062,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Lines<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Obtain a mutable reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Obtain a mutable reference to the underlying reader","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202988,"byte_end":10203043,"line_start":63,"line_end":63,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203181,"byte_end":10203188,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Lines<R>>::get_ref","value":"pub fn get_ref(&mut Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Obtain a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Obtain a reference to the underlying reader","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203122,"byte_end":10203169,"line_start":68,"line_end":68,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203475,"byte_end":10203485,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Lines<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `Lines<R>`, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Unwraps this `Lines<R>`, returning the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203240,"byte_end":10203301,"line_start":73,"line_end":73,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203306,"byte_end":10203309,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data in the internal buffer is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203314,"byte_end":10203377,"line_start":75,"line_end":75,"column_start":5,"column_end":68}},{"value":"/ Therefore, a following read from the underlying reader may lead to data loss.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203382,"byte_end":10203463,"line_start":76,"line_end":76,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204371,"byte_end":10204385,"line_start":102,"line_end":102,"column_start":12,"column_end":26},"name":"poll_next_line","qualname":"<Lines<R>>::poll_next_line","value":"pub fn poll_next_line(Pin<&mut Self>, &mut Context)\n-> Poll<io::Result<Option<String>>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for the next line in the stream.","sig":null,"attributes":[{"value":"/ Polls for the next line in the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203578,"byte_end":10203620,"line_start":86,"line_end":86,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203625,"byte_end":10203628,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203633,"byte_end":10203657,"line_start":88,"line_end":88,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203662,"byte_end":10203665,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if the next line is not yet available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203670,"byte_end":10203731,"line_start":90,"line_end":90,"column_start":5,"column_end":66}},{"value":"/  * `Poll::Ready(Ok(Some(line)))` if the next line is available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203736,"byte_end":10203803,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/  * `Poll::Ready(Ok(None))` if there are no more lines in this stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203808,"byte_end":10203881,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/  * `Poll::Ready(Err(err))` if an IO error occurred while reading the next line.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203886,"byte_end":10203969,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203974,"byte_end":10203977,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ When the method returns `Poll::Pending`, the `Waker` in the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203982,"byte_end":10204054,"line_start":95,"line_end":95,"column_start":5,"column_end":77}},{"value":"/ `Context` is scheduled to receive a wakeup when more bytes become","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204059,"byte_end":10204128,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/ available on the underlying IO resource.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204133,"byte_end":10204177,"line_start":97,"line_end":97,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204182,"byte_end":10204185,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_next_line`, only the `Waker` from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204190,"byte_end":10204264,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ the `Context` passed to the most recent call is scheduled to receive a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204269,"byte_end":10204343,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"/ wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10204348,"byte_end":10204359,"line_start":101,"line_end":101,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2261},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10206113,"byte_end":10206125,"line_start":40,"line_end":40,"column_start":12,"column_end":24},"name":"DuplexStream","qualname":"::io::util::mem::DuplexStream","value":"DuplexStream {  }","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2263}],"decl_id":null,"docs":" A bidirectional pipe to read and write bytes in memory.","sig":null,"attributes":[{"value":"/ A bidirectional pipe to read and write bytes in memory.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205325,"byte_end":10205384,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205385,"byte_end":10205388,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A pair of `DuplexStream`s are created together, and they act as a \"channel\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205389,"byte_end":10205468,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ that can be used as in-memory IO types. Writing to one of the pairs will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205469,"byte_end":10205545,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ allow that data to be read from the other, and vice versa.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205546,"byte_end":10205608,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205609,"byte_end":10205612,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205613,"byte_end":10205626,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205627,"byte_end":10205630,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205631,"byte_end":10205638,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # async fn ex() -> std::io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205639,"byte_end":10205683,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ # use tokio::io::{AsyncReadExt, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205684,"byte_end":10205735,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let (mut client, mut server) = tokio::io::duplex(64);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205736,"byte_end":10205793,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205794,"byte_end":10205797,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ client.write_all(b\"ping\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205798,"byte_end":10205835,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205836,"byte_end":10205839,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0u8; 4];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205840,"byte_end":10205867,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/ server.read_exact(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205868,"byte_end":10205907,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(&buf, b\"ping\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205908,"byte_end":10205938,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205939,"byte_end":10205942,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ server.write_all(b\"pong\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205943,"byte_end":10205980,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205981,"byte_end":10205984,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ client.read_exact(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10205985,"byte_end":10206024,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(&buf, b\"pong\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10206025,"byte_end":10206055,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10206056,"byte_end":10206068,"line_start":36,"line_end":36,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10206069,"byte_end":10206076,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10206077,"byte_end":10206084,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1743},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207422,"byte_end":10207428,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"duplex","qualname":"::io::util::mem::duplex","value":"pub fn duplex(usize) -> (DuplexStream, DuplexStream)","parent":null,"children":[],"decl_id":null,"docs":" Create a new pair of `DuplexStream`s that act like a pair of connected sockets.","sig":null,"attributes":[{"value":"/ Create a new pair of `DuplexStream`s that act like a pair of connected sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207188,"byte_end":10207271,"line_start":71,"line_end":71,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207272,"byte_end":10207275,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The `max_buf_size` argument is the maximum amount of bytes that can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207276,"byte_end":10207350,"line_start":73,"line_end":73,"column_start":1,"column_end":75}},{"value":"/ written to a side before the write returns `Poll::Pending`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207351,"byte_end":10207414,"line_start":74,"line_end":74,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":9520},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read.rs","byte_start":10212484,"byte_end":10212488,"line_start":34,"line_end":34,"column_start":16,"column_end":20},"name":"Read","qualname":"::io::util::read::Read","value":"Read {  }","parent":null,"children":[{"krate":0,"index":9523},{"krate":0,"index":9524},{"krate":0,"index":9525}],"decl_id":null,"docs":" A future which can be used to easily read available number of bytes to fill\n a buffer.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9460},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_buf.rs","byte_start":10213705,"byte_end":10213712,"line_start":27,"line_end":27,"column_start":16,"column_end":23},"name":"ReadBuf","qualname":"::io::util::read_buf::ReadBuf","value":"ReadBuf {  }","parent":null,"children":[{"krate":0,"index":9464},{"krate":0,"index":9465},{"krate":0,"index":9466}],"decl_id":null,"docs":" Future returned by [`read_buf`](crate::io::AsyncReadExt::read_buf).\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9405},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_exact.rs","byte_start":10215917,"byte_end":10215926,"line_start":34,"line_end":34,"column_start":16,"column_end":25},"name":"ReadExact","qualname":"::io::util::read_exact::ReadExact","value":"ReadExact {  }","parent":null,"children":[{"krate":0,"index":9408},{"krate":0,"index":9409},{"krate":0,"index":9410}],"decl_id":null,"docs":" Creates a future which will read exactly enough bytes to fill `buf`,\n returning an error if EOF is hit sooner.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9361},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10220950,"byte_end":10220956,"line_start":132,"line_end":132,"column_start":10,"column_end":16},"name":"ReadU8","qualname":"::io::util::read_int::ReadU8","value":"ReadU8 {  }","parent":null,"children":[{"krate":0,"index":9363},{"krate":0,"index":9364}],"decl_id":null,"docs":" Future returned from `read_u8`\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9324},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10220972,"byte_end":10220978,"line_start":133,"line_end":133,"column_start":10,"column_end":16},"name":"ReadI8","qualname":"::io::util::read_int::ReadI8","value":"ReadI8 {  }","parent":null,"children":[{"krate":0,"index":9326},{"krate":0,"index":9327}],"decl_id":null,"docs":" Future returned from `read_u8`\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9275},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10220994,"byte_end":10221001,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"name":"ReadU16","qualname":"::io::util::read_int::ReadU16","value":"ReadU16 {  }","parent":null,"children":[{"krate":0,"index":9277},{"krate":0,"index":9278},{"krate":0,"index":9280},{"krate":0,"index":9281}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9226},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221026,"byte_end":10221033,"line_start":136,"line_end":136,"column_start":9,"column_end":16},"name":"ReadU32","qualname":"::io::util::read_int::ReadU32","value":"ReadU32 {  }","parent":null,"children":[{"krate":0,"index":9228},{"krate":0,"index":9229},{"krate":0,"index":9231},{"krate":0,"index":9232}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9177},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221058,"byte_end":10221065,"line_start":137,"line_end":137,"column_start":9,"column_end":16},"name":"ReadU64","qualname":"::io::util::read_int::ReadU64","value":"ReadU64 {  }","parent":null,"children":[{"krate":0,"index":9179},{"krate":0,"index":9180},{"krate":0,"index":9182},{"krate":0,"index":9183}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9128},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221090,"byte_end":10221098,"line_start":138,"line_end":138,"column_start":9,"column_end":17},"name":"ReadU128","qualname":"::io::util::read_int::ReadU128","value":"ReadU128 {  }","parent":null,"children":[{"krate":0,"index":9130},{"krate":0,"index":9131},{"krate":0,"index":9133},{"krate":0,"index":9134}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9079},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221126,"byte_end":10221133,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"name":"ReadI16","qualname":"::io::util::read_int::ReadI16","value":"ReadI16 {  }","parent":null,"children":[{"krate":0,"index":9081},{"krate":0,"index":9082},{"krate":0,"index":9084},{"krate":0,"index":9085}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9030},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221158,"byte_end":10221165,"line_start":141,"line_end":141,"column_start":9,"column_end":16},"name":"ReadI32","qualname":"::io::util::read_int::ReadI32","value":"ReadI32 {  }","parent":null,"children":[{"krate":0,"index":9032},{"krate":0,"index":9033},{"krate":0,"index":9035},{"krate":0,"index":9036}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8981},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221190,"byte_end":10221197,"line_start":142,"line_end":142,"column_start":9,"column_end":16},"name":"ReadI64","qualname":"::io::util::read_int::ReadI64","value":"ReadI64 {  }","parent":null,"children":[{"krate":0,"index":8983},{"krate":0,"index":8984},{"krate":0,"index":8986},{"krate":0,"index":8987}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8932},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221222,"byte_end":10221230,"line_start":143,"line_end":143,"column_start":9,"column_end":17},"name":"ReadI128","qualname":"::io::util::read_int::ReadI128","value":"ReadI128 {  }","parent":null,"children":[{"krate":0,"index":8934},{"krate":0,"index":8935},{"krate":0,"index":8937},{"krate":0,"index":8938}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8883},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221258,"byte_end":10221267,"line_start":145,"line_end":145,"column_start":9,"column_end":18},"name":"ReadU16Le","qualname":"::io::util::read_int::ReadU16Le","value":"ReadU16Le {  }","parent":null,"children":[{"krate":0,"index":8885},{"krate":0,"index":8886},{"krate":0,"index":8888},{"krate":0,"index":8889}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8834},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221295,"byte_end":10221304,"line_start":146,"line_end":146,"column_start":9,"column_end":18},"name":"ReadU32Le","qualname":"::io::util::read_int::ReadU32Le","value":"ReadU32Le {  }","parent":null,"children":[{"krate":0,"index":8836},{"krate":0,"index":8837},{"krate":0,"index":8839},{"krate":0,"index":8840}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8785},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221332,"byte_end":10221341,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"name":"ReadU64Le","qualname":"::io::util::read_int::ReadU64Le","value":"ReadU64Le {  }","parent":null,"children":[{"krate":0,"index":8787},{"krate":0,"index":8788},{"krate":0,"index":8790},{"krate":0,"index":8791}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8736},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221369,"byte_end":10221379,"line_start":148,"line_end":148,"column_start":9,"column_end":19},"name":"ReadU128Le","qualname":"::io::util::read_int::ReadU128Le","value":"ReadU128Le {  }","parent":null,"children":[{"krate":0,"index":8738},{"krate":0,"index":8739},{"krate":0,"index":8741},{"krate":0,"index":8742}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8687},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221410,"byte_end":10221419,"line_start":150,"line_end":150,"column_start":9,"column_end":18},"name":"ReadI16Le","qualname":"::io::util::read_int::ReadI16Le","value":"ReadI16Le {  }","parent":null,"children":[{"krate":0,"index":8689},{"krate":0,"index":8690},{"krate":0,"index":8692},{"krate":0,"index":8693}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8638},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221447,"byte_end":10221456,"line_start":151,"line_end":151,"column_start":9,"column_end":18},"name":"ReadI32Le","qualname":"::io::util::read_int::ReadI32Le","value":"ReadI32Le {  }","parent":null,"children":[{"krate":0,"index":8640},{"krate":0,"index":8641},{"krate":0,"index":8643},{"krate":0,"index":8644}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8589},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221484,"byte_end":10221493,"line_start":152,"line_end":152,"column_start":9,"column_end":18},"name":"ReadI64Le","qualname":"::io::util::read_int::ReadI64Le","value":"ReadI64Le {  }","parent":null,"children":[{"krate":0,"index":8591},{"krate":0,"index":8592},{"krate":0,"index":8594},{"krate":0,"index":8595}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8540},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_int.rs","byte_start":10221521,"byte_end":10221531,"line_start":153,"line_end":153,"column_start":9,"column_end":19},"name":"ReadI128Le","qualname":"::io::util::read_int::ReadI128Le","value":"ReadI128Le {  }","parent":null,"children":[{"krate":0,"index":8542},{"krate":0,"index":8543},{"krate":0,"index":8545},{"krate":0,"index":8546}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8486},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_line.rs","byte_start":10222048,"byte_end":10222056,"line_start":17,"line_end":17,"column_start":16,"column_end":24},"name":"ReadLine","qualname":"::io::util::read_line::ReadLine","value":"ReadLine {  }","parent":null,"children":[{"krate":0,"index":8489},{"krate":0,"index":8490},{"krate":0,"index":8491},{"krate":0,"index":8492},{"krate":0,"index":8493}],"decl_id":null,"docs":" Future for the [`read_line`](crate::io::AsyncBufReadExt::read_line) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8429},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_end.rs","byte_start":10225951,"byte_end":10225960,"line_start":14,"line_end":14,"column_start":16,"column_end":25},"name":"ReadToEnd","qualname":"::io::util::read_to_end::ReadToEnd","value":"ReadToEnd {  }","parent":null,"children":[{"krate":0,"index":8432},{"krate":0,"index":8433},{"krate":0,"index":8434},{"krate":0,"index":8435}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8368},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_string.rs","byte_start":10229637,"byte_end":10229649,"line_start":16,"line_end":16,"column_start":16,"column_end":28},"name":"ReadToString","qualname":"::io::util::read_to_string::ReadToString","value":"ReadToString {  }","parent":null,"children":[{"krate":0,"index":8371},{"krate":0,"index":8372},{"krate":0,"index":8373},{"krate":0,"index":8374},{"krate":0,"index":8375}],"decl_id":null,"docs":" Future for the [`read_to_string`](super::AsyncReadExt::read_to_string) method.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8307},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_until.rs","byte_start":10232320,"byte_end":10232329,"line_start":16,"line_end":16,"column_start":16,"column_end":25},"name":"ReadUntil","qualname":"::io::util::read_until::ReadUntil","value":"ReadUntil {  }","parent":null,"children":[{"krate":0,"index":8310},{"krate":0,"index":8311},{"krate":0,"index":8312},{"krate":0,"index":8313},{"krate":0,"index":8314}],"decl_id":null,"docs":" Future for the [`read_until`](crate::io::AsyncBufReadExt::read_until) method.\n The delimeter is included in the resulting vector.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2419},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/repeat.rs","byte_start":10234671,"byte_end":10234677,"line_start":19,"line_end":19,"column_start":16,"column_end":22},"name":"Repeat","qualname":"::io::util::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":2420}],"decl_id":null,"docs":" An async reader which yields one byte over and over and over and over and\n over and...","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2418},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/repeat.rs","byte_start":10235363,"byte_end":10235369,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"repeat","qualname":"::io::util::repeat::repeat","value":"pub fn repeat(u8) -> Repeat","parent":null,"children":[],"decl_id":null,"docs":" Creates an instance of an async reader that infinitely repeats one byte.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":8258},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/shutdown.rs","byte_start":10236408,"byte_end":10236416,"line_start":17,"line_end":17,"column_start":16,"column_end":24},"name":"Shutdown","qualname":"::io::util::shutdown::Shutdown","value":"Shutdown {  }","parent":null,"children":[{"krate":0,"index":8261},{"krate":0,"index":8262}],"decl_id":null,"docs":" A future used to shutdown an I/O object.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10237562,"byte_end":10237566,"line_start":18,"line_end":18,"column_start":16,"column_end":20},"name":"Sink","qualname":"::io::util::sink::Sink","value":"Sink {  }","parent":null,"children":[{"krate":0,"index":2424}],"decl_id":null,"docs":" An async writer which will move data into the void.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10238407,"byte_end":10238411,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"sink","qualname":"::io::util::sink::sink","value":"pub fn sink() -> Sink","parent":null,"children":[],"decl_id":null,"docs":" Creates an instance of an async writer which will successfully consume all\n data.","sig":null,"attributes":[{"value":"cfg(feature = \"io-util\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":20683,"byte_end":20710,"line_start":130,"line_end":130,"column_start":13,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":8208},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10239656,"byte_end":10239661,"line_start":15,"line_end":15,"column_start":16,"column_end":21},"name":"Split","qualname":"::io::util::split::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":8210},{"krate":0,"index":8211},{"krate":0,"index":8212},{"krate":0,"index":8213}],"decl_id":null,"docs":" Stream for the [`split`](crate::io::AsyncBufReadExt::split) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240522,"byte_end":10240534,"line_start":57,"line_end":57,"column_start":18,"column_end":30},"name":"next_segment","qualname":"<Split<R>>::next_segment","value":"pub async fn next_segment<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns the next segment in the stream.","sig":null,"attributes":[{"value":"/ Returns the next segment in the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240010,"byte_end":10240053,"line_start":40,"line_end":40,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240058,"byte_end":10240061,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240066,"byte_end":10240080,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240085,"byte_end":10240088,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240093,"byte_end":10240100,"line_start":44,"line_end":44,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncBufRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240105,"byte_end":10240139,"line_start":45,"line_end":45,"column_start":5,"column_end":39}},{"value":"/ use tokio::io::AsyncBufReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240144,"byte_end":10240179,"line_start":46,"line_end":46,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240184,"byte_end":10240187,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # async fn dox(my_buf_read: impl AsyncBufRead + Unpin) -> std::io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240192,"byte_end":10240275,"line_start":48,"line_end":48,"column_start":5,"column_end":88}},{"value":"/ let mut segments = my_buf_read.split(b'f');","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240280,"byte_end":10240327,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240332,"byte_end":10240335,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ while let Some(segment) = segments.next_segment().await? {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240340,"byte_end":10240402,"line_start":51,"line_end":51,"column_start":5,"column_end":67}},{"value":"/     println!(\"length = {}\", segment.len())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240407,"byte_end":10240453,"line_start":52,"line_end":52,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240458,"byte_end":10240463,"line_start":53,"line_end":53,"column_start":5,"column_end":10}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240468,"byte_end":10240480,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240485,"byte_end":10240492,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240497,"byte_end":10240504,"line_start":56,"line_end":56,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241571,"byte_end":10241588,"line_start":85,"line_end":85,"column_start":12,"column_end":29},"name":"poll_next_segment","qualname":"<Split<R>>::poll_next_segment","value":"pub fn poll_next_segment(Pin<&mut Self>, &mut Context)\n-> Poll<io::Result<Option<Vec<u8>>>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for the next segment in the stream.","sig":null,"attributes":[{"value":"/ Polls for the next segment in the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240746,"byte_end":10240791,"line_start":68,"line_end":68,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240796,"byte_end":10240799,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240804,"byte_end":10240828,"line_start":70,"line_end":70,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240833,"byte_end":10240836,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if the next segment is not yet available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240841,"byte_end":10240905,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/  * `Poll::Ready(Ok(Some(segment)))` if the next segment is available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240910,"byte_end":10240983,"line_start":73,"line_end":73,"column_start":5,"column_end":78}},{"value":"/  * `Poll::Ready(Ok(None))` if there are no more segments in this stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240988,"byte_end":10241064,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/  * `Poll::Ready(Err(err))` if an IO error occurred while reading the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241069,"byte_end":10241141,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/    next segment.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241146,"byte_end":10241166,"line_start":76,"line_end":76,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241171,"byte_end":10241174,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ When the method returns `Poll::Pending`, the `Waker` in the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241179,"byte_end":10241251,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ `Context` is scheduled to receive a wakeup when more bytes become","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241256,"byte_end":10241325,"line_start":79,"line_end":79,"column_start":5,"column_end":74}},{"value":"/ available on the underlying IO resource.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241330,"byte_end":10241374,"line_start":80,"line_end":80,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241379,"byte_end":10241382,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_next_segment`, only the `Waker`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241387,"byte_end":10241459,"line_start":82,"line_end":82,"column_start":5,"column_end":77}},{"value":"/ from the `Context` passed to the most recent call is scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241464,"byte_end":10241533,"line_start":83,"line_end":83,"column_start":5,"column_end":74}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10241538,"byte_end":10241559,"line_start":84,"line_end":84,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":8168},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10242745,"byte_end":10242749,"line_start":13,"line_end":13,"column_start":16,"column_end":20},"name":"Take","qualname":"::io::util::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":8170},{"krate":0,"index":8171}],"decl_id":null,"docs":" Stream for the [`take`](super::AsyncReadExt::take) method.\n","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243339,"byte_end":10243344,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"limit","qualname":"<Take<R>>::limit","value":"pub fn limit(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining number of bytes that can be\n read before this instance will return EOF.","sig":null,"attributes":[{"value":"/ Returns the remaining number of bytes that can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243036,"byte_end":10243089,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/ read before this instance will return EOF.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243094,"byte_end":10243140,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243145,"byte_end":10243148,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243153,"byte_end":10243163,"line_start":32,"line_end":32,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243168,"byte_end":10243171,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This instance may reach `EOF` after reading fewer bytes than indicated by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243176,"byte_end":10243253,"line_start":34,"line_end":34,"column_start":5,"column_end":82}},{"value":"/ this method if the underlying [`AsyncRead`] instance reaches EOF.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243258,"byte_end":10243327,"line_start":35,"line_end":35,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2027},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243663,"byte_end":10243672,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"set_limit","qualname":"<Take<R>>::set_limit","value":"pub fn set_limit(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes that can be read before this instance will\n return EOF. This is the same as constructing a new `Take` instance, so\n the amount of bytes read and the previous limit value don't matter when\n calling this method.\n","sig":null,"attributes":[{"value":"/ Sets the number of bytes that can be read before this instance will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243392,"byte_end":10243463,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ return EOF. This is the same as constructing a new `Take` instance, so","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243468,"byte_end":10243542,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ the amount of bytes read and the previous limit value don't matter when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243547,"byte_end":10243622,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"/ calling this method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243627,"byte_end":10243651,"line_start":43,"line_end":43,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243795,"byte_end":10243802,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Take<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243737,"byte_end":10243783,"line_start":48,"line_end":48,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2029},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244094,"byte_end":10244101,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Take<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243849,"byte_end":10243903,"line_start":53,"line_end":53,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243908,"byte_end":10243911,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Care should be taken to avoid modifying the internal I/O state of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243916,"byte_end":10243989,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ underlying reader as doing so may corrupt the internal limit of this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243994,"byte_end":10244066,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/ `Take`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244071,"byte_end":10244082,"line_start":57,"line_end":57,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244412,"byte_end":10244423,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<Take<R>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut R>","parent":null,"children":[],"decl_id":null,"docs":" Gets a pinned mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Gets a pinned mutable reference to the underlying reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244160,"byte_end":10244221,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244226,"byte_end":10244229,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Care should be taken to avoid modifying the internal I/O state of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244234,"byte_end":10244307,"line_start":64,"line_end":64,"column_start":5,"column_end":78}},{"value":"/ underlying reader as doing so may corrupt the internal limit of this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244312,"byte_end":10244384,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ `Take`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244389,"byte_end":10244400,"line_start":66,"line_end":66,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2031},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244569,"byte_end":10244579,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Take<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Take`, returning the wrapped reader.\n","sig":null,"attributes":[{"value":"/ Consumes the `Take`, returning the wrapped reader.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244503,"byte_end":10244557,"line_start":71,"line_end":71,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":8117},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write.rs","byte_start":10246563,"byte_end":10246568,"line_start":14,"line_end":14,"column_start":16,"column_end":21},"name":"Write","qualname":"::io::util::write::Write","value":"Write {  }","parent":null,"children":[{"krate":0,"index":8120},{"krate":0,"index":8121},{"krate":0,"index":8122}],"decl_id":null,"docs":" A future to write some of the buffer to an `AsyncWrite`.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8064},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_all.rs","byte_start":10247706,"byte_end":10247714,"line_start":14,"line_end":14,"column_start":16,"column_end":24},"name":"WriteAll","qualname":"::io::util::write_all::WriteAll","value":"WriteAll {  }","parent":null,"children":[{"krate":0,"index":8067},{"krate":0,"index":8068},{"krate":0,"index":8069}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8004},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_buf.rs","byte_start":10249155,"byte_end":10249163,"line_start":15,"line_end":15,"column_start":16,"column_end":24},"name":"WriteBuf","qualname":"::io::util::write_buf::WriteBuf","value":"WriteBuf {  }","parent":null,"children":[{"krate":0,"index":8008},{"krate":0,"index":8009},{"krate":0,"index":8010}],"decl_id":null,"docs":" A future to write some of the buffer to an `AsyncWrite`.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7954},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10253924,"byte_end":10253931,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"WriteU8","qualname":"::io::util::write_int::WriteU8","value":"WriteU8 {  }","parent":null,"children":[{"krate":0,"index":7956},{"krate":0,"index":7957},{"krate":0,"index":7958}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7913},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10253947,"byte_end":10253954,"line_start":126,"line_end":126,"column_start":10,"column_end":17},"name":"WriteI8","qualname":"::io::util::write_int::WriteI8","value":"WriteI8 {  }","parent":null,"children":[{"krate":0,"index":7915},{"krate":0,"index":7916},{"krate":0,"index":7917}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7864},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10253970,"byte_end":10253978,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"name":"WriteU16","qualname":"::io::util::write_int::WriteU16","value":"WriteU16 {  }","parent":null,"children":[{"krate":0,"index":7866},{"krate":0,"index":7867},{"krate":0,"index":7869},{"krate":0,"index":7870}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7815},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254003,"byte_end":10254011,"line_start":129,"line_end":129,"column_start":9,"column_end":17},"name":"WriteU32","qualname":"::io::util::write_int::WriteU32","value":"WriteU32 {  }","parent":null,"children":[{"krate":0,"index":7817},{"krate":0,"index":7818},{"krate":0,"index":7820},{"krate":0,"index":7821}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7766},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254036,"byte_end":10254044,"line_start":130,"line_end":130,"column_start":9,"column_end":17},"name":"WriteU64","qualname":"::io::util::write_int::WriteU64","value":"WriteU64 {  }","parent":null,"children":[{"krate":0,"index":7768},{"krate":0,"index":7769},{"krate":0,"index":7771},{"krate":0,"index":7772}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7717},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254069,"byte_end":10254078,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"name":"WriteU128","qualname":"::io::util::write_int::WriteU128","value":"WriteU128 {  }","parent":null,"children":[{"krate":0,"index":7719},{"krate":0,"index":7720},{"krate":0,"index":7722},{"krate":0,"index":7723}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7668},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254106,"byte_end":10254114,"line_start":133,"line_end":133,"column_start":9,"column_end":17},"name":"WriteI16","qualname":"::io::util::write_int::WriteI16","value":"WriteI16 {  }","parent":null,"children":[{"krate":0,"index":7670},{"krate":0,"index":7671},{"krate":0,"index":7673},{"krate":0,"index":7674}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7619},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254139,"byte_end":10254147,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"name":"WriteI32","qualname":"::io::util::write_int::WriteI32","value":"WriteI32 {  }","parent":null,"children":[{"krate":0,"index":7621},{"krate":0,"index":7622},{"krate":0,"index":7624},{"krate":0,"index":7625}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7570},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254172,"byte_end":10254180,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"WriteI64","qualname":"::io::util::write_int::WriteI64","value":"WriteI64 {  }","parent":null,"children":[{"krate":0,"index":7572},{"krate":0,"index":7573},{"krate":0,"index":7575},{"krate":0,"index":7576}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7521},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254205,"byte_end":10254214,"line_start":136,"line_end":136,"column_start":9,"column_end":18},"name":"WriteI128","qualname":"::io::util::write_int::WriteI128","value":"WriteI128 {  }","parent":null,"children":[{"krate":0,"index":7523},{"krate":0,"index":7524},{"krate":0,"index":7526},{"krate":0,"index":7527}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7472},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254242,"byte_end":10254252,"line_start":138,"line_end":138,"column_start":9,"column_end":19},"name":"WriteU16Le","qualname":"::io::util::write_int::WriteU16Le","value":"WriteU16Le {  }","parent":null,"children":[{"krate":0,"index":7474},{"krate":0,"index":7475},{"krate":0,"index":7477},{"krate":0,"index":7478}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7423},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254280,"byte_end":10254290,"line_start":139,"line_end":139,"column_start":9,"column_end":19},"name":"WriteU32Le","qualname":"::io::util::write_int::WriteU32Le","value":"WriteU32Le {  }","parent":null,"children":[{"krate":0,"index":7425},{"krate":0,"index":7426},{"krate":0,"index":7428},{"krate":0,"index":7429}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7374},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254318,"byte_end":10254328,"line_start":140,"line_end":140,"column_start":9,"column_end":19},"name":"WriteU64Le","qualname":"::io::util::write_int::WriteU64Le","value":"WriteU64Le {  }","parent":null,"children":[{"krate":0,"index":7376},{"krate":0,"index":7377},{"krate":0,"index":7379},{"krate":0,"index":7380}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7325},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254356,"byte_end":10254367,"line_start":141,"line_end":141,"column_start":9,"column_end":20},"name":"WriteU128Le","qualname":"::io::util::write_int::WriteU128Le","value":"WriteU128Le {  }","parent":null,"children":[{"krate":0,"index":7327},{"krate":0,"index":7328},{"krate":0,"index":7330},{"krate":0,"index":7331}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7276},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254398,"byte_end":10254408,"line_start":143,"line_end":143,"column_start":9,"column_end":19},"name":"WriteI16Le","qualname":"::io::util::write_int::WriteI16Le","value":"WriteI16Le {  }","parent":null,"children":[{"krate":0,"index":7278},{"krate":0,"index":7279},{"krate":0,"index":7281},{"krate":0,"index":7282}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7227},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254436,"byte_end":10254446,"line_start":144,"line_end":144,"column_start":9,"column_end":19},"name":"WriteI32Le","qualname":"::io::util::write_int::WriteI32Le","value":"WriteI32Le {  }","parent":null,"children":[{"krate":0,"index":7229},{"krate":0,"index":7230},{"krate":0,"index":7232},{"krate":0,"index":7233}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7178},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254474,"byte_end":10254484,"line_start":145,"line_end":145,"column_start":9,"column_end":19},"name":"WriteI64Le","qualname":"::io::util::write_int::WriteI64Le","value":"WriteI64Le {  }","parent":null,"children":[{"krate":0,"index":7180},{"krate":0,"index":7181},{"krate":0,"index":7183},{"krate":0,"index":7184}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7129},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_int.rs","byte_start":10254512,"byte_end":10254523,"line_start":146,"line_end":146,"column_start":9,"column_end":20},"name":"WriteI128Le","qualname":"::io::util::write_int::WriteI128Le","value":"WriteI128Le {  }","parent":null,"children":[{"krate":0,"index":7131},{"krate":0,"index":7132},{"krate":0,"index":7134},{"krate":0,"index":7135}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":280},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"net","qualname":"::net","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":3022},{"krate":0,"index":3073},{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394}],"decl_id":null,"docs":" TCP/UDP/Unix bindings for `tokio`.","sig":null,"attributes":[{"value":"cfg(not(loom))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":77888,"byte_end":77906,"line_start":1,"line_end":1,"column_start":1,"column_end":19}},{"value":"/ TCP/UDP/Unix bindings for `tokio`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":77908,"byte_end":77946,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":77947,"byte_end":77950,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This module contains the TCP/UDP/Unix networking types, similar to the standard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":77951,"byte_end":78034,"line_start":5,"line_end":5,"column_start":1,"column_end":84}},{"value":"/ library, which can be used to implement networking protocols.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78035,"byte_end":78100,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78101,"byte_end":78104,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Organization","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78105,"byte_end":78123,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78124,"byte_end":78127,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78128,"byte_end":78216,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ * [`UdpSocket`] provides functionality for communication over UDP","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78217,"byte_end":78286,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ * [`UnixListener`] and [`UnixStream`] provide functionality for communication over a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78287,"byte_end":78375,"line_start":12,"line_end":12,"column_start":1,"column_end":89}},{"value":"/ Unix Domain Stream Socket **(available on Unix only)**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78376,"byte_end":78434,"line_start":13,"line_end":13,"column_start":1,"column_end":59}},{"value":"/ * [`UnixDatagram`] provides functionality for communication","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78435,"byte_end":78498,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ over Unix Domain Datagram Socket **(available on Unix only)**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78499,"byte_end":78564,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78566,"byte_end":78569,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`TcpListener`]: TcpListener","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78570,"byte_end":78602,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78603,"byte_end":78631,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/ [`UdpSocket`]: UdpSocket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78632,"byte_end":78660,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ [`UnixListener`]: UnixListener","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78661,"byte_end":78695,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ [`UnixStream`]: UnixStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78696,"byte_end":78726,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/ [`UnixDatagram`]: UnixDatagram","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78727,"byte_end":78761,"line_start":23,"line_end":23,"column_start":1,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":291},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80083,"byte_end":80096,"line_start":22,"line_end":22,"column_start":11,"column_end":24},"name":"ToSocketAddrs","qualname":"::net::addr::ToSocketAddrs","value":"ToSocketAddrs: sealed::ToSocketAddrsPriv","parent":null,"children":[],"decl_id":null,"docs":" Converts or resolves without blocking to one or more `SocketAddr` values.","sig":null,"attributes":[{"value":"/ Converts or resolves without blocking to one or more `SocketAddr` values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79395,"byte_end":79472,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79473,"byte_end":79476,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # DNS","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79477,"byte_end":79486,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79487,"byte_end":79490,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Implementations of `ToSocketAddrs` for string types require a DNS lookup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79491,"byte_end":79568,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ These implementations are only provided when Tokio is used with the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79569,"byte_end":79640,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ **`net`** feature flag.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79641,"byte_end":79668,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79669,"byte_end":79672,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79673,"byte_end":79686,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79687,"byte_end":79690,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Currently, this trait is only used as an argument to Tokio functions that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79691,"byte_end":79768,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ need to reference a target socket address. To perform a `SocketAddr`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79769,"byte_end":79841,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ conversion directly, use [`lookup_host()`](super::lookup_host()).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79842,"byte_end":79911,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79912,"byte_end":79915,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and is intended to be opaque. The details of the trait","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79916,"byte_end":79995,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ will change. Stabilization is pending enhancements to the Rust language.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":79996,"byte_end":80072,"line_start":21,"line_end":21,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":340},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86536,"byte_end":86553,"line_start":250,"line_end":250,"column_start":15,"column_end":32},"name":"ToSocketAddrsPriv","qualname":"::net::addr::sealed::ToSocketAddrsPriv","value":"ToSocketAddrsPriv","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":341},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86569,"byte_end":86573,"line_start":251,"line_end":251,"column_start":14,"column_end":18},"name":"Iter","qualname":"::net::addr::sealed::ToSocketAddrsPriv::Iter","value":"type Iter: Iterator<Item = SocketAddr> + Send + 'static;","parent":{"krate":0,"index":340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86634,"byte_end":86640,"line_start":252,"line_end":252,"column_start":14,"column_end":20},"name":"Future","qualname":"::net::addr::sealed::ToSocketAddrsPriv::Future","value":"type Future: Future<Output = io::Result<Self::Iter>> + Send + 'static;","parent":{"krate":0,"index":340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86712,"byte_end":86727,"line_start":254,"line_end":254,"column_start":12,"column_end":27},"name":"to_socket_addrs","qualname":"::net::addr::sealed::ToSocketAddrsPriv::to_socket_addrs","value":"pub fn to_socket_addrs(&Self, Internal) -> Self::Future","parent":{"krate":0,"index":340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":344},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86838,"byte_end":86846,"line_start":258,"line_end":258,"column_start":16,"column_end":24},"name":"Internal","qualname":"::net::addr::sealed::Internal","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":86783,"byte_end":86822,"line_start":257,"line_end":257,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2610},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87088,"byte_end":87098,"line_start":270,"line_end":270,"column_start":20,"column_end":30},"name":"MaybeReady","qualname":"::net::addr::sealed::MaybeReady","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2625},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87388,"byte_end":87391,"line_start":281,"line_end":281,"column_start":13,"column_end":16},"name":"One","qualname":"::net::addr::sealed::OneOrMore::One","value":"OneOrMore::One(option::IntoIter<SocketAddr>)","parent":{"krate":0,"index":2624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2628},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87435,"byte_end":87439,"line_start":282,"line_end":282,"column_start":13,"column_end":17},"name":"More","qualname":"::net::addr::sealed::OneOrMore::More","value":"OneOrMore::More(vec::IntoIter<SocketAddr>)","parent":{"krate":0,"index":2624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2624},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87364,"byte_end":87373,"line_start":280,"line_end":280,"column_start":18,"column_end":27},"name":"OneOrMore","qualname":"::net::addr::sealed::OneOrMore","value":"pub enum OneOrMore {\n    One(option::IntoIter<SocketAddr>),\n    More(vec::IntoIter<SocketAddr>),\n}","parent":null,"children":[{"krate":0,"index":2625},{"krate":0,"index":2628}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":3028},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/lookup_host.rs","byte_start":10255396,"byte_end":10255407,"line_start":32,"line_end":32,"column_start":18,"column_end":29},"name":"lookup_host","qualname":"::net::lookup_host::lookup_host","value":"pub async fn lookup_host<T>(T) -> /*impl Trait*/ where T: ToSocketAddrs","parent":null,"children":[],"decl_id":null,"docs":" Performs a DNS resolution.","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":2635},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tcp","qualname":"::net::tcp","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","parent":null,"children":[{"krate":0,"index":2636},{"krate":0,"index":2680},{"krate":0,"index":2714},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":11115},{"krate":0,"index":2799},{"krate":0,"index":2910}],"decl_id":null,"docs":" TCP utility types\n","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}},{"value":"/ TCP utility types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/mod.rs","byte_start":10255560,"byte_end":10255581,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3033},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257221,"byte_end":10257232,"line_start":48,"line_end":48,"column_start":16,"column_end":27},"name":"TcpListener","qualname":"::net::tcp::listener::TcpListener","value":"TcpListener {  }","parent":null,"children":[{"krate":0,"index":3034}],"decl_id":null,"docs":" A TCP socket server, listening for connections.","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258748,"byte_end":10258752,"line_start":92,"line_end":92,"column_start":18,"column_end":22},"name":"bind","qualname":"<TcpListener>::bind","value":"pub async fn bind<A: ToSocketAddrs>(A) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Creates a new TcpListener, which will be bound to the specified address.","sig":null,"attributes":[{"value":"/ Creates a new TcpListener, which will be bound to the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257315,"byte_end":10257391,"line_start":54,"line_end":54,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257396,"byte_end":10257399,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The returned listener is ready for accepting connections.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257404,"byte_end":10257465,"line_start":56,"line_end":56,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257470,"byte_end":10257473,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Binding with a port number of 0 will request that the OS assigns a port","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257478,"byte_end":10257553,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ to this listener. The port allocated can be queried via the `local_addr`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257558,"byte_end":10257634,"line_start":59,"line_end":59,"column_start":5,"column_end":81}},{"value":"/ method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257639,"byte_end":10257650,"line_start":60,"line_end":60,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257655,"byte_end":10257658,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The address type can be any implementor of the [`ToSocketAddrs`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257663,"byte_end":10257738,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ Note that strings only implement this trait when the **`net`** feature","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257743,"byte_end":10257817,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/ is enabled, as strings may contain domain names that need to be resolved.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257822,"byte_end":10257899,"line_start":64,"line_end":64,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257904,"byte_end":10257907,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ If `addr` yields multiple addresses, bind will be attempted with each of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257912,"byte_end":10257988,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ the addresses until one succeeds and returns the listener. If none of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257993,"byte_end":10258066,"line_start":67,"line_end":67,"column_start":5,"column_end":78}},{"value":"/ the addresses succeed in creating a listener, the error returned from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258071,"byte_end":10258144,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/ the last attempt (the last address) is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258149,"byte_end":10258201,"line_start":69,"line_end":69,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258206,"byte_end":10258209,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ This function sets the `SO_REUSEADDR` option on the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258214,"byte_end":10258277,"line_start":71,"line_end":71,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258282,"byte_end":10258285,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ [`ToSocketAddrs`]: trait@crate::net::ToSocketAddrs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258290,"byte_end":10258344,"line_start":73,"line_end":73,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258349,"byte_end":10258352,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258357,"byte_end":10258371,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258376,"byte_end":10258379,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258384,"byte_end":10258397,"line_start":77,"line_end":77,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258402,"byte_end":10258434,"line_start":78,"line_end":78,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258439,"byte_end":10258442,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258447,"byte_end":10258463,"line_start":80,"line_end":80,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258468,"byte_end":10258471,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258476,"byte_end":10258494,"line_start":82,"line_end":82,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258499,"byte_end":10258538,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:2345\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258543,"byte_end":10258609,"line_start":84,"line_end":84,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258614,"byte_end":10258617,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/     // use the listener","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258622,"byte_end":10258649,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258654,"byte_end":10258657,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/     # let _ = listener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258662,"byte_end":10258689,"line_start":88,"line_end":88,"column_start":5,"column_end":32}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258694,"byte_end":10258708,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258713,"byte_end":10258718,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10258723,"byte_end":10258730,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260318,"byte_end":10260324,"line_start":144,"line_end":144,"column_start":18,"column_end":24},"name":"accept","qualname":"<TcpListener>::accept","value":"pub async fn accept<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Accepts a new incoming connection from this listener.","sig":null,"attributes":[{"value":"/ Accepts a new incoming connection from this listener.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259463,"byte_end":10259520,"line_start":117,"line_end":117,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259525,"byte_end":10259528,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This function will yield once a new TCP connection is established. When","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259533,"byte_end":10259608,"line_start":119,"line_end":119,"column_start":5,"column_end":80}},{"value":"/ established, the corresponding [`TcpStream`] and the remote peer's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259613,"byte_end":10259683,"line_start":120,"line_end":120,"column_start":5,"column_end":75}},{"value":"/ address will be returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259688,"byte_end":10259717,"line_start":121,"line_end":121,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259722,"byte_end":10259725,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream`]: struct@crate::net::TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259730,"byte_end":10259777,"line_start":123,"line_end":123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259782,"byte_end":10259785,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259790,"byte_end":10259804,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259809,"byte_end":10259812,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259817,"byte_end":10259830,"line_start":127,"line_end":127,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259835,"byte_end":10259867,"line_start":128,"line_end":128,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259872,"byte_end":10259875,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259880,"byte_end":10259896,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259901,"byte_end":10259904,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259909,"byte_end":10259927,"line_start":132,"line_end":132,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259932,"byte_end":10259971,"line_start":133,"line_end":133,"column_start":5,"column_end":44}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10259976,"byte_end":10260042,"line_start":134,"line_end":134,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260047,"byte_end":10260050,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/     match listener.accept().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260055,"byte_end":10260094,"line_start":136,"line_end":136,"column_start":5,"column_end":44}},{"value":"/         Ok((_socket, addr)) => println!(\"new client: {:?}\", addr),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260099,"byte_end":10260169,"line_start":137,"line_end":137,"column_start":5,"column_end":75}},{"value":"/         Err(e) => println!(\"couldn't get client: {:?}\", e),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260174,"byte_end":10260237,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260242,"byte_end":10260251,"line_start":139,"line_end":139,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260256,"byte_end":10260259,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260264,"byte_end":10260278,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260283,"byte_end":10260288,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260293,"byte_end":10260300,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260992,"byte_end":10261003,"line_start":161,"line_end":161,"column_start":12,"column_end":23},"name":"poll_accept","qualname":"<TcpListener>::poll_accept","value":"pub fn poll_accept(&Self, &mut Context)\n-> Poll<io::Result<(TcpStream, SocketAddr)>>","parent":null,"children":[],"decl_id":null,"docs":" Polls to accept a new incoming connection to this listener.","sig":null,"attributes":[{"value":"/ Polls to accept a new incoming connection to this listener.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260614,"byte_end":10260677,"line_start":155,"line_end":155,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260682,"byte_end":10260685,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ If there is no connection to accept, `Poll::Pending` is returned and the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260690,"byte_end":10260766,"line_start":157,"line_end":157,"column_start":5,"column_end":81}},{"value":"/ current task will be notified by a waker.  Note that on multiple calls","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260771,"byte_end":10260845,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ to `poll_accept`, only the `Waker` from the `Context` passed to the most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260850,"byte_end":10260926,"line_start":159,"line_end":159,"column_start":5,"column_end":81}},{"value":"/ recent call is scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10260931,"byte_end":10260980,"line_start":160,"line_end":160,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2665},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263049,"byte_end":10263057,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"from_std","qualname":"<TcpListener>::from_std","value":"pub fn from_std(net::TcpListener) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `TcpListener` from a `std::net::TcpListener`.","sig":null,"attributes":[{"value":"/ Creates new `TcpListener` from a `std::net::TcpListener`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261611,"byte_end":10261672,"line_start":178,"line_end":178,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261677,"byte_end":10261680,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a TCP listener from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261685,"byte_end":10261757,"line_start":180,"line_end":180,"column_start":5,"column_end":77}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes nothing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261762,"byte_end":10261838,"line_start":181,"line_end":181,"column_start":5,"column_end":81}},{"value":"/ about the underlying listener; it is left up to the user to set it in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261843,"byte_end":10261916,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261921,"byte_end":10261943,"line_start":183,"line_end":183,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261948,"byte_end":10261951,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This API is typically paired with the `socket2` crate and the `Socket`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10261956,"byte_end":10262030,"line_start":185,"line_end":185,"column_start":5,"column_end":79}},{"value":"/ type to build up and customize a listener before it's shipped off to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262035,"byte_end":10262111,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ backing event loop. This allows configuration of options like","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262116,"byte_end":10262181,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"/ `SO_REUSEPORT`, binding to multiple addresses, etc.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262186,"byte_end":10262241,"line_start":188,"line_end":188,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262246,"byte_end":10262249,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262254,"byte_end":10262257,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262262,"byte_end":10262276,"line_start":191,"line_end":191,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262281,"byte_end":10262284,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262289,"byte_end":10262307,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262312,"byte_end":10262338,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262343,"byte_end":10262375,"line_start":195,"line_end":195,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262380,"byte_end":10262383,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262388,"byte_end":10262406,"line_start":197,"line_end":197,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262411,"byte_end":10262462,"line_start":198,"line_end":198,"column_start":5,"column_end":56}},{"value":"/     let std_listener = std::net::TcpListener::bind(\"127.0.0.1:0\")?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262467,"byte_end":10262538,"line_start":199,"line_end":199,"column_start":5,"column_end":76}},{"value":"/     std_listener.set_nonblocking(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262543,"byte_end":10262587,"line_start":200,"line_end":200,"column_start":5,"column_end":49}},{"value":"/     let listener = TcpListener::from_std(std_listener)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262592,"byte_end":10262652,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262657,"byte_end":10262671,"line_start":202,"line_end":202,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262676,"byte_end":10262681,"line_start":203,"line_end":203,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262686,"byte_end":10262693,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262698,"byte_end":10262701,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262706,"byte_end":10262718,"line_start":206,"line_end":206,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262723,"byte_end":10262726,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262731,"byte_end":10262791,"line_start":208,"line_end":208,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262796,"byte_end":10262799,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262804,"byte_end":10262874,"line_start":210,"line_end":210,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262879,"byte_end":10262952,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10262957,"byte_end":10263037,"line_start":212,"line_end":212,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264151,"byte_end":10264161,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpListener>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this listener is bound to.","sig":null,"attributes":[{"value":"/ Returns the local address that this listener is bound to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263425,"byte_end":10263486,"line_start":224,"line_end":224,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263491,"byte_end":10263494,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This can be useful, for example, when binding to port 0 to figure out","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263499,"byte_end":10263572,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ which port was actually bound.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263577,"byte_end":10263611,"line_start":227,"line_end":227,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263616,"byte_end":10263619,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263624,"byte_end":10263638,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263643,"byte_end":10263646,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263651,"byte_end":10263669,"line_start":231,"line_end":231,"column_start":5,"column_end":23}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263674,"byte_end":10263706,"line_start":232,"line_end":232,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263711,"byte_end":10263714,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263719,"byte_end":10263735,"line_start":234,"line_end":234,"column_start":5,"column_end":21}},{"value":"/ use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263740,"byte_end":10263795,"line_start":235,"line_end":235,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263800,"byte_end":10263803,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263808,"byte_end":10263826,"line_start":237,"line_end":237,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263831,"byte_end":10263870,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263875,"byte_end":10263941,"line_start":239,"line_end":239,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263946,"byte_end":10263949,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(listener.local_addr()?,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10263954,"byte_end":10263996,"line_start":241,"line_end":241,"column_start":5,"column_end":47}},{"value":"/                SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080)));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264001,"byte_end":10264090,"line_start":242,"line_end":242,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264095,"byte_end":10264098,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264103,"byte_end":10264117,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264122,"byte_end":10264127,"line_start":245,"line_end":245,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264132,"byte_end":10264139,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264854,"byte_end":10264857,"line_start":274,"line_end":274,"column_start":12,"column_end":15},"name":"ttl","qualname":"<TcpListener>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264237,"byte_end":10264295,"line_start":251,"line_end":251,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264300,"byte_end":10264303,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264308,"byte_end":10264368,"line_start":253,"line_end":253,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264373,"byte_end":10264376,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`set_ttl`]: method@Self::set_ttl","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264381,"byte_end":10264418,"line_start":255,"line_end":255,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264423,"byte_end":10264426,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264431,"byte_end":10264445,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264450,"byte_end":10264453,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264458,"byte_end":10264471,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264476,"byte_end":10264508,"line_start":260,"line_end":260,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264513,"byte_end":10264516,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264521,"byte_end":10264537,"line_start":262,"line_end":262,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264542,"byte_end":10264545,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264550,"byte_end":10264568,"line_start":264,"line_end":264,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264573,"byte_end":10264612,"line_start":265,"line_end":265,"column_start":5,"column_end":44}},{"value":"/    let listener = TcpListener::bind(\"127.0.0.1:0\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264617,"byte_end":10264679,"line_start":266,"line_end":266,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264684,"byte_end":10264687,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/    listener.set_ttl(100).expect(\"could not set TTL\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264692,"byte_end":10264749,"line_start":268,"line_end":268,"column_start":5,"column_end":62}},{"value":"/    assert_eq!(listener.ttl()?, 100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264754,"byte_end":10264794,"line_start":269,"line_end":269,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264799,"byte_end":10264802,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/    Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264807,"byte_end":10264820,"line_start":271,"line_end":271,"column_start":5,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264825,"byte_end":10264830,"line_start":272,"line_end":272,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264835,"byte_end":10264842,"line_start":273,"line_end":273,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265486,"byte_end":10265493,"line_start":299,"line_end":299,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<TcpListener>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264919,"byte_end":10264977,"line_start":278,"line_end":278,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264982,"byte_end":10264985,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10264990,"byte_end":10265066,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265071,"byte_end":10265092,"line_start":281,"line_end":281,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265097,"byte_end":10265100,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265105,"byte_end":10265119,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265124,"byte_end":10265127,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265132,"byte_end":10265145,"line_start":285,"line_end":285,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265150,"byte_end":10265182,"line_start":286,"line_end":286,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265187,"byte_end":10265190,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265195,"byte_end":10265211,"line_start":288,"line_end":288,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265216,"byte_end":10265219,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265224,"byte_end":10265242,"line_start":290,"line_end":290,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265247,"byte_end":10265286,"line_start":291,"line_end":291,"column_start":5,"column_end":44}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:0\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265291,"byte_end":10265354,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265359,"byte_end":10265362,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/     listener.set_ttl(100).expect(\"could not set TTL\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265367,"byte_end":10265425,"line_start":294,"line_end":294,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265430,"byte_end":10265433,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265438,"byte_end":10265452,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265457,"byte_end":10265462,"line_start":297,"line_end":297,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265467,"byte_end":10265474,"line_start":298,"line_end":298,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3035},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269619,"byte_end":10269628,"line_start":84,"line_end":84,"column_start":16,"column_end":25},"name":"TcpSocket","qualname":"::net::tcp::socket::TcpSocket","value":"TcpSocket {  }","parent":null,"children":[{"krate":0,"index":3036}],"decl_id":null,"docs":" A TCP socket that has not yet been converted to a `TcpStream` or\n `TcpListener`.","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270492,"byte_end":10270498,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"new_v4","qualname":"<TcpSocket>::new_v4","value":"pub fn new_v4() -> io::Result<TcpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Create a new socket configured for IPv4.","sig":null,"attributes":[{"value":"/ Create a new socket configured for IPv4.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269697,"byte_end":10269741,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269746,"byte_end":10269749,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Calls `socket(2)` with `AF_INET` and `SOCK_STREAM`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269754,"byte_end":10269809,"line_start":92,"line_end":92,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269814,"byte_end":10269817,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269822,"byte_end":10269835,"line_start":94,"line_end":94,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269840,"byte_end":10269843,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ On success, the newly created `TcpSocket` is returned. If an error is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269848,"byte_end":10269921,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ encountered, it is returned instead.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269926,"byte_end":10269966,"line_start":97,"line_end":97,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269971,"byte_end":10269974,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269979,"byte_end":10269993,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269998,"byte_end":10270001,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Create a new IPv4 socket and start listening.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270006,"byte_end":10270055,"line_start":101,"line_end":101,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270060,"byte_end":10270063,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270068,"byte_end":10270081,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270086,"byte_end":10270116,"line_start":104,"line_end":104,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270121,"byte_end":10270124,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270129,"byte_end":10270145,"line_start":106,"line_end":106,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270150,"byte_end":10270153,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270158,"byte_end":10270176,"line_start":108,"line_end":108,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270181,"byte_end":10270220,"line_start":109,"line_end":109,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270225,"byte_end":10270278,"line_start":110,"line_end":110,"column_start":5,"column_end":58}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270283,"byte_end":10270325,"line_start":111,"line_end":111,"column_start":5,"column_end":47}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270330,"byte_end":10270357,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270362,"byte_end":10270365,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(128)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270370,"byte_end":10270413,"line_start":114,"line_end":114,"column_start":5,"column_end":48}},{"value":"/ # drop(listener);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270418,"byte_end":10270439,"line_start":115,"line_end":115,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270444,"byte_end":10270458,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270463,"byte_end":10270468,"line_start":117,"line_end":117,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270473,"byte_end":10270480,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271415,"byte_end":10271421,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"new_v6","qualname":"<TcpSocket>::new_v6","value":"pub fn new_v6() -> io::Result<TcpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Create a new socket configured for IPv6.","sig":null,"attributes":[{"value":"/ Create a new socket configured for IPv6.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270623,"byte_end":10270667,"line_start":124,"line_end":124,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270672,"byte_end":10270675,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Calls `socket(2)` with `AF_INET6` and `SOCK_STREAM`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270680,"byte_end":10270736,"line_start":126,"line_end":126,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270741,"byte_end":10270744,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270749,"byte_end":10270762,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270767,"byte_end":10270770,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ On success, the newly created `TcpSocket` is returned. If an error is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270775,"byte_end":10270848,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ encountered, it is returned instead.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270853,"byte_end":10270893,"line_start":131,"line_end":131,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270898,"byte_end":10270901,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270906,"byte_end":10270920,"line_start":133,"line_end":133,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270925,"byte_end":10270928,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Create a new IPv6 socket and start listening.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270933,"byte_end":10270982,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270987,"byte_end":10270990,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10270995,"byte_end":10271008,"line_start":137,"line_end":137,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271013,"byte_end":10271043,"line_start":138,"line_end":138,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271048,"byte_end":10271051,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271056,"byte_end":10271072,"line_start":140,"line_end":140,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271077,"byte_end":10271080,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271085,"byte_end":10271103,"line_start":142,"line_end":142,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271108,"byte_end":10271147,"line_start":143,"line_end":143,"column_start":5,"column_end":44}},{"value":"/     let addr = \"[::1]:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271152,"byte_end":10271201,"line_start":144,"line_end":144,"column_start":5,"column_end":54}},{"value":"/     let socket = TcpSocket::new_v6()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271206,"byte_end":10271248,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271253,"byte_end":10271280,"line_start":146,"line_end":146,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271285,"byte_end":10271288,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(128)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271293,"byte_end":10271336,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ # drop(listener);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271341,"byte_end":10271362,"line_start":149,"line_end":149,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271367,"byte_end":10271381,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271386,"byte_end":10271391,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271396,"byte_end":10271403,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272236,"byte_end":10272249,"line_start":184,"line_end":184,"column_start":12,"column_end":25},"name":"set_reuseaddr","qualname":"<TcpSocket>::set_reuseaddr","value":"pub fn set_reuseaddr(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Allow the socket to bind to an in-use address.","sig":null,"attributes":[{"value":"/ Allow the socket to bind to an in-use address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271546,"byte_end":10271596,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271601,"byte_end":10271604,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Behavior is platform specific. Refer to the target platform's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271609,"byte_end":10271674,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/ documentation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271679,"byte_end":10271714,"line_start":161,"line_end":161,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271719,"byte_end":10271722,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271727,"byte_end":10271741,"line_start":163,"line_end":163,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271746,"byte_end":10271749,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271754,"byte_end":10271767,"line_start":165,"line_end":165,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271772,"byte_end":10271802,"line_start":166,"line_end":166,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271807,"byte_end":10271810,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271815,"byte_end":10271831,"line_start":168,"line_end":168,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271836,"byte_end":10271839,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271844,"byte_end":10271862,"line_start":170,"line_end":170,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271867,"byte_end":10271906,"line_start":171,"line_end":171,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271911,"byte_end":10271964,"line_start":172,"line_end":172,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271969,"byte_end":10271972,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10271977,"byte_end":10272019,"line_start":174,"line_end":174,"column_start":5,"column_end":47}},{"value":"/     socket.set_reuseaddr(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272024,"byte_end":10272060,"line_start":175,"line_end":175,"column_start":5,"column_end":41}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272065,"byte_end":10272092,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272097,"byte_end":10272100,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272105,"byte_end":10272149,"line_start":178,"line_end":178,"column_start":5,"column_end":49}},{"value":"/ # drop(listener);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272154,"byte_end":10272175,"line_start":179,"line_end":179,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272180,"byte_end":10272183,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272188,"byte_end":10272202,"line_start":181,"line_end":181,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272207,"byte_end":10272212,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272217,"byte_end":10272224,"line_start":183,"line_end":183,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272948,"byte_end":10272957,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"reuseaddr","qualname":"<TcpSocket>::reuseaddr","value":"pub fn reuseaddr(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value set for `SO_REUSEADDR` on this socket","sig":null,"attributes":[{"value":"/ Retrieves the value set for `SO_REUSEADDR` on this socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272349,"byte_end":10272410,"line_start":188,"line_end":188,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272415,"byte_end":10272418,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272423,"byte_end":10272437,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272442,"byte_end":10272445,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272450,"byte_end":10272463,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272468,"byte_end":10272498,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272503,"byte_end":10272506,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272511,"byte_end":10272527,"line_start":195,"line_end":195,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272532,"byte_end":10272535,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272540,"byte_end":10272558,"line_start":197,"line_end":197,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272563,"byte_end":10272602,"line_start":198,"line_end":198,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272607,"byte_end":10272660,"line_start":199,"line_end":199,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272665,"byte_end":10272668,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272673,"byte_end":10272715,"line_start":201,"line_end":201,"column_start":5,"column_end":47}},{"value":"/     socket.set_reuseaddr(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272720,"byte_end":10272756,"line_start":202,"line_end":202,"column_start":5,"column_end":41}},{"value":"/     assert!(socket.reuseaddr().unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272761,"byte_end":10272806,"line_start":203,"line_end":203,"column_start":5,"column_end":50}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272811,"byte_end":10272838,"line_start":204,"line_end":204,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272843,"byte_end":10272846,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272851,"byte_end":10272895,"line_start":206,"line_end":206,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272900,"byte_end":10272914,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272919,"byte_end":10272924,"line_start":208,"line_end":208,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10272929,"byte_end":10272936,"line_start":209,"line_end":209,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273958,"byte_end":10273971,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"set_reuseport","qualname":"<TcpSocket>::set_reuseport","value":"pub fn set_reuseport(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Allow the socket to bind to an in-use port. Only available for unix systems\n (excluding Solaris & Illumos).","sig":null,"attributes":[{"value":"/ Allow the socket to bind to an in-use port. Only available for unix systems","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273033,"byte_end":10273112,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/ (excluding Solaris & Illumos).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273117,"byte_end":10273151,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273156,"byte_end":10273159,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Behavior is platform specific. Refer to the target platform's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273164,"byte_end":10273229,"line_start":217,"line_end":217,"column_start":5,"column_end":70}},{"value":"/ documentation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273234,"byte_end":10273269,"line_start":218,"line_end":218,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273274,"byte_end":10273277,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273282,"byte_end":10273296,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273301,"byte_end":10273304,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273309,"byte_end":10273322,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273327,"byte_end":10273357,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273362,"byte_end":10273365,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273370,"byte_end":10273386,"line_start":225,"line_end":225,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273391,"byte_end":10273394,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273399,"byte_end":10273417,"line_start":227,"line_end":227,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273422,"byte_end":10273461,"line_start":228,"line_end":228,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273466,"byte_end":10273519,"line_start":229,"line_end":229,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273524,"byte_end":10273527,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273532,"byte_end":10273574,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"/     socket.set_reuseport(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273579,"byte_end":10273615,"line_start":232,"line_end":232,"column_start":5,"column_end":41}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273620,"byte_end":10273647,"line_start":233,"line_end":233,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273652,"byte_end":10273655,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273660,"byte_end":10273704,"line_start":235,"line_end":235,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273709,"byte_end":10273723,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273728,"byte_end":10273733,"line_start":237,"line_end":237,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273738,"byte_end":10273745,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"cfg(all(unix, not(target_os = \"solaris\"), not(target_os = \"illumos\")))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10273750,"byte_end":10273823,"line_start":239,"line_end":239,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275046,"byte_end":10275055,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"reuseport","qualname":"<TcpSocket>::reuseport","value":"pub fn reuseport(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Allow the socket to bind to an in-use port. Only available for unix systems\n (excluding Solaris & Illumos).","sig":null,"attributes":[{"value":"/ Allow the socket to bind to an in-use port. Only available for unix systems","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274071,"byte_end":10274150,"line_start":248,"line_end":248,"column_start":5,"column_end":84}},{"value":"/ (excluding Solaris & Illumos).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274155,"byte_end":10274189,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274194,"byte_end":10274197,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Behavior is platform specific. Refer to the target platform's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274202,"byte_end":10274267,"line_start":251,"line_end":251,"column_start":5,"column_end":70}},{"value":"/ documentation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274272,"byte_end":10274307,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274312,"byte_end":10274315,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274320,"byte_end":10274334,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274339,"byte_end":10274342,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274347,"byte_end":10274360,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274365,"byte_end":10274395,"line_start":257,"line_end":257,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274400,"byte_end":10274403,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274408,"byte_end":10274424,"line_start":259,"line_end":259,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274429,"byte_end":10274432,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274437,"byte_end":10274455,"line_start":261,"line_end":261,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274460,"byte_end":10274499,"line_start":262,"line_end":262,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274504,"byte_end":10274557,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274562,"byte_end":10274565,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274570,"byte_end":10274612,"line_start":265,"line_end":265,"column_start":5,"column_end":47}},{"value":"/     socket.set_reuseport(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274617,"byte_end":10274653,"line_start":266,"line_end":266,"column_start":5,"column_end":41}},{"value":"/     assert!(socket.reuseport().unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274658,"byte_end":10274703,"line_start":267,"line_end":267,"column_start":5,"column_end":50}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274708,"byte_end":10274735,"line_start":268,"line_end":268,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274740,"byte_end":10274743,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274748,"byte_end":10274792,"line_start":270,"line_end":270,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274797,"byte_end":10274811,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274816,"byte_end":10274821,"line_start":272,"line_end":272,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274826,"byte_end":10274833,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"cfg(all(unix, not(target_os = \"solaris\"), not(target_os = \"illumos\")))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10274838,"byte_end":10274911,"line_start":274,"line_end":274,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275283,"byte_end":10275303,"line_start":286,"line_end":286,"column_start":12,"column_end":32},"name":"set_send_buffer_size","qualname":"<TcpSocket>::set_send_buffer_size","value":"pub fn set_send_buffer_size(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the TCP send buffer on this socket.","sig":null,"attributes":[{"value":"/ Sets the size of the TCP send buffer on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275131,"byte_end":10275187,"line_start":283,"line_end":283,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275192,"byte_end":10275195,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ On most operating systems, this sets the `SO_SNDBUF` socket option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275200,"byte_end":10275271,"line_start":285,"line_end":285,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276626,"byte_end":10276642,"line_start":313,"line_end":313,"column_start":12,"column_end":28},"name":"send_buffer_size","qualname":"<TcpSocket>::send_buffer_size","value":"pub fn send_buffer_size(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the TCP send buffer for this socket.","sig":null,"attributes":[{"value":"/ Returns the size of the TCP send buffer for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275399,"byte_end":10275459,"line_start":290,"line_end":290,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275464,"byte_end":10275467,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ On most operating systems, this is the value of the `SO_SNDBUF` socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275472,"byte_end":10275546,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275551,"byte_end":10275562,"line_start":293,"line_end":293,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275567,"byte_end":10275570,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that if [`set_send_buffer_size`] has been called on this socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275575,"byte_end":10275647,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ previously, the value returned by this function may not be the same as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275652,"byte_end":10275726,"line_start":296,"line_end":296,"column_start":5,"column_end":79}},{"value":"/ the argument provided to `set_send_buffer_size`. This is for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275731,"byte_end":10275799,"line_start":297,"line_end":297,"column_start":5,"column_end":73}},{"value":"/ following reasons:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275804,"byte_end":10275826,"line_start":298,"line_end":298,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275831,"byte_end":10275834,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ * Most operating systems have minimum and maximum allowed sizes for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275839,"byte_end":10275914,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/   send buffer, and will clamp the provided value if it is below the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275919,"byte_end":10275990,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/   minimum or above the maximum. The minimum and maximum buffer sizes are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10275995,"byte_end":10276071,"line_start":302,"line_end":302,"column_start":5,"column_end":81}},{"value":"/   OS-dependent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276076,"byte_end":10276095,"line_start":303,"line_end":303,"column_start":5,"column_end":24}},{"value":"/ * Linux will double the buffer size to account for internal bookkeeping","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276100,"byte_end":10276175,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/   data, and returns the doubled value from `getsockopt(2)`. As per `man","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276180,"byte_end":10276255,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/   7 socket`:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276260,"byte_end":10276276,"line_start":306,"line_end":306,"column_start":5,"column_end":21}},{"value":"/   > Sets or gets the maximum socket send buffer in bytes. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276281,"byte_end":10276346,"line_start":307,"line_end":307,"column_start":5,"column_end":70}},{"value":"/   > kernel doubles this value (to allow space for bookkeeping","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276351,"byte_end":10276416,"line_start":308,"line_end":308,"column_start":5,"column_end":70}},{"value":"/   > overhead) when it is set using `setsockopt(2)`, and this doubled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276421,"byte_end":10276493,"line_start":309,"line_end":309,"column_start":5,"column_end":77}},{"value":"/   > value is returned by `getsockopt(2)`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276498,"byte_end":10276543,"line_start":310,"line_end":310,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276548,"byte_end":10276551,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ [`set_send_buffer_size`]: #method.set_send_buffer_size","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276556,"byte_end":10276614,"line_start":312,"line_end":312,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276879,"byte_end":10276899,"line_start":320,"line_end":320,"column_start":12,"column_end":32},"name":"set_recv_buffer_size","qualname":"<TcpSocket>::set_recv_buffer_size","value":"pub fn set_recv_buffer_size(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the TCP receive buffer on this socket.","sig":null,"attributes":[{"value":"/ Sets the size of the TCP receive buffer on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276724,"byte_end":10276783,"line_start":317,"line_end":317,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276788,"byte_end":10276791,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ On most operating systems, this sets the `SO_RCVBUF` socket option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276796,"byte_end":10276867,"line_start":319,"line_end":319,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278228,"byte_end":10278244,"line_start":347,"line_end":347,"column_start":12,"column_end":28},"name":"recv_buffer_size","qualname":"<TcpSocket>::recv_buffer_size","value":"pub fn recv_buffer_size(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the TCP receive buffer for this socket.","sig":null,"attributes":[{"value":"/ Returns the size of the TCP receive buffer for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10276995,"byte_end":10277058,"line_start":324,"line_end":324,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277063,"byte_end":10277066,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ On most operating systems, this is the value of the `SO_RCVBUF` socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277071,"byte_end":10277145,"line_start":326,"line_end":326,"column_start":5,"column_end":79}},{"value":"/ option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277150,"byte_end":10277161,"line_start":327,"line_end":327,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277166,"byte_end":10277169,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Note that if [`set_recv_buffer_size`] has been called on this socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277174,"byte_end":10277246,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ previously, the value returned by this function may not be the same as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277251,"byte_end":10277325,"line_start":330,"line_end":330,"column_start":5,"column_end":79}},{"value":"/ the argument provided to `set_send_buffer_size`. This is for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277330,"byte_end":10277398,"line_start":331,"line_end":331,"column_start":5,"column_end":73}},{"value":"/ following reasons:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277403,"byte_end":10277425,"line_start":332,"line_end":332,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277430,"byte_end":10277433,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ * Most operating systems have minimum and maximum allowed sizes for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277438,"byte_end":10277513,"line_start":334,"line_end":334,"column_start":5,"column_end":80}},{"value":"/   receive buffer, and will clamp the provided value if it is below the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277518,"byte_end":10277592,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"/   minimum or above the maximum. The minimum and maximum buffer sizes are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277597,"byte_end":10277673,"line_start":336,"line_end":336,"column_start":5,"column_end":81}},{"value":"/   OS-dependent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277678,"byte_end":10277697,"line_start":337,"line_end":337,"column_start":5,"column_end":24}},{"value":"/ * Linux will double the buffer size to account for internal bookkeeping","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277702,"byte_end":10277777,"line_start":338,"line_end":338,"column_start":5,"column_end":80}},{"value":"/   data, and returns the doubled value from `getsockopt(2)`. As per `man","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277782,"byte_end":10277857,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/   7 socket`:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277862,"byte_end":10277878,"line_start":340,"line_end":340,"column_start":5,"column_end":21}},{"value":"/   > Sets or gets the maximum socket send buffer in bytes. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277883,"byte_end":10277948,"line_start":341,"line_end":341,"column_start":5,"column_end":70}},{"value":"/   > kernel doubles this value (to allow space for bookkeeping","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10277953,"byte_end":10278018,"line_start":342,"line_end":342,"column_start":5,"column_end":70}},{"value":"/   > overhead) when it is set using `setsockopt(2)`, and this doubled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278023,"byte_end":10278095,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/   > value is returned by `getsockopt(2)`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278100,"byte_end":10278145,"line_start":344,"line_end":344,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278150,"byte_end":10278153,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ [`set_recv_buffer_size`]: #method.set_recv_buffer_size","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278158,"byte_end":10278216,"line_start":346,"line_end":346,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278952,"byte_end":10278962,"line_start":373,"line_end":373,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpSocket>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Get the local address of this socket.","sig":null,"attributes":[{"value":"/ Get the local address of this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278326,"byte_end":10278367,"line_start":351,"line_end":351,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278372,"byte_end":10278375,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Will fail on windows if called before `bind`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278380,"byte_end":10278429,"line_start":353,"line_end":353,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278434,"byte_end":10278437,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278442,"byte_end":10278456,"line_start":355,"line_end":355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278461,"byte_end":10278464,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278469,"byte_end":10278482,"line_start":357,"line_end":357,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278487,"byte_end":10278517,"line_start":358,"line_end":358,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278522,"byte_end":10278525,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278530,"byte_end":10278546,"line_start":360,"line_end":360,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278551,"byte_end":10278554,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278559,"byte_end":10278577,"line_start":362,"line_end":362,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278582,"byte_end":10278621,"line_start":363,"line_end":363,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278626,"byte_end":10278679,"line_start":364,"line_end":364,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278684,"byte_end":10278687,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278692,"byte_end":10278734,"line_start":366,"line_end":366,"column_start":5,"column_end":47}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278739,"byte_end":10278766,"line_start":367,"line_end":367,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(socket.local_addr().unwrap().to_string(), \"127.0.0.1:8080\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278771,"byte_end":10278850,"line_start":368,"line_end":368,"column_start":5,"column_end":84}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278855,"byte_end":10278899,"line_start":369,"line_end":369,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278904,"byte_end":10278918,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278923,"byte_end":10278928,"line_start":371,"line_end":371,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10278933,"byte_end":10278940,"line_start":372,"line_end":372,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279792,"byte_end":10279796,"line_start":405,"line_end":405,"column_start":12,"column_end":16},"name":"bind","qualname":"<TcpSocket>::bind","value":"pub fn bind(&Self, SocketAddr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Bind the socket to the given address.","sig":null,"attributes":[{"value":"/ Bind the socket to the given address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279044,"byte_end":10279085,"line_start":377,"line_end":377,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279090,"byte_end":10279093,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This calls the `bind(2)` operating-system function. Behavior is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279098,"byte_end":10279165,"line_start":379,"line_end":379,"column_start":5,"column_end":72}},{"value":"/ platform specific. Refer to the target platform's documentation for more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279170,"byte_end":10279246,"line_start":380,"line_end":380,"column_start":5,"column_end":81}},{"value":"/ details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279251,"byte_end":10279263,"line_start":381,"line_end":381,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279268,"byte_end":10279271,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279276,"byte_end":10279290,"line_start":383,"line_end":383,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279295,"byte_end":10279298,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Bind a socket before listening.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279303,"byte_end":10279338,"line_start":385,"line_end":385,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279343,"byte_end":10279346,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279351,"byte_end":10279364,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279369,"byte_end":10279399,"line_start":388,"line_end":388,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279404,"byte_end":10279407,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279412,"byte_end":10279428,"line_start":390,"line_end":390,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279433,"byte_end":10279436,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279441,"byte_end":10279459,"line_start":392,"line_end":392,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279464,"byte_end":10279503,"line_start":393,"line_end":393,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279508,"byte_end":10279561,"line_start":394,"line_end":394,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279566,"byte_end":10279569,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279574,"byte_end":10279616,"line_start":396,"line_end":396,"column_start":5,"column_end":47}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279621,"byte_end":10279648,"line_start":397,"line_end":397,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279653,"byte_end":10279656,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279661,"byte_end":10279705,"line_start":399,"line_end":399,"column_start":5,"column_end":49}},{"value":"/ # drop(listener);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279710,"byte_end":10279731,"line_start":400,"line_end":400,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279736,"byte_end":10279739,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279744,"byte_end":10279758,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279763,"byte_end":10279768,"line_start":403,"line_end":403,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279773,"byte_end":10279780,"line_start":404,"line_end":404,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280864,"byte_end":10280871,"line_start":441,"line_end":441,"column_start":18,"column_end":25},"name":"connect","qualname":"<TcpSocket>::connect","value":"pub async fn connect(Self, SocketAddr) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Establish a TCP connection with a peer at the specified socket address.","sig":null,"attributes":[{"value":"/ Establish a TCP connection with a peer at the specified socket address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279883,"byte_end":10279958,"line_start":409,"line_end":409,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279963,"byte_end":10279966,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ The `TcpSocket` is consumed. Once the connection is established, a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10279971,"byte_end":10280041,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ connected [`TcpStream`] is returned. If the connection fails, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280046,"byte_end":10280115,"line_start":412,"line_end":412,"column_start":5,"column_end":74}},{"value":"/ encountered error is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280120,"byte_end":10280154,"line_start":413,"line_end":413,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280159,"byte_end":10280162,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280167,"byte_end":10280195,"line_start":415,"line_end":415,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280200,"byte_end":10280203,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This calls the `connect(2)` operating-system function. Behavior is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280208,"byte_end":10280278,"line_start":417,"line_end":417,"column_start":5,"column_end":75}},{"value":"/ platform specific. Refer to the target platform's documentation for more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280283,"byte_end":10280359,"line_start":418,"line_end":418,"column_start":5,"column_end":81}},{"value":"/ details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280364,"byte_end":10280376,"line_start":419,"line_end":419,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280381,"byte_end":10280384,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280389,"byte_end":10280403,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280408,"byte_end":10280411,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Connecting to a peer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280416,"byte_end":10280441,"line_start":423,"line_end":423,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280446,"byte_end":10280449,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280454,"byte_end":10280467,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280472,"byte_end":10280502,"line_start":426,"line_end":426,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280507,"byte_end":10280510,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280515,"byte_end":10280531,"line_start":428,"line_end":428,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280536,"byte_end":10280539,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280544,"byte_end":10280562,"line_start":430,"line_end":430,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280567,"byte_end":10280606,"line_start":431,"line_end":431,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280611,"byte_end":10280664,"line_start":432,"line_end":432,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280669,"byte_end":10280672,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280677,"byte_end":10280719,"line_start":434,"line_end":434,"column_start":5,"column_end":47}},{"value":"/     let stream = socket.connect(addr).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280724,"byte_end":10280773,"line_start":435,"line_end":435,"column_start":5,"column_end":54}},{"value":"/ # drop(stream);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280778,"byte_end":10280797,"line_start":436,"line_end":436,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280802,"byte_end":10280805,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280810,"byte_end":10280824,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280829,"byte_end":10280834,"line_start":439,"line_end":439,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10280839,"byte_end":10280846,"line_start":440,"line_end":440,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282169,"byte_end":10282175,"line_start":481,"line_end":481,"column_start":12,"column_end":18},"name":"listen","qualname":"<TcpSocket>::listen","value":"pub fn listen(Self, u32) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Convert the socket into a `TcpListener`.","sig":null,"attributes":[{"value":"/ Convert the socket into a `TcpListener`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281021,"byte_end":10281065,"line_start":446,"line_end":446,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281070,"byte_end":10281073,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ `backlog` defines the maximum number of pending connections are queued","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281078,"byte_end":10281152,"line_start":448,"line_end":448,"column_start":5,"column_end":79}},{"value":"/ by the operating system at any given time. Connection are removed from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281157,"byte_end":10281231,"line_start":449,"line_end":449,"column_start":5,"column_end":79}},{"value":"/ the queue with [`TcpListener::accept`]. When the queue is full, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281236,"byte_end":10281307,"line_start":450,"line_end":450,"column_start":5,"column_end":76}},{"value":"/ operationg-system will start rejecting connections.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281312,"byte_end":10281367,"line_start":451,"line_end":451,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281372,"byte_end":10281375,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ [`TcpListener::accept`]: TcpListener::accept","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281380,"byte_end":10281428,"line_start":453,"line_end":453,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281433,"byte_end":10281436,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This calls the `listen(2)` operating-system function, marking the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281441,"byte_end":10281517,"line_start":455,"line_end":455,"column_start":5,"column_end":81}},{"value":"/ as a passive socket. Behavior is platform specific. Refer to the target","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281522,"byte_end":10281597,"line_start":456,"line_end":456,"column_start":5,"column_end":80}},{"value":"/ platform's documentation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281602,"byte_end":10281648,"line_start":457,"line_end":457,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281653,"byte_end":10281656,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281661,"byte_end":10281675,"line_start":459,"line_end":459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281680,"byte_end":10281683,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ Create a `TcpListener`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281688,"byte_end":10281715,"line_start":461,"line_end":461,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281720,"byte_end":10281723,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281728,"byte_end":10281741,"line_start":463,"line_end":463,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281746,"byte_end":10281776,"line_start":464,"line_end":464,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281781,"byte_end":10281784,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281789,"byte_end":10281805,"line_start":466,"line_end":466,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281810,"byte_end":10281813,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281818,"byte_end":10281836,"line_start":468,"line_end":468,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281841,"byte_end":10281880,"line_start":469,"line_end":469,"column_start":5,"column_end":44}},{"value":"/     let addr = \"127.0.0.1:8080\".parse().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281885,"byte_end":10281938,"line_start":470,"line_end":470,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281943,"byte_end":10281946,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/     let socket = TcpSocket::new_v4()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281951,"byte_end":10281993,"line_start":472,"line_end":472,"column_start":5,"column_end":47}},{"value":"/     socket.bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10281998,"byte_end":10282025,"line_start":473,"line_end":473,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282030,"byte_end":10282033,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/     let listener = socket.listen(1024)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282038,"byte_end":10282082,"line_start":475,"line_end":475,"column_start":5,"column_end":49}},{"value":"/ # drop(listener);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282087,"byte_end":10282108,"line_start":476,"line_end":476,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282113,"byte_end":10282116,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282121,"byte_end":10282135,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282140,"byte_end":10282145,"line_start":479,"line_end":479,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282150,"byte_end":10282157,"line_start":480,"line_end":480,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3037},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284521,"byte_end":10284529,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"ReadHalf","qualname":"::net::tcp::split::ReadHalf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Borrowed read half of a [`TcpStream`], created by [`split`].","sig":null,"attributes":[{"value":"/ Borrowed read half of a [`TcpStream`], created by [`split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284188,"byte_end":10284252,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284253,"byte_end":10284256,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Reading from a `ReadHalf` is usually done using the convenience methods found on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284257,"byte_end":10284345,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284346,"byte_end":10284373,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284374,"byte_end":10284377,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284378,"byte_end":10284406,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ [`split`]: TcpStream::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284407,"byte_end":10284440,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284441,"byte_end":10284492,"line_start":27,"line_end":27,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3044},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285143,"byte_end":10285152,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"WriteHalf","qualname":"::net::tcp::split::WriteHalf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Borrowed write half of a [`TcpStream`], created by [`split`].","sig":null,"attributes":[{"value":"/ Borrowed write half of a [`TcpStream`], created by [`split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284551,"byte_end":10284616,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284617,"byte_end":10284620,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Note that in the [`AsyncWrite`] implemenation of this type, [`poll_shutdown`] will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284621,"byte_end":10284707,"line_start":33,"line_end":33,"column_start":1,"column_end":87}},{"value":"/ shut down the TCP stream in the write direction.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284708,"byte_end":10284760,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284761,"byte_end":10284764,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Writing to an `WriteHalf` is usually done using the convenience methods found","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284765,"byte_end":10284846,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ on the [`AsyncWriteExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284847,"byte_end":10284882,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284883,"byte_end":10284886,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284887,"byte_end":10284915,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ [`split`]: TcpStream::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284916,"byte_end":10284949,"line_start":40,"line_end":40,"column_start":1,"column_end":34}},{"value":"/ [`AsyncWrite`]: trait@crate::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284950,"byte_end":10284997,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ [`poll_shutdown`]: fn@crate::io::AsyncWrite::poll_shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10284998,"byte_end":10285060,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/ [`AsyncWriteExt`]: trait@crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285061,"byte_end":10285114,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286468,"byte_end":10286477,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"poll_peek","qualname":"<ReadHalf>::poll_peek","value":"pub fn poll_peek(&mut Self, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to receive data on the socket, without removing that data from\n the queue, registering the current task for wakeup if data is not yet\n available.","sig":null,"attributes":[{"value":"/ Attempt to receive data on the socket, without removing that data from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285326,"byte_end":10285400,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ the queue, registering the current task for wakeup if data is not yet","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285405,"byte_end":10285478,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285483,"byte_end":10285497,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285502,"byte_end":10285505,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_peek` or `poll_read`, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285510,"byte_end":10285581,"line_start":56,"line_end":56,"column_start":5,"column_end":76}},{"value":"/ `Waker` from the `Context` passed to the most recent call is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285586,"byte_end":10285660,"line_start":57,"line_end":57,"column_start":5,"column_end":79}},{"value":"/ to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285665,"byte_end":10285689,"line_start":58,"line_end":58,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285694,"byte_end":10285697,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ See the [`TcpStream::poll_peek`] level documenation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285702,"byte_end":10285775,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285780,"byte_end":10285783,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285788,"byte_end":10285802,"line_start":62,"line_end":62,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285807,"byte_end":10285810,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285815,"byte_end":10285828,"line_start":64,"line_end":64,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::{self, ReadBuf};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285833,"byte_end":10285868,"line_start":65,"line_end":65,"column_start":5,"column_end":40}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285873,"byte_end":10285903,"line_start":66,"line_end":66,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285908,"byte_end":10285911,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ use futures::future::poll_fn;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285916,"byte_end":10285949,"line_start":68,"line_end":68,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285954,"byte_end":10285957,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285962,"byte_end":10285980,"line_start":70,"line_end":70,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285985,"byte_end":10286024,"line_start":71,"line_end":71,"column_start":5,"column_end":44}},{"value":"/     let mut stream = TcpStream::connect(\"127.0.0.1:8000\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286029,"byte_end":10286098,"line_start":72,"line_end":72,"column_start":5,"column_end":74}},{"value":"/     let (mut read_half, _) = stream.split();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286103,"byte_end":10286151,"line_start":73,"line_end":73,"column_start":5,"column_end":53}},{"value":"/     let mut buf = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286156,"byte_end":10286186,"line_start":74,"line_end":74,"column_start":5,"column_end":35}},{"value":"/     let mut buf = ReadBuf::new(&mut buf);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286191,"byte_end":10286236,"line_start":75,"line_end":75,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286241,"byte_end":10286244,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/     poll_fn(|cx| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286249,"byte_end":10286271,"line_start":77,"line_end":77,"column_start":5,"column_end":27}},{"value":"/         read_half.poll_peek(cx, &mut buf)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286276,"byte_end":10286321,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"/     }).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286326,"byte_end":10286344,"line_start":79,"line_end":79,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286349,"byte_end":10286352,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286357,"byte_end":10286371,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286376,"byte_end":10286381,"line_start":82,"line_end":82,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286386,"byte_end":10286393,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286398,"byte_end":10286401,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream::poll_peek`]: TcpStream::poll_peek","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286406,"byte_end":10286456,"line_start":85,"line_end":85,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287937,"byte_end":10287941,"line_start":133,"line_end":133,"column_start":18,"column_end":22},"name":"peek","qualname":"<ReadHalf>::peek","value":"pub async fn peek<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data on the socket from the remote address to which it is\n connected, without removing that data from the queue. On success,\n returns the number of bytes peeked.","sig":null,"attributes":[{"value":"/ Receives data on the socket from the remote address to which it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286639,"byte_end":10286709,"line_start":94,"line_end":94,"column_start":5,"column_end":75}},{"value":"/ connected, without removing that data from the queue. On success,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286714,"byte_end":10286783,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ returns the number of bytes peeked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286788,"byte_end":10286827,"line_start":96,"line_end":96,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286832,"byte_end":10286835,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ See the [`TcpStream::peek`] level documenation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286840,"byte_end":10286908,"line_start":98,"line_end":98,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286913,"byte_end":10286916,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream::peek`]: TcpStream::peek","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286921,"byte_end":10286961,"line_start":100,"line_end":100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286966,"byte_end":10286969,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286974,"byte_end":10286988,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10286993,"byte_end":10286996,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287001,"byte_end":10287014,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287019,"byte_end":10287049,"line_start":105,"line_end":105,"column_start":5,"column_end":35}},{"value":"/ use tokio::io::AsyncReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287054,"byte_end":10287086,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287091,"byte_end":10287117,"line_start":107,"line_end":107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287122,"byte_end":10287125,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287130,"byte_end":10287148,"line_start":109,"line_end":109,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287153,"byte_end":10287204,"line_start":110,"line_end":110,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287209,"byte_end":10287237,"line_start":111,"line_end":111,"column_start":5,"column_end":33}},{"value":"/     let mut stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287242,"byte_end":10287311,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/     let (mut read_half, _) = stream.split();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287316,"byte_end":10287364,"line_start":113,"line_end":113,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287369,"byte_end":10287372,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/     let mut b1 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287377,"byte_end":10287406,"line_start":115,"line_end":115,"column_start":5,"column_end":34}},{"value":"/     let mut b2 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287411,"byte_end":10287440,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287445,"byte_end":10287448,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/     // Peek at the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287453,"byte_end":10287480,"line_start":118,"line_end":118,"column_start":5,"column_end":32}},{"value":"/     let n = read_half.peek(&mut b1).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287485,"byte_end":10287532,"line_start":119,"line_end":119,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287537,"byte_end":10287540,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/     // Read the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287545,"byte_end":10287569,"line_start":121,"line_end":121,"column_start":5,"column_end":29}},{"value":"/     assert_eq!(n, read_half.read(&mut b2[..n]).await?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287574,"byte_end":10287633,"line_start":122,"line_end":122,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(&b1[..n], &b2[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287638,"byte_end":10287677,"line_start":123,"line_end":123,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287682,"byte_end":10287685,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287690,"byte_end":10287704,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287709,"byte_end":10287714,"line_start":126,"line_end":126,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287719,"byte_end":10287726,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287731,"byte_end":10287734,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ The [`read`] method is defined on the [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287739,"byte_end":10287804,"line_start":129,"line_end":129,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287809,"byte_end":10287812,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ [`read`]: fn@crate::io::AsyncReadExt::read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287817,"byte_end":10287863,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10287868,"byte_end":10287919,"line_start":132,"line_end":132,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":3051},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290471,"byte_end":10290484,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"OwnedReadHalf","qualname":"::net::tcp::split_owned::OwnedReadHalf","value":"OwnedReadHalf {  }","parent":null,"children":[{"krate":0,"index":3052}],"decl_id":null,"docs":" Owned read half of a [`TcpStream`], created by [`into_split`].","sig":null,"attributes":[{"value":"/ Owned read half of a [`TcpStream`], created by [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290120,"byte_end":10290186,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290187,"byte_end":10290190,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Reading from an `OwnedReadHalf` is usually done using the convenience methods found","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290191,"byte_end":10290278,"line_start":24,"line_end":24,"column_start":1,"column_end":88}},{"value":"/ on the [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290279,"byte_end":10290313,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290314,"byte_end":10290317,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290318,"byte_end":10290346,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ [`into_split`]: TcpStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290347,"byte_end":10290390,"line_start":28,"line_end":28,"column_start":1,"column_end":44}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290391,"byte_end":10290442,"line_start":29,"line_end":29,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3055},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10291210,"byte_end":10291224,"line_start":50,"line_end":50,"column_start":12,"column_end":26},"name":"OwnedWriteHalf","qualname":"::net::tcp::split_owned::OwnedWriteHalf","value":"OwnedWriteHalf {  }","parent":null,"children":[{"krate":0,"index":3056},{"krate":0,"index":3057}],"decl_id":null,"docs":" Owned write half of a [`TcpStream`], created by [`into_split`].","sig":null,"attributes":[{"value":"/ Owned write half of a [`TcpStream`], created by [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290517,"byte_end":10290584,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290585,"byte_end":10290588,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Note that in the [`AsyncWrite`] implementation of this type, [`poll_shutdown`] will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290589,"byte_end":10290676,"line_start":37,"line_end":37,"column_start":1,"column_end":88}},{"value":"/ shut down the TCP stream in the write direction.  Dropping the write half","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290677,"byte_end":10290754,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ will also shut down the write half of the TCP stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290755,"byte_end":10290812,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290813,"byte_end":10290816,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Writing to an `OwnedWriteHalf` is usually done using the convenience methods found","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290817,"byte_end":10290903,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ on the [`AsyncWriteExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290904,"byte_end":10290939,"line_start":42,"line_end":42,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290940,"byte_end":10290943,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290944,"byte_end":10290972,"line_start":44,"line_end":44,"column_start":1,"column_end":29}},{"value":"/ [`into_split`]: TcpStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10290973,"byte_end":10291016,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/ [`AsyncWrite`]: trait@crate::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10291017,"byte_end":10291064,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ [`poll_shutdown`]: fn@crate::io::AsyncWrite::poll_shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10291065,"byte_end":10291127,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ [`AsyncWriteExt`]: trait@crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10291128,"byte_end":10291181,"line_start":48,"line_end":48,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3060},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292189,"byte_end":10292201,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"ReuniteError","qualname":"::net::tcp::split_owned::ReuniteError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error indicating that two halves were not from the same socket, and thus could\n not be reunited.\n","sig":null,"attributes":[{"value":"/ Error indicating that two halves were not from the same socket, and thus could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292057,"byte_end":10292139,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/ not be reunited.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292140,"byte_end":10292160,"line_start":82,"line_end":82,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3062},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292202,"byte_end":10292219,"line_start":84,"line_end":84,"column_start":25,"column_end":42},"name":"0","qualname":"::net::tcp::split_owned::ReuniteError::0","value":"net::tcp::split_owned::OwnedReadHalf","parent":{"krate":0,"index":3060},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3063},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292221,"byte_end":10292239,"line_start":84,"line_end":84,"column_start":44,"column_end":62},"name":"1","qualname":"::net::tcp::split_owned::ReuniteError::1","value":"net::tcp::split_owned::OwnedWriteHalf","parent":{"krate":0,"index":3060},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292785,"byte_end":10292792,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"reunite","qualname":"<OwnedReadHalf>::reunite","value":"pub fn reunite(Self, OwnedWriteHalf) -> Result<TcpStream, ReuniteError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two halves of a `TcpStream` back together and\n recover the original socket. Succeeds only if the two halves\n originated from the same call to [`into_split`].","sig":null,"attributes":[{"value":"/ Attempts to put the two halves of a `TcpStream` back together and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292522,"byte_end":10292591,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/ recover the original socket. Succeeds only if the two halves","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292596,"byte_end":10292660,"line_start":99,"line_end":99,"column_start":5,"column_end":69}},{"value":"/ originated from the same call to [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292665,"byte_end":10292717,"line_start":100,"line_end":100,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292722,"byte_end":10292725,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: TcpStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292730,"byte_end":10292773,"line_start":102,"line_end":102,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2773},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294042,"byte_end":10294051,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"poll_peek","qualname":"<OwnedReadHalf>::poll_peek","value":"pub fn poll_peek(&mut Self, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to receive data on the socket, without removing that data from\n the queue, registering the current task for wakeup if data is not yet\n available.","sig":null,"attributes":[{"value":"/ Attempt to receive data on the socket, without removing that data from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292899,"byte_end":10292973,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ the queue, registering the current task for wakeup if data is not yet","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292978,"byte_end":10293051,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293056,"byte_end":10293070,"line_start":109,"line_end":109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293075,"byte_end":10293078,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_peek` or `poll_read`, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293083,"byte_end":10293154,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ `Waker` from the `Context` passed to the most recent call is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293159,"byte_end":10293233,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293238,"byte_end":10293262,"line_start":113,"line_end":113,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293267,"byte_end":10293270,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ See the [`TcpStream::poll_peek`] level documenation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293275,"byte_end":10293348,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293353,"byte_end":10293356,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293361,"byte_end":10293375,"line_start":117,"line_end":117,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293380,"byte_end":10293383,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293388,"byte_end":10293401,"line_start":119,"line_end":119,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::{self, ReadBuf};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293406,"byte_end":10293441,"line_start":120,"line_end":120,"column_start":5,"column_end":40}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293446,"byte_end":10293476,"line_start":121,"line_end":121,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293481,"byte_end":10293484,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ use futures::future::poll_fn;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293489,"byte_end":10293522,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293527,"byte_end":10293530,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293535,"byte_end":10293553,"line_start":125,"line_end":125,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293558,"byte_end":10293597,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8000\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293602,"byte_end":10293667,"line_start":127,"line_end":127,"column_start":5,"column_end":70}},{"value":"/     let (mut read_half, _) = stream.into_split();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293672,"byte_end":10293725,"line_start":128,"line_end":128,"column_start":5,"column_end":58}},{"value":"/     let mut buf = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293730,"byte_end":10293760,"line_start":129,"line_end":129,"column_start":5,"column_end":35}},{"value":"/     let mut buf = ReadBuf::new(&mut buf);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293765,"byte_end":10293810,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293815,"byte_end":10293818,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/     poll_fn(|cx| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293823,"byte_end":10293845,"line_start":132,"line_end":132,"column_start":5,"column_end":27}},{"value":"/         read_half.poll_peek(cx, &mut buf)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293850,"byte_end":10293895,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/     }).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293900,"byte_end":10293918,"line_start":134,"line_end":134,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293923,"byte_end":10293926,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293931,"byte_end":10293945,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293950,"byte_end":10293955,"line_start":137,"line_end":137,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293960,"byte_end":10293967,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293972,"byte_end":10293975,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream::poll_peek`]: TcpStream::poll_peek","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10293980,"byte_end":10294030,"line_start":140,"line_end":140,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2774},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295516,"byte_end":10295520,"line_start":188,"line_end":188,"column_start":18,"column_end":22},"name":"peek","qualname":"<OwnedReadHalf>::peek","value":"pub async fn peek<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data on the socket from the remote address to which it is\n connected, without removing that data from the queue. On success,\n returns the number of bytes peeked.","sig":null,"attributes":[{"value":"/ Receives data on the socket from the remote address to which it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294217,"byte_end":10294287,"line_start":149,"line_end":149,"column_start":5,"column_end":75}},{"value":"/ connected, without removing that data from the queue. On success,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294292,"byte_end":10294361,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/ returns the number of bytes peeked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294366,"byte_end":10294405,"line_start":151,"line_end":151,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294410,"byte_end":10294413,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ See the [`TcpStream::peek`] level documenation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294418,"byte_end":10294486,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294491,"byte_end":10294494,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ [`TcpStream::peek`]: TcpStream::peek","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294499,"byte_end":10294539,"line_start":155,"line_end":155,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294544,"byte_end":10294547,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294552,"byte_end":10294566,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294571,"byte_end":10294574,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294579,"byte_end":10294592,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294597,"byte_end":10294627,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/ use tokio::io::AsyncReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294632,"byte_end":10294664,"line_start":161,"line_end":161,"column_start":5,"column_end":37}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294669,"byte_end":10294695,"line_start":162,"line_end":162,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294700,"byte_end":10294703,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294708,"byte_end":10294726,"line_start":164,"line_end":164,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294731,"byte_end":10294782,"line_start":165,"line_end":165,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294787,"byte_end":10294815,"line_start":166,"line_end":166,"column_start":5,"column_end":33}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294820,"byte_end":10294885,"line_start":167,"line_end":167,"column_start":5,"column_end":70}},{"value":"/     let (mut read_half, _) = stream.into_split();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294890,"byte_end":10294943,"line_start":168,"line_end":168,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294948,"byte_end":10294951,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/     let mut b1 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294956,"byte_end":10294985,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/     let mut b2 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10294990,"byte_end":10295019,"line_start":171,"line_end":171,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295024,"byte_end":10295027,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/     // Peek at the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295032,"byte_end":10295059,"line_start":173,"line_end":173,"column_start":5,"column_end":32}},{"value":"/     let n = read_half.peek(&mut b1).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295064,"byte_end":10295111,"line_start":174,"line_end":174,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295116,"byte_end":10295119,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/     // Read the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295124,"byte_end":10295148,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/     assert_eq!(n, read_half.read(&mut b2[..n]).await?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295153,"byte_end":10295212,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(&b1[..n], &b2[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295217,"byte_end":10295256,"line_start":178,"line_end":178,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295261,"byte_end":10295264,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295269,"byte_end":10295283,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295288,"byte_end":10295293,"line_start":181,"line_end":181,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295298,"byte_end":10295305,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295310,"byte_end":10295313,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The [`read`] method is defined on the [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295318,"byte_end":10295383,"line_start":184,"line_end":184,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295388,"byte_end":10295391,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ [`read`]: fn@crate::io::AsyncReadExt::read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295396,"byte_end":10295442,"line_start":186,"line_end":186,"column_start":5,"column_end":51}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295447,"byte_end":10295498,"line_start":187,"line_end":187,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296195,"byte_end":10296202,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"reunite","qualname":"<OwnedWriteHalf>::reunite","value":"pub fn reunite(Self, OwnedReadHalf) -> Result<TcpStream, ReuniteError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two halves of a `TcpStream` back together and\n recover the original socket. Succeeds only if the two halves\n originated from the same call to [`into_split`].","sig":null,"attributes":[{"value":"/ Attempts to put the two halves of a `TcpStream` back together and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295932,"byte_end":10296001,"line_start":205,"line_end":205,"column_start":5,"column_end":74}},{"value":"/ recover the original socket. Succeeds only if the two halves","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296006,"byte_end":10296070,"line_start":206,"line_end":206,"column_start":5,"column_end":69}},{"value":"/ originated from the same call to [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296075,"byte_end":10296127,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296132,"byte_end":10296135,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: TcpStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296140,"byte_end":10296183,"line_start":209,"line_end":209,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296507,"byte_end":10296513,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"forget","qualname":"<OwnedWriteHalf>::forget","value":"pub fn forget(Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the write half, but don't close the write half of the stream\n until the read half is dropped. If the read half has already been\n dropped, this closes the stream.\n","sig":null,"attributes":[{"value":"/ Destroy the write half, but don't close the write half of the stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296308,"byte_end":10296380,"line_start":214,"line_end":214,"column_start":5,"column_end":77}},{"value":"/ until the read half is dropped. If the read half has already been","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296385,"byte_end":10296454,"line_start":215,"line_end":215,"column_start":5,"column_end":74}},{"value":"/ dropped, this closes the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296459,"byte_end":10296495,"line_start":216,"line_end":216,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3066},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300423,"byte_end":10300432,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"name":"TcpStream","qualname":"::net::tcp::stream::TcpStream","value":"TcpStream {  }","parent":null,"children":[{"krate":0,"index":3067}],"decl_id":null,"docs":" A TCP stream between a local and a remote socket.","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301966,"byte_end":10301973,"line_start":109,"line_end":109,"column_start":18,"column_end":25},"name":"connect","qualname":"<TcpStream>::connect","value":"pub async fn connect<A: ToSocketAddrs>(A) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Opens a TCP connection to a remote host.","sig":null,"attributes":[{"value":"/ Opens a TCP connection to a remote host.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300511,"byte_end":10300555,"line_start":72,"line_end":72,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300560,"byte_end":10300563,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ `addr` is an address of the remote host. Anything which implements the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300568,"byte_end":10300642,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ [`ToSocketAddrs`] trait can be supplied as the address. Note that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300647,"byte_end":10300716,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/ strings only implement this trait when the **`net`** feature is enabled,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300721,"byte_end":10300797,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ as strings may contain domain names that need to be resolved.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300802,"byte_end":10300867,"line_start":77,"line_end":77,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300872,"byte_end":10300875,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ If `addr` yields multiple addresses, connect will be attempted with each","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300880,"byte_end":10300956,"line_start":79,"line_end":79,"column_start":5,"column_end":81}},{"value":"/ of the addresses until a connection is successful. If none of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300961,"byte_end":10301030,"line_start":80,"line_end":80,"column_start":5,"column_end":74}},{"value":"/ addresses result in a successful connection, the error returned from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301035,"byte_end":10301111,"line_start":81,"line_end":81,"column_start":5,"column_end":81}},{"value":"/ last connection attempt (the last address) is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301116,"byte_end":10301175,"line_start":82,"line_end":82,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301180,"byte_end":10301183,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ [`ToSocketAddrs`]: trait@crate::net::ToSocketAddrs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301188,"byte_end":10301242,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301247,"byte_end":10301250,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301255,"byte_end":10301269,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301274,"byte_end":10301277,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301282,"byte_end":10301295,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301300,"byte_end":10301330,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/ use tokio::io::AsyncWriteExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301335,"byte_end":10301368,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301373,"byte_end":10301399,"line_start":91,"line_end":91,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301404,"byte_end":10301407,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301412,"byte_end":10301430,"line_start":93,"line_end":93,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301435,"byte_end":10301486,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301491,"byte_end":10301519,"line_start":95,"line_end":95,"column_start":5,"column_end":33}},{"value":"/     let mut stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301524,"byte_end":10301593,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301598,"byte_end":10301601,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/     // Write some data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301606,"byte_end":10301633,"line_start":98,"line_end":98,"column_start":5,"column_end":32}},{"value":"/     stream.write_all(b\"hello world!\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301638,"byte_end":10301687,"line_start":99,"line_end":99,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301692,"byte_end":10301695,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301700,"byte_end":10301714,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301719,"byte_end":10301724,"line_start":102,"line_end":102,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301729,"byte_end":10301736,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301741,"byte_end":10301744,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The [`write_all`] method is defined on the [`AsyncWriteExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301749,"byte_end":10301820,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301825,"byte_end":10301828,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ [`write_all`]: fn@crate::io::AsyncWriteExt::write_all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301833,"byte_end":10301890,"line_start":107,"line_end":107,"column_start":5,"column_end":62}},{"value":"/ [`AsyncWriteExt`]: trait@crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10301895,"byte_end":10301948,"line_start":108,"line_end":108,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2848},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304697,"byte_end":10304705,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"from_std","qualname":"<TcpStream>::from_std","value":"pub fn from_std(std::net::TcpStream) -> io::Result<TcpStream>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `TcpStream` from a `std::net::TcpStream`.","sig":null,"attributes":[{"value":"/ Creates new `TcpStream` from a `std::net::TcpStream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303580,"byte_end":10303637,"line_start":158,"line_end":158,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303642,"byte_end":10303645,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a TCP stream from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303650,"byte_end":10303720,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes nothing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303725,"byte_end":10303801,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"/ about the underlying stream; it is left up to the user to set it in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303806,"byte_end":10303877,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303882,"byte_end":10303904,"line_start":163,"line_end":163,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303909,"byte_end":10303912,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303917,"byte_end":10303931,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303936,"byte_end":10303939,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303944,"byte_end":10303962,"line_start":167,"line_end":167,"column_start":5,"column_end":23}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303967,"byte_end":10303993,"line_start":168,"line_end":168,"column_start":5,"column_end":31}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10303998,"byte_end":10304028,"line_start":169,"line_end":169,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304033,"byte_end":10304036,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304041,"byte_end":10304059,"line_start":171,"line_end":171,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304064,"byte_end":10304115,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/     let std_stream = std::net::TcpStream::connect(\"127.0.0.1:34254\")?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304120,"byte_end":10304194,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/     std_stream.set_nonblocking(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304199,"byte_end":10304241,"line_start":174,"line_end":174,"column_start":5,"column_end":47}},{"value":"/     let stream = TcpStream::from_std(std_stream)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304246,"byte_end":10304300,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304305,"byte_end":10304319,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304324,"byte_end":10304329,"line_start":177,"line_end":177,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304334,"byte_end":10304341,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304346,"byte_end":10304349,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304354,"byte_end":10304366,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304371,"byte_end":10304374,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304379,"byte_end":10304439,"line_start":182,"line_end":182,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304444,"byte_end":10304447,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304452,"byte_end":10304522,"line_start":184,"line_end":184,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304527,"byte_end":10304600,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304605,"byte_end":10304685,"line_start":186,"line_end":186,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306347,"byte_end":10306355,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"into_std","qualname":"<TcpStream>::into_std","value":"pub fn into_std(Self) -> io::Result<std::net::TcpStream>","parent":null,"children":[],"decl_id":null,"docs":" Turn a [`tokio::net::TcpStream`] into a [`std::net::TcpStream`].","sig":null,"attributes":[{"value":"/ Turn a [`tokio::net::TcpStream`] into a [`std::net::TcpStream`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304898,"byte_end":10304966,"line_start":193,"line_end":193,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304971,"byte_end":10304974,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The returned [`std::net::TcpStream`] will have `nonblocking mode` set as `true`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10304979,"byte_end":10305063,"line_start":195,"line_end":195,"column_start":5,"column_end":89}},{"value":"/ Use [`set_nonblocking`] to change the blocking mode if needed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305068,"byte_end":10305134,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305139,"byte_end":10305142,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305147,"byte_end":10305161,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305166,"byte_end":10305169,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305174,"byte_end":10305181,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305186,"byte_end":10305212,"line_start":201,"line_end":201,"column_start":5,"column_end":31}},{"value":"/ use std::io::Read;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305217,"byte_end":10305239,"line_start":202,"line_end":202,"column_start":5,"column_end":27}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305244,"byte_end":10305276,"line_start":203,"line_end":203,"column_start":5,"column_end":37}},{"value":"/ # use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305281,"byte_end":10305313,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ # use tokio::io::AsyncWriteExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305318,"byte_end":10305353,"line_start":205,"line_end":205,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305358,"byte_end":10305361,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305366,"byte_end":10305384,"line_start":207,"line_end":207,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305389,"byte_end":10305440,"line_start":208,"line_end":208,"column_start":5,"column_end":56}},{"value":"/     let mut data = [0u8; 12];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305445,"byte_end":10305478,"line_start":209,"line_end":209,"column_start":5,"column_end":38}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:34254\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305483,"byte_end":10305550,"line_start":210,"line_end":210,"column_start":5,"column_end":72}},{"value":"/ #   let handle = tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305555,"byte_end":10305596,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ #       let mut stream: TcpStream = TcpStream::connect(\"127.0.0.1:34254\").await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305601,"byte_end":10305694,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ #       stream.write(b\"Hello world!\").await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305699,"byte_end":10305756,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/ #   });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305761,"byte_end":10305772,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/     let (tokio_tcp_stream, _) = listener.accept().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305777,"byte_end":10305838,"line_start":215,"line_end":215,"column_start":5,"column_end":66}},{"value":"/     let mut std_tcp_stream = tokio_tcp_stream.into_std()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305843,"byte_end":10305905,"line_start":216,"line_end":216,"column_start":5,"column_end":67}},{"value":"/ #   handle.await.expect(\"The task being joined has panicked\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305910,"byte_end":10305976,"line_start":217,"line_end":217,"column_start":5,"column_end":71}},{"value":"/     std_tcp_stream.set_nonblocking(false)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10305981,"byte_end":10306028,"line_start":218,"line_end":218,"column_start":5,"column_end":52}},{"value":"/     std_tcp_stream.read_exact(&mut data)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306033,"byte_end":10306079,"line_start":219,"line_end":219,"column_start":5,"column_end":51}},{"value":"/ #   assert_eq!(b\"Hello world!\", &data);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306084,"byte_end":10306127,"line_start":220,"line_end":220,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306132,"byte_end":10306146,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306151,"byte_end":10306156,"line_start":222,"line_end":222,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306161,"byte_end":10306168,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/ [`tokio::net::TcpStream`]: TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306173,"byte_end":10306213,"line_start":224,"line_end":224,"column_start":5,"column_end":45}},{"value":"/ [`std::net::TcpStream`]: std::net::TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306218,"byte_end":10306266,"line_start":225,"line_end":225,"column_start":5,"column_end":53}},{"value":"/ [`set_nonblocking`]: fn@std::net::TcpStream::set_nonblocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306271,"byte_end":10306335,"line_start":226,"line_end":226,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307265,"byte_end":10307275,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpStream>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this stream is bound to.","sig":null,"attributes":[{"value":"/ Returns the local address that this stream is bound to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306866,"byte_end":10306925,"line_start":245,"line_end":245,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306930,"byte_end":10306933,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306938,"byte_end":10306952,"line_start":247,"line_end":247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306957,"byte_end":10306960,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306965,"byte_end":10306978,"line_start":249,"line_end":249,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10306983,"byte_end":10307013,"line_start":250,"line_end":250,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307018,"byte_end":10307021,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307026,"byte_end":10307090,"line_start":252,"line_end":252,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307095,"byte_end":10307156,"line_start":253,"line_end":253,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307161,"byte_end":10307164,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", stream.local_addr()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307169,"byte_end":10307212,"line_start":255,"line_end":255,"column_start":5,"column_end":48}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307217,"byte_end":10307229,"line_start":256,"line_end":256,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307234,"byte_end":10307241,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307246,"byte_end":10307253,"line_start":258,"line_end":258,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307754,"byte_end":10307763,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"peer_addr","qualname":"<TcpStream>::peer_addr","value":"pub fn peer_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remote address that this stream is connected to.","sig":null,"attributes":[{"value":"/ Returns the remote address that this stream is connected to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307351,"byte_end":10307415,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307420,"byte_end":10307423,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307428,"byte_end":10307442,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307447,"byte_end":10307450,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307455,"byte_end":10307468,"line_start":267,"line_end":267,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307473,"byte_end":10307503,"line_start":268,"line_end":268,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307508,"byte_end":10307511,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307516,"byte_end":10307580,"line_start":270,"line_end":270,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307585,"byte_end":10307646,"line_start":271,"line_end":271,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307651,"byte_end":10307654,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", stream.peer_addr()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307659,"byte_end":10307701,"line_start":273,"line_end":273,"column_start":5,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307706,"byte_end":10307718,"line_start":274,"line_end":274,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307723,"byte_end":10307730,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307735,"byte_end":10307742,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309254,"byte_end":10309263,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"poll_peek","qualname":"<TcpStream>::poll_peek","value":"pub fn poll_peek(&Self, &mut Context, &mut ReadBuf) -> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive data on the socket, without removing that data from\n the queue, registering the current task for wakeup if data is not yet\n available.","sig":null,"attributes":[{"value":"/ Attempts to receive data on the socket, without removing that data from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307838,"byte_end":10307913,"line_start":281,"line_end":281,"column_start":5,"column_end":80}},{"value":"/ the queue, registering the current task for wakeup if data is not yet","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307918,"byte_end":10307991,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10307996,"byte_end":10308010,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308015,"byte_end":10308018,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_peek`, `poll_read` or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308023,"byte_end":10308085,"line_start":285,"line_end":285,"column_start":5,"column_end":67}},{"value":"/ `poll_read_ready`, only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308090,"byte_end":10308162,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ most recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308167,"byte_end":10308231,"line_start":287,"line_end":287,"column_start":5,"column_end":69}},{"value":"/ `poll_write` retains a second, independent waker.)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308236,"byte_end":10308290,"line_start":288,"line_end":288,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308295,"byte_end":10308298,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308303,"byte_end":10308321,"line_start":290,"line_end":290,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308326,"byte_end":10308329,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308334,"byte_end":10308359,"line_start":292,"line_end":292,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308364,"byte_end":10308367,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if data is not yet available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308372,"byte_end":10308423,"line_start":294,"line_end":294,"column_start":5,"column_end":56}},{"value":"/ * `Poll::Ready(Ok(n))` if data is available. `n` is the number of bytes peeked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308428,"byte_end":10308511,"line_start":295,"line_end":295,"column_start":5,"column_end":88}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308516,"byte_end":10308571,"line_start":296,"line_end":296,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308576,"byte_end":10308579,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308584,"byte_end":10308596,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308601,"byte_end":10308604,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308609,"byte_end":10308684,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308689,"byte_end":10308692,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308697,"byte_end":10308711,"line_start":302,"line_end":302,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308716,"byte_end":10308719,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308724,"byte_end":10308737,"line_start":304,"line_end":304,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::{self, ReadBuf};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308742,"byte_end":10308777,"line_start":305,"line_end":305,"column_start":5,"column_end":40}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308782,"byte_end":10308812,"line_start":306,"line_end":306,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308817,"byte_end":10308820,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ use futures::future::poll_fn;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308825,"byte_end":10308858,"line_start":308,"line_end":308,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308863,"byte_end":10308866,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308871,"byte_end":10308889,"line_start":310,"line_end":310,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308894,"byte_end":10308933,"line_start":311,"line_end":311,"column_start":5,"column_end":44}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8000\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10308938,"byte_end":10309003,"line_start":312,"line_end":312,"column_start":5,"column_end":70}},{"value":"/     let mut buf = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309008,"byte_end":10309038,"line_start":313,"line_end":313,"column_start":5,"column_end":35}},{"value":"/     let mut buf = ReadBuf::new(&mut buf);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309043,"byte_end":10309088,"line_start":314,"line_end":314,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309093,"byte_end":10309096,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/     poll_fn(|cx| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309101,"byte_end":10309123,"line_start":316,"line_end":316,"column_start":5,"column_end":27}},{"value":"/         stream.poll_peek(cx, &mut buf)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309128,"byte_end":10309170,"line_start":317,"line_end":317,"column_start":5,"column_end":47}},{"value":"/     }).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309175,"byte_end":10309193,"line_start":318,"line_end":318,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309198,"byte_end":10309201,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309206,"byte_end":10309220,"line_start":320,"line_end":320,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309225,"byte_end":10309230,"line_start":321,"line_end":321,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10309235,"byte_end":10309242,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2855},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312335,"byte_end":10312340,"line_start":409,"line_end":409,"column_start":18,"column_end":23},"name":"ready","qualname":"<TcpStream>::ready","value":"pub async fn ready<'_>(&'_ Self, Interest) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for any of the requested ready states.","sig":null,"attributes":[{"value":"/ Wait for any of the requested ready states.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310070,"byte_end":10310117,"line_start":349,"line_end":349,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310122,"byte_end":10310125,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `try_read()` or `try_write()`. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310130,"byte_end":10310204,"line_start":351,"line_end":351,"column_start":5,"column_end":79}},{"value":"/ can be used to concurrently read / write to the same socket on a single","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310209,"byte_end":10310284,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/ task without splitting the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310289,"byte_end":10310327,"line_start":353,"line_end":353,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310332,"byte_end":10310335,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310340,"byte_end":10310354,"line_start":355,"line_end":355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310359,"byte_end":10310362,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Concurrently read and write to the stream on the same task without","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310367,"byte_end":10310437,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ splitting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310442,"byte_end":10310456,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310461,"byte_end":10310464,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310469,"byte_end":10310482,"line_start":360,"line_end":360,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310487,"byte_end":10310515,"line_start":361,"line_end":361,"column_start":5,"column_end":33}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310520,"byte_end":10310550,"line_start":362,"line_end":362,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310555,"byte_end":10310581,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310586,"byte_end":10310602,"line_start":364,"line_end":364,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310607,"byte_end":10310610,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310615,"byte_end":10310633,"line_start":366,"line_end":366,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310638,"byte_end":10310689,"line_start":367,"line_end":367,"column_start":5,"column_end":56}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310694,"byte_end":10310759,"line_start":368,"line_end":368,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310764,"byte_end":10310767,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310772,"byte_end":10310786,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/         let ready = stream.ready(Interest::READABLE | Interest::WRITABLE).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310791,"byte_end":10310876,"line_start":371,"line_end":371,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310881,"byte_end":10310884,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/         if ready.is_readable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310889,"byte_end":10310925,"line_start":373,"line_end":373,"column_start":5,"column_end":41}},{"value":"/             let mut data = vec![0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310930,"byte_end":10310975,"line_start":374,"line_end":374,"column_start":5,"column_end":50}},{"value":"/             // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10310980,"byte_end":10311054,"line_start":375,"line_end":375,"column_start":5,"column_end":79}},{"value":"/             // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311059,"byte_end":10311121,"line_start":376,"line_end":376,"column_start":5,"column_end":67}},{"value":"/             match stream.try_read(&mut data) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311126,"byte_end":10311176,"line_start":377,"line_end":377,"column_start":5,"column_end":55}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311181,"byte_end":10311211,"line_start":378,"line_end":378,"column_start":5,"column_end":35}},{"value":"/                     println!(\"read {} bytes\", n);        ","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311216,"byte_end":10311277,"line_start":379,"line_end":379,"column_start":5,"column_end":66}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311282,"byte_end":10311303,"line_start":380,"line_end":380,"column_start":5,"column_end":26}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311308,"byte_end":10311384,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/                     continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311389,"byte_end":10311422,"line_start":382,"line_end":382,"column_start":5,"column_end":38}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311427,"byte_end":10311448,"line_start":383,"line_end":383,"column_start":5,"column_end":26}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311453,"byte_end":10311484,"line_start":384,"line_end":384,"column_start":5,"column_end":36}},{"value":"/                     return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311489,"byte_end":10311534,"line_start":385,"line_end":385,"column_start":5,"column_end":50}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311539,"byte_end":10311560,"line_start":386,"line_end":386,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311565,"byte_end":10311582,"line_start":387,"line_end":387,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311587,"byte_end":10311590,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311595,"byte_end":10311608,"line_start":389,"line_end":389,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311613,"byte_end":10311616,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/         if ready.is_writable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311621,"byte_end":10311657,"line_start":391,"line_end":391,"column_start":5,"column_end":41}},{"value":"/             // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311662,"byte_end":10311737,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/             // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311742,"byte_end":10311804,"line_start":393,"line_end":393,"column_start":5,"column_end":67}},{"value":"/             match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311809,"byte_end":10311865,"line_start":394,"line_end":394,"column_start":5,"column_end":61}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311870,"byte_end":10311900,"line_start":395,"line_end":395,"column_start":5,"column_end":35}},{"value":"/                     println!(\"write {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311905,"byte_end":10311959,"line_start":396,"line_end":396,"column_start":5,"column_end":59}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311964,"byte_end":10311985,"line_start":397,"line_end":397,"column_start":5,"column_end":26}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10311990,"byte_end":10312066,"line_start":398,"line_end":398,"column_start":5,"column_end":81}},{"value":"/                     continue","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312071,"byte_end":10312103,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312108,"byte_end":10312129,"line_start":400,"line_end":400,"column_start":5,"column_end":26}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312134,"byte_end":10312165,"line_start":401,"line_end":401,"column_start":5,"column_end":36}},{"value":"/                     return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312170,"byte_end":10312215,"line_start":402,"line_end":402,"column_start":5,"column_end":50}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312220,"byte_end":10312241,"line_start":403,"line_end":403,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312246,"byte_end":10312263,"line_start":404,"line_end":404,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312268,"byte_end":10312281,"line_start":405,"line_end":405,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312286,"byte_end":10312295,"line_start":406,"line_end":406,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312300,"byte_end":10312305,"line_start":407,"line_end":407,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312310,"byte_end":10312317,"line_start":408,"line_end":408,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2858},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313860,"byte_end":10313868,"line_start":457,"line_end":457,"column_start":18,"column_end":26},"name":"readable","qualname":"<TcpStream>::readable","value":"pub async fn readable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become readable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become readable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312497,"byte_end":10312540,"line_start":414,"line_end":414,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312545,"byte_end":10312548,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::READABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312553,"byte_end":10312630,"line_start":416,"line_end":416,"column_start":5,"column_end":82}},{"value":"/ paired with `try_read()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312635,"byte_end":10312664,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312669,"byte_end":10312672,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312677,"byte_end":10312691,"line_start":419,"line_end":419,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312696,"byte_end":10312699,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312704,"byte_end":10312717,"line_start":421,"line_end":421,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312722,"byte_end":10312752,"line_start":422,"line_end":422,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312757,"byte_end":10312783,"line_start":423,"line_end":423,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312788,"byte_end":10312804,"line_start":424,"line_end":424,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312809,"byte_end":10312812,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312817,"byte_end":10312835,"line_start":426,"line_end":426,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312840,"byte_end":10312891,"line_start":427,"line_end":427,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312896,"byte_end":10312924,"line_start":428,"line_end":428,"column_start":5,"column_end":33}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312929,"byte_end":10312994,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10312999,"byte_end":10313002,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/     let mut msg = vec![0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313007,"byte_end":10313043,"line_start":431,"line_end":431,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313048,"byte_end":10313051,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313056,"byte_end":10313070,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313075,"byte_end":10313124,"line_start":434,"line_end":434,"column_start":5,"column_end":54}},{"value":"/         stream.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313129,"byte_end":10313166,"line_start":435,"line_end":435,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313171,"byte_end":10313174,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/         // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313179,"byte_end":10313249,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313254,"byte_end":10313312,"line_start":438,"line_end":438,"column_start":5,"column_end":63}},{"value":"/         match stream.try_read(&mut msg) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313317,"byte_end":10313362,"line_start":439,"line_end":439,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313367,"byte_end":10313393,"line_start":440,"line_end":440,"column_start":5,"column_end":31}},{"value":"/                 msg.truncate(n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313398,"byte_end":10313434,"line_start":441,"line_end":441,"column_start":5,"column_end":41}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313439,"byte_end":10313465,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313470,"byte_end":10313487,"line_start":443,"line_end":443,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313492,"byte_end":10313564,"line_start":444,"line_end":444,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313569,"byte_end":10313598,"line_start":445,"line_end":445,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313603,"byte_end":10313620,"line_start":446,"line_end":446,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313625,"byte_end":10313652,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313657,"byte_end":10313698,"line_start":448,"line_end":448,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313703,"byte_end":10313720,"line_start":449,"line_end":449,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313725,"byte_end":10313738,"line_start":450,"line_end":450,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313743,"byte_end":10313752,"line_start":451,"line_end":451,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313757,"byte_end":10313760,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/     println!(\"GOT = {:?}\", msg);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313765,"byte_end":10313801,"line_start":453,"line_end":453,"column_start":5,"column_end":41}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313806,"byte_end":10313820,"line_start":454,"line_end":454,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313825,"byte_end":10313830,"line_start":455,"line_end":455,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313835,"byte_end":10313842,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2861},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315240,"byte_end":10315255,"line_start":491,"line_end":491,"column_start":12,"column_end":27},"name":"poll_read_ready","qualname":"<TcpStream>::poll_read_ready","value":"pub fn poll_read_ready(&Self, &mut Context) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for read readiness.","sig":null,"attributes":[{"value":"/ Polls for read readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10313969,"byte_end":10313998,"line_start":462,"line_end":462,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314003,"byte_end":10314006,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ If the tcp stream is not currently ready for reading, this method will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314011,"byte_end":10314085,"line_start":464,"line_end":464,"column_start":5,"column_end":79}},{"value":"/ store a clone of the `Waker` from the provided `Context`. When the tcp","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314090,"byte_end":10314164,"line_start":465,"line_end":465,"column_start":5,"column_end":79}},{"value":"/ stream becomes ready for reading, `Waker::wake` will be called on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314169,"byte_end":10314242,"line_start":466,"line_end":466,"column_start":5,"column_end":78}},{"value":"/ waker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314247,"byte_end":10314257,"line_start":467,"line_end":467,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314262,"byte_end":10314265,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_read_ready`, `poll_read` or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314270,"byte_end":10314338,"line_start":469,"line_end":469,"column_start":5,"column_end":73}},{"value":"/ `poll_peek`, only the `Waker` from the `Context` passed to the most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314343,"byte_end":10314414,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ recent call is scheduled to receive a wakeup. (However,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314419,"byte_end":10314478,"line_start":471,"line_end":471,"column_start":5,"column_end":64}},{"value":"/ `poll_write_ready` retains a second, independent waker.)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314483,"byte_end":10314543,"line_start":472,"line_end":472,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314548,"byte_end":10314551,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ This function is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314556,"byte_end":10314631,"line_start":474,"line_end":474,"column_start":5,"column_end":80}},{"value":"/ via [`readable`] is not feasible. Where possible, using [`readable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314636,"byte_end":10314711,"line_start":475,"line_end":475,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314716,"byte_end":10314784,"line_start":476,"line_end":476,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314789,"byte_end":10314792,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314797,"byte_end":10314815,"line_start":478,"line_end":478,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314820,"byte_end":10314823,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314828,"byte_end":10314853,"line_start":480,"line_end":480,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314858,"byte_end":10314861,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the tcp stream is not ready for reading.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314866,"byte_end":10314931,"line_start":482,"line_end":482,"column_start":5,"column_end":70}},{"value":"/ * `Poll::Ready(Ok(()))` if the tcp stream is ready for reading.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10314936,"byte_end":10315003,"line_start":483,"line_end":483,"column_start":5,"column_end":72}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315008,"byte_end":10315063,"line_start":484,"line_end":484,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315068,"byte_end":10315071,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315076,"byte_end":10315088,"line_start":486,"line_end":486,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315093,"byte_end":10315096,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315101,"byte_end":10315176,"line_start":488,"line_end":488,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315181,"byte_end":10315184,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ [`readable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315189,"byte_end":10315228,"line_start":490,"line_end":490,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317591,"byte_end":10317599,"line_start":554,"line_end":554,"column_start":12,"column_end":20},"name":"try_read","qualname":"<TcpStream>::try_read","value":"pub fn try_read(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to read data from the stream into the provided buffer, returning how\n many bytes were read.","sig":null,"attributes":[{"value":"/ Try to read data from the stream into the provided buffer, returning how","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315388,"byte_end":10315464,"line_start":495,"line_end":495,"column_start":5,"column_end":81}},{"value":"/ many bytes were read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315469,"byte_end":10315494,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315499,"byte_end":10315502,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Receives any pending data from the socket but does not wait for new data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315507,"byte_end":10315583,"line_start":498,"line_end":498,"column_start":5,"column_end":81}},{"value":"/ to arrive. On success, returns the number of bytes read. Because","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315588,"byte_end":10315656,"line_start":499,"line_end":499,"column_start":5,"column_end":73}},{"value":"/ `try_read()` is non-blocking, the buffer does not have to be stored by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315661,"byte_end":10315735,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ the async task and can exist entirely on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315740,"byte_end":10315795,"line_start":501,"line_end":501,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315800,"byte_end":10315803,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Usually, [`readable()`] or [`ready()`] is used with this function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315808,"byte_end":10315878,"line_start":503,"line_end":503,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315883,"byte_end":10315886,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ [`readable()`]: TcpStream::readable()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315891,"byte_end":10315932,"line_start":505,"line_end":505,"column_start":5,"column_end":46}},{"value":"/ [`ready()`]: TcpStream::ready()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315937,"byte_end":10315972,"line_start":506,"line_end":506,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315977,"byte_end":10315980,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10315985,"byte_end":10315997,"line_start":508,"line_end":508,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316002,"byte_end":10316005,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ If data is successfully read, `Ok(n)` is returned, where `n` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316010,"byte_end":10316081,"line_start":510,"line_end":510,"column_start":5,"column_end":76}},{"value":"/ number of bytes read. `Ok(0)` indicates the stream's read half is closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316086,"byte_end":10316162,"line_start":511,"line_end":511,"column_start":5,"column_end":81}},{"value":"/ and will no longer yield data. If the stream is not ready to read data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316167,"byte_end":10316241,"line_start":512,"line_end":512,"column_start":5,"column_end":79}},{"value":"/ `Err(io::ErrorKind::WouldBlock)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316246,"byte_end":10316295,"line_start":513,"line_end":513,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316300,"byte_end":10316303,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316308,"byte_end":10316322,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316327,"byte_end":10316330,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316335,"byte_end":10316348,"line_start":517,"line_end":517,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316353,"byte_end":10316383,"line_start":518,"line_end":518,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316388,"byte_end":10316414,"line_start":519,"line_end":519,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316419,"byte_end":10316435,"line_start":520,"line_end":520,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316440,"byte_end":10316443,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316448,"byte_end":10316466,"line_start":522,"line_end":522,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316471,"byte_end":10316522,"line_start":523,"line_end":523,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316527,"byte_end":10316555,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316560,"byte_end":10316625,"line_start":525,"line_end":525,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316630,"byte_end":10316633,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316638,"byte_end":10316652,"line_start":527,"line_end":527,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316657,"byte_end":10316706,"line_start":528,"line_end":528,"column_start":5,"column_end":54}},{"value":"/         stream.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316711,"byte_end":10316748,"line_start":529,"line_end":529,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316753,"byte_end":10316756,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/         // Creating the buffer **after** the `await` prevents it from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316761,"byte_end":10316834,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/         // being stored in the async task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316839,"byte_end":10316885,"line_start":532,"line_end":532,"column_start":5,"column_end":51}},{"value":"/         let mut buf = [0; 4096];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316890,"byte_end":10316926,"line_start":533,"line_end":533,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316931,"byte_end":10316934,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/         // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10316939,"byte_end":10317009,"line_start":535,"line_end":535,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317014,"byte_end":10317072,"line_start":536,"line_end":536,"column_start":5,"column_end":63}},{"value":"/         match stream.try_read(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317077,"byte_end":10317122,"line_start":537,"line_end":537,"column_start":5,"column_end":50}},{"value":"/             Ok(0) => break,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317127,"byte_end":10317158,"line_start":538,"line_end":538,"column_start":5,"column_end":36}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317163,"byte_end":10317189,"line_start":539,"line_end":539,"column_start":5,"column_end":31}},{"value":"/                 println!(\"read {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317194,"byte_end":10317243,"line_start":540,"line_end":540,"column_start":5,"column_end":54}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317248,"byte_end":10317265,"line_start":541,"line_end":541,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317270,"byte_end":10317342,"line_start":542,"line_end":542,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317347,"byte_end":10317376,"line_start":543,"line_end":543,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317381,"byte_end":10317398,"line_start":544,"line_end":544,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317403,"byte_end":10317430,"line_start":545,"line_end":545,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317435,"byte_end":10317476,"line_start":546,"line_end":546,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317481,"byte_end":10317498,"line_start":547,"line_end":547,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317503,"byte_end":10317516,"line_start":548,"line_end":548,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317521,"byte_end":10317530,"line_start":549,"line_end":549,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317535,"byte_end":10317538,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317543,"byte_end":10317557,"line_start":551,"line_end":551,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317562,"byte_end":10317567,"line_start":552,"line_end":552,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317572,"byte_end":10317579,"line_start":553,"line_end":553,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319036,"byte_end":10319044,"line_start":601,"line_end":601,"column_start":18,"column_end":26},"name":"writable","qualname":"<TcpStream>::writable","value":"pub async fn writable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become writable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become writable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317795,"byte_end":10317838,"line_start":562,"line_end":562,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317843,"byte_end":10317846,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::WRITABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317851,"byte_end":10317928,"line_start":564,"line_end":564,"column_start":5,"column_end":82}},{"value":"/ paired with `try_write()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317933,"byte_end":10317963,"line_start":565,"line_end":565,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317968,"byte_end":10317971,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317976,"byte_end":10317990,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10317995,"byte_end":10317998,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318003,"byte_end":10318016,"line_start":569,"line_end":569,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318021,"byte_end":10318051,"line_start":570,"line_end":570,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318056,"byte_end":10318082,"line_start":571,"line_end":571,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318087,"byte_end":10318103,"line_start":572,"line_end":572,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318108,"byte_end":10318111,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318116,"byte_end":10318134,"line_start":574,"line_end":574,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318139,"byte_end":10318190,"line_start":575,"line_end":575,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318195,"byte_end":10318223,"line_start":576,"line_end":576,"column_start":5,"column_end":33}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318228,"byte_end":10318293,"line_start":577,"line_end":577,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318298,"byte_end":10318301,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318306,"byte_end":10318320,"line_start":579,"line_end":579,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318325,"byte_end":10318374,"line_start":580,"line_end":580,"column_start":5,"column_end":54}},{"value":"/         stream.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318379,"byte_end":10318416,"line_start":581,"line_end":581,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318421,"byte_end":10318424,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/         // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318429,"byte_end":10318500,"line_start":583,"line_end":583,"column_start":5,"column_end":76}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318505,"byte_end":10318563,"line_start":584,"line_end":584,"column_start":5,"column_end":63}},{"value":"/         match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318568,"byte_end":10318620,"line_start":585,"line_end":585,"column_start":5,"column_end":57}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318625,"byte_end":10318651,"line_start":586,"line_end":586,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318656,"byte_end":10318682,"line_start":587,"line_end":587,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318687,"byte_end":10318704,"line_start":588,"line_end":588,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318709,"byte_end":10318781,"line_start":589,"line_end":589,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318786,"byte_end":10318815,"line_start":590,"line_end":590,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318820,"byte_end":10318837,"line_start":591,"line_end":591,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318842,"byte_end":10318869,"line_start":592,"line_end":592,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318874,"byte_end":10318915,"line_start":593,"line_end":593,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318920,"byte_end":10318937,"line_start":594,"line_end":594,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318942,"byte_end":10318955,"line_start":595,"line_end":595,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318960,"byte_end":10318969,"line_start":596,"line_end":596,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318974,"byte_end":10318977,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10318982,"byte_end":10318996,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319001,"byte_end":10319006,"line_start":599,"line_end":599,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319011,"byte_end":10319018,"line_start":600,"line_end":600,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320405,"byte_end":10320421,"line_start":635,"line_end":635,"column_start":12,"column_end":28},"name":"poll_write_ready","qualname":"<TcpStream>::poll_write_ready","value":"pub fn poll_write_ready(&Self, &mut Context) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for write readiness.","sig":null,"attributes":[{"value":"/ Polls for write readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319145,"byte_end":10319175,"line_start":606,"line_end":606,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319180,"byte_end":10319183,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ If the tcp stream is not currently ready for writing, this method will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319188,"byte_end":10319262,"line_start":608,"line_end":608,"column_start":5,"column_end":79}},{"value":"/ store a clone of the `Waker` from the provided `Context`. When the tcp","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319267,"byte_end":10319341,"line_start":609,"line_end":609,"column_start":5,"column_end":79}},{"value":"/ stream becomes ready for writing, `Waker::wake` will be called on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319346,"byte_end":10319419,"line_start":610,"line_end":610,"column_start":5,"column_end":78}},{"value":"/ waker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319424,"byte_end":10319434,"line_start":611,"line_end":611,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319439,"byte_end":10319442,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_write_ready` or `poll_write`, only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319447,"byte_end":10319522,"line_start":613,"line_end":613,"column_start":5,"column_end":80}},{"value":"/ the `Waker` from the `Context` passed to the most recent call is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319527,"byte_end":10319595,"line_start":614,"line_end":614,"column_start":5,"column_end":73}},{"value":"/ scheduled to receive a wakeup. (However, `poll_read_ready` retains a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319600,"byte_end":10319672,"line_start":615,"line_end":615,"column_start":5,"column_end":77}},{"value":"/ second, independent waker.)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319677,"byte_end":10319708,"line_start":616,"line_end":616,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319713,"byte_end":10319716,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This function is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319721,"byte_end":10319796,"line_start":618,"line_end":618,"column_start":5,"column_end":80}},{"value":"/ via [`writable`] is not feasible. Where possible, using [`writable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319801,"byte_end":10319876,"line_start":619,"line_end":619,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319881,"byte_end":10319949,"line_start":620,"line_end":620,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319954,"byte_end":10319957,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319962,"byte_end":10319980,"line_start":622,"line_end":622,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319985,"byte_end":10319988,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10319993,"byte_end":10320018,"line_start":624,"line_end":624,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320023,"byte_end":10320026,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the tcp stream is not ready for writing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320031,"byte_end":10320096,"line_start":626,"line_end":626,"column_start":5,"column_end":70}},{"value":"/ * `Poll::Ready(Ok(()))` if the tcp stream is ready for writing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320101,"byte_end":10320168,"line_start":627,"line_end":627,"column_start":5,"column_end":72}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320173,"byte_end":10320228,"line_start":628,"line_end":628,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320233,"byte_end":10320236,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320241,"byte_end":10320253,"line_start":630,"line_end":630,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320258,"byte_end":10320261,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320266,"byte_end":10320341,"line_start":632,"line_end":632,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320346,"byte_end":10320349,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ [`writable`]: method@Self::writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320354,"byte_end":10320393,"line_start":634,"line_end":634,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322150,"byte_end":10322159,"line_start":687,"line_end":687,"column_start":12,"column_end":21},"name":"try_write","qualname":"<TcpStream>::try_write","value":"pub fn try_write(&Self, &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to write a buffer to the stream, returning how many bytes were\n written.","sig":null,"attributes":[{"value":"/ Try to write a buffer to the stream, returning how many bytes were","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320555,"byte_end":10320625,"line_start":639,"line_end":639,"column_start":5,"column_end":75}},{"value":"/ written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320630,"byte_end":10320642,"line_start":640,"line_end":640,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320647,"byte_end":10320650,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The function will attempt to write the entire contents of `buf`, but","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320655,"byte_end":10320727,"line_start":642,"line_end":642,"column_start":5,"column_end":77}},{"value":"/ only part of the buffer may be written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320732,"byte_end":10320775,"line_start":643,"line_end":643,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320780,"byte_end":10320783,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `writable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320788,"byte_end":10320842,"line_start":645,"line_end":645,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320847,"byte_end":10320850,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320855,"byte_end":10320867,"line_start":647,"line_end":647,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320872,"byte_end":10320875,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ If data is successfully written, `Ok(n)` is returned, where `n` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320880,"byte_end":10320954,"line_start":649,"line_end":649,"column_start":5,"column_end":79}},{"value":"/ number of bytes written. If the stream is not ready to write data,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10320959,"byte_end":10321029,"line_start":650,"line_end":650,"column_start":5,"column_end":75}},{"value":"/ `Err(io::ErrorKind::WouldBlock)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321034,"byte_end":10321083,"line_start":651,"line_end":651,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321088,"byte_end":10321091,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321096,"byte_end":10321110,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321115,"byte_end":10321118,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321123,"byte_end":10321136,"line_start":655,"line_end":655,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321141,"byte_end":10321171,"line_start":656,"line_end":656,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321176,"byte_end":10321202,"line_start":657,"line_end":657,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321207,"byte_end":10321223,"line_start":658,"line_end":658,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321228,"byte_end":10321231,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321236,"byte_end":10321254,"line_start":660,"line_end":660,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321259,"byte_end":10321310,"line_start":661,"line_end":661,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321315,"byte_end":10321343,"line_start":662,"line_end":662,"column_start":5,"column_end":33}},{"value":"/     let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321348,"byte_end":10321413,"line_start":663,"line_end":663,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321418,"byte_end":10321421,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321426,"byte_end":10321440,"line_start":665,"line_end":665,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321445,"byte_end":10321494,"line_start":666,"line_end":666,"column_start":5,"column_end":54}},{"value":"/         stream.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321499,"byte_end":10321536,"line_start":667,"line_end":667,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321541,"byte_end":10321544,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/         // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321549,"byte_end":10321620,"line_start":669,"line_end":669,"column_start":5,"column_end":76}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321625,"byte_end":10321683,"line_start":670,"line_end":670,"column_start":5,"column_end":63}},{"value":"/         match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321688,"byte_end":10321740,"line_start":671,"line_end":671,"column_start":5,"column_end":57}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321745,"byte_end":10321771,"line_start":672,"line_end":672,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321776,"byte_end":10321802,"line_start":673,"line_end":673,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321807,"byte_end":10321824,"line_start":674,"line_end":674,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321829,"byte_end":10321901,"line_start":675,"line_end":675,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321906,"byte_end":10321935,"line_start":676,"line_end":676,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321940,"byte_end":10321957,"line_start":677,"line_end":677,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321962,"byte_end":10321989,"line_start":678,"line_end":678,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10321994,"byte_end":10322035,"line_start":679,"line_end":679,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322040,"byte_end":10322057,"line_start":680,"line_end":680,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322062,"byte_end":10322075,"line_start":681,"line_end":681,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322080,"byte_end":10322089,"line_start":682,"line_end":682,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322094,"byte_end":10322097,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322102,"byte_end":10322116,"line_start":684,"line_end":684,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322121,"byte_end":10322126,"line_start":685,"line_end":685,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322131,"byte_end":10322138,"line_start":686,"line_end":686,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323610,"byte_end":10323614,"line_start":732,"line_end":732,"column_start":18,"column_end":22},"name":"peek","qualname":"<TcpStream>::peek","value":"pub async fn peek<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data on the socket from the remote address to which it is\n connected, without removing that data from the queue. On success,\n returns the number of bytes peeked.","sig":null,"attributes":[{"value":"/ Receives data on the socket from the remote address to which it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322353,"byte_end":10322423,"line_start":695,"line_end":695,"column_start":5,"column_end":75}},{"value":"/ connected, without removing that data from the queue. On success,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322428,"byte_end":10322497,"line_start":696,"line_end":696,"column_start":5,"column_end":74}},{"value":"/ returns the number of bytes peeked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322502,"byte_end":10322541,"line_start":697,"line_end":697,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322546,"byte_end":10322549,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Successive calls return the same data. This is accomplished by passing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322554,"byte_end":10322628,"line_start":699,"line_end":699,"column_start":5,"column_end":79}},{"value":"/ `MSG_PEEK` as a flag to the underlying recv system call.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322633,"byte_end":10322693,"line_start":700,"line_end":700,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322698,"byte_end":10322701,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322706,"byte_end":10322720,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322725,"byte_end":10322728,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322733,"byte_end":10322746,"line_start":704,"line_end":704,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322751,"byte_end":10322781,"line_start":705,"line_end":705,"column_start":5,"column_end":35}},{"value":"/ use tokio::io::AsyncReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322786,"byte_end":10322818,"line_start":706,"line_end":706,"column_start":5,"column_end":37}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322823,"byte_end":10322849,"line_start":707,"line_end":707,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322854,"byte_end":10322857,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322862,"byte_end":10322880,"line_start":709,"line_end":709,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322885,"byte_end":10322936,"line_start":710,"line_end":710,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322941,"byte_end":10322969,"line_start":711,"line_end":711,"column_start":5,"column_end":33}},{"value":"/     let mut stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10322974,"byte_end":10323043,"line_start":712,"line_end":712,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323048,"byte_end":10323051,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/     let mut b1 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323056,"byte_end":10323085,"line_start":714,"line_end":714,"column_start":5,"column_end":34}},{"value":"/     let mut b2 = [0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323090,"byte_end":10323119,"line_start":715,"line_end":715,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323124,"byte_end":10323127,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/     // Peek at the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323132,"byte_end":10323159,"line_start":717,"line_end":717,"column_start":5,"column_end":32}},{"value":"/     let n = stream.peek(&mut b1).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323164,"byte_end":10323208,"line_start":718,"line_end":718,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323213,"byte_end":10323216,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/     // Read the data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323221,"byte_end":10323245,"line_start":720,"line_end":720,"column_start":5,"column_end":29}},{"value":"/     assert_eq!(n, stream.read(&mut b2[..n]).await?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323250,"byte_end":10323306,"line_start":721,"line_end":721,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(&b1[..n], &b2[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323311,"byte_end":10323350,"line_start":722,"line_end":722,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323355,"byte_end":10323358,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323363,"byte_end":10323377,"line_start":724,"line_end":724,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323382,"byte_end":10323387,"line_start":725,"line_end":725,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323392,"byte_end":10323399,"line_start":726,"line_end":726,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323404,"byte_end":10323407,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ The [`read`] method is defined on the [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323412,"byte_end":10323477,"line_start":728,"line_end":728,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323482,"byte_end":10323485,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ [`read`]: fn@crate::io::AsyncReadExt::read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323490,"byte_end":10323536,"line_start":730,"line_end":730,"column_start":5,"column_end":51}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10323541,"byte_end":10323592,"line_start":731,"line_end":731,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324709,"byte_end":10324716,"line_start":766,"line_end":766,"column_start":12,"column_end":19},"name":"nodelay","qualname":"<TcpStream>::nodelay","value":"pub fn nodelay(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `TCP_NODELAY` option on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324177,"byte_end":10324239,"line_start":748,"line_end":748,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324244,"byte_end":10324247,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_nodelay`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324252,"byte_end":10324316,"line_start":750,"line_end":750,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324321,"byte_end":10324324,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ [`set_nodelay`]: TcpStream::set_nodelay","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324329,"byte_end":10324372,"line_start":752,"line_end":752,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324377,"byte_end":10324380,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324385,"byte_end":10324399,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324404,"byte_end":10324407,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324412,"byte_end":10324425,"line_start":756,"line_end":756,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324430,"byte_end":10324460,"line_start":757,"line_end":757,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324465,"byte_end":10324468,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324473,"byte_end":10324537,"line_start":759,"line_end":759,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324542,"byte_end":10324603,"line_start":760,"line_end":760,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324608,"byte_end":10324611,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", stream.nodelay()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324616,"byte_end":10324656,"line_start":762,"line_end":762,"column_start":5,"column_end":45}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324661,"byte_end":10324673,"line_start":763,"line_end":763,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324678,"byte_end":10324685,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324690,"byte_end":10324697,"line_start":765,"line_end":765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325513,"byte_end":10325524,"line_start":790,"line_end":790,"column_start":12,"column_end":23},"name":"set_nodelay","qualname":"<TcpStream>::set_nodelay","value":"pub fn set_nodelay(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `TCP_NODELAY` option on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324783,"byte_end":10324845,"line_start":770,"line_end":770,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324850,"byte_end":10324853,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ If set, this option disables the Nagle algorithm. This means that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324858,"byte_end":10324927,"line_start":772,"line_end":772,"column_start":5,"column_end":74}},{"value":"/ segments are always sent as soon as possible, even if there is only a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10324932,"byte_end":10325005,"line_start":773,"line_end":773,"column_start":5,"column_end":78}},{"value":"/ small amount of data. When not set, data is buffered until there is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325010,"byte_end":10325083,"line_start":774,"line_end":774,"column_start":5,"column_end":78}},{"value":"/ sufficient amount to send out, thereby avoiding the frequent sending of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325088,"byte_end":10325163,"line_start":775,"line_end":775,"column_start":5,"column_end":80}},{"value":"/ small packets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325168,"byte_end":10325186,"line_start":776,"line_end":776,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325191,"byte_end":10325194,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325199,"byte_end":10325213,"line_start":778,"line_end":778,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325218,"byte_end":10325221,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325226,"byte_end":10325239,"line_start":780,"line_end":780,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325244,"byte_end":10325274,"line_start":781,"line_end":781,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325279,"byte_end":10325282,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325287,"byte_end":10325351,"line_start":783,"line_end":783,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325356,"byte_end":10325417,"line_start":784,"line_end":784,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325422,"byte_end":10325425,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ stream.set_nodelay(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325430,"byte_end":10325460,"line_start":786,"line_end":786,"column_start":5,"column_end":35}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325465,"byte_end":10325477,"line_start":787,"line_end":787,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325482,"byte_end":10325489,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325494,"byte_end":10325501,"line_start":789,"line_end":789,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326169,"byte_end":10326175,"line_start":813,"line_end":813,"column_start":12,"column_end":18},"name":"linger","qualname":"<TcpStream>::linger","value":"pub fn linger(&Self) -> io::Result<Option<Duration>>","parent":null,"children":[],"decl_id":null,"docs":" Reads the linger duration for this socket by getting the `SO_LINGER`\n option.","sig":null,"attributes":[{"value":"/ Reads the linger duration for this socket by getting the `SO_LINGER`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325615,"byte_end":10325687,"line_start":794,"line_end":794,"column_start":5,"column_end":77}},{"value":"/ option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325692,"byte_end":10325703,"line_start":795,"line_end":795,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325708,"byte_end":10325711,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_linger`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325716,"byte_end":10325779,"line_start":797,"line_end":797,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325784,"byte_end":10325787,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ [`set_linger`]: TcpStream::set_linger","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325792,"byte_end":10325833,"line_start":799,"line_end":799,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325838,"byte_end":10325841,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325846,"byte_end":10325860,"line_start":801,"line_end":801,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325865,"byte_end":10325868,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325873,"byte_end":10325886,"line_start":803,"line_end":803,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325891,"byte_end":10325921,"line_start":804,"line_end":804,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325926,"byte_end":10325929,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10325934,"byte_end":10325998,"line_start":806,"line_end":806,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326003,"byte_end":10326064,"line_start":807,"line_end":807,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326069,"byte_end":10326072,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", stream.linger()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326077,"byte_end":10326116,"line_start":809,"line_end":809,"column_start":5,"column_end":44}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326121,"byte_end":10326133,"line_start":810,"line_end":810,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326138,"byte_end":10326145,"line_start":811,"line_end":811,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326150,"byte_end":10326157,"line_start":812,"line_end":812,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327154,"byte_end":10327164,"line_start":840,"line_end":840,"column_start":12,"column_end":22},"name":"set_linger","qualname":"<TcpStream>::set_linger","value":"pub fn set_linger(&Self, Option<Duration>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the linger duration of this socket by setting the SO_LINGER option.","sig":null,"attributes":[{"value":"/ Sets the linger duration of this socket by setting the SO_LINGER option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326330,"byte_end":10326406,"line_start":819,"line_end":819,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326411,"byte_end":10326414,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ This option controls the action taken when a stream has unsent messages and the stream is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326419,"byte_end":10326512,"line_start":821,"line_end":821,"column_start":5,"column_end":98}},{"value":"/ closed. If SO_LINGER is set, the system shall block the process until it can transmit the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326517,"byte_end":10326610,"line_start":822,"line_end":822,"column_start":5,"column_end":98}},{"value":"/ data or until the time expires.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326615,"byte_end":10326650,"line_start":823,"line_end":823,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326655,"byte_end":10326658,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ If SO_LINGER is not specified, and the stream is closed, the system handles the call in a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326663,"byte_end":10326756,"line_start":825,"line_end":825,"column_start":5,"column_end":98}},{"value":"/ way that allows the process to continue as quickly as possible.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326761,"byte_end":10326828,"line_start":826,"line_end":826,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326833,"byte_end":10326836,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326841,"byte_end":10326855,"line_start":828,"line_end":828,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326860,"byte_end":10326863,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326868,"byte_end":10326881,"line_start":830,"line_end":830,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326886,"byte_end":10326916,"line_start":831,"line_end":831,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326921,"byte_end":10326924,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326929,"byte_end":10326993,"line_start":833,"line_end":833,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10326998,"byte_end":10327059,"line_start":834,"line_end":834,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327064,"byte_end":10327067,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ stream.set_linger(None)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327072,"byte_end":10327101,"line_start":836,"line_end":836,"column_start":5,"column_end":34}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327106,"byte_end":10327118,"line_start":837,"line_end":837,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327123,"byte_end":10327130,"line_start":838,"line_end":838,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327135,"byte_end":10327142,"line_start":839,"line_end":839,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328138,"byte_end":10328141,"line_start":876,"line_end":876,"column_start":12,"column_end":15},"name":"ttl","qualname":"<TcpStream>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327626,"byte_end":10327684,"line_start":858,"line_end":858,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327689,"byte_end":10327692,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327697,"byte_end":10327757,"line_start":860,"line_end":860,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327762,"byte_end":10327765,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ [`set_ttl`]: TcpStream::set_ttl","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327770,"byte_end":10327805,"line_start":862,"line_end":862,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327810,"byte_end":10327813,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327818,"byte_end":10327832,"line_start":864,"line_end":864,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327837,"byte_end":10327840,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327845,"byte_end":10327858,"line_start":866,"line_end":866,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327863,"byte_end":10327893,"line_start":867,"line_end":867,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327898,"byte_end":10327901,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327906,"byte_end":10327970,"line_start":869,"line_end":869,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10327975,"byte_end":10328036,"line_start":870,"line_end":870,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328041,"byte_end":10328044,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", stream.ttl()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328049,"byte_end":10328085,"line_start":872,"line_end":872,"column_start":5,"column_end":41}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328090,"byte_end":10328102,"line_start":873,"line_end":873,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328107,"byte_end":10328114,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328119,"byte_end":10328126,"line_start":875,"line_end":875,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328698,"byte_end":10328705,"line_start":897,"line_end":897,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<TcpStream>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328203,"byte_end":10328261,"line_start":880,"line_end":880,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328266,"byte_end":10328269,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328274,"byte_end":10328350,"line_start":882,"line_end":882,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328355,"byte_end":10328376,"line_start":883,"line_end":883,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328381,"byte_end":10328384,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328389,"byte_end":10328403,"line_start":885,"line_end":885,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328408,"byte_end":10328411,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328416,"byte_end":10328429,"line_start":887,"line_end":887,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328434,"byte_end":10328464,"line_start":888,"line_end":888,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328469,"byte_end":10328472,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328477,"byte_end":10328541,"line_start":890,"line_end":890,"column_start":5,"column_end":69}},{"value":"/ let stream = TcpStream::connect(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328546,"byte_end":10328607,"line_start":891,"line_end":891,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328612,"byte_end":10328615,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ stream.set_ttl(123)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328620,"byte_end":10328645,"line_start":893,"line_end":893,"column_start":5,"column_end":30}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328650,"byte_end":10328662,"line_start":894,"line_end":894,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328667,"byte_end":10328674,"line_start":895,"line_end":895,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328679,"byte_end":10328686,"line_start":896,"line_end":896,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329297,"byte_end":10329302,"line_start":911,"line_end":911,"column_start":12,"column_end":17},"name":"split","qualname":"<TcpStream>::split","value":"pub fn split<'a>(&'a mut Self) -> (ReadHalf, WriteHalf)","parent":null,"children":[],"decl_id":null,"docs":" Splits a `TcpStream` into a read half and a write half, which can be used\n to read and write the stream concurrently.","sig":null,"attributes":[{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328920,"byte_end":10328956,"line_start":903,"line_end":903,"column_start":5,"column_end":41}},{"value":"/ Splits a `TcpStream` into a read half and a write half, which can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10328961,"byte_end":10329038,"line_start":904,"line_end":904,"column_start":5,"column_end":82}},{"value":"/ to read and write the stream concurrently.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329043,"byte_end":10329089,"line_start":905,"line_end":905,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329094,"byte_end":10329097,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ This method is more efficient than [`into_split`], but the halves cannot be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329102,"byte_end":10329181,"line_start":907,"line_end":907,"column_start":5,"column_end":84}},{"value":"/ moved into independently spawned tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329186,"byte_end":10329229,"line_start":908,"line_end":908,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329234,"byte_end":10329237,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: TcpStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329242,"byte_end":10329285,"line_start":910,"line_end":910,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329951,"byte_end":10329961,"line_start":926,"line_end":926,"column_start":12,"column_end":22},"name":"into_split","qualname":"<TcpStream>::into_split","value":"pub fn into_split(Self) -> (OwnedReadHalf, OwnedWriteHalf)","parent":null,"children":[],"decl_id":null,"docs":" Splits a `TcpStream` into a read half and a write half, which can be used\n to read and write the stream concurrently.","sig":null,"attributes":[{"value":"/ Splits a `TcpStream` into a read half and a write half, which can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329387,"byte_end":10329464,"line_start":915,"line_end":915,"column_start":5,"column_end":82}},{"value":"/ to read and write the stream concurrently.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329469,"byte_end":10329515,"line_start":916,"line_end":916,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329520,"byte_end":10329523,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ Unlike [`split`], the owned halves can be moved to separate tasks, however","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329528,"byte_end":10329606,"line_start":918,"line_end":918,"column_start":5,"column_end":83}},{"value":"/ this comes at the cost of a heap allocation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329611,"byte_end":10329659,"line_start":919,"line_end":919,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329664,"byte_end":10329667,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dropping the write half will shut down the write half of the TCP","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329672,"byte_end":10329750,"line_start":921,"line_end":921,"column_start":5,"column_end":83}},{"value":"/ stream. This is equivalent to calling [`shutdown()`] on the `TcpStream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329755,"byte_end":10329831,"line_start":922,"line_end":922,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329836,"byte_end":10329839,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ [`split`]: TcpStream::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329844,"byte_end":10329877,"line_start":924,"line_end":924,"column_start":5,"column_end":38}},{"value":"/ [`shutdown()`]: fn@crate::io::AsyncWriteExt::shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10329882,"byte_end":10329939,"line_start":925,"line_end":925,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3068},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337082,"byte_end":10337091,"line_start":110,"line_end":110,"column_start":16,"column_end":25},"name":"UdpSocket","qualname":"::net::udp::UdpSocket","value":"UdpSocket {  }","parent":null,"children":[{"krate":0,"index":3069}],"decl_id":null,"docs":" A UDP socket","sig":null,"attributes":[{"value":"cfg(feature = \"net\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21425,"byte_end":21448,"line_start":169,"line_end":169,"column_start":13,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337628,"byte_end":10337632,"line_start":133,"line_end":133,"column_start":18,"column_end":22},"name":"bind","qualname":"<UdpSocket>::bind","value":"pub async fn bind<A: ToSocketAddrs>(A) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" This function will create a new UDP socket and attempt to bind it to\n the `addr` provided.","sig":null,"attributes":[{"value":"/ This function will create a new UDP socket and attempt to bind it to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337170,"byte_end":10337242,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ the `addr` provided.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337247,"byte_end":10337271,"line_start":117,"line_end":117,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337276,"byte_end":10337279,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337284,"byte_end":10337297,"line_start":119,"line_end":119,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337302,"byte_end":10337305,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337310,"byte_end":10337323,"line_start":121,"line_end":121,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337328,"byte_end":10337358,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337363,"byte_end":10337379,"line_start":123,"line_end":123,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337384,"byte_end":10337387,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337392,"byte_end":10337410,"line_start":125,"line_end":125,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337415,"byte_end":10337454,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/     let sock = UdpSocket::bind(\"0.0.0.0:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337459,"byte_end":10337517,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/     // use `sock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337522,"byte_end":10337543,"line_start":128,"line_end":128,"column_start":5,"column_end":26}},{"value":"/ #   let _ = sock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337548,"byte_end":10337569,"line_start":129,"line_end":129,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337574,"byte_end":10337588,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337593,"byte_end":10337598,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337603,"byte_end":10337610,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339871,"byte_end":10339879,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"from_std","qualname":"<UdpSocket>::from_std","value":"pub fn from_std(net::UdpSocket) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `UdpSocket` from a previously bound `std::net::UdpSocket`.","sig":null,"attributes":[{"value":"/ Creates new `UdpSocket` from a previously bound `std::net::UdpSocket`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338465,"byte_end":10338539,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338544,"byte_end":10338547,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a UDP socket from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338552,"byte_end":10338622,"line_start":164,"line_end":164,"column_start":5,"column_end":75}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes nothing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338627,"byte_end":10338703,"line_start":165,"line_end":165,"column_start":5,"column_end":81}},{"value":"/ about the underlying socket; it is left up to the user to set it in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338708,"byte_end":10338779,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338784,"byte_end":10338806,"line_start":167,"line_end":167,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338811,"byte_end":10338814,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This can be used in conjunction with socket2's `Socket` interface to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338819,"byte_end":10338891,"line_start":169,"line_end":169,"column_start":5,"column_end":77}},{"value":"/ configure a socket before it's handed off, such as setting options like","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338896,"byte_end":10338971,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ `reuse_address` or binding to multiple addresses.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10338976,"byte_end":10339029,"line_start":171,"line_end":171,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339034,"byte_end":10339037,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339042,"byte_end":10339054,"line_start":173,"line_end":173,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339059,"byte_end":10339062,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339067,"byte_end":10339127,"line_start":175,"line_end":175,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339132,"byte_end":10339135,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339140,"byte_end":10339210,"line_start":177,"line_end":177,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339215,"byte_end":10339288,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339293,"byte_end":10339373,"line_start":179,"line_end":179,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339378,"byte_end":10339381,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339386,"byte_end":10339399,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339404,"byte_end":10339407,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339412,"byte_end":10339425,"line_start":183,"line_end":183,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339430,"byte_end":10339460,"line_start":184,"line_end":184,"column_start":5,"column_end":35}},{"value":"/ # use std::{io, net::SocketAddr};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339465,"byte_end":10339502,"line_start":185,"line_end":185,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339507,"byte_end":10339510,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339515,"byte_end":10339535,"line_start":187,"line_end":187,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339540,"byte_end":10339581,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/ let addr = \"0.0.0.0:8080\".parse::<SocketAddr>().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339586,"byte_end":10339647,"line_start":189,"line_end":189,"column_start":5,"column_end":66}},{"value":"/ let std_sock = std::net::UdpSocket::bind(addr)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339652,"byte_end":10339704,"line_start":190,"line_end":190,"column_start":5,"column_end":57}},{"value":"/ std_sock.set_nonblocking(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339709,"byte_end":10339745,"line_start":191,"line_end":191,"column_start":5,"column_end":41}},{"value":"/ let sock = UdpSocket::from_std(std_sock)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339750,"byte_end":10339796,"line_start":192,"line_end":192,"column_start":5,"column_end":51}},{"value":"/ // use `sock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339801,"byte_end":10339818,"line_start":193,"line_end":193,"column_start":5,"column_end":22}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339823,"byte_end":10339835,"line_start":194,"line_end":194,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339840,"byte_end":10339847,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10339852,"byte_end":10339859,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340551,"byte_end":10340561,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UdpSocket>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this socket is bound to.","sig":null,"attributes":[{"value":"/ Returns the local address that this socket is bound to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340025,"byte_end":10340084,"line_start":202,"line_end":202,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340089,"byte_end":10340092,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340097,"byte_end":10340110,"line_start":204,"line_end":204,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340115,"byte_end":10340118,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340123,"byte_end":10340136,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340141,"byte_end":10340171,"line_start":207,"line_end":207,"column_start":5,"column_end":35}},{"value":"/ # use std::{io, net::SocketAddr};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340176,"byte_end":10340213,"line_start":208,"line_end":208,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340218,"byte_end":10340221,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340226,"byte_end":10340246,"line_start":210,"line_end":210,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340251,"byte_end":10340292,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ let addr = \"0.0.0.0:8080\".parse::<SocketAddr>().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340297,"byte_end":10340358,"line_start":212,"line_end":212,"column_start":5,"column_end":66}},{"value":"/ let sock = UdpSocket::bind(addr).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340363,"byte_end":10340407,"line_start":213,"line_end":213,"column_start":5,"column_end":49}},{"value":"/ // the address the socket is bound to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340412,"byte_end":10340453,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ let local_addr = sock.local_addr()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340458,"byte_end":10340498,"line_start":215,"line_end":215,"column_start":5,"column_end":45}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340503,"byte_end":10340515,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340520,"byte_end":10340527,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340532,"byte_end":10340539,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341481,"byte_end":10341488,"line_start":247,"line_end":247,"column_start":18,"column_end":25},"name":"connect","qualname":"<UdpSocket>::connect","value":"pub async fn connect<A: ToSocketAddrs, '_>(&'_ Self, A) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Connects the UDP socket setting the default destination for send() and\n limiting packets that are read via recv from the address specified in\n `addr`.","sig":null,"attributes":[{"value":"/ Connects the UDP socket setting the default destination for send() and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340637,"byte_end":10340711,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ limiting packets that are read via recv from the address specified in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340716,"byte_end":10340789,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ `addr`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340794,"byte_end":10340805,"line_start":225,"line_end":225,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340810,"byte_end":10340813,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340818,"byte_end":10340831,"line_start":227,"line_end":227,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340836,"byte_end":10340839,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340844,"byte_end":10340857,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340862,"byte_end":10340892,"line_start":230,"line_end":230,"column_start":5,"column_end":35}},{"value":"/ # use std::{io, net::SocketAddr};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340897,"byte_end":10340934,"line_start":231,"line_end":231,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340939,"byte_end":10340942,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340947,"byte_end":10340967,"line_start":233,"line_end":233,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10340972,"byte_end":10341013,"line_start":234,"line_end":234,"column_start":5,"column_end":46}},{"value":"/ let sock = UdpSocket::bind(\"0.0.0.0:8080\".parse::<SocketAddr>().unwrap()).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341018,"byte_end":10341103,"line_start":235,"line_end":235,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341108,"byte_end":10341111,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let remote_addr = \"127.0.0.1:59600\".parse::<SocketAddr>().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341116,"byte_end":10341187,"line_start":237,"line_end":237,"column_start":5,"column_end":76}},{"value":"/ sock.connect(remote_addr).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341192,"byte_end":10341229,"line_start":238,"line_end":238,"column_start":5,"column_end":42}},{"value":"/ let mut buf = [0u8; 32];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341234,"byte_end":10341262,"line_start":239,"line_end":239,"column_start":5,"column_end":33}},{"value":"/ // recv from remote_addr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341267,"byte_end":10341295,"line_start":240,"line_end":240,"column_start":5,"column_end":33}},{"value":"/ let len = sock.recv(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341300,"byte_end":10341341,"line_start":241,"line_end":241,"column_start":5,"column_end":46}},{"value":"/ // send to remote_addr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341346,"byte_end":10341372,"line_start":242,"line_end":242,"column_start":5,"column_end":31}},{"value":"/ let _len = sock.send(&buf[..len]).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341377,"byte_end":10341422,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341427,"byte_end":10341439,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341444,"byte_end":10341451,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10341456,"byte_end":10341463,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2949},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344295,"byte_end":10344300,"line_start":325,"line_end":325,"column_start":18,"column_end":23},"name":"ready","qualname":"<UdpSocket>::ready","value":"pub async fn ready<'_>(&'_ Self, Interest) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for any of the requested ready states.","sig":null,"attributes":[{"value":"/ Wait for any of the requested ready states.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342011,"byte_end":10342058,"line_start":266,"line_end":266,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342063,"byte_end":10342066,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `try_recv()` or `try_send()`. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342071,"byte_end":10342144,"line_start":268,"line_end":268,"column_start":5,"column_end":78}},{"value":"/ can be used to concurrently recv / send to the same socket on a single","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342149,"byte_end":10342223,"line_start":269,"line_end":269,"column_start":5,"column_end":79}},{"value":"/ task without splitting the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342228,"byte_end":10342266,"line_start":270,"line_end":270,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342271,"byte_end":10342274,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being ready. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342279,"byte_end":10342350,"line_start":272,"line_end":272,"column_start":5,"column_end":76}},{"value":"/ false-positive and attempting an operation will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342355,"byte_end":10342418,"line_start":273,"line_end":273,"column_start":5,"column_end":68}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342423,"byte_end":10342455,"line_start":274,"line_end":274,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342460,"byte_end":10342463,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342468,"byte_end":10342482,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342487,"byte_end":10342490,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Concurrently receive from and send to the socket on the same task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342495,"byte_end":10342564,"line_start":278,"line_end":278,"column_start":5,"column_end":74}},{"value":"/ without splitting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342569,"byte_end":10342591,"line_start":279,"line_end":279,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342596,"byte_end":10342599,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342604,"byte_end":10342617,"line_start":281,"line_end":281,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::{self, Interest};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342622,"byte_end":10342658,"line_start":282,"line_end":282,"column_start":5,"column_end":41}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342663,"byte_end":10342693,"line_start":283,"line_end":283,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342698,"byte_end":10342701,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342706,"byte_end":10342724,"line_start":285,"line_end":285,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342729,"byte_end":10342768,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342773,"byte_end":10342835,"line_start":287,"line_end":287,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342840,"byte_end":10342888,"line_start":288,"line_end":288,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342893,"byte_end":10342896,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342901,"byte_end":10342915,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/         let ready = socket.ready(Interest::READABLE | Interest::WRITABLE).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10342920,"byte_end":10343005,"line_start":291,"line_end":291,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343010,"byte_end":10343013,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/         if ready.is_readable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343018,"byte_end":10343054,"line_start":293,"line_end":293,"column_start":5,"column_end":41}},{"value":"/             // The buffer is **not** included in the async task and will only exist","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343059,"byte_end":10343146,"line_start":294,"line_end":294,"column_start":5,"column_end":92}},{"value":"/             // on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343151,"byte_end":10343183,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"/             let mut data = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343188,"byte_end":10343229,"line_start":296,"line_end":296,"column_start":5,"column_end":46}},{"value":"/             match socket.try_recv(&mut data[..]) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343234,"byte_end":10343288,"line_start":297,"line_end":297,"column_start":5,"column_end":59}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343293,"byte_end":10343323,"line_start":298,"line_end":298,"column_start":5,"column_end":35}},{"value":"/                     println!(\"received {:?}\", &data[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343328,"byte_end":10343390,"line_start":299,"line_end":299,"column_start":5,"column_end":67}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343395,"byte_end":10343416,"line_start":300,"line_end":300,"column_start":5,"column_end":26}},{"value":"/                 // False-positive, continue","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343421,"byte_end":10343468,"line_start":301,"line_end":301,"column_start":5,"column_end":52}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343473,"byte_end":10343550,"line_start":302,"line_end":302,"column_start":5,"column_end":82}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343555,"byte_end":10343586,"line_start":303,"line_end":303,"column_start":5,"column_end":36}},{"value":"/                     return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343591,"byte_end":10343629,"line_start":304,"line_end":304,"column_start":5,"column_end":43}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343634,"byte_end":10343655,"line_start":305,"line_end":305,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343660,"byte_end":10343677,"line_start":306,"line_end":306,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343682,"byte_end":10343695,"line_start":307,"line_end":307,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343700,"byte_end":10343703,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/         if ready.is_writable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343708,"byte_end":10343744,"line_start":309,"line_end":309,"column_start":5,"column_end":41}},{"value":"/             // Write some data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343749,"byte_end":10343783,"line_start":310,"line_end":310,"column_start":5,"column_end":39}},{"value":"/             match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343788,"byte_end":10343843,"line_start":311,"line_end":311,"column_start":5,"column_end":60}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343848,"byte_end":10343878,"line_start":312,"line_end":312,"column_start":5,"column_end":35}},{"value":"/                     println!(\"sent {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343883,"byte_end":10343936,"line_start":313,"line_end":313,"column_start":5,"column_end":58}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343941,"byte_end":10343962,"line_start":314,"line_end":314,"column_start":5,"column_end":26}},{"value":"/                 // False-positive, continue","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10343967,"byte_end":10344014,"line_start":315,"line_end":315,"column_start":5,"column_end":52}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344019,"byte_end":10344096,"line_start":316,"line_end":316,"column_start":5,"column_end":82}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344101,"byte_end":10344132,"line_start":317,"line_end":317,"column_start":5,"column_end":36}},{"value":"/                     return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344137,"byte_end":10344175,"line_start":318,"line_end":318,"column_start":5,"column_end":43}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344180,"byte_end":10344201,"line_start":319,"line_end":319,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344206,"byte_end":10344223,"line_start":320,"line_end":320,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344228,"byte_end":10344241,"line_start":321,"line_end":321,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344246,"byte_end":10344255,"line_start":322,"line_end":322,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344260,"byte_end":10344265,"line_start":323,"line_end":323,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344270,"byte_end":10344277,"line_start":324,"line_end":324,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345902,"byte_end":10345910,"line_start":373,"line_end":373,"column_start":18,"column_end":26},"name":"writable","qualname":"<UdpSocket>::writable","value":"pub async fn writable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become writable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become writable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344457,"byte_end":10344500,"line_start":330,"line_end":330,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344505,"byte_end":10344508,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::WRITABLE)` and is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344513,"byte_end":10344582,"line_start":332,"line_end":332,"column_start":5,"column_end":74}},{"value":"/ usually paired with `try_send()` or `try_send_to()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344587,"byte_end":10344643,"line_start":333,"line_end":333,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344648,"byte_end":10344651,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being writable. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344656,"byte_end":10344730,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"/ false-positive and attempting a `try_send()` will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344735,"byte_end":10344800,"line_start":336,"line_end":336,"column_start":5,"column_end":70}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344805,"byte_end":10344837,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344842,"byte_end":10344845,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344850,"byte_end":10344864,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344869,"byte_end":10344872,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344877,"byte_end":10344890,"line_start":341,"line_end":341,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344895,"byte_end":10344925,"line_start":342,"line_end":342,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344930,"byte_end":10344946,"line_start":343,"line_end":343,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344951,"byte_end":10344954,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344959,"byte_end":10344977,"line_start":345,"line_end":345,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10344982,"byte_end":10345021,"line_start":346,"line_end":346,"column_start":5,"column_end":44}},{"value":"/     // Bind socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345026,"byte_end":10345048,"line_start":347,"line_end":347,"column_start":5,"column_end":27}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345053,"byte_end":10345115,"line_start":348,"line_end":348,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345120,"byte_end":10345168,"line_start":349,"line_end":349,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345173,"byte_end":10345176,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345181,"byte_end":10345195,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345200,"byte_end":10345249,"line_start":352,"line_end":352,"column_start":5,"column_end":54}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345254,"byte_end":10345291,"line_start":353,"line_end":353,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345296,"byte_end":10345299,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/         // Try to send data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345304,"byte_end":10345374,"line_start":355,"line_end":355,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345379,"byte_end":10345437,"line_start":356,"line_end":356,"column_start":5,"column_end":63}},{"value":"/         match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345442,"byte_end":10345493,"line_start":357,"line_end":357,"column_start":5,"column_end":56}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345498,"byte_end":10345524,"line_start":358,"line_end":358,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345529,"byte_end":10345555,"line_start":359,"line_end":359,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345560,"byte_end":10345577,"line_start":360,"line_end":360,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345582,"byte_end":10345654,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345659,"byte_end":10345688,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345693,"byte_end":10345710,"line_start":363,"line_end":363,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345715,"byte_end":10345742,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345747,"byte_end":10345781,"line_start":365,"line_end":365,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345786,"byte_end":10345803,"line_start":366,"line_end":366,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345808,"byte_end":10345821,"line_start":367,"line_end":367,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345826,"byte_end":10345835,"line_start":368,"line_end":368,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345840,"byte_end":10345843,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345848,"byte_end":10345862,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345867,"byte_end":10345872,"line_start":371,"line_end":371,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10345877,"byte_end":10345884,"line_start":372,"line_end":372,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346930,"byte_end":10346934,"line_start":409,"line_end":409,"column_start":18,"column_end":22},"name":"send","qualname":"<UdpSocket>::send","value":"pub async fn send<'_, '_>(&'_ Self, &'_ [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the remote address that the socket is\n connected to.","sig":null,"attributes":[{"value":"/ Sends data on the socket to the remote address that the socket is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346011,"byte_end":10346080,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/ connected to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346085,"byte_end":10346102,"line_start":379,"line_end":379,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346107,"byte_end":10346110,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346115,"byte_end":10346187,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346192,"byte_end":10346249,"line_start":382,"line_end":382,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346254,"byte_end":10346257,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346262,"byte_end":10346299,"line_start":384,"line_end":384,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346304,"byte_end":10346307,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346312,"byte_end":10346324,"line_start":386,"line_end":386,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346329,"byte_end":10346332,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ On success, the number of bytes sent is returned, otherwise, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346337,"byte_end":10346405,"line_start":388,"line_end":388,"column_start":5,"column_end":73}},{"value":"/ encountered error is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346410,"byte_end":10346444,"line_start":389,"line_end":389,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346449,"byte_end":10346452,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346457,"byte_end":10346471,"line_start":391,"line_end":391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346476,"byte_end":10346479,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346484,"byte_end":10346497,"line_start":393,"line_end":393,"column_start":5,"column_end":18}},{"value":"/ use tokio::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346502,"byte_end":10346520,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346525,"byte_end":10346555,"line_start":395,"line_end":395,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346560,"byte_end":10346563,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346568,"byte_end":10346586,"line_start":397,"line_end":397,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346591,"byte_end":10346630,"line_start":398,"line_end":398,"column_start":5,"column_end":44}},{"value":"/     // Bind socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346635,"byte_end":10346657,"line_start":399,"line_end":399,"column_start":5,"column_end":27}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346662,"byte_end":10346724,"line_start":400,"line_end":400,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346729,"byte_end":10346777,"line_start":401,"line_end":401,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346782,"byte_end":10346785,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/     // Send a message","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346790,"byte_end":10346815,"line_start":403,"line_end":403,"column_start":5,"column_end":30}},{"value":"/     socket.send(b\"hello world\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346820,"byte_end":10346863,"line_start":404,"line_end":404,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346868,"byte_end":10346871,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346876,"byte_end":10346890,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346895,"byte_end":10346900,"line_start":407,"line_end":407,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10346905,"byte_end":10346912,"line_start":408,"line_end":408,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2959},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348022,"byte_end":10348031,"line_start":439,"line_end":439,"column_start":12,"column_end":21},"name":"poll_send","qualname":"<UdpSocket>::poll_send","value":"pub fn poll_send(&Self, &mut Context, &[u8]) -> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send data on the socket to the remote address to which it\n was previously `connect`ed.","sig":null,"attributes":[{"value":"/ Attempts to send data on the socket to the remote address to which it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347115,"byte_end":10347188,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ was previously `connect`ed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347193,"byte_end":10347224,"line_start":417,"line_end":417,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347229,"byte_end":10347232,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347237,"byte_end":10347309,"line_start":419,"line_end":419,"column_start":5,"column_end":77}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347314,"byte_end":10347371,"line_start":420,"line_end":420,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347376,"byte_end":10347379,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the send direction,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347384,"byte_end":10347459,"line_start":422,"line_end":422,"column_start":5,"column_end":80}},{"value":"/ only the `Waker` from the `Context` passed to the most recent call will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347464,"byte_end":10347539,"line_start":423,"line_end":423,"column_start":5,"column_end":80}},{"value":"/ be scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347544,"byte_end":10347581,"line_start":424,"line_end":424,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347586,"byte_end":10347589,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347594,"byte_end":10347612,"line_start":426,"line_end":426,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347617,"byte_end":10347620,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347625,"byte_end":10347650,"line_start":428,"line_end":428,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347655,"byte_end":10347658,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not available to write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347663,"byte_end":10347724,"line_start":430,"line_end":430,"column_start":5,"column_end":66}},{"value":"/ * `Poll::Ready(Ok(n))` `n` is the number of bytes sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347729,"byte_end":10347787,"line_start":431,"line_end":431,"column_start":5,"column_end":63}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347792,"byte_end":10347847,"line_start":432,"line_end":432,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347852,"byte_end":10347855,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347860,"byte_end":10347872,"line_start":434,"line_end":434,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347877,"byte_end":10347880,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347885,"byte_end":10347960,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347965,"byte_end":10347968,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10347973,"byte_end":10348010,"line_start":438,"line_end":438,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349775,"byte_end":10349783,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"try_send","qualname":"<UdpSocket>::try_send","value":"pub fn try_send(&Self, &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to send data on the socket to the remote address to which it is\n connected.","sig":null,"attributes":[{"value":"/ Try to send data on the socket to the remote address to which it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348210,"byte_end":10348281,"line_start":445,"line_end":445,"column_start":5,"column_end":76}},{"value":"/ connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348286,"byte_end":10348300,"line_start":446,"line_end":446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348305,"byte_end":10348308,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ When the socket buffer is full, `Err(io::ErrorKind::WouldBlock)` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348313,"byte_end":10348384,"line_start":448,"line_end":448,"column_start":5,"column_end":76}},{"value":"/ returned. This function is usually paired with `writable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348389,"byte_end":10348453,"line_start":449,"line_end":449,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348458,"byte_end":10348461,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348466,"byte_end":10348479,"line_start":451,"line_end":451,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348484,"byte_end":10348487,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ If successful, `Ok(n)` is returned, where `n` is the number of bytes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348492,"byte_end":10348564,"line_start":453,"line_end":453,"column_start":5,"column_end":77}},{"value":"/ sent. If the socket is not ready to send data,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348569,"byte_end":10348619,"line_start":454,"line_end":454,"column_start":5,"column_end":55}},{"value":"/ `Err(ErrorKind::WouldBlock)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348624,"byte_end":10348669,"line_start":455,"line_end":455,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348674,"byte_end":10348677,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348682,"byte_end":10348696,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348701,"byte_end":10348704,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348709,"byte_end":10348722,"line_start":459,"line_end":459,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348727,"byte_end":10348757,"line_start":460,"line_end":460,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348762,"byte_end":10348778,"line_start":461,"line_end":461,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348783,"byte_end":10348786,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348791,"byte_end":10348809,"line_start":463,"line_end":463,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348814,"byte_end":10348853,"line_start":464,"line_end":464,"column_start":5,"column_end":44}},{"value":"/     // Bind a UDP socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348858,"byte_end":10348886,"line_start":465,"line_end":465,"column_start":5,"column_end":33}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348891,"byte_end":10348953,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348958,"byte_end":10348961,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348966,"byte_end":10348994,"line_start":468,"line_end":468,"column_start":5,"column_end":33}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10348999,"byte_end":10349047,"line_start":469,"line_end":469,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349052,"byte_end":10349055,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349060,"byte_end":10349074,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349079,"byte_end":10349128,"line_start":472,"line_end":472,"column_start":5,"column_end":54}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349133,"byte_end":10349170,"line_start":473,"line_end":473,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349175,"byte_end":10349178,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/         // Try to send data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349183,"byte_end":10349253,"line_start":475,"line_end":475,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349258,"byte_end":10349316,"line_start":476,"line_end":476,"column_start":5,"column_end":63}},{"value":"/         match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349321,"byte_end":10349372,"line_start":477,"line_end":477,"column_start":5,"column_end":56}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349377,"byte_end":10349403,"line_start":478,"line_end":478,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349408,"byte_end":10349434,"line_start":479,"line_end":479,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349439,"byte_end":10349456,"line_start":480,"line_end":480,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349461,"byte_end":10349533,"line_start":481,"line_end":481,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349538,"byte_end":10349567,"line_start":482,"line_end":482,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349572,"byte_end":10349589,"line_start":483,"line_end":483,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349594,"byte_end":10349621,"line_start":484,"line_end":484,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349626,"byte_end":10349660,"line_start":485,"line_end":485,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349665,"byte_end":10349682,"line_start":486,"line_end":486,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349687,"byte_end":10349700,"line_start":487,"line_end":487,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349705,"byte_end":10349714,"line_start":488,"line_end":488,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349719,"byte_end":10349722,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349727,"byte_end":10349741,"line_start":490,"line_end":490,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349746,"byte_end":10349751,"line_start":491,"line_end":491,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349756,"byte_end":10349763,"line_start":492,"line_end":492,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351596,"byte_end":10351604,"line_start":547,"line_end":547,"column_start":18,"column_end":26},"name":"readable","qualname":"<UdpSocket>::readable","value":"pub async fn readable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become readable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become readable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349943,"byte_end":10349986,"line_start":499,"line_end":499,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349991,"byte_end":10349994,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::READABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10349999,"byte_end":10350076,"line_start":501,"line_end":501,"column_start":5,"column_end":82}},{"value":"/ paired with `try_recv()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350081,"byte_end":10350110,"line_start":502,"line_end":502,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350115,"byte_end":10350118,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being readable. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350123,"byte_end":10350197,"line_start":504,"line_end":504,"column_start":5,"column_end":79}},{"value":"/ false-positive and attempting a `try_recv()` will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350202,"byte_end":10350267,"line_start":505,"line_end":505,"column_start":5,"column_end":70}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350272,"byte_end":10350304,"line_start":506,"line_end":506,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350309,"byte_end":10350312,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350317,"byte_end":10350331,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350336,"byte_end":10350339,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350344,"byte_end":10350357,"line_start":510,"line_end":510,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350362,"byte_end":10350392,"line_start":511,"line_end":511,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350397,"byte_end":10350413,"line_start":512,"line_end":512,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350418,"byte_end":10350421,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350426,"byte_end":10350444,"line_start":514,"line_end":514,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350449,"byte_end":10350488,"line_start":515,"line_end":515,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350493,"byte_end":10350521,"line_start":516,"line_end":516,"column_start":5,"column_end":33}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350526,"byte_end":10350588,"line_start":517,"line_end":517,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350593,"byte_end":10350641,"line_start":518,"line_end":518,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350646,"byte_end":10350649,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350654,"byte_end":10350668,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350673,"byte_end":10350722,"line_start":521,"line_end":521,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350727,"byte_end":10350764,"line_start":522,"line_end":522,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350769,"byte_end":10350772,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350777,"byte_end":10350849,"line_start":524,"line_end":524,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350854,"byte_end":10350893,"line_start":525,"line_end":525,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350898,"byte_end":10350934,"line_start":526,"line_end":526,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350939,"byte_end":10350942,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10350947,"byte_end":10351017,"line_start":528,"line_end":528,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351022,"byte_end":10351080,"line_start":529,"line_end":529,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351085,"byte_end":10351130,"line_start":530,"line_end":530,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351135,"byte_end":10351161,"line_start":531,"line_end":531,"column_start":5,"column_end":31}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351166,"byte_end":10351218,"line_start":532,"line_end":532,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351223,"byte_end":10351249,"line_start":533,"line_end":533,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351254,"byte_end":10351271,"line_start":534,"line_end":534,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351276,"byte_end":10351348,"line_start":535,"line_end":535,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351353,"byte_end":10351382,"line_start":536,"line_end":536,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351387,"byte_end":10351404,"line_start":537,"line_end":537,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351409,"byte_end":10351436,"line_start":538,"line_end":538,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351441,"byte_end":10351475,"line_start":539,"line_end":539,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351480,"byte_end":10351497,"line_start":540,"line_end":540,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351502,"byte_end":10351515,"line_start":541,"line_end":541,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351520,"byte_end":10351529,"line_start":542,"line_end":542,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351534,"byte_end":10351537,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351542,"byte_end":10351556,"line_start":544,"line_end":544,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351561,"byte_end":10351566,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351571,"byte_end":10351578,"line_start":546,"line_end":546,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352817,"byte_end":10352821,"line_start":582,"line_end":582,"column_start":18,"column_end":22},"name":"recv","qualname":"<UdpSocket>::recv","value":"pub async fn recv<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message on the socket from the remote address\n to which it is connected. On success, returns the number of bytes read.","sig":null,"attributes":[{"value":"/ Receives a single datagram message on the socket from the remote address","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351705,"byte_end":10351781,"line_start":552,"line_end":552,"column_start":5,"column_end":81}},{"value":"/ to which it is connected. On success, returns the number of bytes read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351786,"byte_end":10351861,"line_start":553,"line_end":553,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351866,"byte_end":10351869,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ The function must be called with valid byte array `buf` of sufficient","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351874,"byte_end":10351947,"line_start":555,"line_end":555,"column_start":5,"column_end":78}},{"value":"/ size to hold the message bytes. If a message is too long to fit in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10351952,"byte_end":10352026,"line_start":556,"line_end":556,"column_start":5,"column_end":79}},{"value":"/ supplied buffer, excess bytes may be discarded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352031,"byte_end":10352082,"line_start":557,"line_end":557,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352087,"byte_end":10352090,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352095,"byte_end":10352167,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352172,"byte_end":10352229,"line_start":560,"line_end":560,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352234,"byte_end":10352237,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352242,"byte_end":10352279,"line_start":562,"line_end":562,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352284,"byte_end":10352287,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352292,"byte_end":10352305,"line_start":564,"line_end":564,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352310,"byte_end":10352340,"line_start":565,"line_end":565,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352345,"byte_end":10352361,"line_start":566,"line_end":566,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352366,"byte_end":10352369,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352374,"byte_end":10352392,"line_start":568,"line_end":568,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352397,"byte_end":10352436,"line_start":569,"line_end":569,"column_start":5,"column_end":44}},{"value":"/     // Bind socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352441,"byte_end":10352463,"line_start":570,"line_end":570,"column_start":5,"column_end":27}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352468,"byte_end":10352530,"line_start":571,"line_end":571,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352535,"byte_end":10352583,"line_start":572,"line_end":572,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352588,"byte_end":10352591,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/     let mut buf = vec![0; 10];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352596,"byte_end":10352630,"line_start":574,"line_end":574,"column_start":5,"column_end":39}},{"value":"/     let n = socket.recv(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352635,"byte_end":10352680,"line_start":575,"line_end":575,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352685,"byte_end":10352688,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/     println!(\"received {} bytes {:?}\", n, &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352693,"byte_end":10352750,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352755,"byte_end":10352758,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352763,"byte_end":10352777,"line_start":579,"line_end":579,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352782,"byte_end":10352787,"line_start":580,"line_end":580,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10352792,"byte_end":10352799,"line_start":581,"line_end":581,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353946,"byte_end":10353955,"line_start":612,"line_end":612,"column_start":12,"column_end":21},"name":"poll_recv","qualname":"<UdpSocket>::poll_recv","value":"pub fn poll_recv(&Self, &mut Context, &mut ReadBuf) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a single datagram message on the socket from the remote\n address to which it is `connect`ed.","sig":null,"attributes":[{"value":"/ Attempts to receive a single datagram message on the socket from the remote","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353006,"byte_end":10353085,"line_start":589,"line_end":589,"column_start":5,"column_end":84}},{"value":"/ address to which it is `connect`ed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353090,"byte_end":10353129,"line_start":590,"line_end":590,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353134,"byte_end":10353137,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address. This method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353142,"byte_end":10353226,"line_start":592,"line_end":592,"column_start":5,"column_end":89}},{"value":"/ resolves to an error if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353231,"byte_end":10353287,"line_start":593,"line_end":593,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353292,"byte_end":10353295,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the recv direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353300,"byte_end":10353384,"line_start":595,"line_end":595,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353389,"byte_end":10353471,"line_start":596,"line_end":596,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353476,"byte_end":10353497,"line_start":597,"line_end":597,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353502,"byte_end":10353505,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353510,"byte_end":10353528,"line_start":599,"line_end":599,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353533,"byte_end":10353536,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353541,"byte_end":10353566,"line_start":601,"line_end":601,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353571,"byte_end":10353574,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353579,"byte_end":10353635,"line_start":603,"line_end":603,"column_start":5,"column_end":61}},{"value":"/ * `Poll::Ready(Ok(()))` reads data `ReadBuf` if the socket is ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353640,"byte_end":10353711,"line_start":604,"line_end":604,"column_start":5,"column_end":76}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353716,"byte_end":10353771,"line_start":605,"line_end":605,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353776,"byte_end":10353779,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353784,"byte_end":10353796,"line_start":607,"line_end":607,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353801,"byte_end":10353804,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353809,"byte_end":10353884,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353889,"byte_end":10353892,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10353897,"byte_end":10353934,"line_start":611,"line_end":611,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2971},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356376,"byte_end":10356384,"line_start":680,"line_end":680,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<UdpSocket>::try_recv","value":"pub fn try_recv(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to receive a single datagram message on the socket from the remote\n address to which it is connected. On success, returns the number of\n bytes read.","sig":null,"attributes":[{"value":"/ Try to receive a single datagram message on the socket from the remote","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354549,"byte_end":10354623,"line_start":630,"line_end":630,"column_start":5,"column_end":79}},{"value":"/ address to which it is connected. On success, returns the number of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354628,"byte_end":10354699,"line_start":631,"line_end":631,"column_start":5,"column_end":76}},{"value":"/ bytes read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354704,"byte_end":10354719,"line_start":632,"line_end":632,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354724,"byte_end":10354727,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ The function must be called with valid byte array buf of sufficient size","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354732,"byte_end":10354808,"line_start":634,"line_end":634,"column_start":5,"column_end":81}},{"value":"/ to hold the message bytes. If a message is too long to fit in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354813,"byte_end":10354882,"line_start":635,"line_end":635,"column_start":5,"column_end":74}},{"value":"/ supplied buffer, excess bytes may be discarded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354887,"byte_end":10354938,"line_start":636,"line_end":636,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354943,"byte_end":10354946,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ When there is no pending data, `Err(io::ErrorKind::WouldBlock)` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10354951,"byte_end":10355021,"line_start":638,"line_end":638,"column_start":5,"column_end":75}},{"value":"/ returned. This function is usually paired with `readable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355026,"byte_end":10355090,"line_start":639,"line_end":639,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355095,"byte_end":10355098,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355103,"byte_end":10355117,"line_start":641,"line_end":641,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355122,"byte_end":10355125,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355130,"byte_end":10355143,"line_start":643,"line_end":643,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355148,"byte_end":10355178,"line_start":644,"line_end":644,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355183,"byte_end":10355199,"line_start":645,"line_end":645,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355204,"byte_end":10355207,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355212,"byte_end":10355230,"line_start":647,"line_end":647,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355235,"byte_end":10355274,"line_start":648,"line_end":648,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355279,"byte_end":10355307,"line_start":649,"line_end":649,"column_start":5,"column_end":33}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355312,"byte_end":10355374,"line_start":650,"line_end":650,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355379,"byte_end":10355427,"line_start":651,"line_end":651,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355432,"byte_end":10355435,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355440,"byte_end":10355454,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355459,"byte_end":10355508,"line_start":654,"line_end":654,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355513,"byte_end":10355550,"line_start":655,"line_end":655,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355555,"byte_end":10355558,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355563,"byte_end":10355635,"line_start":657,"line_end":657,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355640,"byte_end":10355679,"line_start":658,"line_end":658,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355684,"byte_end":10355720,"line_start":659,"line_end":659,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355725,"byte_end":10355728,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355733,"byte_end":10355803,"line_start":661,"line_end":661,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355808,"byte_end":10355866,"line_start":662,"line_end":662,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355871,"byte_end":10355916,"line_start":663,"line_end":663,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355921,"byte_end":10355947,"line_start":664,"line_end":664,"column_start":5,"column_end":31}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10355952,"byte_end":10356004,"line_start":665,"line_end":665,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356009,"byte_end":10356035,"line_start":666,"line_end":666,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356040,"byte_end":10356057,"line_start":667,"line_end":667,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356062,"byte_end":10356134,"line_start":668,"line_end":668,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356139,"byte_end":10356168,"line_start":669,"line_end":669,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356173,"byte_end":10356190,"line_start":670,"line_end":670,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356195,"byte_end":10356222,"line_start":671,"line_end":671,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356227,"byte_end":10356261,"line_start":672,"line_end":672,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356266,"byte_end":10356283,"line_start":673,"line_end":673,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356288,"byte_end":10356301,"line_start":674,"line_end":674,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356306,"byte_end":10356315,"line_start":675,"line_end":675,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356320,"byte_end":10356323,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356328,"byte_end":10356342,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356347,"byte_end":10356352,"line_start":678,"line_end":678,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356357,"byte_end":10356364,"line_start":679,"line_end":679,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2973},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357593,"byte_end":10357600,"line_start":716,"line_end":716,"column_start":18,"column_end":25},"name":"send_to","qualname":"<UdpSocket>::send_to","value":"pub async fn send_to<A: ToSocketAddrs, '_, '_>(&'_ Self, &'_ [u8], A)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the given address. On success, returns the\n number of bytes written.","sig":null,"attributes":[{"value":"/ Sends data on the socket to the given address. On success, returns the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356548,"byte_end":10356622,"line_start":686,"line_end":686,"column_start":5,"column_end":79}},{"value":"/ number of bytes written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356627,"byte_end":10356655,"line_start":687,"line_end":687,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356660,"byte_end":10356663,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ Address type can be any implementor of [`ToSocketAddrs`] trait. See its","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356668,"byte_end":10356743,"line_start":689,"line_end":689,"column_start":5,"column_end":80}},{"value":"/ documentation for concrete examples.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356748,"byte_end":10356788,"line_start":690,"line_end":690,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356793,"byte_end":10356796,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ It is possible for `addr` to yield multiple addresses, but `send_to`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356801,"byte_end":10356873,"line_start":692,"line_end":692,"column_start":5,"column_end":77}},{"value":"/ will only send data to the first address yielded by `addr`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356878,"byte_end":10356941,"line_start":693,"line_end":693,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356946,"byte_end":10356949,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ This will return an error when the IP version of the local socket does","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10356954,"byte_end":10357028,"line_start":695,"line_end":695,"column_start":5,"column_end":79}},{"value":"/ not match that returned from [`ToSocketAddrs`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357033,"byte_end":10357084,"line_start":696,"line_end":696,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357089,"byte_end":10357092,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ [`ToSocketAddrs`]: crate::net::ToSocketAddrs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357097,"byte_end":10357145,"line_start":698,"line_end":698,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357150,"byte_end":10357153,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357158,"byte_end":10357171,"line_start":700,"line_end":700,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357176,"byte_end":10357179,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357184,"byte_end":10357197,"line_start":702,"line_end":702,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357202,"byte_end":10357232,"line_start":703,"line_end":703,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357237,"byte_end":10357253,"line_start":704,"line_end":704,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357258,"byte_end":10357261,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357266,"byte_end":10357284,"line_start":706,"line_end":706,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357289,"byte_end":10357328,"line_start":707,"line_end":707,"column_start":5,"column_end":44}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357333,"byte_end":10357395,"line_start":708,"line_end":708,"column_start":5,"column_end":67}},{"value":"/     let len = socket.send_to(b\"hello world\", \"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357400,"byte_end":10357474,"line_start":709,"line_end":709,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357479,"byte_end":10357482,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/     println!(\"Sent {} bytes\", len);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357487,"byte_end":10357526,"line_start":711,"line_end":711,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357531,"byte_end":10357534,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357539,"byte_end":10357553,"line_start":713,"line_end":713,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357558,"byte_end":10357563,"line_start":714,"line_end":714,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357568,"byte_end":10357575,"line_start":715,"line_end":715,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358651,"byte_end":10358663,"line_start":745,"line_end":745,"column_start":12,"column_end":24},"name":"poll_send_to","qualname":"<UdpSocket>::poll_send_to","value":"pub fn poll_send_to(&Self, &mut Context, &[u8], SocketAddr)\n-> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send data on the socket to a given address.","sig":null,"attributes":[{"value":"/ Attempts to send data on the socket to a given address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10357994,"byte_end":10358053,"line_start":728,"line_end":728,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358058,"byte_end":10358061,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the send direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358066,"byte_end":10358150,"line_start":730,"line_end":730,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358155,"byte_end":10358237,"line_start":731,"line_end":731,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358242,"byte_end":10358263,"line_start":732,"line_end":732,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358268,"byte_end":10358271,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358276,"byte_end":10358294,"line_start":734,"line_end":734,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358299,"byte_end":10358302,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358307,"byte_end":10358332,"line_start":736,"line_end":736,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358337,"byte_end":10358340,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358345,"byte_end":10358402,"line_start":738,"line_end":738,"column_start":5,"column_end":62}},{"value":"/ * `Poll::Ready(Ok(n))` `n` is the number of bytes sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358407,"byte_end":10358466,"line_start":739,"line_end":739,"column_start":5,"column_end":64}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358471,"byte_end":10358526,"line_start":740,"line_end":740,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358531,"byte_end":10358534,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358539,"byte_end":10358551,"line_start":742,"line_end":742,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358556,"byte_end":10358559,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358564,"byte_end":10358639,"line_start":744,"line_end":744,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360463,"byte_end":10360474,"line_start":803,"line_end":803,"column_start":12,"column_end":23},"name":"try_send_to","qualname":"<UdpSocket>::try_send_to","value":"pub fn try_send_to(&Self, &[u8], SocketAddr) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to send data on the socket to the given address, but if the send is\n blocked this will return right away.","sig":null,"attributes":[{"value":"/ Try to send data on the socket to the given address, but if the send is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358912,"byte_end":10358987,"line_start":756,"line_end":756,"column_start":5,"column_end":80}},{"value":"/ blocked this will return right away.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10358992,"byte_end":10359032,"line_start":757,"line_end":757,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359037,"byte_end":10359040,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `writable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359045,"byte_end":10359099,"line_start":759,"line_end":759,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359104,"byte_end":10359107,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359112,"byte_end":10359125,"line_start":761,"line_end":761,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359130,"byte_end":10359133,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ If successfull, returns the number of bytes sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359138,"byte_end":10359190,"line_start":763,"line_end":763,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359195,"byte_end":10359198,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Users should ensure that when the remote cannot receive, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359203,"byte_end":10359267,"line_start":765,"line_end":765,"column_start":5,"column_end":69}},{"value":"/ [`ErrorKind::WouldBlock`] is properly handled. An error can also occur","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359272,"byte_end":10359346,"line_start":766,"line_end":766,"column_start":5,"column_end":79}},{"value":"/ if the IP version of the socket does not match that of `target`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359351,"byte_end":10359419,"line_start":767,"line_end":767,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359424,"byte_end":10359427,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ [`ErrorKind::WouldBlock`]: std::io::ErrorKind::WouldBlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359432,"byte_end":10359493,"line_start":769,"line_end":769,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359498,"byte_end":10359501,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359506,"byte_end":10359519,"line_start":771,"line_end":771,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359524,"byte_end":10359527,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359532,"byte_end":10359545,"line_start":773,"line_end":773,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359550,"byte_end":10359580,"line_start":774,"line_end":774,"column_start":5,"column_end":35}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359585,"byte_end":10359611,"line_start":775,"line_end":775,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359616,"byte_end":10359632,"line_start":776,"line_end":776,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359637,"byte_end":10359640,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359645,"byte_end":10359663,"line_start":778,"line_end":778,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359668,"byte_end":10359719,"line_start":779,"line_end":779,"column_start":5,"column_end":56}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359724,"byte_end":10359786,"line_start":780,"line_end":780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359791,"byte_end":10359794,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/     let dst = \"127.0.0.1:8081\".parse()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359799,"byte_end":10359843,"line_start":782,"line_end":782,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359848,"byte_end":10359851,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359856,"byte_end":10359870,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359875,"byte_end":10359912,"line_start":785,"line_end":785,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359917,"byte_end":10359920,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/         match socket.try_send_to(&b\"hello world\"[..], dst) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359925,"byte_end":10359989,"line_start":787,"line_end":787,"column_start":5,"column_end":69}},{"value":"/             Ok(sent) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10359994,"byte_end":10360023,"line_start":788,"line_end":788,"column_start":5,"column_end":34}},{"value":"/                 println!(\"sent {} bytes\", sent);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360028,"byte_end":10360080,"line_start":789,"line_end":789,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360085,"byte_end":10360111,"line_start":790,"line_end":790,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360116,"byte_end":10360133,"line_start":791,"line_end":791,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360138,"byte_end":10360210,"line_start":792,"line_end":792,"column_start":5,"column_end":77}},{"value":"/                 // Writable false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360215,"byte_end":10360262,"line_start":793,"line_end":793,"column_start":5,"column_end":52}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360267,"byte_end":10360296,"line_start":794,"line_end":794,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360301,"byte_end":10360318,"line_start":795,"line_end":795,"column_start":5,"column_end":22}},{"value":"/             Err(e) => return Err(e.into()),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360323,"byte_end":10360370,"line_start":796,"line_end":796,"column_start":5,"column_end":52}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360375,"byte_end":10360388,"line_start":797,"line_end":797,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360393,"byte_end":10360402,"line_start":798,"line_end":798,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360407,"byte_end":10360410,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360415,"byte_end":10360429,"line_start":800,"line_end":800,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360434,"byte_end":10360439,"line_start":801,"line_end":801,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360444,"byte_end":10360451,"line_start":802,"line_end":802,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361746,"byte_end":10361755,"line_start":841,"line_end":841,"column_start":18,"column_end":27},"name":"recv_from","qualname":"<UdpSocket>::recv_from","value":"pub async fn recv_from<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message on the socket. On success, returns\n the number of bytes read and the origin.","sig":null,"attributes":[{"value":"/ Receives a single datagram message on the socket. On success, returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360898,"byte_end":10360971,"line_start":816,"line_end":816,"column_start":5,"column_end":78}},{"value":"/ the number of bytes read and the origin.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10360976,"byte_end":10361020,"line_start":817,"line_end":817,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361025,"byte_end":10361028,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ The function must be called with valid byte array `buf` of sufficient","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361033,"byte_end":10361106,"line_start":819,"line_end":819,"column_start":5,"column_end":78}},{"value":"/ size to hold the message bytes. If a message is too long to fit in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361111,"byte_end":10361185,"line_start":820,"line_end":820,"column_start":5,"column_end":79}},{"value":"/ supplied buffer, excess bytes may be discarded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361190,"byte_end":10361241,"line_start":821,"line_end":821,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361246,"byte_end":10361249,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361254,"byte_end":10361267,"line_start":823,"line_end":823,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361272,"byte_end":10361275,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361280,"byte_end":10361293,"line_start":825,"line_end":825,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361298,"byte_end":10361328,"line_start":826,"line_end":826,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361333,"byte_end":10361349,"line_start":827,"line_end":827,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361354,"byte_end":10361357,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361362,"byte_end":10361380,"line_start":829,"line_end":829,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361385,"byte_end":10361424,"line_start":830,"line_end":830,"column_start":5,"column_end":44}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361429,"byte_end":10361491,"line_start":831,"line_end":831,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361496,"byte_end":10361499,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/     let mut buf = vec![0u8; 32];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361504,"byte_end":10361540,"line_start":833,"line_end":833,"column_start":5,"column_end":41}},{"value":"/     let (len, addr) = socket.recv_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361545,"byte_end":10361605,"line_start":834,"line_end":834,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361610,"byte_end":10361613,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/     println!(\"received {:?} bytes from {:?}\", len, addr);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361618,"byte_end":10361679,"line_start":836,"line_end":836,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361684,"byte_end":10361687,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361692,"byte_end":10361706,"line_start":838,"line_end":838,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361711,"byte_end":10361716,"line_start":839,"line_end":839,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361721,"byte_end":10361728,"line_start":840,"line_end":840,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362643,"byte_end":10362657,"line_start":865,"line_end":865,"column_start":12,"column_end":26},"name":"poll_recv_from","qualname":"<UdpSocket>::poll_recv_from","value":"pub fn poll_recv_from(&Self, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<SocketAddr>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a single datagram on the socket.","sig":null,"attributes":[{"value":"/ Attempts to receive a single datagram on the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10361959,"byte_end":10362015,"line_start":848,"line_end":848,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362020,"byte_end":10362023,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the recv direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362028,"byte_end":10362112,"line_start":850,"line_end":850,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362117,"byte_end":10362199,"line_start":851,"line_end":851,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362204,"byte_end":10362225,"line_start":852,"line_end":852,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362230,"byte_end":10362233,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362238,"byte_end":10362256,"line_start":854,"line_end":854,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362261,"byte_end":10362264,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362269,"byte_end":10362294,"line_start":856,"line_end":856,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362299,"byte_end":10362302,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362307,"byte_end":10362363,"line_start":858,"line_end":858,"column_start":5,"column_end":61}},{"value":"/ * `Poll::Ready(Ok(addr))` reads data from `addr` into `ReadBuf` if the socket is ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362368,"byte_end":10362458,"line_start":859,"line_end":859,"column_start":5,"column_end":95}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362463,"byte_end":10362518,"line_start":860,"line_end":860,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362523,"byte_end":10362526,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362531,"byte_end":10362543,"line_start":862,"line_end":862,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362548,"byte_end":10362551,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10362556,"byte_end":10362631,"line_start":864,"line_end":864,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365104,"byte_end":10365117,"line_start":936,"line_end":936,"column_start":12,"column_end":25},"name":"try_recv_from","qualname":"<UdpSocket>::try_recv_from","value":"pub fn try_recv_from(&Self, &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Try to receive a single datagram message on the socket. On success,\n returns the number of bytes read and the origin.","sig":null,"attributes":[{"value":"/ Try to receive a single datagram message on the socket. On success,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363305,"byte_end":10363376,"line_start":887,"line_end":887,"column_start":5,"column_end":76}},{"value":"/ returns the number of bytes read and the origin.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363381,"byte_end":10363433,"line_start":888,"line_end":888,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363438,"byte_end":10363441,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ The function must be called with valid byte array buf of sufficient size","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363446,"byte_end":10363522,"line_start":890,"line_end":890,"column_start":5,"column_end":81}},{"value":"/ to hold the message bytes. If a message is too long to fit in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363527,"byte_end":10363596,"line_start":891,"line_end":891,"column_start":5,"column_end":74}},{"value":"/ supplied buffer, excess bytes may be discarded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363601,"byte_end":10363652,"line_start":892,"line_end":892,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363657,"byte_end":10363660,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ When there is no pending data, `Err(io::ErrorKind::WouldBlock)` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363665,"byte_end":10363735,"line_start":894,"line_end":894,"column_start":5,"column_end":75}},{"value":"/ returned. This function is usually paired with `readable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363740,"byte_end":10363804,"line_start":895,"line_end":895,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363809,"byte_end":10363812,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363817,"byte_end":10363831,"line_start":897,"line_end":897,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363836,"byte_end":10363839,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363844,"byte_end":10363857,"line_start":899,"line_end":899,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363862,"byte_end":10363892,"line_start":900,"line_end":900,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363897,"byte_end":10363913,"line_start":901,"line_end":901,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363918,"byte_end":10363921,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363926,"byte_end":10363944,"line_start":903,"line_end":903,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363949,"byte_end":10363988,"line_start":904,"line_end":904,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10363993,"byte_end":10364021,"line_start":905,"line_end":905,"column_start":5,"column_end":33}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364026,"byte_end":10364088,"line_start":906,"line_end":906,"column_start":5,"column_end":67}},{"value":"/     socket.connect(\"127.0.0.1:8081\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364093,"byte_end":10364141,"line_start":907,"line_end":907,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364146,"byte_end":10364149,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364154,"byte_end":10364168,"line_start":909,"line_end":909,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364173,"byte_end":10364222,"line_start":910,"line_end":910,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364227,"byte_end":10364264,"line_start":911,"line_end":911,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364269,"byte_end":10364272,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364277,"byte_end":10364349,"line_start":913,"line_end":913,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364354,"byte_end":10364393,"line_start":914,"line_end":914,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364398,"byte_end":10364434,"line_start":915,"line_end":915,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364439,"byte_end":10364442,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364447,"byte_end":10364517,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364522,"byte_end":10364580,"line_start":918,"line_end":918,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv_from(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364585,"byte_end":10364635,"line_start":919,"line_end":919,"column_start":5,"column_end":55}},{"value":"/             Ok((n, _addr)) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364640,"byte_end":10364675,"line_start":920,"line_end":920,"column_start":5,"column_end":40}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364680,"byte_end":10364732,"line_start":921,"line_end":921,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364737,"byte_end":10364763,"line_start":922,"line_end":922,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364768,"byte_end":10364785,"line_start":923,"line_end":923,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364790,"byte_end":10364862,"line_start":924,"line_end":924,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364867,"byte_end":10364896,"line_start":925,"line_end":925,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364901,"byte_end":10364918,"line_start":926,"line_end":926,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364923,"byte_end":10364950,"line_start":927,"line_end":927,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364955,"byte_end":10364989,"line_start":928,"line_end":928,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10364994,"byte_end":10365011,"line_start":929,"line_end":929,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365016,"byte_end":10365029,"line_start":930,"line_end":930,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365034,"byte_end":10365043,"line_start":931,"line_end":931,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365048,"byte_end":10365051,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365056,"byte_end":10365070,"line_start":933,"line_end":933,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365075,"byte_end":10365080,"line_start":934,"line_end":934,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365085,"byte_end":10365092,"line_start":935,"line_end":935,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366377,"byte_end":10366386,"line_start":972,"line_end":972,"column_start":18,"column_end":27},"name":"peek_from","qualname":"<UdpSocket>::peek_from","value":"pub async fn peek_from<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket, without removing it from the input queue.\n On success, returns the number of bytes read and the address from whence\n the data came.","sig":null,"attributes":[{"value":"/ Receives data from the socket, without removing it from the input queue.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365300,"byte_end":10365376,"line_start":942,"line_end":942,"column_start":5,"column_end":81}},{"value":"/ On success, returns the number of bytes read and the address from whence","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365381,"byte_end":10365457,"line_start":943,"line_end":943,"column_start":5,"column_end":81}},{"value":"/ the data came.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365462,"byte_end":10365480,"line_start":944,"line_end":944,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365485,"byte_end":10365488,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365493,"byte_end":10365504,"line_start":946,"line_end":946,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365509,"byte_end":10365512,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ On Windows, if the data is larger than the buffer specified, the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365517,"byte_end":10365592,"line_start":948,"line_end":948,"column_start":5,"column_end":80}},{"value":"/ is filled with the first part of the data, and peek_from returns the error","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365597,"byte_end":10365675,"line_start":949,"line_end":949,"column_start":5,"column_end":83}},{"value":"/ WSAEMSGSIZE(10040). The excess data is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365680,"byte_end":10365728,"line_start":950,"line_end":950,"column_start":5,"column_end":53}},{"value":"/ Make sure to always use a sufficiently large buffer to hold the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365733,"byte_end":10365800,"line_start":951,"line_end":951,"column_start":5,"column_end":72}},{"value":"/ maximum UDP packet size, which can be up to 65536 bytes in size.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365805,"byte_end":10365873,"line_start":952,"line_end":952,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365878,"byte_end":10365881,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365886,"byte_end":10365900,"line_start":954,"line_end":954,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365905,"byte_end":10365908,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365913,"byte_end":10365926,"line_start":956,"line_end":956,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365931,"byte_end":10365961,"line_start":957,"line_end":957,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365966,"byte_end":10365982,"line_start":958,"line_end":958,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365987,"byte_end":10365990,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10365995,"byte_end":10366013,"line_start":960,"line_end":960,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366018,"byte_end":10366057,"line_start":961,"line_end":961,"column_start":5,"column_end":44}},{"value":"/     let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366062,"byte_end":10366124,"line_start":962,"line_end":962,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366129,"byte_end":10366132,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/     let mut buf = vec![0u8; 32];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366137,"byte_end":10366173,"line_start":964,"line_end":964,"column_start":5,"column_end":41}},{"value":"/     let (len, addr) = socket.peek_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366178,"byte_end":10366238,"line_start":965,"line_end":965,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366243,"byte_end":10366246,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/     println!(\"peeked {:?} bytes from {:?}\", len, addr);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366251,"byte_end":10366310,"line_start":967,"line_end":967,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366315,"byte_end":10366318,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366323,"byte_end":10366337,"line_start":969,"line_end":969,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366342,"byte_end":10366347,"line_start":970,"line_end":970,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366352,"byte_end":10366359,"line_start":971,"line_end":971,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367735,"byte_end":10367749,"line_start":1005,"line_end":1005,"column_start":12,"column_end":26},"name":"poll_peek_from","qualname":"<UdpSocket>::poll_peek_from","value":"pub fn poll_peek_from(&Self, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<SocketAddr>>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket, without removing it from the input queue.\n On success, returns the number of bytes read.","sig":null,"attributes":[{"value":"/ Receives data from the socket, without removing it from the input queue.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366590,"byte_end":10366666,"line_start":979,"line_end":979,"column_start":5,"column_end":81}},{"value":"/ On success, returns the number of bytes read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366671,"byte_end":10366720,"line_start":980,"line_end":980,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366725,"byte_end":10366728,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366733,"byte_end":10366744,"line_start":982,"line_end":982,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366749,"byte_end":10366752,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the recv direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366757,"byte_end":10366841,"line_start":984,"line_end":984,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366846,"byte_end":10366928,"line_start":985,"line_end":985,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366933,"byte_end":10366953,"line_start":986,"line_end":986,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366958,"byte_end":10366961,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ On Windows, if the data is larger than the buffer specified, the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10366966,"byte_end":10367041,"line_start":988,"line_end":988,"column_start":5,"column_end":80}},{"value":"/ is filled with the first part of the data, and peek returns the error","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367046,"byte_end":10367119,"line_start":989,"line_end":989,"column_start":5,"column_end":78}},{"value":"/ WSAEMSGSIZE(10040). The excess data is lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367124,"byte_end":10367172,"line_start":990,"line_end":990,"column_start":5,"column_end":53}},{"value":"/ Make sure to always use a sufficiently large buffer to hold the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367177,"byte_end":10367244,"line_start":991,"line_end":991,"column_start":5,"column_end":72}},{"value":"/ maximum UDP packet size, which can be up to 65536 bytes in size.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367249,"byte_end":10367317,"line_start":992,"line_end":992,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367322,"byte_end":10367325,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367330,"byte_end":10367348,"line_start":994,"line_end":994,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367353,"byte_end":10367356,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367361,"byte_end":10367386,"line_start":996,"line_end":996,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367391,"byte_end":10367394,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367399,"byte_end":10367455,"line_start":998,"line_end":998,"column_start":5,"column_end":61}},{"value":"/ * `Poll::Ready(Ok(addr))` reads data from `addr` into `ReadBuf` if the socket is ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367460,"byte_end":10367550,"line_start":999,"line_end":999,"column_start":5,"column_end":95}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367555,"byte_end":10367610,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367615,"byte_end":10367618,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367623,"byte_end":10367635,"line_start":1002,"line_end":1002,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367640,"byte_end":10367643,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10367648,"byte_end":10367723,"line_start":1004,"line_end":1004,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368614,"byte_end":10368623,"line_start":1032,"line_end":1032,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<UdpSocket>::broadcast","value":"pub fn broadcast(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `SO_BROADCAST` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368397,"byte_end":10368461,"line_start":1027,"line_end":1027,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368466,"byte_end":10368469,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_broadcast`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368474,"byte_end":10368540,"line_start":1029,"line_end":1029,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368545,"byte_end":10368548,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ [`set_broadcast`]: method@Self::set_broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368553,"byte_end":10368602,"line_start":1031,"line_end":1031,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368869,"byte_end":10368882,"line_start":1040,"line_end":1040,"column_start":12,"column_end":25},"name":"set_broadcast","qualname":"<UdpSocket>::set_broadcast","value":"pub fn set_broadcast(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `SO_BROADCAST` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368692,"byte_end":10368756,"line_start":1036,"line_end":1036,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368761,"byte_end":10368764,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ When enabled, this socket is allowed to send packets to a broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368769,"byte_end":10368840,"line_start":1038,"line_end":1038,"column_start":5,"column_end":76}},{"value":"/ address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368845,"byte_end":10368857,"line_start":1039,"line_end":1039,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369211,"byte_end":10369228,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"multicast_loop_v4","qualname":"<UdpSocket>::multicast_loop_v4","value":"pub fn multicast_loop_v4(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10368965,"byte_end":10369034,"line_start":1044,"line_end":1044,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369039,"byte_end":10369042,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_multicast_loop_v4`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369047,"byte_end":10369121,"line_start":1046,"line_end":1046,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369126,"byte_end":10369129,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ [`set_multicast_loop_v4`]: method@Self::set_multicast_loop_v4","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369134,"byte_end":10369199,"line_start":1048,"line_end":1048,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369558,"byte_end":10369579,"line_start":1060,"line_end":1060,"column_start":12,"column_end":33},"name":"set_multicast_loop_v4","qualname":"<UdpSocket>::set_multicast_loop_v4","value":"pub fn set_multicast_loop_v4(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369305,"byte_end":10369374,"line_start":1053,"line_end":1053,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369379,"byte_end":10369382,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ If enabled, multicast packets will be looped back to the local socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369387,"byte_end":10369461,"line_start":1055,"line_end":1055,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369466,"byte_end":10369469,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369474,"byte_end":10369484,"line_start":1057,"line_end":1057,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369489,"byte_end":10369492,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This may not have any affect on IPv6 sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369497,"byte_end":10369546,"line_start":1059,"line_end":1059,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369912,"byte_end":10369928,"line_start":1069,"line_end":1069,"column_start":12,"column_end":28},"name":"multicast_ttl_v4","qualname":"<UdpSocket>::multicast_ttl_v4","value":"pub fn multicast_ttl_v4(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_MULTICAST_TTL` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369670,"byte_end":10369738,"line_start":1064,"line_end":1064,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369743,"byte_end":10369746,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_multicast_ttl_v4`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369751,"byte_end":10369824,"line_start":1066,"line_end":1066,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369829,"byte_end":10369832,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ [`set_multicast_ttl_v4`]: method@Self::set_multicast_ttl_v4","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10369837,"byte_end":10369900,"line_start":1068,"line_end":1068,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3002},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370397,"byte_end":10370417,"line_start":1082,"line_end":1082,"column_start":12,"column_end":32},"name":"set_multicast_ttl_v4","qualname":"<UdpSocket>::set_multicast_ttl_v4","value":"pub fn set_multicast_ttl_v4(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IP_MULTICAST_TTL` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370003,"byte_end":10370071,"line_start":1073,"line_end":1073,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370076,"byte_end":10370079,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ Indicates the time-to-live value of outgoing multicast packets for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370084,"byte_end":10370154,"line_start":1075,"line_end":1075,"column_start":5,"column_end":75}},{"value":"/ this socket. The default value is 1 which means that multicast packets","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370159,"byte_end":10370233,"line_start":1076,"line_end":1076,"column_start":5,"column_end":79}},{"value":"/ don't leave the local network unless explicitly requested.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370238,"byte_end":10370300,"line_start":1077,"line_end":1077,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370305,"byte_end":10370308,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370313,"byte_end":10370323,"line_start":1079,"line_end":1079,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370328,"byte_end":10370331,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ This may not have any affect on IPv6 sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370336,"byte_end":10370385,"line_start":1081,"line_end":1081,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370756,"byte_end":10370773,"line_start":1091,"line_end":1091,"column_start":12,"column_end":29},"name":"multicast_loop_v6","qualname":"<UdpSocket>::multicast_loop_v6","value":"pub fn multicast_loop_v6(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370508,"byte_end":10370579,"line_start":1086,"line_end":1086,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370584,"byte_end":10370587,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_multicast_loop_v6`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370592,"byte_end":10370666,"line_start":1088,"line_end":1088,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370671,"byte_end":10370674,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ [`set_multicast_loop_v6`]: method@Self::set_multicast_loop_v6","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370679,"byte_end":10370744,"line_start":1090,"line_end":1090,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371107,"byte_end":10371128,"line_start":1102,"line_end":1102,"column_start":12,"column_end":33},"name":"set_multicast_loop_v6","qualname":"<UdpSocket>::set_multicast_loop_v6","value":"pub fn set_multicast_loop_v6(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370850,"byte_end":10370921,"line_start":1095,"line_end":1095,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370926,"byte_end":10370929,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ Controls whether this socket sees the multicast packets it sends itself.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10370934,"byte_end":10371010,"line_start":1097,"line_end":1097,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371015,"byte_end":10371018,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371023,"byte_end":10371033,"line_start":1099,"line_end":1099,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371038,"byte_end":10371041,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ This may not have any affect on IPv4 sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371046,"byte_end":10371095,"line_start":1101,"line_end":1101,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3005},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371725,"byte_end":10371728,"line_start":1125,"line_end":1125,"column_start":12,"column_end":15},"name":"ttl","qualname":"<UdpSocket>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371219,"byte_end":10371277,"line_start":1106,"line_end":1106,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371282,"byte_end":10371285,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371290,"byte_end":10371350,"line_start":1108,"line_end":1108,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371355,"byte_end":10371358,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ [`set_ttl`]: method@Self::set_ttl","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371363,"byte_end":10371400,"line_start":1110,"line_end":1110,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371405,"byte_end":10371408,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371413,"byte_end":10371427,"line_start":1112,"line_end":1112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371432,"byte_end":10371435,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371440,"byte_end":10371453,"line_start":1114,"line_end":1114,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371458,"byte_end":10371488,"line_start":1115,"line_end":1115,"column_start":5,"column_end":35}},{"value":"/ # use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371493,"byte_end":10371511,"line_start":1116,"line_end":1116,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371516,"byte_end":10371519,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371524,"byte_end":10371564,"line_start":1118,"line_end":1118,"column_start":5,"column_end":45}},{"value":"/ let sock = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371569,"byte_end":10371625,"line_start":1119,"line_end":1119,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371630,"byte_end":10371633,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", sock.ttl()?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371638,"byte_end":10371672,"line_start":1121,"line_end":1121,"column_start":5,"column_end":39}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371677,"byte_end":10371689,"line_start":1122,"line_end":1122,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371694,"byte_end":10371701,"line_start":1123,"line_end":1123,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371706,"byte_end":10371713,"line_start":1124,"line_end":1124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372276,"byte_end":10372283,"line_start":1147,"line_end":1147,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<UdpSocket>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371790,"byte_end":10371848,"line_start":1129,"line_end":1129,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371853,"byte_end":10371856,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371861,"byte_end":10371937,"line_start":1131,"line_end":1131,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371942,"byte_end":10371963,"line_start":1132,"line_end":1132,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371968,"byte_end":10371971,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371976,"byte_end":10371990,"line_start":1134,"line_end":1134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10371995,"byte_end":10371998,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372003,"byte_end":10372016,"line_start":1136,"line_end":1136,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372021,"byte_end":10372051,"line_start":1137,"line_end":1137,"column_start":5,"column_end":35}},{"value":"/ # use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372056,"byte_end":10372074,"line_start":1138,"line_end":1138,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372079,"byte_end":10372082,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ # async fn dox() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372087,"byte_end":10372127,"line_start":1140,"line_end":1140,"column_start":5,"column_end":45}},{"value":"/ let sock = UdpSocket::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372132,"byte_end":10372188,"line_start":1141,"line_end":1141,"column_start":5,"column_end":61}},{"value":"/ sock.set_ttl(60)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372193,"byte_end":10372215,"line_start":1142,"line_end":1142,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372220,"byte_end":10372223,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372228,"byte_end":10372240,"line_start":1144,"line_end":1144,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372245,"byte_end":10372252,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372257,"byte_end":10372264,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3007},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372791,"byte_end":10372808,"line_start":1158,"line_end":1158,"column_start":12,"column_end":29},"name":"join_multicast_v4","qualname":"<UdpSocket>::join_multicast_v4","value":"pub fn join_multicast_v4(&Self, Ipv4Addr, Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_ADD_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IP_ADD_MEMBERSHIP` type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372361,"byte_end":10372419,"line_start":1151,"line_end":1151,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372424,"byte_end":10372427,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ This function specifies a new multicast group for this socket to join.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372432,"byte_end":10372506,"line_start":1153,"line_end":1153,"column_start":5,"column_end":79}},{"value":"/ The address must be a valid multicast address, and `interface` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372511,"byte_end":10372584,"line_start":1154,"line_end":1154,"column_start":5,"column_end":78}},{"value":"/ address of the local interface with which the system should join the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372589,"byte_end":10372661,"line_start":1155,"line_end":1155,"column_start":5,"column_end":77}},{"value":"/ multicast group. If it's equal to `INADDR_ANY` then an appropriate","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372666,"byte_end":10372736,"line_start":1156,"line_end":1156,"column_start":5,"column_end":75}},{"value":"/ interface is chosen by the system.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372741,"byte_end":10372779,"line_start":1157,"line_end":1157,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373263,"byte_end":10373280,"line_start":1167,"line_end":1167,"column_start":12,"column_end":29},"name":"join_multicast_v6","qualname":"<UdpSocket>::join_multicast_v6","value":"pub fn join_multicast_v6(&Self, &Ipv6Addr, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10372947,"byte_end":10373007,"line_start":1162,"line_end":1162,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373012,"byte_end":10373015,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ This function specifies a new multicast group for this socket to join.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373020,"byte_end":10373094,"line_start":1164,"line_end":1164,"column_start":5,"column_end":79}},{"value":"/ The address must be a valid multicast address, and `interface` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373099,"byte_end":10373172,"line_start":1165,"line_end":1165,"column_start":5,"column_end":78}},{"value":"/ index of the interface to join/leave (or 0 to indicate any interface).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373177,"byte_end":10373251,"line_start":1166,"line_end":1166,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373637,"byte_end":10373655,"line_start":1176,"line_end":1176,"column_start":12,"column_end":30},"name":"leave_multicast_v4","qualname":"<UdpSocket>::leave_multicast_v4","value":"pub fn leave_multicast_v4(&Self, Ipv4Addr, Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_DROP_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IP_DROP_MEMBERSHIP` type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373413,"byte_end":10373472,"line_start":1171,"line_end":1171,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373477,"byte_end":10373480,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`join_multicast_v4`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373485,"byte_end":10373555,"line_start":1173,"line_end":1173,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373560,"byte_end":10373563,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ [`join_multicast_v4`]: method@Self::join_multicast_v4","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373568,"byte_end":10373625,"line_start":1175,"line_end":1175,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374021,"byte_end":10374039,"line_start":1185,"line_end":1185,"column_start":12,"column_end":30},"name":"leave_multicast_v6","qualname":"<UdpSocket>::leave_multicast_v6","value":"pub fn leave_multicast_v6(&Self, &Ipv6Addr, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373795,"byte_end":10373856,"line_start":1180,"line_end":1180,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373861,"byte_end":10373864,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`join_multicast_v6`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373869,"byte_end":10373939,"line_start":1182,"line_end":1182,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373944,"byte_end":10373947,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ [`join_multicast_v6`]: method@Self::join_multicast_v6","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10373952,"byte_end":10374009,"line_start":1184,"line_end":1184,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3011},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374676,"byte_end":10374686,"line_start":1208,"line_end":1208,"column_start":12,"column_end":22},"name":"take_error","qualname":"<UdpSocket>::take_error","value":"pub fn take_error(&Self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `SO_ERROR` option.","sig":null,"attributes":[{"value":"/ Returns the value of the `SO_ERROR` option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374173,"byte_end":10374220,"line_start":1189,"line_end":1189,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374225,"byte_end":10374228,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374233,"byte_end":10374247,"line_start":1191,"line_end":1191,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374252,"byte_end":10374259,"line_start":1192,"line_end":1192,"column_start":5,"column_end":12}},{"value":"/ use tokio::net::UdpSocket;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374264,"byte_end":10374294,"line_start":1193,"line_end":1193,"column_start":5,"column_end":35}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374299,"byte_end":10374315,"line_start":1194,"line_end":1194,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374320,"byte_end":10374323,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374328,"byte_end":10374346,"line_start":1196,"line_end":1196,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374351,"byte_end":10374390,"line_start":1197,"line_end":1197,"column_start":5,"column_end":44}},{"value":"/     // Create a socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374395,"byte_end":10374421,"line_start":1198,"line_end":1198,"column_start":5,"column_end":31}},{"value":"/     let socket = UdpSocket::bind(\"0.0.0.0:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374426,"byte_end":10374486,"line_start":1199,"line_end":1199,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374491,"byte_end":10374494,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/     if let Ok(Some(err)) = socket.take_error() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374499,"byte_end":10374551,"line_start":1201,"line_end":1201,"column_start":5,"column_end":57}},{"value":"/         println!(\"Got error: {:?}\", err);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374556,"byte_end":10374601,"line_start":1202,"line_end":1202,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374606,"byte_end":10374615,"line_start":1203,"line_end":1203,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374620,"byte_end":10374623,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374628,"byte_end":10374642,"line_start":1205,"line_end":1205,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374647,"byte_end":10374652,"line_start":1206,"line_end":1206,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374657,"byte_end":10374664,"line_start":1207,"line_end":1207,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unix","qualname":"::net::unix","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","parent":null,"children":[{"krate":0,"index":3074},{"krate":0,"index":3156},{"krate":0,"index":3192},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":11325},{"krate":0,"index":3264},{"krate":0,"index":3275},{"krate":0,"index":11331},{"krate":0,"index":3276},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3391}],"decl_id":null,"docs":" Unix domain socket utility types\n","sig":null,"attributes":[{"value":"cfg(all(unix, feature = \"net\"))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21623,"byte_end":21657,"line_start":179,"line_end":179,"column_start":13,"column_end":47}},{"value":"/ Unix domain socket utility types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375689,"byte_end":10375725,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"datagram","qualname":"::net::unix::datagram","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/mod.rs","parent":null,"children":[{"krate":0,"index":3075}],"decl_id":null,"docs":" Unix datagram types.\n","sig":null,"attributes":[{"value":"/ Unix datagram types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/mod.rs","byte_start":10376050,"byte_end":10376074,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":3395},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378677,"byte_end":10378689,"line_start":81,"line_end":81,"column_start":16,"column_end":28},"name":"UnixDatagram","qualname":"::net::unix::datagram::socket::UnixDatagram","value":"UnixDatagram {  }","parent":null,"children":[{"krate":0,"index":3396}],"decl_id":null,"docs":" An I/O object representing a Unix datagram socket.","sig":null,"attributes":[{"value":"cfg(all(unix, feature = \"net\"))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21623,"byte_end":21657,"line_start":179,"line_end":179,"column_start":13,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381104,"byte_end":10381109,"line_start":148,"line_end":148,"column_start":18,"column_end":23},"name":"ready","qualname":"<UnixDatagram>::ready","value":"pub async fn ready<'_>(&'_ Self, Interest) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for any of the requested ready states.","sig":null,"attributes":[{"value":"/ Wait for any of the requested ready states.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378774,"byte_end":10378821,"line_start":87,"line_end":87,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378826,"byte_end":10378829,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `try_recv()` or `try_send()`. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378834,"byte_end":10378907,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/ can be used to concurrently recv / send to the same socket on a single","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378912,"byte_end":10378986,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/ task without splitting the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378991,"byte_end":10379029,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379034,"byte_end":10379037,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being ready. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379042,"byte_end":10379113,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/ false-positive and attempting an operation will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379118,"byte_end":10379181,"line_start":94,"line_end":94,"column_start":5,"column_end":68}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379186,"byte_end":10379218,"line_start":95,"line_end":95,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379223,"byte_end":10379226,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379231,"byte_end":10379245,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379250,"byte_end":10379253,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Concurrently receive from and send to the socket on the same task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379258,"byte_end":10379327,"line_start":99,"line_end":99,"column_start":5,"column_end":74}},{"value":"/ without splitting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379332,"byte_end":10379354,"line_start":100,"line_end":100,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379359,"byte_end":10379362,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379367,"byte_end":10379380,"line_start":102,"line_end":102,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379385,"byte_end":10379413,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379418,"byte_end":10379451,"line_start":104,"line_end":104,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379456,"byte_end":10379472,"line_start":105,"line_end":105,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379477,"byte_end":10379480,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379485,"byte_end":10379503,"line_start":107,"line_end":107,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379508,"byte_end":10379547,"line_start":108,"line_end":108,"column_start":5,"column_end":44}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379552,"byte_end":10379599,"line_start":109,"line_end":109,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379604,"byte_end":10379661,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379666,"byte_end":10379723,"line_start":111,"line_end":111,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379728,"byte_end":10379783,"line_start":112,"line_end":112,"column_start":5,"column_end":60}},{"value":"/     socket.connect(&server_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379788,"byte_end":10379826,"line_start":113,"line_end":113,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379831,"byte_end":10379834,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379839,"byte_end":10379853,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/         let ready = socket.ready(Interest::READABLE | Interest::WRITABLE).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379858,"byte_end":10379943,"line_start":116,"line_end":116,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379948,"byte_end":10379951,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/         if ready.is_readable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379956,"byte_end":10379992,"line_start":118,"line_end":118,"column_start":5,"column_end":41}},{"value":"/             let mut data = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10379997,"byte_end":10380038,"line_start":119,"line_end":119,"column_start":5,"column_end":46}},{"value":"/             match socket.try_recv(&mut data[..]) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380043,"byte_end":10380097,"line_start":120,"line_end":120,"column_start":5,"column_end":59}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380102,"byte_end":10380132,"line_start":121,"line_end":121,"column_start":5,"column_end":35}},{"value":"/                     println!(\"received {:?}\", &data[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380137,"byte_end":10380199,"line_start":122,"line_end":122,"column_start":5,"column_end":67}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380204,"byte_end":10380225,"line_start":123,"line_end":123,"column_start":5,"column_end":26}},{"value":"/                 // False-positive, continue","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380230,"byte_end":10380277,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380282,"byte_end":10380359,"line_start":125,"line_end":125,"column_start":5,"column_end":82}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380364,"byte_end":10380395,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/                     return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380400,"byte_end":10380438,"line_start":127,"line_end":127,"column_start":5,"column_end":43}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380443,"byte_end":10380464,"line_start":128,"line_end":128,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380469,"byte_end":10380486,"line_start":129,"line_end":129,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380491,"byte_end":10380504,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380509,"byte_end":10380512,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/         if ready.is_writable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380517,"byte_end":10380553,"line_start":132,"line_end":132,"column_start":5,"column_end":41}},{"value":"/             // Write some data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380558,"byte_end":10380592,"line_start":133,"line_end":133,"column_start":5,"column_end":39}},{"value":"/             match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380597,"byte_end":10380652,"line_start":134,"line_end":134,"column_start":5,"column_end":60}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380657,"byte_end":10380687,"line_start":135,"line_end":135,"column_start":5,"column_end":35}},{"value":"/                     println!(\"sent {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380692,"byte_end":10380745,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380750,"byte_end":10380771,"line_start":137,"line_end":137,"column_start":5,"column_end":26}},{"value":"/                 // False-positive, continue","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380776,"byte_end":10380823,"line_start":138,"line_end":138,"column_start":5,"column_end":52}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380828,"byte_end":10380905,"line_start":139,"line_end":139,"column_start":5,"column_end":82}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380910,"byte_end":10380941,"line_start":140,"line_end":140,"column_start":5,"column_end":36}},{"value":"/                     return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380946,"byte_end":10380984,"line_start":141,"line_end":141,"column_start":5,"column_end":43}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10380989,"byte_end":10381010,"line_start":142,"line_end":142,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381015,"byte_end":10381032,"line_start":143,"line_end":143,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381037,"byte_end":10381050,"line_start":144,"line_end":144,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381055,"byte_end":10381064,"line_start":145,"line_end":145,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381069,"byte_end":10381074,"line_start":146,"line_end":146,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381079,"byte_end":10381086,"line_start":147,"line_end":147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382846,"byte_end":10382854,"line_start":198,"line_end":198,"column_start":18,"column_end":26},"name":"writable","qualname":"<UnixDatagram>::writable","value":"pub async fn writable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become writable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become writable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381266,"byte_end":10381309,"line_start":153,"line_end":153,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381314,"byte_end":10381317,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::WRITABLE)` and is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381322,"byte_end":10381391,"line_start":155,"line_end":155,"column_start":5,"column_end":74}},{"value":"/ usually paired with `try_send()` or `try_send_to()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381396,"byte_end":10381452,"line_start":156,"line_end":156,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381457,"byte_end":10381460,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being writable. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381465,"byte_end":10381539,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ false-positive and attempting a `try_send()` will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381544,"byte_end":10381609,"line_start":159,"line_end":159,"column_start":5,"column_end":70}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381614,"byte_end":10381646,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381651,"byte_end":10381654,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381659,"byte_end":10381673,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381678,"byte_end":10381681,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381686,"byte_end":10381699,"line_start":164,"line_end":164,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381704,"byte_end":10381737,"line_start":165,"line_end":165,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381742,"byte_end":10381758,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381763,"byte_end":10381766,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381771,"byte_end":10381789,"line_start":168,"line_end":168,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381794,"byte_end":10381833,"line_start":169,"line_end":169,"column_start":5,"column_end":44}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381838,"byte_end":10381885,"line_start":170,"line_end":170,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381890,"byte_end":10381947,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10381952,"byte_end":10382009,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382014,"byte_end":10382069,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"/     socket.connect(&server_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382074,"byte_end":10382112,"line_start":174,"line_end":174,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382117,"byte_end":10382120,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382125,"byte_end":10382139,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382144,"byte_end":10382193,"line_start":177,"line_end":177,"column_start":5,"column_end":54}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382198,"byte_end":10382235,"line_start":178,"line_end":178,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382240,"byte_end":10382243,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/         // Try to send data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382248,"byte_end":10382318,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382323,"byte_end":10382381,"line_start":181,"line_end":181,"column_start":5,"column_end":63}},{"value":"/         match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382386,"byte_end":10382437,"line_start":182,"line_end":182,"column_start":5,"column_end":56}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382442,"byte_end":10382468,"line_start":183,"line_end":183,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382473,"byte_end":10382499,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382504,"byte_end":10382521,"line_start":185,"line_end":185,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382526,"byte_end":10382598,"line_start":186,"line_end":186,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382603,"byte_end":10382632,"line_start":187,"line_end":187,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382637,"byte_end":10382654,"line_start":188,"line_end":188,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382659,"byte_end":10382686,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382691,"byte_end":10382725,"line_start":190,"line_end":190,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382730,"byte_end":10382747,"line_start":191,"line_end":191,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382752,"byte_end":10382765,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382770,"byte_end":10382779,"line_start":193,"line_end":193,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382784,"byte_end":10382787,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382792,"byte_end":10382806,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382811,"byte_end":10382816,"line_start":196,"line_end":196,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382821,"byte_end":10382828,"line_start":197,"line_end":197,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384770,"byte_end":10384778,"line_start":254,"line_end":254,"column_start":18,"column_end":26},"name":"readable","qualname":"<UnixDatagram>::readable","value":"pub async fn readable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become readable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become readable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10382955,"byte_end":10382998,"line_start":203,"line_end":203,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383003,"byte_end":10383006,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::READABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383011,"byte_end":10383088,"line_start":205,"line_end":205,"column_start":5,"column_end":82}},{"value":"/ paired with `try_recv()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383093,"byte_end":10383122,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383127,"byte_end":10383130,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ The function may complete without the socket being readable. This is a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383135,"byte_end":10383209,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ false-positive and attempting a `try_recv()` will return with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383214,"byte_end":10383279,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/ `io::ErrorKind::WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383284,"byte_end":10383316,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383321,"byte_end":10383324,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383329,"byte_end":10383343,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383348,"byte_end":10383351,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383356,"byte_end":10383369,"line_start":214,"line_end":214,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383374,"byte_end":10383407,"line_start":215,"line_end":215,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383412,"byte_end":10383428,"line_start":216,"line_end":216,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383433,"byte_end":10383436,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383441,"byte_end":10383459,"line_start":218,"line_end":218,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383464,"byte_end":10383503,"line_start":219,"line_end":219,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383508,"byte_end":10383536,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383541,"byte_end":10383588,"line_start":221,"line_end":221,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383593,"byte_end":10383650,"line_start":222,"line_end":222,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383655,"byte_end":10383712,"line_start":223,"line_end":223,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383717,"byte_end":10383772,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/     socket.connect(&server_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383777,"byte_end":10383815,"line_start":225,"line_end":225,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383820,"byte_end":10383823,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383828,"byte_end":10383842,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383847,"byte_end":10383896,"line_start":228,"line_end":228,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383901,"byte_end":10383938,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383943,"byte_end":10383946,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10383951,"byte_end":10384023,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384028,"byte_end":10384067,"line_start":232,"line_end":232,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384072,"byte_end":10384108,"line_start":233,"line_end":233,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384113,"byte_end":10384116,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384121,"byte_end":10384191,"line_start":235,"line_end":235,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384196,"byte_end":10384254,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384259,"byte_end":10384304,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384309,"byte_end":10384335,"line_start":238,"line_end":238,"column_start":5,"column_end":31}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384340,"byte_end":10384392,"line_start":239,"line_end":239,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384397,"byte_end":10384423,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384428,"byte_end":10384445,"line_start":241,"line_end":241,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384450,"byte_end":10384522,"line_start":242,"line_end":242,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384527,"byte_end":10384556,"line_start":243,"line_end":243,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384561,"byte_end":10384578,"line_start":244,"line_end":244,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384583,"byte_end":10384610,"line_start":245,"line_end":245,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384615,"byte_end":10384649,"line_start":246,"line_end":246,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384654,"byte_end":10384671,"line_start":247,"line_end":247,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384676,"byte_end":10384689,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384694,"byte_end":10384703,"line_start":249,"line_end":249,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384708,"byte_end":10384711,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384716,"byte_end":10384730,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384735,"byte_end":10384740,"line_start":252,"line_end":252,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384745,"byte_end":10384752,"line_start":253,"line_end":253,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385551,"byte_end":10385555,"line_start":280,"line_end":280,"column_start":12,"column_end":16},"name":"bind","qualname":"<UnixDatagram>::bind","value":"pub fn bind<P>(P) -> io::Result<UnixDatagram> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UnixDatagram` bound to the specified path.","sig":null,"attributes":[{"value":"/ Creates a new `UnixDatagram` bound to the specified path.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384879,"byte_end":10384940,"line_start":259,"line_end":259,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384945,"byte_end":10384948,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384953,"byte_end":10384967,"line_start":261,"line_end":261,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384972,"byte_end":10384979,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10384984,"byte_end":10385012,"line_start":263,"line_end":263,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385017,"byte_end":10385037,"line_start":264,"line_end":264,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385042,"byte_end":10385095,"line_start":265,"line_end":265,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385100,"byte_end":10385133,"line_start":266,"line_end":266,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385138,"byte_end":10385164,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385169,"byte_end":10385172,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ // We use a temporary directory so that the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385177,"byte_end":10385231,"line_start":269,"line_end":269,"column_start":5,"column_end":59}},{"value":"/ // files left by the bound sockets will get cleaned up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385236,"byte_end":10385295,"line_start":270,"line_end":270,"column_start":5,"column_end":64}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385300,"byte_end":10385325,"line_start":271,"line_end":271,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385330,"byte_end":10385333,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ // Bind the socket to a filesystem path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385338,"byte_end":10385381,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/ let socket_path = tmp.path().join(\"socket\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385386,"byte_end":10385434,"line_start":274,"line_end":274,"column_start":5,"column_end":53}},{"value":"/ let socket = UnixDatagram::bind(&socket_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385439,"byte_end":10385490,"line_start":275,"line_end":275,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385495,"byte_end":10385498,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385503,"byte_end":10385515,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385520,"byte_end":10385527,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385532,"byte_end":10385539,"line_start":279,"line_end":279,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386625,"byte_end":10386629,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"pair","qualname":"<UnixDatagram>::pair","value":"pub fn pair() -> io::Result<(UnixDatagram, UnixDatagram)>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unnamed pair of connected sockets.","sig":null,"attributes":[{"value":"/ Creates an unnamed pair of connected sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385739,"byte_end":10385788,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385793,"byte_end":10385796,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This function will create a pair of interconnected Unix sockets for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385801,"byte_end":10385872,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ communicating back and forth between one another.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385877,"byte_end":10385930,"line_start":291,"line_end":291,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385935,"byte_end":10385938,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385943,"byte_end":10385957,"line_start":293,"line_end":293,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385962,"byte_end":10385969,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10385974,"byte_end":10386002,"line_start":295,"line_end":295,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386007,"byte_end":10386027,"line_start":296,"line_end":296,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386032,"byte_end":10386085,"line_start":297,"line_end":297,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386090,"byte_end":10386123,"line_start":298,"line_end":298,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386128,"byte_end":10386131,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ // Create the pair of sockets","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386136,"byte_end":10386169,"line_start":300,"line_end":300,"column_start":5,"column_end":38}},{"value":"/ let (sock1, sock2) = UnixDatagram::pair()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386174,"byte_end":10386221,"line_start":301,"line_end":301,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386226,"byte_end":10386229,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ // Since the sockets are paired, the paired send/recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386234,"byte_end":10386291,"line_start":303,"line_end":303,"column_start":5,"column_end":62}},{"value":"/ // functions can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386296,"byte_end":10386324,"line_start":304,"line_end":304,"column_start":5,"column_end":33}},{"value":"/ let bytes = b\"hail eris\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386329,"byte_end":10386358,"line_start":305,"line_end":305,"column_start":5,"column_end":34}},{"value":"/ sock1.send(bytes).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386363,"byte_end":10386392,"line_start":306,"line_end":306,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386397,"byte_end":10386400,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ let mut buff = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386405,"byte_end":10386438,"line_start":308,"line_end":308,"column_start":5,"column_end":38}},{"value":"/ let size = sock2.recv(&mut buff).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386443,"byte_end":10386487,"line_start":309,"line_end":309,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386492,"byte_end":10386495,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buff[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386500,"byte_end":10386530,"line_start":311,"line_end":311,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386535,"byte_end":10386564,"line_start":312,"line_end":312,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386569,"byte_end":10386572,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386577,"byte_end":10386589,"line_start":314,"line_end":314,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386594,"byte_end":10386601,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386606,"byte_end":10386613,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3107},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388293,"byte_end":10388301,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"from_std","qualname":"<UnixDatagram>::from_std","value":"pub fn from_std(net::UnixDatagram) -> io::Result<UnixDatagram>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `UnixDatagram` from a `std::os::unix::net::UnixDatagram`.","sig":null,"attributes":[{"value":"/ Creates new `UnixDatagram` from a `std::os::unix::net::UnixDatagram`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386841,"byte_end":10386914,"line_start":325,"line_end":325,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386919,"byte_end":10386922,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a UnixDatagram from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10386927,"byte_end":10386999,"line_start":327,"line_end":327,"column_start":5,"column_end":77}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387004,"byte_end":10387072,"line_start":328,"line_end":328,"column_start":5,"column_end":73}},{"value":"/ nothing about the underlying datagram; it is left up to the user to set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387077,"byte_end":10387152,"line_start":329,"line_end":329,"column_start":5,"column_end":80}},{"value":"/ it in non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387157,"byte_end":10387185,"line_start":330,"line_end":330,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387190,"byte_end":10387193,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387198,"byte_end":10387210,"line_start":332,"line_end":332,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387215,"byte_end":10387218,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387223,"byte_end":10387283,"line_start":334,"line_end":334,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387288,"byte_end":10387291,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387296,"byte_end":10387366,"line_start":336,"line_end":336,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a Tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387371,"byte_end":10387444,"line_start":337,"line_end":337,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387449,"byte_end":10387529,"line_start":338,"line_end":338,"column_start":5,"column_end":85}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387534,"byte_end":10387548,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387553,"byte_end":10387560,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387565,"byte_end":10387593,"line_start":341,"line_end":341,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387598,"byte_end":10387618,"line_start":342,"line_end":342,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387623,"byte_end":10387676,"line_start":343,"line_end":343,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387681,"byte_end":10387714,"line_start":344,"line_end":344,"column_start":5,"column_end":38}},{"value":"/ use std::os::unix::net::UnixDatagram as StdUDS;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387719,"byte_end":10387770,"line_start":345,"line_end":345,"column_start":5,"column_end":56}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387775,"byte_end":10387801,"line_start":346,"line_end":346,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387806,"byte_end":10387809,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ // We use a temporary directory so that the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387814,"byte_end":10387868,"line_start":348,"line_end":348,"column_start":5,"column_end":59}},{"value":"/ // files left by the bound sockets will get cleaned up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387873,"byte_end":10387932,"line_start":349,"line_end":349,"column_start":5,"column_end":64}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387937,"byte_end":10387962,"line_start":350,"line_end":350,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387967,"byte_end":10387970,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ // Bind the socket to a filesystem path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10387975,"byte_end":10388018,"line_start":352,"line_end":352,"column_start":5,"column_end":48}},{"value":"/ let socket_path = tmp.path().join(\"socket\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388023,"byte_end":10388071,"line_start":353,"line_end":353,"column_start":5,"column_end":53}},{"value":"/ let std_socket = StdUDS::bind(&socket_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388076,"byte_end":10388125,"line_start":354,"line_end":354,"column_start":5,"column_end":54}},{"value":"/ std_socket.set_nonblocking(true)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388130,"byte_end":10388168,"line_start":355,"line_end":355,"column_start":5,"column_end":43}},{"value":"/ let tokio_socket = UnixDatagram::from_std(std_socket)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388173,"byte_end":10388232,"line_start":356,"line_end":356,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388237,"byte_end":10388240,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388245,"byte_end":10388257,"line_start":358,"line_end":358,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388262,"byte_end":10388269,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388274,"byte_end":10388281,"line_start":360,"line_end":360,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3109},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389582,"byte_end":10389589,"line_start":403,"line_end":403,"column_start":12,"column_end":19},"name":"unbound","qualname":"<UnixDatagram>::unbound","value":"pub fn unbound() -> io::Result<UnixDatagram>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UnixDatagram` which is not bound to any address.","sig":null,"attributes":[{"value":"/ Creates a new `UnixDatagram` which is not bound to any address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388669,"byte_end":10388736,"line_start":372,"line_end":372,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388741,"byte_end":10388744,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388749,"byte_end":10388763,"line_start":374,"line_end":374,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388768,"byte_end":10388775,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388780,"byte_end":10388808,"line_start":376,"line_end":376,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388813,"byte_end":10388833,"line_start":377,"line_end":377,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388838,"byte_end":10388891,"line_start":378,"line_end":378,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388896,"byte_end":10388929,"line_start":379,"line_end":379,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388934,"byte_end":10388960,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388965,"byte_end":10388968,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10388973,"byte_end":10389004,"line_start":382,"line_end":382,"column_start":5,"column_end":36}},{"value":"/ let tx = UnixDatagram::unbound()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389009,"byte_end":10389047,"line_start":383,"line_end":383,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389052,"byte_end":10389055,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // Create another, bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389060,"byte_end":10389095,"line_start":385,"line_end":385,"column_start":5,"column_end":40}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389100,"byte_end":10389125,"line_start":386,"line_end":386,"column_start":5,"column_end":30}},{"value":"/ let rx_path = tmp.path().join(\"rx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389130,"byte_end":10389170,"line_start":387,"line_end":387,"column_start":5,"column_end":45}},{"value":"/ let rx = UnixDatagram::bind(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389175,"byte_end":10389218,"line_start":388,"line_end":388,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389223,"byte_end":10389226,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ // Send to the bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389231,"byte_end":10389262,"line_start":390,"line_end":390,"column_start":5,"column_end":36}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389267,"byte_end":10389298,"line_start":391,"line_end":391,"column_start":5,"column_end":36}},{"value":"/ tx.send_to(bytes, &rx_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389303,"byte_end":10389342,"line_start":392,"line_end":392,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389347,"byte_end":10389350,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389355,"byte_end":10389387,"line_start":394,"line_end":394,"column_start":5,"column_end":37}},{"value":"/ let (size, addr) = rx.recv_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389392,"byte_end":10389445,"line_start":395,"line_end":395,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389450,"byte_end":10389453,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buf[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389458,"byte_end":10389487,"line_start":397,"line_end":397,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389492,"byte_end":10389521,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389526,"byte_end":10389529,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389534,"byte_end":10389546,"line_start":400,"line_end":400,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389551,"byte_end":10389558,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389563,"byte_end":10389570,"line_start":402,"line_end":402,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390842,"byte_end":10390849,"line_start":445,"line_end":445,"column_start":12,"column_end":19},"name":"connect","qualname":"<UnixDatagram>::connect","value":"pub fn connect<P: AsRef<Path>>(&Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Connects the socket to the specified address.","sig":null,"attributes":[{"value":"/ Connects the socket to the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389724,"byte_end":10389773,"line_start":408,"line_end":408,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389778,"byte_end":10389781,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ The `send` method may be used to send data to the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389786,"byte_end":10389858,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ `recv` and `recv_from` will only receive data from that address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389863,"byte_end":10389931,"line_start":411,"line_end":411,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389936,"byte_end":10389939,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389944,"byte_end":10389958,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389963,"byte_end":10389970,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10389975,"byte_end":10390003,"line_start":415,"line_end":415,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390008,"byte_end":10390028,"line_start":416,"line_end":416,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390033,"byte_end":10390086,"line_start":417,"line_end":417,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390091,"byte_end":10390124,"line_start":418,"line_end":418,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390129,"byte_end":10390155,"line_start":419,"line_end":419,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390160,"byte_end":10390163,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390168,"byte_end":10390199,"line_start":421,"line_end":421,"column_start":5,"column_end":36}},{"value":"/ let tx = UnixDatagram::unbound()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390204,"byte_end":10390242,"line_start":422,"line_end":422,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390247,"byte_end":10390250,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ // Create another, bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390255,"byte_end":10390290,"line_start":424,"line_end":424,"column_start":5,"column_end":40}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390295,"byte_end":10390320,"line_start":425,"line_end":425,"column_start":5,"column_end":30}},{"value":"/ let rx_path = tmp.path().join(\"rx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390325,"byte_end":10390365,"line_start":426,"line_end":426,"column_start":5,"column_end":45}},{"value":"/ let rx = UnixDatagram::bind(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390370,"byte_end":10390413,"line_start":427,"line_end":427,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390418,"byte_end":10390421,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ // Connect to the bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390426,"byte_end":10390460,"line_start":429,"line_end":429,"column_start":5,"column_end":39}},{"value":"/ tx.connect(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390465,"byte_end":10390491,"line_start":430,"line_end":430,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390496,"byte_end":10390499,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ // Send to the bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390504,"byte_end":10390535,"line_start":432,"line_end":432,"column_start":5,"column_end":36}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390540,"byte_end":10390571,"line_start":433,"line_end":433,"column_start":5,"column_end":36}},{"value":"/ tx.send(bytes).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390576,"byte_end":10390602,"line_start":434,"line_end":434,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390607,"byte_end":10390610,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390615,"byte_end":10390647,"line_start":436,"line_end":436,"column_start":5,"column_end":37}},{"value":"/ let (size, addr) = rx.recv_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390652,"byte_end":10390705,"line_start":437,"line_end":437,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390710,"byte_end":10390713,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buf[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390718,"byte_end":10390747,"line_start":439,"line_end":439,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390752,"byte_end":10390781,"line_start":440,"line_end":440,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390786,"byte_end":10390789,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390794,"byte_end":10390806,"line_start":442,"line_end":442,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390811,"byte_end":10390818,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390823,"byte_end":10390830,"line_start":444,"line_end":444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391696,"byte_end":10391700,"line_start":475,"line_end":475,"column_start":18,"column_end":22},"name":"send","qualname":"<UnixDatagram>::send","value":"pub async fn send<'_, '_>(&'_ Self, &'_ [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the socket's peer.","sig":null,"attributes":[{"value":"/ Sends data on the socket to the socket's peer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390943,"byte_end":10390993,"line_start":449,"line_end":449,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10390998,"byte_end":10391001,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391006,"byte_end":10391020,"line_start":451,"line_end":451,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391025,"byte_end":10391032,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391037,"byte_end":10391065,"line_start":453,"line_end":453,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391070,"byte_end":10391090,"line_start":454,"line_end":454,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391095,"byte_end":10391148,"line_start":455,"line_end":455,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391153,"byte_end":10391186,"line_start":456,"line_end":456,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391191,"byte_end":10391194,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ // Create the pair of sockets","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391199,"byte_end":10391232,"line_start":458,"line_end":458,"column_start":5,"column_end":38}},{"value":"/ let (sock1, sock2) = UnixDatagram::pair()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391237,"byte_end":10391284,"line_start":459,"line_end":459,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391289,"byte_end":10391292,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ // Since the sockets are paired, the paired send/recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391297,"byte_end":10391354,"line_start":461,"line_end":461,"column_start":5,"column_end":62}},{"value":"/ // functions can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391359,"byte_end":10391387,"line_start":462,"line_end":462,"column_start":5,"column_end":33}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391392,"byte_end":10391423,"line_start":463,"line_end":463,"column_start":5,"column_end":36}},{"value":"/ sock1.send(bytes).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391428,"byte_end":10391457,"line_start":464,"line_end":464,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391462,"byte_end":10391465,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ let mut buff = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391470,"byte_end":10391503,"line_start":466,"line_end":466,"column_start":5,"column_end":38}},{"value":"/ let size = sock2.recv(&mut buff).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391508,"byte_end":10391552,"line_start":467,"line_end":467,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391557,"byte_end":10391560,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buff[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391565,"byte_end":10391595,"line_start":469,"line_end":469,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391600,"byte_end":10391629,"line_start":470,"line_end":470,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391634,"byte_end":10391637,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391642,"byte_end":10391654,"line_start":472,"line_end":472,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391659,"byte_end":10391666,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391671,"byte_end":10391678,"line_start":474,"line_end":474,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393130,"byte_end":10393138,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"try_send","qualname":"<UnixDatagram>::try_send","value":"pub fn try_send(&Self, &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to send a datagram to the peer without waiting.","sig":null,"attributes":[{"value":"/ Try to send a datagram to the peer without waiting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391881,"byte_end":10391936,"line_start":482,"line_end":482,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391941,"byte_end":10391944,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391949,"byte_end":10391963,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391968,"byte_end":10391971,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391976,"byte_end":10391989,"line_start":486,"line_end":486,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10391994,"byte_end":10392027,"line_start":487,"line_end":487,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392032,"byte_end":10392048,"line_start":488,"line_end":488,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392053,"byte_end":10392056,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392061,"byte_end":10392079,"line_start":490,"line_end":490,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392084,"byte_end":10392123,"line_start":491,"line_end":491,"column_start":5,"column_end":44}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392128,"byte_end":10392175,"line_start":492,"line_end":492,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392180,"byte_end":10392237,"line_start":493,"line_end":493,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392242,"byte_end":10392299,"line_start":494,"line_end":494,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392304,"byte_end":10392359,"line_start":495,"line_end":495,"column_start":5,"column_end":60}},{"value":"/     socket.connect(&server_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392364,"byte_end":10392402,"line_start":496,"line_end":496,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392407,"byte_end":10392410,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392415,"byte_end":10392429,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392434,"byte_end":10392483,"line_start":499,"line_end":499,"column_start":5,"column_end":54}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392488,"byte_end":10392525,"line_start":500,"line_end":500,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392530,"byte_end":10392533,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/         // Try to send data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392538,"byte_end":10392608,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392613,"byte_end":10392671,"line_start":503,"line_end":503,"column_start":5,"column_end":63}},{"value":"/         match socket.try_send(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392676,"byte_end":10392727,"line_start":504,"line_end":504,"column_start":5,"column_end":56}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392732,"byte_end":10392758,"line_start":505,"line_end":505,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392763,"byte_end":10392789,"line_start":506,"line_end":506,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392794,"byte_end":10392811,"line_start":507,"line_end":507,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392816,"byte_end":10392888,"line_start":508,"line_end":508,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392893,"byte_end":10392922,"line_start":509,"line_end":509,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392927,"byte_end":10392944,"line_start":510,"line_end":510,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392949,"byte_end":10392976,"line_start":511,"line_end":511,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10392981,"byte_end":10393015,"line_start":512,"line_end":512,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393020,"byte_end":10393037,"line_start":513,"line_end":513,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393042,"byte_end":10393055,"line_start":514,"line_end":514,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393060,"byte_end":10393069,"line_start":515,"line_end":515,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393074,"byte_end":10393077,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393082,"byte_end":10393096,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393101,"byte_end":10393106,"line_start":518,"line_end":518,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393111,"byte_end":10393118,"line_start":519,"line_end":519,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394521,"byte_end":10394532,"line_start":563,"line_end":563,"column_start":12,"column_end":23},"name":"try_send_to","qualname":"<UnixDatagram>::try_send_to","value":"pub fn try_send_to<P>(&Self, &[u8], P) -> io::Result<usize> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Try to send a datagram to the peer without waiting.","sig":null,"attributes":[{"value":"/ Try to send a datagram to the peer without waiting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393298,"byte_end":10393353,"line_start":526,"line_end":526,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393358,"byte_end":10393361,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393366,"byte_end":10393380,"line_start":528,"line_end":528,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393385,"byte_end":10393388,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393393,"byte_end":10393406,"line_start":530,"line_end":530,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393411,"byte_end":10393444,"line_start":531,"line_end":531,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393449,"byte_end":10393465,"line_start":532,"line_end":532,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393470,"byte_end":10393473,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393478,"byte_end":10393496,"line_start":534,"line_end":534,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393501,"byte_end":10393540,"line_start":535,"line_end":535,"column_start":5,"column_end":44}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393545,"byte_end":10393592,"line_start":536,"line_end":536,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393597,"byte_end":10393654,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393659,"byte_end":10393716,"line_start":538,"line_end":538,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393721,"byte_end":10393776,"line_start":539,"line_end":539,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393781,"byte_end":10393784,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393789,"byte_end":10393803,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393808,"byte_end":10393857,"line_start":542,"line_end":542,"column_start":5,"column_end":54}},{"value":"/         socket.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393862,"byte_end":10393899,"line_start":543,"line_end":543,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393904,"byte_end":10393907,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/         // Try to send data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393912,"byte_end":10393982,"line_start":545,"line_end":545,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10393987,"byte_end":10394045,"line_start":546,"line_end":546,"column_start":5,"column_end":63}},{"value":"/         match socket.try_send_to(b\"hello world\", &server_path) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394050,"byte_end":10394118,"line_start":547,"line_end":547,"column_start":5,"column_end":73}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394123,"byte_end":10394149,"line_start":548,"line_end":548,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394154,"byte_end":10394180,"line_start":549,"line_end":549,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394185,"byte_end":10394202,"line_start":550,"line_end":550,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394207,"byte_end":10394279,"line_start":551,"line_end":551,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394284,"byte_end":10394313,"line_start":552,"line_end":552,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394318,"byte_end":10394335,"line_start":553,"line_end":553,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394340,"byte_end":10394367,"line_start":554,"line_end":554,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394372,"byte_end":10394406,"line_start":555,"line_end":555,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394411,"byte_end":10394428,"line_start":556,"line_end":556,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394433,"byte_end":10394446,"line_start":557,"line_end":557,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394451,"byte_end":10394460,"line_start":558,"line_end":558,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394465,"byte_end":10394468,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394473,"byte_end":10394487,"line_start":560,"line_end":560,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394492,"byte_end":10394497,"line_start":561,"line_end":561,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394502,"byte_end":10394509,"line_start":562,"line_end":562,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3121},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395492,"byte_end":10395496,"line_start":598,"line_end":598,"column_start":18,"column_end":22},"name":"recv","qualname":"<UnixDatagram>::recv","value":"pub async fn recv<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket.","sig":null,"attributes":[{"value":"/ Receives data from the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394755,"byte_end":10394789,"line_start":572,"line_end":572,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394794,"byte_end":10394797,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394802,"byte_end":10394816,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394821,"byte_end":10394828,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394833,"byte_end":10394861,"line_start":576,"line_end":576,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394866,"byte_end":10394886,"line_start":577,"line_end":577,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394891,"byte_end":10394944,"line_start":578,"line_end":578,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394949,"byte_end":10394982,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394987,"byte_end":10394990,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ // Create the pair of sockets","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10394995,"byte_end":10395028,"line_start":581,"line_end":581,"column_start":5,"column_end":38}},{"value":"/ let (sock1, sock2) = UnixDatagram::pair()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395033,"byte_end":10395080,"line_start":582,"line_end":582,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395085,"byte_end":10395088,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ // Since the sockets are paired, the paired send/recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395093,"byte_end":10395150,"line_start":584,"line_end":584,"column_start":5,"column_end":62}},{"value":"/ // functions can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395155,"byte_end":10395183,"line_start":585,"line_end":585,"column_start":5,"column_end":33}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395188,"byte_end":10395219,"line_start":586,"line_end":586,"column_start":5,"column_end":36}},{"value":"/ sock1.send(bytes).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395224,"byte_end":10395253,"line_start":587,"line_end":587,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395258,"byte_end":10395261,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let mut buff = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395266,"byte_end":10395299,"line_start":589,"line_end":589,"column_start":5,"column_end":38}},{"value":"/ let size = sock2.recv(&mut buff).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395304,"byte_end":10395348,"line_start":590,"line_end":590,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395353,"byte_end":10395356,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buff[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395361,"byte_end":10395391,"line_start":592,"line_end":592,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395396,"byte_end":10395425,"line_start":593,"line_end":593,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395430,"byte_end":10395433,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395438,"byte_end":10395450,"line_start":595,"line_end":595,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395455,"byte_end":10395462,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395467,"byte_end":10395474,"line_start":597,"line_end":597,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3125},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397189,"byte_end":10397197,"line_start":649,"line_end":649,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<UnixDatagram>::try_recv","value":"pub fn try_recv(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to receive a datagram from the peer without waiting.","sig":null,"attributes":[{"value":"/ Try to receive a datagram from the peer without waiting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395681,"byte_end":10395741,"line_start":605,"line_end":605,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395746,"byte_end":10395749,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395754,"byte_end":10395768,"line_start":607,"line_end":607,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395773,"byte_end":10395776,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395781,"byte_end":10395794,"line_start":609,"line_end":609,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395799,"byte_end":10395832,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395837,"byte_end":10395853,"line_start":611,"line_end":611,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395858,"byte_end":10395861,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395866,"byte_end":10395884,"line_start":613,"line_end":613,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395889,"byte_end":10395928,"line_start":614,"line_end":614,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395933,"byte_end":10395961,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10395966,"byte_end":10396013,"line_start":616,"line_end":616,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396018,"byte_end":10396075,"line_start":617,"line_end":617,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396080,"byte_end":10396137,"line_start":618,"line_end":618,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396142,"byte_end":10396197,"line_start":619,"line_end":619,"column_start":5,"column_end":60}},{"value":"/     socket.connect(&server_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396202,"byte_end":10396240,"line_start":620,"line_end":620,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396245,"byte_end":10396248,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396253,"byte_end":10396267,"line_start":622,"line_end":622,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396272,"byte_end":10396321,"line_start":623,"line_end":623,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396326,"byte_end":10396363,"line_start":624,"line_end":624,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396368,"byte_end":10396371,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396376,"byte_end":10396448,"line_start":626,"line_end":626,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396453,"byte_end":10396492,"line_start":627,"line_end":627,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396497,"byte_end":10396533,"line_start":628,"line_end":628,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396538,"byte_end":10396541,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396546,"byte_end":10396616,"line_start":630,"line_end":630,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396621,"byte_end":10396679,"line_start":631,"line_end":631,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396684,"byte_end":10396729,"line_start":632,"line_end":632,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396734,"byte_end":10396760,"line_start":633,"line_end":633,"column_start":5,"column_end":31}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396765,"byte_end":10396817,"line_start":634,"line_end":634,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396822,"byte_end":10396848,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396853,"byte_end":10396870,"line_start":636,"line_end":636,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396875,"byte_end":10396947,"line_start":637,"line_end":637,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396952,"byte_end":10396981,"line_start":638,"line_end":638,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10396986,"byte_end":10397003,"line_start":639,"line_end":639,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397008,"byte_end":10397035,"line_start":640,"line_end":640,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397040,"byte_end":10397074,"line_start":641,"line_end":641,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397079,"byte_end":10397096,"line_start":642,"line_end":642,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397101,"byte_end":10397114,"line_start":643,"line_end":643,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397119,"byte_end":10397128,"line_start":644,"line_end":644,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397133,"byte_end":10397136,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397141,"byte_end":10397155,"line_start":646,"line_end":646,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397160,"byte_end":10397165,"line_start":647,"line_end":647,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397170,"byte_end":10397177,"line_start":648,"line_end":648,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3127},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398436,"byte_end":10398443,"line_start":688,"line_end":688,"column_start":18,"column_end":25},"name":"send_to","qualname":"<UnixDatagram>::send_to","value":"pub async fn send_to<P, '_, '_>(&'_ Self, &'_ [u8], P) -> /*impl Trait*/ where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the specified address.","sig":null,"attributes":[{"value":"/ Sends data on the socket to the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397361,"byte_end":10397415,"line_start":655,"line_end":655,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397420,"byte_end":10397423,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397428,"byte_end":10397442,"line_start":657,"line_end":657,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397447,"byte_end":10397454,"line_start":658,"line_end":658,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397459,"byte_end":10397487,"line_start":659,"line_end":659,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397492,"byte_end":10397512,"line_start":660,"line_end":660,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397517,"byte_end":10397570,"line_start":661,"line_end":661,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397575,"byte_end":10397608,"line_start":662,"line_end":662,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397613,"byte_end":10397639,"line_start":663,"line_end":663,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397644,"byte_end":10397647,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ // We use a temporary directory so that the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397652,"byte_end":10397706,"line_start":665,"line_end":665,"column_start":5,"column_end":59}},{"value":"/ // files left by the bound sockets will get cleaned up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397711,"byte_end":10397770,"line_start":666,"line_end":666,"column_start":5,"column_end":64}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397775,"byte_end":10397800,"line_start":667,"line_end":667,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397805,"byte_end":10397808,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ // Bind each socket to a filesystem path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397813,"byte_end":10397857,"line_start":669,"line_end":669,"column_start":5,"column_end":49}},{"value":"/ let tx_path = tmp.path().join(\"tx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397862,"byte_end":10397902,"line_start":670,"line_end":670,"column_start":5,"column_end":45}},{"value":"/ let tx = UnixDatagram::bind(&tx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397907,"byte_end":10397950,"line_start":671,"line_end":671,"column_start":5,"column_end":48}},{"value":"/ let rx_path = tmp.path().join(\"rx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10397955,"byte_end":10397995,"line_start":672,"line_end":672,"column_start":5,"column_end":45}},{"value":"/ let rx = UnixDatagram::bind(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398000,"byte_end":10398043,"line_start":673,"line_end":673,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398048,"byte_end":10398051,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398056,"byte_end":10398087,"line_start":675,"line_end":675,"column_start":5,"column_end":36}},{"value":"/ tx.send_to(bytes, &rx_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398092,"byte_end":10398131,"line_start":676,"line_end":676,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398136,"byte_end":10398139,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398144,"byte_end":10398176,"line_start":678,"line_end":678,"column_start":5,"column_end":37}},{"value":"/ let (size, addr) = rx.recv_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398181,"byte_end":10398234,"line_start":679,"line_end":679,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398239,"byte_end":10398242,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buf[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398247,"byte_end":10398276,"line_start":681,"line_end":681,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398281,"byte_end":10398310,"line_start":682,"line_end":682,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(addr.as_pathname().unwrap(), &tx_path);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398315,"byte_end":10398369,"line_start":683,"line_end":683,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398374,"byte_end":10398377,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398382,"byte_end":10398394,"line_start":685,"line_end":685,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398399,"byte_end":10398406,"line_start":686,"line_end":686,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398411,"byte_end":10398418,"line_start":687,"line_end":687,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399751,"byte_end":10399760,"line_start":731,"line_end":731,"column_start":18,"column_end":27},"name":"recv_from","qualname":"<UnixDatagram>::recv_from","value":"pub async fn recv_from<'_, '_>(&'_ Self, &'_ mut [u8]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket.","sig":null,"attributes":[{"value":"/ Receives data from the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398696,"byte_end":10398730,"line_start":698,"line_end":698,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398735,"byte_end":10398738,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398743,"byte_end":10398757,"line_start":700,"line_end":700,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398762,"byte_end":10398769,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398774,"byte_end":10398802,"line_start":702,"line_end":702,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398807,"byte_end":10398827,"line_start":703,"line_end":703,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398832,"byte_end":10398885,"line_start":704,"line_end":704,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398890,"byte_end":10398923,"line_start":705,"line_end":705,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398928,"byte_end":10398954,"line_start":706,"line_end":706,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398959,"byte_end":10398962,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ // We use a temporary directory so that the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10398967,"byte_end":10399021,"line_start":708,"line_end":708,"column_start":5,"column_end":59}},{"value":"/ // files left by the bound sockets will get cleaned up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399026,"byte_end":10399085,"line_start":709,"line_end":709,"column_start":5,"column_end":64}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399090,"byte_end":10399115,"line_start":710,"line_end":710,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399120,"byte_end":10399123,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ // Bind each socket to a filesystem path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399128,"byte_end":10399172,"line_start":712,"line_end":712,"column_start":5,"column_end":49}},{"value":"/ let tx_path = tmp.path().join(\"tx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399177,"byte_end":10399217,"line_start":713,"line_end":713,"column_start":5,"column_end":45}},{"value":"/ let tx = UnixDatagram::bind(&tx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399222,"byte_end":10399265,"line_start":714,"line_end":714,"column_start":5,"column_end":48}},{"value":"/ let rx_path = tmp.path().join(\"rx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399270,"byte_end":10399310,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ let rx = UnixDatagram::bind(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399315,"byte_end":10399358,"line_start":716,"line_end":716,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399363,"byte_end":10399366,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"hello world\";","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399371,"byte_end":10399402,"line_start":718,"line_end":718,"column_start":5,"column_end":36}},{"value":"/ tx.send_to(bytes, &rx_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399407,"byte_end":10399446,"line_start":719,"line_end":719,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399451,"byte_end":10399454,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399459,"byte_end":10399491,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/ let (size, addr) = rx.recv_from(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399496,"byte_end":10399549,"line_start":722,"line_end":722,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399554,"byte_end":10399557,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ let dgram = &buf[..size];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399562,"byte_end":10399591,"line_start":724,"line_end":724,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dgram, bytes);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399596,"byte_end":10399625,"line_start":725,"line_end":725,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(addr.as_pathname().unwrap(), &tx_path);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399630,"byte_end":10399684,"line_start":726,"line_end":726,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399689,"byte_end":10399692,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399697,"byte_end":10399709,"line_start":728,"line_end":728,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399714,"byte_end":10399721,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10399726,"byte_end":10399733,"line_start":730,"line_end":730,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3136},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400725,"byte_end":10400739,"line_start":758,"line_end":758,"column_start":12,"column_end":26},"name":"poll_recv_from","qualname":"<UnixDatagram>::poll_recv_from","value":"pub fn poll_recv_from(&Self, &mut Context, &mut ReadBuf)\n-> Poll<io::Result<SocketAddr>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a single datagram on the specified address.","sig":null,"attributes":[{"value":"/ Attempts to receive a single datagram on the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400030,"byte_end":10400097,"line_start":741,"line_end":741,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400102,"byte_end":10400105,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the recv direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400110,"byte_end":10400194,"line_start":743,"line_end":743,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400199,"byte_end":10400281,"line_start":744,"line_end":744,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400286,"byte_end":10400307,"line_start":745,"line_end":745,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400312,"byte_end":10400315,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400320,"byte_end":10400338,"line_start":747,"line_end":747,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400343,"byte_end":10400346,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400351,"byte_end":10400376,"line_start":749,"line_end":749,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400381,"byte_end":10400384,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400389,"byte_end":10400445,"line_start":751,"line_end":751,"column_start":5,"column_end":61}},{"value":"/ * `Poll::Ready(Ok(addr))` reads data from `addr` into `ReadBuf` if the socket is ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400450,"byte_end":10400540,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400545,"byte_end":10400600,"line_start":753,"line_end":753,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400605,"byte_end":10400608,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400613,"byte_end":10400625,"line_start":755,"line_end":755,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400630,"byte_end":10400633,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10400638,"byte_end":10400713,"line_start":757,"line_end":757,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3137},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402048,"byte_end":10402060,"line_start":797,"line_end":797,"column_start":12,"column_end":24},"name":"poll_send_to","qualname":"<UnixDatagram>::poll_send_to","value":"pub fn poll_send_to<P>(&Self, &mut Context, &[u8], P)\n-> Poll<io::Result<usize>> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send data to the specified address.","sig":null,"attributes":[{"value":"/ Attempts to send data to the specified address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401399,"byte_end":10401450,"line_start":780,"line_end":780,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401455,"byte_end":10401458,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the send direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401463,"byte_end":10401547,"line_start":782,"line_end":782,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401552,"byte_end":10401634,"line_start":783,"line_end":783,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401639,"byte_end":10401660,"line_start":784,"line_end":784,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401665,"byte_end":10401668,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401673,"byte_end":10401691,"line_start":786,"line_end":786,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401696,"byte_end":10401699,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401704,"byte_end":10401729,"line_start":788,"line_end":788,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401734,"byte_end":10401737,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401742,"byte_end":10401799,"line_start":790,"line_end":790,"column_start":5,"column_end":62}},{"value":"/ * `Poll::Ready(Ok(n))` `n` is the number of bytes sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401804,"byte_end":10401863,"line_start":791,"line_end":791,"column_start":5,"column_end":64}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401868,"byte_end":10401923,"line_start":792,"line_end":792,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401928,"byte_end":10401931,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401936,"byte_end":10401948,"line_start":794,"line_end":794,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401953,"byte_end":10401956,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10401961,"byte_end":10402036,"line_start":796,"line_end":796,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3140},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403257,"byte_end":10403266,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"poll_send","qualname":"<UnixDatagram>::poll_send","value":"pub fn poll_send(&Self, &mut Context, &[u8]) -> Poll<io::Result<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send data on the socket to the remote address to which it\n was previously `connect`ed.","sig":null,"attributes":[{"value":"/ Attempts to send data on the socket to the remote address to which it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402350,"byte_end":10402423,"line_start":811,"line_end":811,"column_start":5,"column_end":78}},{"value":"/ was previously `connect`ed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402428,"byte_end":10402459,"line_start":812,"line_end":812,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402464,"byte_end":10402467,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402472,"byte_end":10402544,"line_start":814,"line_end":814,"column_start":5,"column_end":77}},{"value":"/ This method will fail if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402549,"byte_end":10402606,"line_start":815,"line_end":815,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402611,"byte_end":10402614,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the send direction,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402619,"byte_end":10402694,"line_start":817,"line_end":817,"column_start":5,"column_end":80}},{"value":"/ only the `Waker` from the `Context` passed to the most recent call will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402699,"byte_end":10402774,"line_start":818,"line_end":818,"column_start":5,"column_end":80}},{"value":"/ be scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402779,"byte_end":10402816,"line_start":819,"line_end":819,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402821,"byte_end":10402824,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402829,"byte_end":10402847,"line_start":821,"line_end":821,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402852,"byte_end":10402855,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402860,"byte_end":10402885,"line_start":823,"line_end":823,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402890,"byte_end":10402893,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not available to write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402898,"byte_end":10402959,"line_start":825,"line_end":825,"column_start":5,"column_end":66}},{"value":"/ * `Poll::Ready(Ok(n))` `n` is the number of bytes sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10402964,"byte_end":10403022,"line_start":826,"line_end":826,"column_start":5,"column_end":63}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403027,"byte_end":10403082,"line_start":827,"line_end":827,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403087,"byte_end":10403090,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403095,"byte_end":10403107,"line_start":829,"line_end":829,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403112,"byte_end":10403115,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403120,"byte_end":10403195,"line_start":831,"line_end":831,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403200,"byte_end":10403203,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403208,"byte_end":10403245,"line_start":833,"line_end":833,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404385,"byte_end":10404394,"line_start":863,"line_end":863,"column_start":12,"column_end":21},"name":"poll_recv","qualname":"<UnixDatagram>::poll_recv","value":"pub fn poll_recv(&Self, &mut Context, &mut ReadBuf) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a single datagram message on the socket from the remote\n address to which it is `connect`ed.","sig":null,"attributes":[{"value":"/ Attempts to receive a single datagram message on the socket from the remote","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403445,"byte_end":10403524,"line_start":840,"line_end":840,"column_start":5,"column_end":84}},{"value":"/ address to which it is `connect`ed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403529,"byte_end":10403568,"line_start":841,"line_end":841,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403573,"byte_end":10403576,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ The [`connect`] method will connect this socket to a remote address. This method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403581,"byte_end":10403665,"line_start":843,"line_end":843,"column_start":5,"column_end":89}},{"value":"/ resolves to an error if the socket is not connected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403670,"byte_end":10403726,"line_start":844,"line_end":844,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403731,"byte_end":10403734,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to a `poll_*` method in the recv direction, only the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403739,"byte_end":10403823,"line_start":846,"line_end":846,"column_start":5,"column_end":89}},{"value":"/ `Waker` from the `Context` passed to the most recent call will be scheduled to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403828,"byte_end":10403910,"line_start":847,"line_end":847,"column_start":5,"column_end":87}},{"value":"/ receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403915,"byte_end":10403936,"line_start":848,"line_end":848,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403941,"byte_end":10403944,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403949,"byte_end":10403967,"line_start":850,"line_end":850,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403972,"byte_end":10403975,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10403980,"byte_end":10404005,"line_start":852,"line_end":852,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404010,"byte_end":10404013,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the socket is not ready to read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404018,"byte_end":10404074,"line_start":854,"line_end":854,"column_start":5,"column_end":61}},{"value":"/ * `Poll::Ready(Ok(()))` reads data `ReadBuf` if the socket is ready","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404079,"byte_end":10404150,"line_start":855,"line_end":855,"column_start":5,"column_end":76}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404155,"byte_end":10404210,"line_start":856,"line_end":856,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404215,"byte_end":10404218,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404223,"byte_end":10404235,"line_start":858,"line_end":858,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404240,"byte_end":10404243,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404248,"byte_end":10404323,"line_start":860,"line_end":860,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404328,"byte_end":10404331,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ [`connect`]: method@Self::connect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404336,"byte_end":10404373,"line_start":862,"line_end":862,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3143},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406463,"byte_end":10406476,"line_start":924,"line_end":924,"column_start":12,"column_end":25},"name":"try_recv_from","qualname":"<UnixDatagram>::try_recv_from","value":"pub fn try_recv_from(&Self, &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Try to receive data from the socket without waiting.","sig":null,"attributes":[{"value":"/ Try to receive data from the socket without waiting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10404988,"byte_end":10405044,"line_start":881,"line_end":881,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405049,"byte_end":10405052,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405057,"byte_end":10405071,"line_start":883,"line_end":883,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405076,"byte_end":10405079,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405084,"byte_end":10405097,"line_start":885,"line_end":885,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405102,"byte_end":10405135,"line_start":886,"line_end":886,"column_start":5,"column_end":38}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405140,"byte_end":10405156,"line_start":887,"line_end":887,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405161,"byte_end":10405164,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405169,"byte_end":10405187,"line_start":889,"line_end":889,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405192,"byte_end":10405231,"line_start":890,"line_end":890,"column_start":5,"column_end":44}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405236,"byte_end":10405264,"line_start":891,"line_end":891,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405269,"byte_end":10405316,"line_start":892,"line_end":892,"column_start":5,"column_end":52}},{"value":"/     let client_path = dir.path().join(\"client.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405321,"byte_end":10405378,"line_start":893,"line_end":893,"column_start":5,"column_end":62}},{"value":"/     let server_path = dir.path().join(\"server.sock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405383,"byte_end":10405440,"line_start":894,"line_end":894,"column_start":5,"column_end":62}},{"value":"/     let socket = UnixDatagram::bind(&client_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405445,"byte_end":10405500,"line_start":895,"line_end":895,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405505,"byte_end":10405508,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405513,"byte_end":10405527,"line_start":897,"line_end":897,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405532,"byte_end":10405581,"line_start":898,"line_end":898,"column_start":5,"column_end":54}},{"value":"/         socket.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405586,"byte_end":10405623,"line_start":899,"line_end":899,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405628,"byte_end":10405631,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/         // The buffer is **not** included in the async task and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405636,"byte_end":10405708,"line_start":901,"line_end":901,"column_start":5,"column_end":77}},{"value":"/         // only exist on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405713,"byte_end":10405752,"line_start":902,"line_end":902,"column_start":5,"column_end":44}},{"value":"/         let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405757,"byte_end":10405793,"line_start":903,"line_end":903,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405798,"byte_end":10405801,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/         // Try to recv data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405806,"byte_end":10405876,"line_start":905,"line_end":905,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405881,"byte_end":10405939,"line_start":906,"line_end":906,"column_start":5,"column_end":63}},{"value":"/         match socket.try_recv_from(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405944,"byte_end":10405994,"line_start":907,"line_end":907,"column_start":5,"column_end":55}},{"value":"/             Ok((n, _addr)) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10405999,"byte_end":10406034,"line_start":908,"line_end":908,"column_start":5,"column_end":40}},{"value":"/                 println!(\"GOT {:?}\", &buf[..n]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406039,"byte_end":10406091,"line_start":909,"line_end":909,"column_start":5,"column_end":57}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406096,"byte_end":10406122,"line_start":910,"line_end":910,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406127,"byte_end":10406144,"line_start":911,"line_end":911,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406149,"byte_end":10406221,"line_start":912,"line_end":912,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406226,"byte_end":10406255,"line_start":913,"line_end":913,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406260,"byte_end":10406277,"line_start":914,"line_end":914,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406282,"byte_end":10406309,"line_start":915,"line_end":915,"column_start":5,"column_end":32}},{"value":"/                 return Err(e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406314,"byte_end":10406348,"line_start":916,"line_end":916,"column_start":5,"column_end":39}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406353,"byte_end":10406370,"line_start":917,"line_end":917,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406375,"byte_end":10406388,"line_start":918,"line_end":918,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406393,"byte_end":10406402,"line_start":919,"line_end":919,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406407,"byte_end":10406410,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406415,"byte_end":10406429,"line_start":921,"line_end":921,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406434,"byte_end":10406439,"line_start":922,"line_end":922,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406444,"byte_end":10406451,"line_start":923,"line_end":923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3145},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407925,"byte_end":10407935,"line_start":973,"line_end":973,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UnixDatagram>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this socket is bound to.","sig":null,"attributes":[{"value":"/ Returns the local address that this socket is bound to.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406725,"byte_end":10406784,"line_start":933,"line_end":933,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406789,"byte_end":10406792,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406797,"byte_end":10406811,"line_start":935,"line_end":935,"column_start":5,"column_end":19}},{"value":"/ For a socket bound to a local path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406816,"byte_end":10406854,"line_start":936,"line_end":936,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406859,"byte_end":10406866,"line_start":937,"line_end":937,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406871,"byte_end":10406899,"line_start":938,"line_end":938,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406904,"byte_end":10406924,"line_start":939,"line_end":939,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406929,"byte_end":10406982,"line_start":940,"line_end":940,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10406987,"byte_end":10407020,"line_start":941,"line_end":941,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407025,"byte_end":10407051,"line_start":942,"line_end":942,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407056,"byte_end":10407059,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ // We use a temporary directory so that the socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407064,"byte_end":10407118,"line_start":944,"line_end":944,"column_start":5,"column_end":59}},{"value":"/ // files left by the bound sockets will get cleaned up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407123,"byte_end":10407182,"line_start":945,"line_end":945,"column_start":5,"column_end":64}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407187,"byte_end":10407212,"line_start":946,"line_end":946,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407217,"byte_end":10407220,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ // Bind socket to a filesystem path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407225,"byte_end":10407264,"line_start":948,"line_end":948,"column_start":5,"column_end":44}},{"value":"/ let socket_path = tmp.path().join(\"socket\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407269,"byte_end":10407317,"line_start":949,"line_end":949,"column_start":5,"column_end":53}},{"value":"/ let socket = UnixDatagram::bind(&socket_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407322,"byte_end":10407373,"line_start":950,"line_end":950,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407378,"byte_end":10407381,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(socket.local_addr()?.as_pathname().unwrap(), &socket_path);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407386,"byte_end":10407460,"line_start":952,"line_end":952,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407465,"byte_end":10407468,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407473,"byte_end":10407485,"line_start":954,"line_end":954,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407490,"byte_end":10407497,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407502,"byte_end":10407509,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407514,"byte_end":10407517,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ For an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407522,"byte_end":10407547,"line_start":958,"line_end":958,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407552,"byte_end":10407559,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407564,"byte_end":10407592,"line_start":960,"line_end":960,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407597,"byte_end":10407617,"line_start":961,"line_end":961,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407622,"byte_end":10407675,"line_start":962,"line_end":962,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407680,"byte_end":10407713,"line_start":963,"line_end":963,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407718,"byte_end":10407721,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407726,"byte_end":10407757,"line_start":965,"line_end":965,"column_start":5,"column_end":36}},{"value":"/ let socket = UnixDatagram::unbound()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407762,"byte_end":10407804,"line_start":966,"line_end":966,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407809,"byte_end":10407812,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ assert!(socket.local_addr()?.is_unnamed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407817,"byte_end":10407864,"line_start":968,"line_end":968,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407869,"byte_end":10407872,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407877,"byte_end":10407889,"line_start":970,"line_end":970,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407894,"byte_end":10407901,"line_start":971,"line_end":971,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10407906,"byte_end":10407913,"line_start":972,"line_end":972,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409288,"byte_end":10409297,"line_start":1022,"line_end":1022,"column_start":12,"column_end":21},"name":"peer_addr","qualname":"<UnixDatagram>::peer_addr","value":"pub fn peer_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of this socket's peer.","sig":null,"attributes":[{"value":"/ Returns the address of this socket's peer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408027,"byte_end":10408073,"line_start":977,"line_end":977,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408078,"byte_end":10408081,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ The `connect` method will connect the socket to a peer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408086,"byte_end":10408145,"line_start":979,"line_end":979,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408150,"byte_end":10408153,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408158,"byte_end":10408172,"line_start":981,"line_end":981,"column_start":5,"column_end":19}},{"value":"/ For a peer with a local path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408177,"byte_end":10408209,"line_start":982,"line_end":982,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408214,"byte_end":10408221,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408226,"byte_end":10408254,"line_start":984,"line_end":984,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408259,"byte_end":10408279,"line_start":985,"line_end":985,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408284,"byte_end":10408337,"line_start":986,"line_end":986,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408342,"byte_end":10408375,"line_start":987,"line_end":987,"column_start":5,"column_end":38}},{"value":"/ use tempfile::tempdir;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408380,"byte_end":10408406,"line_start":988,"line_end":988,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408411,"byte_end":10408414,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408419,"byte_end":10408450,"line_start":990,"line_end":990,"column_start":5,"column_end":36}},{"value":"/ let tx = UnixDatagram::unbound()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408455,"byte_end":10408493,"line_start":991,"line_end":991,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408498,"byte_end":10408501,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ // Create another, bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408506,"byte_end":10408541,"line_start":993,"line_end":993,"column_start":5,"column_end":40}},{"value":"/ let tmp = tempdir()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408546,"byte_end":10408571,"line_start":994,"line_end":994,"column_start":5,"column_end":30}},{"value":"/ let rx_path = tmp.path().join(\"rx\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408576,"byte_end":10408616,"line_start":995,"line_end":995,"column_start":5,"column_end":45}},{"value":"/ let rx = UnixDatagram::bind(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408621,"byte_end":10408664,"line_start":996,"line_end":996,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408669,"byte_end":10408672,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ // Connect to the bound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408677,"byte_end":10408711,"line_start":998,"line_end":998,"column_start":5,"column_end":39}},{"value":"/ tx.connect(&rx_path)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408716,"byte_end":10408742,"line_start":999,"line_end":999,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408747,"byte_end":10408750,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(tx.peer_addr()?.as_pathname().unwrap(), &rx_path);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408755,"byte_end":10408820,"line_start":1001,"line_end":1001,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408825,"byte_end":10408828,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408833,"byte_end":10408845,"line_start":1003,"line_end":1003,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408850,"byte_end":10408857,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408862,"byte_end":10408869,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408874,"byte_end":10408877,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ For an unbound peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408882,"byte_end":10408905,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408910,"byte_end":10408917,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408922,"byte_end":10408950,"line_start":1009,"line_end":1009,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408955,"byte_end":10408975,"line_start":1010,"line_end":1010,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10408980,"byte_end":10409033,"line_start":1011,"line_end":1011,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409038,"byte_end":10409071,"line_start":1012,"line_end":1012,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409076,"byte_end":10409079,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ // Create the pair of sockets","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409084,"byte_end":10409117,"line_start":1014,"line_end":1014,"column_start":5,"column_end":38}},{"value":"/ let (sock1, sock2) = UnixDatagram::pair()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409122,"byte_end":10409169,"line_start":1015,"line_end":1015,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409174,"byte_end":10409177,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ assert!(sock1.peer_addr()?.is_unnamed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409182,"byte_end":10409227,"line_start":1017,"line_end":1017,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409232,"byte_end":10409235,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409240,"byte_end":10409252,"line_start":1019,"line_end":1019,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409257,"byte_end":10409264,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409269,"byte_end":10409276,"line_start":1021,"line_end":1021,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409897,"byte_end":10409907,"line_start":1045,"line_end":1045,"column_start":12,"column_end":22},"name":"take_error","qualname":"<UnixDatagram>::take_error","value":"pub fn take_error(&Self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `SO_ERROR` option.","sig":null,"attributes":[{"value":"/ Returns the value of the `SO_ERROR` option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409388,"byte_end":10409435,"line_start":1026,"line_end":1026,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409440,"byte_end":10409443,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409448,"byte_end":10409462,"line_start":1028,"line_end":1028,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409467,"byte_end":10409474,"line_start":1029,"line_end":1029,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409479,"byte_end":10409507,"line_start":1030,"line_end":1030,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409512,"byte_end":10409532,"line_start":1031,"line_end":1031,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409537,"byte_end":10409590,"line_start":1032,"line_end":1032,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409595,"byte_end":10409628,"line_start":1033,"line_end":1033,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409633,"byte_end":10409636,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409641,"byte_end":10409672,"line_start":1035,"line_end":1035,"column_start":5,"column_end":36}},{"value":"/ let socket = UnixDatagram::unbound()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409677,"byte_end":10409719,"line_start":1036,"line_end":1036,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409724,"byte_end":10409727,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ if let Ok(Some(err)) = socket.take_error() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409732,"byte_end":10409780,"line_start":1038,"line_end":1038,"column_start":5,"column_end":53}},{"value":"/     println!(\"Got error: {:?}\", err);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409785,"byte_end":10409826,"line_start":1039,"line_end":1039,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409831,"byte_end":10409836,"line_start":1040,"line_end":1040,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409841,"byte_end":10409844,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409849,"byte_end":10409861,"line_start":1042,"line_end":1042,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409866,"byte_end":10409873,"line_start":1043,"line_end":1043,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409878,"byte_end":10409885,"line_start":1044,"line_end":1044,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411148,"byte_end":10411156,"line_start":1081,"line_end":1081,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<UnixDatagram>::shutdown","value":"pub fn shutdown(&Self, Shutdown) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Shuts down the read, write, or both halves of this connection.","sig":null,"attributes":[{"value":"/ Shuts down the read, write, or both halves of this connection.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10409990,"byte_end":10410056,"line_start":1049,"line_end":1049,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410061,"byte_end":10410064,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ This function will cause all pending and future I/O calls on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410069,"byte_end":10410137,"line_start":1051,"line_end":1051,"column_start":5,"column_end":73}},{"value":"/ specified portions to immediately return with an appropriate value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410142,"byte_end":10410212,"line_start":1052,"line_end":1052,"column_start":5,"column_end":75}},{"value":"/ (see the documentation of `Shutdown`).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410217,"byte_end":10410259,"line_start":1053,"line_end":1053,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410264,"byte_end":10410267,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410272,"byte_end":10410286,"line_start":1055,"line_end":1055,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410291,"byte_end":10410298,"line_start":1056,"line_end":1056,"column_start":5,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410303,"byte_end":10410331,"line_start":1057,"line_end":1057,"column_start":5,"column_end":33}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410336,"byte_end":10410356,"line_start":1058,"line_end":1058,"column_start":5,"column_end":25}},{"value":"/ # async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410361,"byte_end":10410414,"line_start":1059,"line_end":1059,"column_start":5,"column_end":58}},{"value":"/ use tokio::net::UnixDatagram;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410419,"byte_end":10410452,"line_start":1060,"line_end":1060,"column_start":5,"column_end":38}},{"value":"/ use std::net::Shutdown;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410457,"byte_end":10410484,"line_start":1061,"line_end":1061,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410489,"byte_end":10410492,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ // Create an unbound socket","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410497,"byte_end":10410528,"line_start":1063,"line_end":1063,"column_start":5,"column_end":36}},{"value":"/ let (socket, other) = UnixDatagram::pair()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410533,"byte_end":10410581,"line_start":1064,"line_end":1064,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410586,"byte_end":10410589,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ socket.shutdown(Shutdown::Both)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410594,"byte_end":10410631,"line_start":1066,"line_end":1066,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410636,"byte_end":10410639,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ // NOTE: the following commented out code does NOT work as expected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410644,"byte_end":10410716,"line_start":1068,"line_end":1068,"column_start":5,"column_end":77}},{"value":"/ // Due to an underlying issue, the recv call will block indefinitely.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410721,"byte_end":10410794,"line_start":1069,"line_end":1069,"column_start":5,"column_end":78}},{"value":"/ // See: https://github.com/tokio-rs/tokio/issues/1679","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410799,"byte_end":10410856,"line_start":1070,"line_end":1070,"column_start":5,"column_end":62}},{"value":"/ //let mut buff = vec![0u8; 24];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410861,"byte_end":10410896,"line_start":1071,"line_end":1071,"column_start":5,"column_end":40}},{"value":"/ //let size = socket.recv(&mut buff).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410901,"byte_end":10410948,"line_start":1072,"line_end":1072,"column_start":5,"column_end":52}},{"value":"/ //assert_eq!(size, 0);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410953,"byte_end":10410979,"line_start":1073,"line_end":1073,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410984,"byte_end":10410987,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ let send_result = socket.send(b\"hello world\").await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10410992,"byte_end":10411048,"line_start":1075,"line_end":1075,"column_start":5,"column_end":61}},{"value":"/ assert!(send_result.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411053,"byte_end":10411087,"line_start":1076,"line_end":1076,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411092,"byte_end":10411095,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411100,"byte_end":10411112,"line_start":1078,"line_end":1078,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411117,"byte_end":10411124,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411129,"byte_end":10411136,"line_start":1080,"line_end":1080,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3399},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413219,"byte_end":10413231,"line_start":43,"line_end":43,"column_start":16,"column_end":28},"name":"UnixListener","qualname":"::net::unix::listener::UnixListener","value":"UnixListener {  }","parent":null,"children":[{"krate":0,"index":3400}],"decl_id":null,"docs":" A Unix socket which can accept connections from other Unix sockets.","sig":null,"attributes":[{"value":"cfg(all(unix, feature = \"net\"))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21623,"byte_end":21657,"line_start":179,"line_end":179,"column_start":13,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3175},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413733,"byte_end":10413737,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"bind","qualname":"<UnixListener>::bind","value":"pub fn bind<P>(P) -> io::Result<UnixListener> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UnixListener` bound to the specified path.","sig":null,"attributes":[{"value":"/ Creates a new `UnixListener` bound to the specified path.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413316,"byte_end":10413377,"line_start":49,"line_end":49,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413382,"byte_end":10413385,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413390,"byte_end":10413402,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413407,"byte_end":10413410,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413415,"byte_end":10413475,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413480,"byte_end":10413483,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413488,"byte_end":10413558,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413563,"byte_end":10413636,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413641,"byte_end":10413721,"line_start":57,"line_end":57,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3177},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414668,"byte_end":10414676,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"from_std","qualname":"<UnixListener>::from_std","value":"pub fn from_std(net::UnixListener) -> io::Result<UnixListener>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `UnixListener` from a `std::os::unix::net::UnixListener `.","sig":null,"attributes":[{"value":"/ Creates new `UnixListener` from a `std::os::unix::net::UnixListener `.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413967,"byte_end":10414041,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414046,"byte_end":10414049,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a UnixListener from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414054,"byte_end":10414126,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414131,"byte_end":10414199,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ nothing about the underlying listener; it is left up to the user to set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414204,"byte_end":10414279,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ it in non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414284,"byte_end":10414312,"line_start":72,"line_end":72,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414317,"byte_end":10414320,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414325,"byte_end":10414337,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414342,"byte_end":10414345,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414350,"byte_end":10414410,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414415,"byte_end":10414418,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414423,"byte_end":10414493,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414498,"byte_end":10414571,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414576,"byte_end":10414656,"line_start":80,"line_end":80,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3178},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414958,"byte_end":10414968,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UnixListener>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local socket address of this listener.\n","sig":null,"attributes":[{"value":"/ Returns the local socket address of this listener.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10414892,"byte_end":10414946,"line_start":87,"line_end":87,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3179},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415119,"byte_end":10415129,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"take_error","qualname":"<UnixListener>::take_error","value":"pub fn take_error(&Self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `SO_ERROR` option.\n","sig":null,"attributes":[{"value":"/ Returns the value of the `SO_ERROR` option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415060,"byte_end":10415107,"line_start":92,"line_end":92,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3180},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415285,"byte_end":10415291,"line_start":98,"line_end":98,"column_start":18,"column_end":24},"name":"accept","qualname":"<UnixListener>::accept","value":"pub async fn accept<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Accepts a new incoming connection to this listener.\n","sig":null,"attributes":[{"value":"/ Accepts a new incoming connection to this listener.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415212,"byte_end":10415267,"line_start":97,"line_end":97,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3184},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415998,"byte_end":10416009,"line_start":116,"line_end":116,"column_start":12,"column_end":23},"name":"poll_accept","qualname":"<UnixListener>::poll_accept","value":"pub fn poll_accept(&Self, &mut Context)\n-> Poll<io::Result<(UnixStream, SocketAddr)>>","parent":null,"children":[],"decl_id":null,"docs":" Polls to accept a new incoming connection to this listener.","sig":null,"attributes":[{"value":"/ Polls to accept a new incoming connection to this listener.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415620,"byte_end":10415683,"line_start":110,"line_end":110,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415688,"byte_end":10415691,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ If there is no connection to accept, `Poll::Pending` is returned and the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415696,"byte_end":10415772,"line_start":112,"line_end":112,"column_start":5,"column_end":81}},{"value":"/ current task will be notified by a waker.  Note that on multiple calls","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415777,"byte_end":10415851,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ to `poll_accept`, only the `Waker` from the `Context` passed to the most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415856,"byte_end":10415932,"line_start":114,"line_end":114,"column_start":5,"column_end":81}},{"value":"/ recent call is scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10415937,"byte_end":10415986,"line_start":115,"line_end":115,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3402},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417820,"byte_end":10417828,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"ReadHalf","qualname":"::net::unix::split::ReadHalf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Borrowed read half of a [`UnixStream`], created by [`split`].","sig":null,"attributes":[{"value":"/ Borrowed read half of a [`UnixStream`], created by [`split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417483,"byte_end":10417548,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417549,"byte_end":10417552,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Reading from a `ReadHalf` is usually done using the convenience methods found on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417553,"byte_end":10417641,"line_start":21,"line_end":21,"column_start":1,"column_end":89}},{"value":"/ [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417642,"byte_end":10417669,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417670,"byte_end":10417673,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`UnixStream`]: UnixStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417674,"byte_end":10417704,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ [`split`]: UnixStream::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417705,"byte_end":10417739,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417740,"byte_end":10417791,"line_start":26,"line_end":26,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3409},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418454,"byte_end":10418463,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"WriteHalf","qualname":"::net::unix::split::WriteHalf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Borrowed write half of a [`UnixStream`], created by [`split`].","sig":null,"attributes":[{"value":"/ Borrowed write half of a [`UnixStream`], created by [`split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417851,"byte_end":10417917,"line_start":30,"line_end":30,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417918,"byte_end":10417921,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Note that in the [`AsyncWrite`] implemenation of this type, [`poll_shutdown`] will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10417922,"byte_end":10418008,"line_start":32,"line_end":32,"column_start":1,"column_end":87}},{"value":"/ shut down the UnixStream stream in the write direction.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418009,"byte_end":10418068,"line_start":33,"line_end":33,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418069,"byte_end":10418072,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Writing to an `WriteHalf` is usually done using the convenience methods found","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418073,"byte_end":10418154,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/ on the [`AsyncWriteExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418155,"byte_end":10418190,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418191,"byte_end":10418194,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`UnixStream`]: UnixStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418195,"byte_end":10418225,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ [`split`]: UnixStream::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418226,"byte_end":10418260,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/ [`AsyncWrite`]: trait@crate::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418261,"byte_end":10418308,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/ [`poll_shutdown`]: fn@crate::io::AsyncWrite::poll_shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418309,"byte_end":10418371,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ [`AsyncWriteExt`]: trait@crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418372,"byte_end":10418425,"line_start":42,"line_end":42,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3416},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420859,"byte_end":10420872,"line_start":30,"line_end":30,"column_start":12,"column_end":25},"name":"OwnedReadHalf","qualname":"::net::unix::split_owned::OwnedReadHalf","value":"OwnedReadHalf {  }","parent":null,"children":[{"krate":0,"index":3417}],"decl_id":null,"docs":" Owned read half of a [`UnixStream`], created by [`into_split`].","sig":null,"attributes":[{"value":"/ Owned read half of a [`UnixStream`], created by [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420480,"byte_end":10420547,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420548,"byte_end":10420551,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Reading from an `OwnedReadHalf` is usually done using the convenience methods found","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420552,"byte_end":10420639,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"/ on the [`AsyncReadExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420640,"byte_end":10420674,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420675,"byte_end":10420678,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [`UnixStream`]: crate::net::UnixStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420679,"byte_end":10420721,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/ [`into_split`]: crate::net::UnixStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420722,"byte_end":10420778,"line_start":27,"line_end":27,"column_start":1,"column_end":57}},{"value":"/ [`AsyncReadExt`]: trait@crate::io::AsyncReadExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420779,"byte_end":10420830,"line_start":28,"line_end":28,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3420},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421618,"byte_end":10421632,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"OwnedWriteHalf","qualname":"::net::unix::split_owned::OwnedWriteHalf","value":"OwnedWriteHalf {  }","parent":null,"children":[{"krate":0,"index":3421},{"krate":0,"index":3422}],"decl_id":null,"docs":" Owned write half of a [`UnixStream`], created by [`into_split`].","sig":null,"attributes":[{"value":"/ Owned write half of a [`UnixStream`], created by [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420906,"byte_end":10420974,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420975,"byte_end":10420978,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Note that in the [`AsyncWrite`] implementation of this type,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10420979,"byte_end":10421043,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/ [`poll_shutdown`] will shut down the stream in the write direction.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421044,"byte_end":10421115,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/ Dropping the write half will also shut down the write half of the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421116,"byte_end":10421193,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421194,"byte_end":10421197,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Writing to an `OwnedWriteHalf` is usually done using the convenience methods","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421198,"byte_end":10421278,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ found on the [`AsyncWriteExt`] trait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421279,"byte_end":10421320,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421321,"byte_end":10421324,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`UnixStream`]: crate::net::UnixStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421325,"byte_end":10421367,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/ [`into_split`]: crate::net::UnixStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421368,"byte_end":10421424,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"/ [`AsyncWrite`]: trait@crate::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421425,"byte_end":10421472,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/ [`poll_shutdown`]: fn@crate::io::AsyncWrite::poll_shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421473,"byte_end":10421535,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ [`AsyncWriteExt`]: trait@crate::io::AsyncWriteExt","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10421536,"byte_end":10421589,"line_start":47,"line_end":47,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3425},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422601,"byte_end":10422613,"line_start":83,"line_end":83,"column_start":12,"column_end":24},"name":"ReuniteError","qualname":"::net::unix::split_owned::ReuniteError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error indicating that two halves were not from the same socket, and thus could\n not be reunited.\n","sig":null,"attributes":[{"value":"/ Error indicating that two halves were not from the same socket, and thus could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422469,"byte_end":10422551,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/ not be reunited.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422552,"byte_end":10422572,"line_start":81,"line_end":81,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3427},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422614,"byte_end":10422631,"line_start":83,"line_end":83,"column_start":25,"column_end":42},"name":"0","qualname":"::net::unix::split_owned::ReuniteError::0","value":"net::unix::split_owned::OwnedReadHalf","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3428},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422633,"byte_end":10422651,"line_start":83,"line_end":83,"column_start":44,"column_end":62},"name":"1","qualname":"::net::unix::split_owned::ReuniteError::1","value":"net::unix::split_owned::OwnedWriteHalf","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423211,"byte_end":10423218,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"reunite","qualname":"<OwnedReadHalf>::reunite","value":"pub fn reunite(Self, OwnedWriteHalf) -> Result<UnixStream, ReuniteError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two halves of a `UnixStream` back together and\n recover the original socket. Succeeds only if the two halves\n originated from the same call to [`into_split`].","sig":null,"attributes":[{"value":"/ Attempts to put the two halves of a `UnixStream` back together and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422934,"byte_end":10423004,"line_start":97,"line_end":97,"column_start":5,"column_end":75}},{"value":"/ recover the original socket. Succeeds only if the two halves","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423009,"byte_end":10423073,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ originated from the same call to [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423078,"byte_end":10423130,"line_start":99,"line_end":99,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423135,"byte_end":10423138,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: crate::net::UnixStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423143,"byte_end":10423199,"line_start":101,"line_end":101,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3246},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423855,"byte_end":10423862,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"reunite","qualname":"<OwnedWriteHalf>::reunite","value":"pub fn reunite(Self, OwnedReadHalf) -> Result<UnixStream, ReuniteError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two halves of a `UnixStream` back together and\n recover the original socket. Succeeds only if the two halves\n originated from the same call to [`into_split`].","sig":null,"attributes":[{"value":"/ Attempts to put the two halves of a `UnixStream` back together and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423578,"byte_end":10423648,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/ recover the original socket. Succeeds only if the two halves","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423653,"byte_end":10423717,"line_start":119,"line_end":119,"column_start":5,"column_end":69}},{"value":"/ originated from the same call to [`into_split`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423722,"byte_end":10423774,"line_start":120,"line_end":120,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423779,"byte_end":10423782,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: crate::net::UnixStream::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423787,"byte_end":10423843,"line_start":122,"line_end":122,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3247},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424168,"byte_end":10424174,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"forget","qualname":"<OwnedWriteHalf>::forget","value":"pub fn forget(Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the write half, but don't close the write half of the stream\n until the read half is dropped. If the read half has already been\n dropped, this closes the stream.\n","sig":null,"attributes":[{"value":"/ Destroy the write half, but don't close the write half of the stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423969,"byte_end":10424041,"line_start":127,"line_end":127,"column_start":5,"column_end":77}},{"value":"/ until the read half is dropped. If the read half has already been","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424046,"byte_end":10424115,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/ dropped, this closes the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424120,"byte_end":10424156,"line_start":129,"line_end":129,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3267},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425800,"byte_end":10425810,"line_start":5,"line_end":5,"column_start":12,"column_end":22},"name":"SocketAddr","qualname":"::net::unix::socketaddr::SocketAddr","value":"","parent":null,"children":[],"decl_id":null,"docs":" An address associated with a Tokio Unix socket.\n","sig":null,"attributes":[{"value":"/ An address associated with a Tokio Unix socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425737,"byte_end":10425788,"line_start":4,"line_end":4,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426046,"byte_end":10426056,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"is_unnamed","qualname":"<SocketAddr>::is_unnamed","value":"pub fn is_unnamed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the address is unnamed.","sig":null,"attributes":[{"value":"/ Returns `true` if the address is unnamed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425868,"byte_end":10425913,"line_start":8,"line_end":8,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425918,"byte_end":10425921,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ Documentation reflected in [`SocketAddr`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425926,"byte_end":10425971,"line_start":10,"line_end":10,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425976,"byte_end":10425979,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ [`SocketAddr`]: std::os::unix::net::SocketAddr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425984,"byte_end":10426034,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426317,"byte_end":10426328,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"as_pathname","qualname":"<SocketAddr>::as_pathname","value":"pub fn as_pathname(&Self) -> Option<&Path>","parent":null,"children":[],"decl_id":null,"docs":" Returns the contents of this address if it is a `pathname` address.","sig":null,"attributes":[{"value":"/ Returns the contents of this address if it is a `pathname` address.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426113,"byte_end":10426184,"line_start":17,"line_end":17,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426189,"byte_end":10426192,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ Documentation reflected in [`SocketAddr`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426197,"byte_end":10426242,"line_start":19,"line_end":19,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426247,"byte_end":10426250,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ [`SocketAddr`]: std::os::unix::net::SocketAddr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426255,"byte_end":10426305,"line_start":21,"line_end":21,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":3431},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427768,"byte_end":10427778,"line_start":31,"line_end":31,"column_start":16,"column_end":26},"name":"UnixStream","qualname":"::net::unix::stream::UnixStream","value":"UnixStream {  }","parent":null,"children":[{"krate":0,"index":3432}],"decl_id":null,"docs":" A structure representing a connected Unix socket.","sig":null,"attributes":[{"value":"cfg(all(unix, feature = \"net\"))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":21623,"byte_end":21657,"line_start":179,"line_end":179,"column_start":13,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3314},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428101,"byte_end":10428108,"line_start":42,"line_end":42,"column_start":18,"column_end":25},"name":"connect","qualname":"<UnixStream>::connect","value":"pub async fn connect<P>(P) -> /*impl Trait*/ where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Connects to the socket named by `path`.","sig":null,"attributes":[{"value":"/ Connects to the socket named by `path`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427859,"byte_end":10427902,"line_start":37,"line_end":37,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427907,"byte_end":10427910,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This function will create a new Unix socket and connect to the path","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427915,"byte_end":10427986,"line_start":39,"line_end":39,"column_start":5,"column_end":76}},{"value":"/ specified, associating the returned stream with the default event loop's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427991,"byte_end":10428067,"line_start":40,"line_end":40,"column_start":5,"column_end":81}},{"value":"/ handle.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428072,"byte_end":10428083,"line_start":41,"line_end":41,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3319},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430771,"byte_end":10430776,"line_start":115,"line_end":115,"column_start":18,"column_end":23},"name":"ready","qualname":"<UnixStream>::ready","value":"pub async fn ready<'_>(&'_ Self, Interest) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for any of the requested ready states.","sig":null,"attributes":[{"value":"/ Wait for any of the requested ready states.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428400,"byte_end":10428447,"line_start":53,"line_end":53,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428452,"byte_end":10428455,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `try_read()` or `try_write()`. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428460,"byte_end":10428534,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ can be used to concurrently read / write to the same socket on a single","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428539,"byte_end":10428614,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ task without splitting the socket.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428619,"byte_end":10428657,"line_start":57,"line_end":57,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428662,"byte_end":10428665,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428670,"byte_end":10428684,"line_start":59,"line_end":59,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428689,"byte_end":10428692,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Concurrently read and write to the stream on the same task without","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428697,"byte_end":10428767,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/ splitting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428772,"byte_end":10428786,"line_start":62,"line_end":62,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428791,"byte_end":10428794,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428799,"byte_end":10428812,"line_start":64,"line_end":64,"column_start":5,"column_end":18}},{"value":"/ use tokio::io::Interest;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428817,"byte_end":10428845,"line_start":65,"line_end":65,"column_start":5,"column_end":33}},{"value":"/ use tokio::net::UnixStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428850,"byte_end":10428881,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428886,"byte_end":10428912,"line_start":67,"line_end":67,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428917,"byte_end":10428933,"line_start":68,"line_end":68,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428938,"byte_end":10428941,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428946,"byte_end":10428964,"line_start":70,"line_end":70,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10428969,"byte_end":10429020,"line_start":71,"line_end":71,"column_start":5,"column_end":56}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429025,"byte_end":10429072,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/     let bind_path = dir.path().join(\"bind_path\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429077,"byte_end":10429130,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/     let stream = UnixStream::connect(bind_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429135,"byte_end":10429194,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429199,"byte_end":10429202,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429207,"byte_end":10429221,"line_start":76,"line_end":76,"column_start":5,"column_end":19}},{"value":"/         let ready = stream.ready(Interest::READABLE | Interest::WRITABLE).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429226,"byte_end":10429311,"line_start":77,"line_end":77,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429316,"byte_end":10429319,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/         if ready.is_readable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429324,"byte_end":10429360,"line_start":79,"line_end":79,"column_start":5,"column_end":41}},{"value":"/             let mut data = vec![0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429365,"byte_end":10429410,"line_start":80,"line_end":80,"column_start":5,"column_end":50}},{"value":"/             // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429415,"byte_end":10429489,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/             // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429494,"byte_end":10429556,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/             match stream.try_read(&mut data) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429561,"byte_end":10429611,"line_start":83,"line_end":83,"column_start":5,"column_end":55}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429616,"byte_end":10429646,"line_start":84,"line_end":84,"column_start":5,"column_end":35}},{"value":"/                     println!(\"read {} bytes\", n);        ","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429651,"byte_end":10429712,"line_start":85,"line_end":85,"column_start":5,"column_end":66}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429717,"byte_end":10429738,"line_start":86,"line_end":86,"column_start":5,"column_end":26}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429743,"byte_end":10429819,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/                     continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429824,"byte_end":10429857,"line_start":88,"line_end":88,"column_start":5,"column_end":38}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429862,"byte_end":10429883,"line_start":89,"line_end":89,"column_start":5,"column_end":26}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429888,"byte_end":10429919,"line_start":90,"line_end":90,"column_start":5,"column_end":36}},{"value":"/                     return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429924,"byte_end":10429969,"line_start":91,"line_end":91,"column_start":5,"column_end":50}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10429974,"byte_end":10429995,"line_start":92,"line_end":92,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430000,"byte_end":10430017,"line_start":93,"line_end":93,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430022,"byte_end":10430025,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430030,"byte_end":10430043,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430048,"byte_end":10430051,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/         if ready.is_writable() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430056,"byte_end":10430092,"line_start":97,"line_end":97,"column_start":5,"column_end":41}},{"value":"/             // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430097,"byte_end":10430172,"line_start":98,"line_end":98,"column_start":5,"column_end":80}},{"value":"/             // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430177,"byte_end":10430239,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"/             match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430244,"byte_end":10430300,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/                 Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430305,"byte_end":10430335,"line_start":101,"line_end":101,"column_start":5,"column_end":35}},{"value":"/                     println!(\"write {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430340,"byte_end":10430394,"line_start":102,"line_end":102,"column_start":5,"column_end":59}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430399,"byte_end":10430420,"line_start":103,"line_end":103,"column_start":5,"column_end":26}},{"value":"/                 Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430425,"byte_end":10430501,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/                     continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430506,"byte_end":10430539,"line_start":105,"line_end":105,"column_start":5,"column_end":38}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430544,"byte_end":10430565,"line_start":106,"line_end":106,"column_start":5,"column_end":26}},{"value":"/                 Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430570,"byte_end":10430601,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/                     return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430606,"byte_end":10430651,"line_start":108,"line_end":108,"column_start":5,"column_end":50}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430656,"byte_end":10430677,"line_start":109,"line_end":109,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430682,"byte_end":10430699,"line_start":110,"line_end":110,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430704,"byte_end":10430717,"line_start":111,"line_end":111,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430722,"byte_end":10430731,"line_start":112,"line_end":112,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430736,"byte_end":10430741,"line_start":113,"line_end":113,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430746,"byte_end":10430753,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432401,"byte_end":10432409,"line_start":165,"line_end":165,"column_start":18,"column_end":26},"name":"readable","qualname":"<UnixStream>::readable","value":"pub async fn readable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become readable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become readable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430933,"byte_end":10430976,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430981,"byte_end":10430984,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::READABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10430989,"byte_end":10431066,"line_start":122,"line_end":122,"column_start":5,"column_end":82}},{"value":"/ paired with `try_read()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431071,"byte_end":10431100,"line_start":123,"line_end":123,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431105,"byte_end":10431108,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431113,"byte_end":10431127,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431132,"byte_end":10431135,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431140,"byte_end":10431153,"line_start":127,"line_end":127,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431158,"byte_end":10431189,"line_start":128,"line_end":128,"column_start":5,"column_end":36}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431194,"byte_end":10431220,"line_start":129,"line_end":129,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431225,"byte_end":10431241,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431246,"byte_end":10431249,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431254,"byte_end":10431272,"line_start":132,"line_end":132,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431277,"byte_end":10431328,"line_start":133,"line_end":133,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431333,"byte_end":10431361,"line_start":134,"line_end":134,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431366,"byte_end":10431413,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"/     let bind_path = dir.path().join(\"bind_path\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431418,"byte_end":10431471,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/     let stream = UnixStream::connect(bind_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431476,"byte_end":10431535,"line_start":137,"line_end":137,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431540,"byte_end":10431543,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/     let mut msg = vec![0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431548,"byte_end":10431584,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431589,"byte_end":10431592,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431597,"byte_end":10431611,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431616,"byte_end":10431665,"line_start":142,"line_end":142,"column_start":5,"column_end":54}},{"value":"/         stream.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431670,"byte_end":10431707,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431712,"byte_end":10431715,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/         // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431720,"byte_end":10431790,"line_start":145,"line_end":145,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431795,"byte_end":10431853,"line_start":146,"line_end":146,"column_start":5,"column_end":63}},{"value":"/         match stream.try_read(&mut msg) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431858,"byte_end":10431903,"line_start":147,"line_end":147,"column_start":5,"column_end":50}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431908,"byte_end":10431934,"line_start":148,"line_end":148,"column_start":5,"column_end":31}},{"value":"/                 msg.truncate(n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431939,"byte_end":10431975,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10431980,"byte_end":10432006,"line_start":150,"line_end":150,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432011,"byte_end":10432028,"line_start":151,"line_end":151,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432033,"byte_end":10432105,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432110,"byte_end":10432139,"line_start":153,"line_end":153,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432144,"byte_end":10432161,"line_start":154,"line_end":154,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432166,"byte_end":10432193,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432198,"byte_end":10432239,"line_start":156,"line_end":156,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432244,"byte_end":10432261,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432266,"byte_end":10432279,"line_start":158,"line_end":158,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432284,"byte_end":10432293,"line_start":159,"line_end":159,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432298,"byte_end":10432301,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/     println!(\"GOT = {:?}\", msg);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432306,"byte_end":10432342,"line_start":161,"line_end":161,"column_start":5,"column_end":41}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432347,"byte_end":10432361,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432366,"byte_end":10432371,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432376,"byte_end":10432383,"line_start":164,"line_end":164,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3325},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433772,"byte_end":10433787,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"poll_read_ready","qualname":"<UnixStream>::poll_read_ready","value":"pub fn poll_read_ready(&Self, &mut Context) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for read readiness.","sig":null,"attributes":[{"value":"/ Polls for read readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432510,"byte_end":10432539,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432544,"byte_end":10432547,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ If the unix stream is not currently ready for reading, this method will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432552,"byte_end":10432627,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ store a clone of the `Waker` from the provided `Context`. When the unix","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432632,"byte_end":10432707,"line_start":173,"line_end":173,"column_start":5,"column_end":80}},{"value":"/ stream becomes ready for reading, `Waker::wake` will be called on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432712,"byte_end":10432785,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ waker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432790,"byte_end":10432800,"line_start":175,"line_end":175,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432805,"byte_end":10432808,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_read_ready` or `poll_read`, only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432813,"byte_end":10432886,"line_start":177,"line_end":177,"column_start":5,"column_end":78}},{"value":"/ the `Waker` from the `Context` passed to the most recent call is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432891,"byte_end":10432959,"line_start":178,"line_end":178,"column_start":5,"column_end":73}},{"value":"/ scheduled to receive a wakeup. (However, `poll_write_ready` retains a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10432964,"byte_end":10433037,"line_start":179,"line_end":179,"column_start":5,"column_end":78}},{"value":"/ second, independent waker.)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433042,"byte_end":10433073,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433078,"byte_end":10433081,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This function is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433086,"byte_end":10433161,"line_start":182,"line_end":182,"column_start":5,"column_end":80}},{"value":"/ via [`readable`] is not feasible. Where possible, using [`readable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433166,"byte_end":10433241,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433246,"byte_end":10433314,"line_start":184,"line_end":184,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433319,"byte_end":10433322,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433327,"byte_end":10433345,"line_start":186,"line_end":186,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433350,"byte_end":10433353,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433358,"byte_end":10433383,"line_start":188,"line_end":188,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433388,"byte_end":10433391,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the unix stream is not ready for reading.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433396,"byte_end":10433462,"line_start":190,"line_end":190,"column_start":5,"column_end":71}},{"value":"/ * `Poll::Ready(Ok(()))` if the unix stream is ready for reading.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433467,"byte_end":10433535,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433540,"byte_end":10433595,"line_start":192,"line_end":192,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433600,"byte_end":10433603,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433608,"byte_end":10433620,"line_start":194,"line_end":194,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433625,"byte_end":10433628,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433633,"byte_end":10433708,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433713,"byte_end":10433716,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ [`readable`]: method@Self::readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433721,"byte_end":10433760,"line_start":198,"line_end":198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3327},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436230,"byte_end":10436238,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"try_read","qualname":"<UnixStream>::try_read","value":"pub fn try_read(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to read data from the stream into the provided buffer, returning how\n many bytes were read.","sig":null,"attributes":[{"value":"/ Try to read data from the stream into the provided buffer, returning how","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10433920,"byte_end":10433996,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ many bytes were read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434001,"byte_end":10434026,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434031,"byte_end":10434034,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Receives any pending data from the socket but does not wait for new data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434039,"byte_end":10434115,"line_start":206,"line_end":206,"column_start":5,"column_end":81}},{"value":"/ to arrive. On success, returns the number of bytes read. Because","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434120,"byte_end":10434188,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/ `try_read()` is non-blocking, the buffer does not have to be stored by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434193,"byte_end":10434267,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ the async task and can exist entirely on the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434272,"byte_end":10434327,"line_start":209,"line_end":209,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434332,"byte_end":10434335,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Usually, [`readable()`] or [`ready()`] is used with this function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434340,"byte_end":10434410,"line_start":211,"line_end":211,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434415,"byte_end":10434418,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ [`readable()`]: UnixStream::readable()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434423,"byte_end":10434465,"line_start":213,"line_end":213,"column_start":5,"column_end":47}},{"value":"/ [`ready()`]: UnixStream::ready()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434470,"byte_end":10434506,"line_start":214,"line_end":214,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434511,"byte_end":10434514,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434519,"byte_end":10434531,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434536,"byte_end":10434539,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ If data is successfully read, `Ok(n)` is returned, where `n` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434544,"byte_end":10434615,"line_start":218,"line_end":218,"column_start":5,"column_end":76}},{"value":"/ number of bytes read. `Ok(0)` indicates the stream's read half is closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434620,"byte_end":10434696,"line_start":219,"line_end":219,"column_start":5,"column_end":81}},{"value":"/ and will no longer yield data. If the stream is not ready to read data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434701,"byte_end":10434775,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ `Err(io::ErrorKind::WouldBlock)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434780,"byte_end":10434829,"line_start":221,"line_end":221,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434834,"byte_end":10434837,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434842,"byte_end":10434856,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434861,"byte_end":10434864,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434869,"byte_end":10434882,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434887,"byte_end":10434918,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434923,"byte_end":10434949,"line_start":227,"line_end":227,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434954,"byte_end":10434970,"line_start":228,"line_end":228,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434975,"byte_end":10434978,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10434983,"byte_end":10435001,"line_start":230,"line_end":230,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435006,"byte_end":10435057,"line_start":231,"line_end":231,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435062,"byte_end":10435090,"line_start":232,"line_end":232,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435095,"byte_end":10435142,"line_start":233,"line_end":233,"column_start":5,"column_end":52}},{"value":"/     let bind_path = dir.path().join(\"bind_path\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435147,"byte_end":10435200,"line_start":234,"line_end":234,"column_start":5,"column_end":58}},{"value":"/     let stream = UnixStream::connect(bind_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435205,"byte_end":10435264,"line_start":235,"line_end":235,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435269,"byte_end":10435272,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435277,"byte_end":10435291,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be readable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435296,"byte_end":10435345,"line_start":238,"line_end":238,"column_start":5,"column_end":54}},{"value":"/         stream.readable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435350,"byte_end":10435387,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435392,"byte_end":10435395,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/         // Creating the buffer **after** the `await` prevents it from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435400,"byte_end":10435473,"line_start":241,"line_end":241,"column_start":5,"column_end":78}},{"value":"/         // being stored in the async task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435478,"byte_end":10435524,"line_start":242,"line_end":242,"column_start":5,"column_end":51}},{"value":"/         let mut buf = [0; 4096];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435529,"byte_end":10435565,"line_start":243,"line_end":243,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435570,"byte_end":10435573,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/         // Try to read data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435578,"byte_end":10435648,"line_start":245,"line_end":245,"column_start":5,"column_end":75}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435653,"byte_end":10435711,"line_start":246,"line_end":246,"column_start":5,"column_end":63}},{"value":"/         match stream.try_read(&mut buf) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435716,"byte_end":10435761,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/             Ok(0) => break,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435766,"byte_end":10435797,"line_start":248,"line_end":248,"column_start":5,"column_end":36}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435802,"byte_end":10435828,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/                 println!(\"read {} bytes\", n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435833,"byte_end":10435882,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435887,"byte_end":10435904,"line_start":251,"line_end":251,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435909,"byte_end":10435981,"line_start":252,"line_end":252,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10435986,"byte_end":10436015,"line_start":253,"line_end":253,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436020,"byte_end":10436037,"line_start":254,"line_end":254,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436042,"byte_end":10436069,"line_start":255,"line_end":255,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436074,"byte_end":10436115,"line_start":256,"line_end":256,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436120,"byte_end":10436137,"line_start":257,"line_end":257,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436142,"byte_end":10436155,"line_start":258,"line_end":258,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436160,"byte_end":10436169,"line_start":259,"line_end":259,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436174,"byte_end":10436177,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436182,"byte_end":10436196,"line_start":261,"line_end":261,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436201,"byte_end":10436206,"line_start":262,"line_end":262,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436211,"byte_end":10436218,"line_start":263,"line_end":263,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437752,"byte_end":10437760,"line_start":311,"line_end":311,"column_start":18,"column_end":26},"name":"writable","qualname":"<UnixStream>::writable","value":"pub async fn writable<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for the socket to become writable.","sig":null,"attributes":[{"value":"/ Wait for the socket to become writable.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436406,"byte_end":10436449,"line_start":270,"line_end":270,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436454,"byte_end":10436457,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ This function is equivalent to `ready(Interest::WRITABLE)` and is usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436462,"byte_end":10436539,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/ paired with `try_write()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436544,"byte_end":10436574,"line_start":273,"line_end":273,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436579,"byte_end":10436582,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436587,"byte_end":10436601,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436606,"byte_end":10436609,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436614,"byte_end":10436627,"line_start":277,"line_end":277,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436632,"byte_end":10436663,"line_start":278,"line_end":278,"column_start":5,"column_end":36}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436668,"byte_end":10436694,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436699,"byte_end":10436715,"line_start":280,"line_end":280,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436720,"byte_end":10436723,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436728,"byte_end":10436746,"line_start":282,"line_end":282,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436751,"byte_end":10436802,"line_start":283,"line_end":283,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436807,"byte_end":10436835,"line_start":284,"line_end":284,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436840,"byte_end":10436887,"line_start":285,"line_end":285,"column_start":5,"column_end":52}},{"value":"/     let bind_path = dir.path().join(\"bind_path\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436892,"byte_end":10436945,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/     let stream = UnixStream::connect(bind_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10436950,"byte_end":10437009,"line_start":287,"line_end":287,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437014,"byte_end":10437017,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437022,"byte_end":10437036,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437041,"byte_end":10437090,"line_start":290,"line_end":290,"column_start":5,"column_end":54}},{"value":"/         stream.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437095,"byte_end":10437132,"line_start":291,"line_end":291,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437137,"byte_end":10437140,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/         // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437145,"byte_end":10437216,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437221,"byte_end":10437279,"line_start":294,"line_end":294,"column_start":5,"column_end":63}},{"value":"/         match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437284,"byte_end":10437336,"line_start":295,"line_end":295,"column_start":5,"column_end":57}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437341,"byte_end":10437367,"line_start":296,"line_end":296,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437372,"byte_end":10437398,"line_start":297,"line_end":297,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437403,"byte_end":10437420,"line_start":298,"line_end":298,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437425,"byte_end":10437497,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437502,"byte_end":10437531,"line_start":300,"line_end":300,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437536,"byte_end":10437553,"line_start":301,"line_end":301,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437558,"byte_end":10437585,"line_start":302,"line_end":302,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437590,"byte_end":10437631,"line_start":303,"line_end":303,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437636,"byte_end":10437653,"line_start":304,"line_end":304,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437658,"byte_end":10437671,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437676,"byte_end":10437685,"line_start":306,"line_end":306,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437690,"byte_end":10437693,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437698,"byte_end":10437712,"line_start":308,"line_end":308,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437717,"byte_end":10437722,"line_start":309,"line_end":309,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437727,"byte_end":10437734,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3332},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439125,"byte_end":10439141,"line_start":345,"line_end":345,"column_start":12,"column_end":28},"name":"poll_write_ready","qualname":"<UnixStream>::poll_write_ready","value":"pub fn poll_write_ready(&Self, &mut Context) -> Poll<io::Result<()>>","parent":null,"children":[],"decl_id":null,"docs":" Polls for write readiness.","sig":null,"attributes":[{"value":"/ Polls for write readiness.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437861,"byte_end":10437891,"line_start":316,"line_end":316,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437896,"byte_end":10437899,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ If the unix stream is not currently ready for writing, this method will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437904,"byte_end":10437979,"line_start":318,"line_end":318,"column_start":5,"column_end":80}},{"value":"/ store a clone of the `Waker` from the provided `Context`. When the unix","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10437984,"byte_end":10438059,"line_start":319,"line_end":319,"column_start":5,"column_end":80}},{"value":"/ stream becomes ready for writing, `Waker::wake` will be called on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438064,"byte_end":10438137,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ waker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438142,"byte_end":10438152,"line_start":321,"line_end":321,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438157,"byte_end":10438160,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to `poll_write_ready` or `poll_write`, only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438165,"byte_end":10438240,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/ the `Waker` from the `Context` passed to the most recent call is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438245,"byte_end":10438313,"line_start":324,"line_end":324,"column_start":5,"column_end":73}},{"value":"/ scheduled to receive a wakeup. (However, `poll_read_ready` retains a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438318,"byte_end":10438390,"line_start":325,"line_end":325,"column_start":5,"column_end":77}},{"value":"/ second, independent waker.)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438395,"byte_end":10438426,"line_start":326,"line_end":326,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438431,"byte_end":10438434,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ This function is intended for cases where creating and pinning a future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438439,"byte_end":10438514,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ via [`writable`] is not feasible. Where possible, using [`writable`] is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438519,"byte_end":10438594,"line_start":329,"line_end":329,"column_start":5,"column_end":80}},{"value":"/ preferred, as this supports polling from multiple tasks at once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438599,"byte_end":10438667,"line_start":330,"line_end":330,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438672,"byte_end":10438675,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438680,"byte_end":10438698,"line_start":332,"line_end":332,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438703,"byte_end":10438706,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ The function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438711,"byte_end":10438736,"line_start":334,"line_end":334,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438741,"byte_end":10438744,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ * `Poll::Pending` if the unix stream is not ready for writing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438749,"byte_end":10438815,"line_start":336,"line_end":336,"column_start":5,"column_end":71}},{"value":"/ * `Poll::Ready(Ok(()))` if the unix stream is ready for writing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438820,"byte_end":10438888,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ * `Poll::Ready(Err(e))` if an error is encountered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438893,"byte_end":10438948,"line_start":338,"line_end":338,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438953,"byte_end":10438956,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438961,"byte_end":10438973,"line_start":340,"line_end":340,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438978,"byte_end":10438981,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ This function may encounter any standard I/O error except `WouldBlock`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10438986,"byte_end":10439061,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439066,"byte_end":10439069,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ [`writable`]: method@Self::writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439074,"byte_end":10439113,"line_start":344,"line_end":344,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440975,"byte_end":10440984,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"try_write","qualname":"<UnixStream>::try_write","value":"pub fn try_write(&Self, &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Try to write a buffer to the stream, returning how many bytes were\n written.","sig":null,"attributes":[{"value":"/ Try to write a buffer to the stream, returning how many bytes were","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439275,"byte_end":10439345,"line_start":349,"line_end":349,"column_start":5,"column_end":75}},{"value":"/ written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439350,"byte_end":10439362,"line_start":350,"line_end":350,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439367,"byte_end":10439370,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ The function will attempt to write the entire contents of `buf`, but","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439375,"byte_end":10439447,"line_start":352,"line_end":352,"column_start":5,"column_end":77}},{"value":"/ only part of the buffer may be written.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439452,"byte_end":10439495,"line_start":353,"line_end":353,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439500,"byte_end":10439503,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This function is usually paired with `writable()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439508,"byte_end":10439562,"line_start":355,"line_end":355,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439567,"byte_end":10439570,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439575,"byte_end":10439587,"line_start":357,"line_end":357,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439592,"byte_end":10439595,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If data is successfully written, `Ok(n)` is returned, where `n` is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439600,"byte_end":10439674,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/ number of bytes written. If the stream is not ready to write data,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439679,"byte_end":10439749,"line_start":360,"line_end":360,"column_start":5,"column_end":75}},{"value":"/ `Err(io::ErrorKind::WouldBlock)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439754,"byte_end":10439803,"line_start":361,"line_end":361,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439808,"byte_end":10439811,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439816,"byte_end":10439830,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439835,"byte_end":10439838,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439843,"byte_end":10439856,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/ use tokio::net::UnixStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439861,"byte_end":10439892,"line_start":366,"line_end":366,"column_start":5,"column_end":36}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439897,"byte_end":10439923,"line_start":367,"line_end":367,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439928,"byte_end":10439944,"line_start":368,"line_end":368,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439949,"byte_end":10439952,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439957,"byte_end":10439975,"line_start":370,"line_end":370,"column_start":5,"column_end":23}},{"value":"/ async fn main() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10439980,"byte_end":10440031,"line_start":371,"line_end":371,"column_start":5,"column_end":56}},{"value":"/     // Connect to a peer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440036,"byte_end":10440064,"line_start":372,"line_end":372,"column_start":5,"column_end":33}},{"value":"/     let dir = tempfile::tempdir().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440069,"byte_end":10440116,"line_start":373,"line_end":373,"column_start":5,"column_end":52}},{"value":"/     let bind_path = dir.path().join(\"bind_path\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440121,"byte_end":10440174,"line_start":374,"line_end":374,"column_start":5,"column_end":58}},{"value":"/     let stream = UnixStream::connect(bind_path).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440179,"byte_end":10440238,"line_start":375,"line_end":375,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440243,"byte_end":10440246,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440251,"byte_end":10440265,"line_start":377,"line_end":377,"column_start":5,"column_end":19}},{"value":"/         // Wait for the socket to be writable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440270,"byte_end":10440319,"line_start":378,"line_end":378,"column_start":5,"column_end":54}},{"value":"/         stream.writable().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440324,"byte_end":10440361,"line_start":379,"line_end":379,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440366,"byte_end":10440369,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/         // Try to write data, this may still fail with `WouldBlock`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440374,"byte_end":10440445,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/         // if the readiness event is a false positive.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440450,"byte_end":10440508,"line_start":382,"line_end":382,"column_start":5,"column_end":63}},{"value":"/         match stream.try_write(b\"hello world\") {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440513,"byte_end":10440565,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"/             Ok(n) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440570,"byte_end":10440596,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/                 break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440601,"byte_end":10440627,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440632,"byte_end":10440649,"line_start":386,"line_end":386,"column_start":5,"column_end":22}},{"value":"/             Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440654,"byte_end":10440726,"line_start":387,"line_end":387,"column_start":5,"column_end":77}},{"value":"/                 continue;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440731,"byte_end":10440760,"line_start":388,"line_end":388,"column_start":5,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440765,"byte_end":10440782,"line_start":389,"line_end":389,"column_start":5,"column_end":22}},{"value":"/             Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440787,"byte_end":10440814,"line_start":390,"line_end":390,"column_start":5,"column_end":32}},{"value":"/                 return Err(e.into());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440819,"byte_end":10440860,"line_start":391,"line_end":391,"column_start":5,"column_end":46}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440865,"byte_end":10440882,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440887,"byte_end":10440900,"line_start":393,"line_end":393,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440905,"byte_end":10440914,"line_start":394,"line_end":394,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440919,"byte_end":10440922,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440927,"byte_end":10440941,"line_start":396,"line_end":396,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440946,"byte_end":10440951,"line_start":397,"line_end":397,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10440956,"byte_end":10440963,"line_start":398,"line_end":398,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441841,"byte_end":10441849,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"from_std","qualname":"<UnixStream>::from_std","value":"pub fn from_std(net::UnixStream) -> io::Result<UnixStream>","parent":null,"children":[],"decl_id":null,"docs":" Creates new `UnixStream` from a `std::os::unix::net::UnixStream`.","sig":null,"attributes":[{"value":"/ Creates new `UnixStream` from a `std::os::unix::net::UnixStream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441149,"byte_end":10441218,"line_start":405,"line_end":405,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441223,"byte_end":10441226,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This function is intended to be used to wrap a UnixStream from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441231,"byte_end":10441301,"line_start":407,"line_end":407,"column_start":5,"column_end":75}},{"value":"/ standard library in the Tokio equivalent. The conversion assumes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441306,"byte_end":10441374,"line_start":408,"line_end":408,"column_start":5,"column_end":73}},{"value":"/ nothing about the underlying stream; it is left up to the user to set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441379,"byte_end":10441452,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"/ it in non-blocking mode.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441457,"byte_end":10441485,"line_start":410,"line_end":410,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441490,"byte_end":10441493,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441498,"byte_end":10441510,"line_start":412,"line_end":412,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441515,"byte_end":10441518,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ This function panics if thread-local runtime is not set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441523,"byte_end":10441583,"line_start":414,"line_end":414,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441588,"byte_end":10441591,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ The runtime is usually set implicitly when this function is called","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441596,"byte_end":10441666,"line_start":416,"line_end":416,"column_start":5,"column_end":75}},{"value":"/ from a future driven by a tokio runtime, otherwise runtime can be set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441671,"byte_end":10441744,"line_start":417,"line_end":417,"column_start":5,"column_end":78}},{"value":"/ explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10441749,"byte_end":10441829,"line_start":418,"line_end":418,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442330,"byte_end":10442334,"line_start":431,"line_end":431,"column_start":12,"column_end":16},"name":"pair","qualname":"<UnixStream>::pair","value":"pub fn pair() -> io::Result<(UnixStream, UnixStream)>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unnamed pair of connected sockets.","sig":null,"attributes":[{"value":"/ Creates an unnamed pair of connected sockets.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442050,"byte_end":10442099,"line_start":426,"line_end":426,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442104,"byte_end":10442107,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This function will create a pair of interconnected Unix sockets for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442112,"byte_end":10442183,"line_start":428,"line_end":428,"column_start":5,"column_end":76}},{"value":"/ communicating back and forth between one another. Each socket will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442188,"byte_end":10442258,"line_start":429,"line_end":429,"column_start":5,"column_end":75}},{"value":"/ be associated with the default event loop's handle.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442263,"byte_end":10442318,"line_start":430,"line_end":430,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3339},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442777,"byte_end":10442787,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UnixStream>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the socket address of the local half of this connection.\n","sig":null,"attributes":[{"value":"/ Returns the socket address of the local half of this connection.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442697,"byte_end":10442765,"line_start":444,"line_end":444,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3340},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442960,"byte_end":10442969,"line_start":450,"line_end":450,"column_start":12,"column_end":21},"name":"peer_addr","qualname":"<UnixStream>::peer_addr","value":"pub fn peer_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the socket address of the remote half of this connection.\n","sig":null,"attributes":[{"value":"/ Returns the socket address of the remote half of this connection.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10442879,"byte_end":10442948,"line_start":449,"line_end":449,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3341},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443154,"byte_end":10443163,"line_start":455,"line_end":455,"column_start":12,"column_end":21},"name":"peer_cred","qualname":"<UnixStream>::peer_cred","value":"pub fn peer_cred(&Self) -> io::Result<UCred>","parent":null,"children":[],"decl_id":null,"docs":" Returns effective credentials of the process which called `connect` or `pair`.\n","sig":null,"attributes":[{"value":"/ Returns effective credentials of the process which called `connect` or `pair`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443060,"byte_end":10443142,"line_start":454,"line_end":454,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443299,"byte_end":10443309,"line_start":460,"line_end":460,"column_start":12,"column_end":22},"name":"take_error","qualname":"<UnixStream>::take_error","value":"pub fn take_error(&Self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `SO_ERROR` option.\n","sig":null,"attributes":[{"value":"/ Returns the value of the `SO_ERROR` option.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443240,"byte_end":10443287,"line_start":459,"line_end":459,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444285,"byte_end":10444290,"line_start":483,"line_end":483,"column_start":12,"column_end":17},"name":"split","qualname":"<UnixStream>::split","value":"pub fn split<'a>(&'a mut Self) -> (ReadHalf, WriteHalf)","parent":null,"children":[],"decl_id":null,"docs":" Split a `UnixStream` into a read half and a write half, which can be used\n to read and write the stream concurrently.","sig":null,"attributes":[{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443913,"byte_end":10443949,"line_start":475,"line_end":475,"column_start":5,"column_end":41}},{"value":"/ Split a `UnixStream` into a read half and a write half, which can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10443954,"byte_end":10444031,"line_start":476,"line_end":476,"column_start":5,"column_end":82}},{"value":"/ to read and write the stream concurrently.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444036,"byte_end":10444082,"line_start":477,"line_end":477,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444087,"byte_end":10444090,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ This method is more efficient than [`into_split`], but the halves cannot be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444095,"byte_end":10444174,"line_start":479,"line_end":479,"column_start":5,"column_end":84}},{"value":"/ moved into independently spawned tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444179,"byte_end":10444222,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444227,"byte_end":10444230,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ [`into_split`]: Self::into_split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444235,"byte_end":10444273,"line_start":482,"line_end":482,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444932,"byte_end":10444942,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"into_split","qualname":"<UnixStream>::into_split","value":"pub fn into_split(Self) -> (OwnedReadHalf, OwnedWriteHalf)","parent":null,"children":[],"decl_id":null,"docs":" Splits a `UnixStream` into a read half and a write half, which can be used\n to read and write the stream concurrently.","sig":null,"attributes":[{"value":"/ Splits a `UnixStream` into a read half and a write half, which can be used","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444375,"byte_end":10444453,"line_start":487,"line_end":487,"column_start":5,"column_end":83}},{"value":"/ to read and write the stream concurrently.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444458,"byte_end":10444504,"line_start":488,"line_end":488,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444509,"byte_end":10444512,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Unlike [`split`], the owned halves can be moved to separate tasks, however","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444517,"byte_end":10444595,"line_start":490,"line_end":490,"column_start":5,"column_end":83}},{"value":"/ this comes at the cost of a heap allocation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444600,"byte_end":10444648,"line_start":491,"line_end":491,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444653,"byte_end":10444656,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dropping the write half will shut down the write half of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444661,"byte_end":10444735,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/ stream. This is equivalent to calling [`shutdown()`] on the `UnixStream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444740,"byte_end":10444817,"line_start":494,"line_end":494,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444822,"byte_end":10444825,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ [`split`]: Self::split()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444830,"byte_end":10444858,"line_start":496,"line_end":496,"column_start":5,"column_end":33}},{"value":"/ [`shutdown()`]: fn@crate::io::AsyncWriteExt::shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10444863,"byte_end":10444920,"line_start":497,"line_end":497,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3433},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10447981,"byte_end":10447986,"line_start":5,"line_end":5,"column_start":12,"column_end":17},"name":"UCred","qualname":"::net::unix::ucred::UCred","value":"UCred {  }","parent":null,"children":[{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436}],"decl_id":null,"docs":" Credentials of a process\n","sig":null,"attributes":[{"value":"/ Credentials of a process","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10447890,"byte_end":10447918,"line_start":3,"line_end":3,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3373},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448230,"byte_end":10448233,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"uid","qualname":"<UCred>::uid","value":"pub fn uid(&Self) -> uid_t","parent":null,"children":[],"decl_id":null,"docs":" Gets UID (user ID) of the process.\n","sig":null,"attributes":[{"value":"/ Gets UID (user ID) of the process.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448180,"byte_end":10448218,"line_start":15,"line_end":15,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448331,"byte_end":10448334,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"gid","qualname":"<UCred>::gid","value":"pub fn gid(&Self) -> gid_t","parent":null,"children":[],"decl_id":null,"docs":" Gets GID (group ID) of the process.\n","sig":null,"attributes":[{"value":"/ Gets GID (group ID) of the process.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448280,"byte_end":10448319,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448588,"byte_end":10448591,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pid","qualname":"<UCred>::pid","value":"pub fn pid(&Self) -> Option<pid_t>","parent":null,"children":[],"decl_id":null,"docs":" Gets PID (process ID) of the process.","sig":null,"attributes":[{"value":"/ Gets PID (process ID) of the process.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448381,"byte_end":10448422,"line_start":25,"line_end":25,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448427,"byte_end":10448430,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This is only implemented under Linux, Android, iOS, macOS, Solaris and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448435,"byte_end":10448509,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ Illumos. On other plaforms this will always return `None`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448514,"byte_end":10448576,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":582},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":101724,"byte_end":101730,"line_start":50,"line_end":50,"column_start":10,"column_end":16},"name":"Unpark","qualname":"::park::Park::Unpark","value":"type Unpark: Unpark;","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Unpark handle type for the `Park` implementation.\n","sig":null,"attributes":[{"value":"/ Unpark handle type for the `Park` implementation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":101661,"byte_end":101714,"line_start":49,"line_end":49,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":583},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":101783,"byte_end":101788,"line_start":53,"line_end":53,"column_start":10,"column_end":15},"name":"Error","qualname":"::park::Park::Error","value":"type Error;","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Error returned by `park`\n","sig":null,"attributes":[{"value":"/ Error returned by `park`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":101745,"byte_end":101773,"line_start":52,"line_end":52,"column_start":5,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":3524},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"runtime","qualname":"::runtime","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","parent":null,"children":[{"krate":0,"index":3525},{"krate":0,"index":3540},{"krate":0,"index":4030},{"krate":0,"index":4148},{"krate":0,"index":4149},{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4320},{"krate":0,"index":4321},{"krate":0,"index":4331},{"krate":0,"index":4355},{"krate":0,"index":4356},{"krate":0,"index":4387},{"krate":0,"index":4388},{"krate":0,"index":4389},{"krate":0,"index":4390},{"krate":0,"index":4393},{"krate":0,"index":4488},{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4504},{"krate":0,"index":4508},{"krate":0,"index":4510},{"krate":0,"index":4514},{"krate":0,"index":4491},{"krate":0,"index":4492}],"decl_id":null,"docs":" The Tokio runtime.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}},{"value":"/ The Tokio runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455508,"byte_end":10455530,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455531,"byte_end":10455534,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Unlike other Rust programs, asynchronous applications require runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455535,"byte_end":10455608,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ support. In particular, the following runtime services are necessary:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455609,"byte_end":10455682,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455683,"byte_end":10455686,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ * An **I/O event loop**, called the driver, which drives I/O resources and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455687,"byte_end":10455765,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/   dispatches I/O events to tasks that depend on them.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455766,"byte_end":10455823,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/ * A **scheduler** to execute [tasks] that use these I/O resources.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455824,"byte_end":10455894,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/ * A **timer** for scheduling work to run after a set period of time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455895,"byte_end":10455967,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455968,"byte_end":10455971,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Tokio's [`Runtime`] bundles all of these services as a single type, allowing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10455972,"byte_end":10456052,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ them to be started, shut down, and configured together. However, often it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456053,"byte_end":10456133,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ not required to configure a [`Runtime`] manually, and user may just use the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456134,"byte_end":10456213,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ [`tokio::main`] attribute macro, which creates a [`Runtime`] under the hood.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456214,"byte_end":10456294,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456295,"byte_end":10456298,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456299,"byte_end":10456310,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456311,"byte_end":10456314,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ When no fine tuning is required, the [`tokio::main`] attribute macro can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456315,"byte_end":10456394,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ used.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456395,"byte_end":10456404,"line_start":19,"line_end":19,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456405,"byte_end":10456408,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456409,"byte_end":10456422,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456423,"byte_end":10456455,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"/ use tokio::io::{AsyncReadExt, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456456,"byte_end":10456505,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456506,"byte_end":10456509,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456510,"byte_end":10456528,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456529,"byte_end":10456592,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/     let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456593,"byte_end":10456659,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456660,"byte_end":10456663,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456664,"byte_end":10456678,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/         let (mut socket, _) = listener.accept().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456679,"byte_end":10456738,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456739,"byte_end":10456742,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456743,"byte_end":10456780,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/             let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456781,"byte_end":10456821,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456822,"byte_end":10456825,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/             // In a loop, read data from the socket and write the data back.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456826,"byte_end":10456906,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/             loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456907,"byte_end":10456929,"line_start":36,"line_end":36,"column_start":1,"column_end":23}},{"value":"/                 let n = match socket.read(&mut buf).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456930,"byte_end":10456993,"line_start":37,"line_end":37,"column_start":1,"column_end":64}},{"value":"/                     // socket closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10456994,"byte_end":10457034,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/                     Ok(n) if n == 0 => return,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457035,"byte_end":10457085,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"/                     Ok(n) => n,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457086,"byte_end":10457121,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/                     Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457122,"byte_end":10457157,"line_start":41,"line_end":41,"column_start":1,"column_end":36}},{"value":"/                         println!(\"failed to read from socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457158,"byte_end":10457240,"line_start":42,"line_end":42,"column_start":1,"column_end":83}},{"value":"/                         return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457241,"byte_end":10457276,"line_start":43,"line_end":43,"column_start":1,"column_end":36}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457277,"byte_end":10457302,"line_start":44,"line_end":44,"column_start":1,"column_end":26}},{"value":"/                 };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457303,"byte_end":10457325,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457326,"byte_end":10457329,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/                 // Write the data back","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457330,"byte_end":10457372,"line_start":47,"line_end":47,"column_start":1,"column_end":43}},{"value":"/                 if let Err(e) = socket.write_all(&buf[0..n]).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457373,"byte_end":10457445,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/                     println!(\"failed to write to socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457446,"byte_end":10457523,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/                     return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457524,"byte_end":10457555,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457556,"byte_end":10457577,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457578,"byte_end":10457595,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457596,"byte_end":10457611,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457612,"byte_end":10457621,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457622,"byte_end":10457627,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457628,"byte_end":10457635,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457636,"byte_end":10457639,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ From within the context of the runtime, additional tasks are spawned using","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457640,"byte_end":10457718,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ the [`tokio::spawn`] function. Futures spawned using this function will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457719,"byte_end":10457797,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ executed on the same thread pool used by the [`Runtime`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457798,"byte_end":10457859,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457860,"byte_end":10457863,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ A [`Runtime`] instance can also be used directly.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457864,"byte_end":10457917,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457918,"byte_end":10457921,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457922,"byte_end":10457935,"line_start":64,"line_end":64,"column_start":1,"column_end":14}},{"value":"/ use tokio::net::TcpListener;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457936,"byte_end":10457968,"line_start":65,"line_end":65,"column_start":1,"column_end":33}},{"value":"/ use tokio::io::{AsyncReadExt, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10457969,"byte_end":10458018,"line_start":66,"line_end":66,"column_start":1,"column_end":50}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458019,"byte_end":10458051,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458052,"byte_end":10458055,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458056,"byte_end":10458113,"line_start":69,"line_end":69,"column_start":1,"column_end":58}},{"value":"/     // Create the runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458114,"byte_end":10458143,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/     let rt  = Runtime::new()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458144,"byte_end":10458178,"line_start":71,"line_end":71,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458179,"byte_end":10458182,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/     // Spawn the root task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458183,"byte_end":10458213,"line_start":73,"line_end":73,"column_start":1,"column_end":31}},{"value":"/     rt.block_on(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458214,"byte_end":10458241,"line_start":74,"line_end":74,"column_start":1,"column_end":28}},{"value":"/         let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458242,"byte_end":10458312,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458313,"byte_end":10458316,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/         loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458317,"byte_end":10458335,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/             let (mut socket, _) = listener.accept().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458336,"byte_end":10458399,"line_start":78,"line_end":78,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458400,"byte_end":10458403,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/             tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458404,"byte_end":10458445,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/                 let mut buf = [0; 1024];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458446,"byte_end":10458490,"line_start":81,"line_end":81,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458491,"byte_end":10458494,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/                 // In a loop, read data from the socket and write the data back.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458495,"byte_end":10458579,"line_start":83,"line_end":83,"column_start":1,"column_end":85}},{"value":"/                 loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458580,"byte_end":10458606,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/                     let n = match socket.read(&mut buf).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458607,"byte_end":10458674,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/                         // socket closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458675,"byte_end":10458719,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/                         Ok(n) if n == 0 => return,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458720,"byte_end":10458774,"line_start":87,"line_end":87,"column_start":1,"column_end":55}},{"value":"/                         Ok(n) => n,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458775,"byte_end":10458814,"line_start":88,"line_end":88,"column_start":1,"column_end":40}},{"value":"/                         Err(e) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458815,"byte_end":10458854,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"/                             println!(\"failed to read from socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458855,"byte_end":10458941,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/                             return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458942,"byte_end":10458981,"line_start":91,"line_end":91,"column_start":1,"column_end":40}},{"value":"/                         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10458982,"byte_end":10459011,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/                     };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459012,"byte_end":10459038,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459039,"byte_end":10459042,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/                     // Write the data back","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459043,"byte_end":10459089,"line_start":95,"line_end":95,"column_start":1,"column_end":47}},{"value":"/                     if let Err(e) = socket.write_all(&buf[0..n]).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459090,"byte_end":10459166,"line_start":96,"line_end":96,"column_start":1,"column_end":77}},{"value":"/                         println!(\"failed to write to socket; err = {:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459167,"byte_end":10459248,"line_start":97,"line_end":97,"column_start":1,"column_end":82}},{"value":"/                         return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459249,"byte_end":10459284,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459285,"byte_end":10459310,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459311,"byte_end":10459332,"line_start":100,"line_end":100,"column_start":1,"column_end":22}},{"value":"/             });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459333,"byte_end":10459352,"line_start":101,"line_end":101,"column_start":1,"column_end":20}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459353,"byte_end":10459366,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/     })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459367,"byte_end":10459377,"line_start":103,"line_end":103,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459378,"byte_end":10459383,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459384,"byte_end":10459391,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459392,"byte_end":10459395,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ## Runtime Configurations","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459396,"byte_end":10459425,"line_start":107,"line_end":107,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459426,"byte_end":10459429,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Tokio provides multiple task scheduling strategies, suitable for different","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459430,"byte_end":10459508,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ applications. The [runtime builder] or `#[tokio::main]` attribute may be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459509,"byte_end":10459585,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ used to select which scheduler to use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459586,"byte_end":10459628,"line_start":111,"line_end":111,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459629,"byte_end":10459632,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ #### Multi-Thread Scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459633,"byte_end":10459664,"line_start":113,"line_end":113,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459665,"byte_end":10459668,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ The multi-thread scheduler executes futures on a _thread pool_, using a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459669,"byte_end":10459744,"line_start":115,"line_end":115,"column_start":1,"column_end":76}},{"value":"/ work-stealing strategy. By default, it will start a worker thread for each","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459745,"byte_end":10459823,"line_start":116,"line_end":116,"column_start":1,"column_end":79}},{"value":"/ CPU core available on the system. This tends to be the ideal configurations","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459824,"byte_end":10459903,"line_start":117,"line_end":117,"column_start":1,"column_end":80}},{"value":"/ for most applications. The multi-thread scheduler requires the `rt-multi-thread`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459904,"byte_end":10459988,"line_start":118,"line_end":118,"column_start":1,"column_end":85}},{"value":"/ feature flag, and is selected by default:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10459989,"byte_end":10460034,"line_start":119,"line_end":119,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460035,"byte_end":10460042,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460043,"byte_end":10460066,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460067,"byte_end":10460070,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460071,"byte_end":10460130,"line_start":123,"line_end":123,"column_start":1,"column_end":60}},{"value":"/ let threaded_rt = runtime::Runtime::new()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460131,"byte_end":10460178,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460179,"byte_end":10460193,"line_start":125,"line_end":125,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460194,"byte_end":10460201,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460202,"byte_end":10460205,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Most applications should use the multi-thread scheduler, except in some","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460206,"byte_end":10460281,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ niche use-cases, such as when running only a single thread is required.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460282,"byte_end":10460357,"line_start":129,"line_end":129,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460358,"byte_end":10460361,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ #### Current-Thread Scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460362,"byte_end":10460395,"line_start":131,"line_end":131,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460396,"byte_end":10460399,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ The current-thread scheduler provides a _single-threaded_ future executor.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460400,"byte_end":10460478,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ All tasks will be created and executed on the current thread. This requires","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460479,"byte_end":10460558,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/ the `rt` feature flag.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460559,"byte_end":10460585,"line_start":135,"line_end":135,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460586,"byte_end":10460593,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460594,"byte_end":10460617,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460618,"byte_end":10460621,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460622,"byte_end":10460681,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ let basic_rt = runtime::Builder::new_current_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460682,"byte_end":10460739,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"/     .build()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460740,"byte_end":10460758,"line_start":141,"line_end":141,"column_start":1,"column_end":19}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460759,"byte_end":10460773,"line_start":142,"line_end":142,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460774,"byte_end":10460781,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460782,"byte_end":10460785,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ #### Resource drivers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460786,"byte_end":10460811,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460812,"byte_end":10460815,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ When configuring a runtime by hand, no resource drivers are enabled by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460816,"byte_end":10460890,"line_start":147,"line_end":147,"column_start":1,"column_end":75}},{"value":"/ default. In this case, attempting to use networking types or time types will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460891,"byte_end":10460971,"line_start":148,"line_end":148,"column_start":1,"column_end":81}},{"value":"/ fail. In order to enable these types, the resource drivers must be enabled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10460972,"byte_end":10461051,"line_start":149,"line_end":149,"column_start":1,"column_end":80}},{"value":"/ This is done with [`Builder::enable_io`] and [`Builder::enable_time`]. As a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461052,"byte_end":10461131,"line_start":150,"line_end":150,"column_start":1,"column_end":80}},{"value":"/ shorthand, [`Builder::enable_all`] enables both resource drivers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461132,"byte_end":10461201,"line_start":151,"line_end":151,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461202,"byte_end":10461205,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ ## Lifetime of spawned threads","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461206,"byte_end":10461240,"line_start":153,"line_end":153,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461241,"byte_end":10461244,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ The runtime may spawn threads depending on its configuration and usage. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461245,"byte_end":10461324,"line_start":155,"line_end":155,"column_start":1,"column_end":80}},{"value":"/ multi-thread scheduler spawns threads to schedule tasks and for `spawn_blocking`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461325,"byte_end":10461409,"line_start":156,"line_end":156,"column_start":1,"column_end":85}},{"value":"/ calls.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461410,"byte_end":10461420,"line_start":157,"line_end":157,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461421,"byte_end":10461424,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ While the `Runtime` is active, threads may shutdown after periods of being","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461425,"byte_end":10461503,"line_start":159,"line_end":159,"column_start":1,"column_end":79}},{"value":"/ idle. Once `Runtime` is dropped, all runtime threads are forcibly shutdown.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461504,"byte_end":10461583,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ Any tasks that have not yet completed will be dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461584,"byte_end":10461642,"line_start":161,"line_end":161,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461643,"byte_end":10461646,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [tasks]: crate::task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461647,"byte_end":10461671,"line_start":163,"line_end":163,"column_start":1,"column_end":25}},{"value":"/ [`Runtime`]: Runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461672,"byte_end":10461696,"line_start":164,"line_end":164,"column_start":1,"column_end":25}},{"value":"/ [`tokio::spawn`]: crate::spawn","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461697,"byte_end":10461731,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/ [`tokio::main`]: ../attr.main.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461732,"byte_end":10461770,"line_start":166,"line_end":166,"column_start":1,"column_end":39}},{"value":"/ [runtime builder]: crate::runtime::Builder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461771,"byte_end":10461817,"line_start":167,"line_end":167,"column_start":1,"column_end":47}},{"value":"/ [`Runtime::new`]: crate::runtime::Runtime::new","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461818,"byte_end":10461868,"line_start":168,"line_end":168,"column_start":1,"column_end":51}},{"value":"/ [`Builder::basic_scheduler`]: crate::runtime::Builder::basic_scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461869,"byte_end":10461943,"line_start":169,"line_end":169,"column_start":1,"column_end":75}},{"value":"/ [`Builder::threaded_scheduler`]: crate::runtime::Builder::threaded_scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10461944,"byte_end":10462024,"line_start":170,"line_end":170,"column_start":1,"column_end":81}},{"value":"/ [`Builder::enable_io`]: crate::runtime::Builder::enable_io","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462025,"byte_end":10462087,"line_start":171,"line_end":171,"column_start":1,"column_end":63}},{"value":"/ [`Builder::enable_time`]: crate::runtime::Builder::enable_time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462088,"byte_end":10462154,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"/ [`Builder::enable_all`]: crate::runtime::Builder::enable_all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10462155,"byte_end":10462219,"line_start":173,"line_end":173,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":4012},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496414,"byte_end":10496423,"line_start":8,"line_end":8,"column_start":16,"column_end":25},"name":"JoinError","qualname":"::runtime::task::error::JoinError","value":"JoinError {  }","parent":null,"children":[{"krate":0,"index":4013}],"decl_id":null,"docs":" Task failed to execute to completion.\n","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496912,"byte_end":10496924,"line_start":32,"line_end":32,"column_start":12,"column_end":24},"name":"is_cancelled","qualname":"<JoinError>::is_cancelled","value":"pub fn is_cancelled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the error was caused by the task being cancelled\n","sig":null,"attributes":[{"value":"/ Returns true if the error was caused by the task being cancelled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496832,"byte_end":10496900,"line_start":31,"line_end":31,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3635},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497378,"byte_end":10497386,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"is_panic","qualname":"<JoinError>::is_panic","value":"pub fn is_panic(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the error was caused by the task panicking","sig":null,"attributes":[{"value":"/ Returns true if the error was caused by the task panicking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496999,"byte_end":10497061,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497066,"byte_end":10497069,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497074,"byte_end":10497088,"line_start":38,"line_end":38,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497093,"byte_end":10497096,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497101,"byte_end":10497108,"line_start":40,"line_end":40,"column_start":5,"column_end":12}},{"value":"/ use std::panic;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497113,"byte_end":10497132,"line_start":41,"line_end":41,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497137,"byte_end":10497140,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497145,"byte_end":10497163,"line_start":43,"line_end":43,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497168,"byte_end":10497189,"line_start":44,"line_end":44,"column_start":5,"column_end":26}},{"value":"/     let err = tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497194,"byte_end":10497232,"line_start":45,"line_end":45,"column_start":5,"column_end":43}},{"value":"/         panic!(\"boom\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497237,"byte_end":10497264,"line_start":46,"line_end":46,"column_start":5,"column_end":32}},{"value":"/     }).await.unwrap_err();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497269,"byte_end":10497299,"line_start":47,"line_end":47,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497304,"byte_end":10497307,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/     assert!(err.is_panic());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497312,"byte_end":10497344,"line_start":49,"line_end":49,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497349,"byte_end":10497354,"line_start":50,"line_end":50,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497359,"byte_end":10497366,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498241,"byte_end":10498251,"line_start":81,"line_end":81,"column_start":12,"column_end":22},"name":"into_panic","qualname":"<JoinError>::into_panic","value":"pub fn into_panic(Self) -> Box<Any + Send + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the join error, returning the object with which the task panicked.","sig":null,"attributes":[{"value":"/ Consumes the join error, returning the object with which the task panicked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497460,"byte_end":10497539,"line_start":56,"line_end":56,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497544,"byte_end":10497547,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497552,"byte_end":10497564,"line_start":58,"line_end":58,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497569,"byte_end":10497572,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ `into_panic()` panics if the `Error` does not represent the underlying","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497577,"byte_end":10497651,"line_start":60,"line_end":60,"column_start":5,"column_end":79}},{"value":"/ task terminating with a panic. Use `is_panic` to check the error reason","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497656,"byte_end":10497731,"line_start":61,"line_end":61,"column_start":5,"column_end":80}},{"value":"/ or `try_into_panic` for a variant that does not panic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497736,"byte_end":10497794,"line_start":62,"line_end":62,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497799,"byte_end":10497802,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497807,"byte_end":10497821,"line_start":64,"line_end":64,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497826,"byte_end":10497829,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497834,"byte_end":10497853,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ use std::panic;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497858,"byte_end":10497877,"line_start":67,"line_end":67,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497882,"byte_end":10497885,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497890,"byte_end":10497908,"line_start":69,"line_end":69,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497913,"byte_end":10497934,"line_start":70,"line_end":70,"column_start":5,"column_end":26}},{"value":"/     let err = tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497939,"byte_end":10497977,"line_start":71,"line_end":71,"column_start":5,"column_end":43}},{"value":"/         panic!(\"boom\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10497982,"byte_end":10498009,"line_start":72,"line_end":72,"column_start":5,"column_end":32}},{"value":"/     }).await.unwrap_err();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498014,"byte_end":10498044,"line_start":73,"line_end":73,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498049,"byte_end":10498052,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/     if err.is_panic() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498057,"byte_end":10498084,"line_start":75,"line_end":75,"column_start":5,"column_end":32}},{"value":"/         // Resume the panic on the main task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498089,"byte_end":10498137,"line_start":76,"line_end":76,"column_start":5,"column_end":53}},{"value":"/         panic::resume_unwind(err.into_panic());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498142,"byte_end":10498193,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498198,"byte_end":10498207,"line_start":78,"line_end":78,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498212,"byte_end":10498217,"line_start":79,"line_end":79,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498222,"byte_end":10498229,"line_start":80,"line_end":80,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3637},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499016,"byte_end":10499030,"line_start":107,"line_end":107,"column_start":12,"column_end":26},"name":"try_into_panic","qualname":"<JoinError>::try_into_panic","value":"pub fn try_into_panic(Self) -> Result<Box<Any + Send + 'static>, JoinError>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the join error, returning the object with which the task\n panicked if the task terminated due to a panic. Otherwise, `self` is\n returned.","sig":null,"attributes":[{"value":"/ Consumes the join error, returning the object with which the task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498392,"byte_end":10498461,"line_start":86,"line_end":86,"column_start":5,"column_end":74}},{"value":"/ panicked if the task terminated due to a panic. Otherwise, `self` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498466,"byte_end":10498538,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498543,"byte_end":10498556,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498561,"byte_end":10498564,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498569,"byte_end":10498583,"line_start":90,"line_end":90,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498588,"byte_end":10498591,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498596,"byte_end":10498615,"line_start":92,"line_end":92,"column_start":5,"column_end":24}},{"value":"/ use std::panic;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498620,"byte_end":10498639,"line_start":93,"line_end":93,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498644,"byte_end":10498647,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498652,"byte_end":10498670,"line_start":95,"line_end":95,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498675,"byte_end":10498696,"line_start":96,"line_end":96,"column_start":5,"column_end":26}},{"value":"/     let err = tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498701,"byte_end":10498739,"line_start":97,"line_end":97,"column_start":5,"column_end":43}},{"value":"/         panic!(\"boom\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498744,"byte_end":10498771,"line_start":98,"line_end":98,"column_start":5,"column_end":32}},{"value":"/     }).await.unwrap_err();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498776,"byte_end":10498806,"line_start":99,"line_end":99,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498811,"byte_end":10498814,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/     if let Ok(reason) = err.try_into_panic() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498819,"byte_end":10498869,"line_start":101,"line_end":101,"column_start":5,"column_end":55}},{"value":"/         // Resume the panic on the main task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498874,"byte_end":10498922,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/         panic::resume_unwind(reason);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498927,"byte_end":10498968,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498973,"byte_end":10498982,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498987,"byte_end":10498992,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10498997,"byte_end":10499004,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4014},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517347,"byte_end":10517357,"line_start":144,"line_end":144,"column_start":16,"column_end":26},"name":"JoinHandle","qualname":"::runtime::task::join::JoinHandle","value":"JoinHandle {  }","parent":null,"children":[{"krate":0,"index":4016},{"krate":0,"index":4017}],"decl_id":null,"docs":" An owned permission to join on a task (await its termination).","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3729},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518660,"byte_end":10518665,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"abort","qualname":"<JoinHandle<T>>::abort","value":"pub fn abort(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Abort the task associated with the handle.","sig":null,"attributes":[{"value":"/ Abort the task associated with the handle.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517703,"byte_end":10517749,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517754,"byte_end":10517757,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Awaiting a cancelled task might complete as usual if the task was","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517762,"byte_end":10517831,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/ already completed at the time it was cancelled, but most likely it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517836,"byte_end":10517906,"line_start":164,"line_end":164,"column_start":5,"column_end":75}},{"value":"/ will complete with a `Err(JoinError::Cancelled)`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517911,"byte_end":10517964,"line_start":165,"line_end":165,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517969,"byte_end":10517972,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517977,"byte_end":10517988,"line_start":167,"line_end":167,"column_start":5,"column_end":16}},{"value":"/ use tokio::time;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517993,"byte_end":10518013,"line_start":168,"line_end":168,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518018,"byte_end":10518021,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518026,"byte_end":10518044,"line_start":170,"line_end":170,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518049,"byte_end":10518070,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/    let mut handles = Vec::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518075,"byte_end":10518111,"line_start":172,"line_end":172,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518116,"byte_end":10518119,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/    handles.push(tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518124,"byte_end":10518164,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/       time::sleep(time::Duration::from_secs(10)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518169,"byte_end":10518228,"line_start":175,"line_end":175,"column_start":5,"column_end":64}},{"value":"/       true","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518233,"byte_end":10518247,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/    }));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518252,"byte_end":10518263,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518268,"byte_end":10518271,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/    handles.push(tokio::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518276,"byte_end":10518316,"line_start":179,"line_end":179,"column_start":5,"column_end":45}},{"value":"/       time::sleep(time::Duration::from_secs(10)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518321,"byte_end":10518380,"line_start":180,"line_end":180,"column_start":5,"column_end":64}},{"value":"/       false","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518385,"byte_end":10518400,"line_start":181,"line_end":181,"column_start":5,"column_end":20}},{"value":"/    }));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518405,"byte_end":10518416,"line_start":182,"line_end":182,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518421,"byte_end":10518424,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/    for handle in &handles {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518429,"byte_end":10518460,"line_start":184,"line_end":184,"column_start":5,"column_end":36}},{"value":"/        handle.abort();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518465,"byte_end":10518491,"line_start":185,"line_end":185,"column_start":5,"column_end":31}},{"value":"/    }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518496,"byte_end":10518504,"line_start":186,"line_end":186,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518509,"byte_end":10518512,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/    for handle in handles {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518517,"byte_end":10518547,"line_start":188,"line_end":188,"column_start":5,"column_end":35}},{"value":"/        assert!(handle.await.unwrap_err().is_cancelled());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518552,"byte_end":10518613,"line_start":189,"line_end":189,"column_start":5,"column_end":66}},{"value":"/    }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518618,"byte_end":10518626,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518631,"byte_end":10518636,"line_start":191,"line_end":191,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518641,"byte_end":10518648,"line_start":192,"line_end":192,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4277},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570387,"byte_end":10570394,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"Builder","qualname":"::runtime::builder::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":4278},{"krate":0,"index":4279},{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4284},{"krate":0,"index":4285},{"krate":0,"index":4286},{"krate":0,"index":4287}],"decl_id":null,"docs":" Builds Tokio Runtime with custom configuration values.","sig":null,"attributes":[{"value":"/ Builds Tokio Runtime with custom configuration values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569431,"byte_end":10569489,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569490,"byte_end":10569493,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Methods can be chained in order to set the configuration values. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569494,"byte_end":10569566,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ Runtime is constructed by calling [`build`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569567,"byte_end":10569615,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569616,"byte_end":10569619,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ New instances of `Builder` are obtained via [`Builder::new_multi_thread`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569620,"byte_end":10569697,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ or [`Builder::new_current_thread`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569698,"byte_end":10569737,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569738,"byte_end":10569741,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See function level documentation for details on the various configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569742,"byte_end":10569819,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ settings.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569820,"byte_end":10569833,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569834,"byte_end":10569837,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`build`]: method@Self::build","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569838,"byte_end":10569871,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"/ [`Builder::new_multi_thread`]: method@Self::new_multi_thread","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569872,"byte_end":10569936,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/ [`Builder::new_current_thread`]: method@Self::new_current_thread","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10569937,"byte_end":10570005,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570006,"byte_end":10570009,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570010,"byte_end":10570024,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570025,"byte_end":10570028,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570029,"byte_end":10570036,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use tokio::runtime::Builder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570037,"byte_end":10570069,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570070,"byte_end":10570073,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570074,"byte_end":10570089,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/     // build runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570090,"byte_end":10570114,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/     let runtime = Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570115,"byte_end":10570164,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/         .worker_threads(4)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570165,"byte_end":10570195,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/         .thread_name(\"my-custom-name\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570196,"byte_end":10570238,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/         .thread_stack_size(3 * 1024 * 1024)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570239,"byte_end":10570286,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/         .build()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570287,"byte_end":10570307,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/         .unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570308,"byte_end":10570330,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570331,"byte_end":10570334,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     // use runtime ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570335,"byte_end":10570361,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570362,"byte_end":10570367,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10570368,"byte_end":10570375,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4293},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571676,"byte_end":10571694,"line_start":86,"line_end":86,"column_start":12,"column_end":30},"name":"new_current_thread","qualname":"<Builder>::new_current_thread","value":"pub fn new_current_thread() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Returns a new builder with the current thread scheduler selected.","sig":null,"attributes":[{"value":"/ Returns a new builder with the current thread scheduler selected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571521,"byte_end":10571590,"line_start":83,"line_end":83,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571595,"byte_end":10571598,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Configuration methods can be chained on the return value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571603,"byte_end":10571664,"line_start":85,"line_end":85,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4296},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573488,"byte_end":10573498,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"enable_all","qualname":"<Builder>::enable_all","value":"pub fn enable_all(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enables both I/O and time drivers.","sig":null,"attributes":[{"value":"/ Enables both I/O and time drivers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10572995,"byte_end":10573033,"line_start":132,"line_end":132,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573038,"byte_end":10573041,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Doing this is a shorthand for calling `enable_io` and `enable_time`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573046,"byte_end":10573117,"line_start":134,"line_end":134,"column_start":5,"column_end":76}},{"value":"/ individually. If additional components are added to Tokio in the future,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573122,"byte_end":10573198,"line_start":135,"line_end":135,"column_start":5,"column_end":81}},{"value":"/ `enable_all` will include these future components.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573203,"byte_end":10573257,"line_start":136,"line_end":136,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573262,"byte_end":10573265,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573270,"byte_end":10573284,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573289,"byte_end":10573292,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573297,"byte_end":10573304,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573309,"byte_end":10573332,"line_start":141,"line_end":141,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573337,"byte_end":10573340,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573345,"byte_end":10573394,"line_start":143,"line_end":143,"column_start":5,"column_end":54}},{"value":"/     .enable_all()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573399,"byte_end":10573420,"line_start":144,"line_end":144,"column_start":5,"column_end":26}},{"value":"/     .build()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573425,"byte_end":10573441,"line_start":145,"line_end":145,"column_start":5,"column_end":21}},{"value":"/     .unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573446,"byte_end":10573464,"line_start":146,"line_end":146,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573469,"byte_end":10573476,"line_start":147,"line_end":147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4297},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575189,"byte_end":10575203,"line_start":206,"line_end":206,"column_start":12,"column_end":26},"name":"worker_threads","qualname":"<Builder>::worker_threads","value":"pub fn worker_threads(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of worker threads the `Runtime` will use.","sig":null,"attributes":[{"value":"/ Sets the number of worker threads the `Runtime` will use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573726,"byte_end":10573787,"line_start":157,"line_end":157,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573792,"byte_end":10573795,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This should be a number between 0 and 32,768 though it is advised to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573800,"byte_end":10573872,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ keep this value on the smaller side.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573877,"byte_end":10573917,"line_start":160,"line_end":160,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573922,"byte_end":10573925,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Default","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573930,"byte_end":10573943,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573948,"byte_end":10573951,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The default value is the number of cores available to the system.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10573956,"byte_end":10574025,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574030,"byte_end":10574033,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574038,"byte_end":10574049,"line_start":166,"line_end":166,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574054,"byte_end":10574057,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ When using the `current_thread` runtime this method will panic, since","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574062,"byte_end":10574135,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ those variants do not allow setting worker thread counts.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574140,"byte_end":10574201,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574206,"byte_end":10574209,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574214,"byte_end":10574217,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574222,"byte_end":10574236,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574241,"byte_end":10574244,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ## Multi threaded runtime with 4 threads","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574249,"byte_end":10574293,"line_start":174,"line_end":174,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574298,"byte_end":10574301,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574306,"byte_end":10574313,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574318,"byte_end":10574341,"line_start":177,"line_end":177,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574346,"byte_end":10574349,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // This will spawn a work-stealing runtime with 4 worker threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574354,"byte_end":10574423,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574428,"byte_end":10574477,"line_start":180,"line_end":180,"column_start":5,"column_end":54}},{"value":"/     .worker_threads(4)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574482,"byte_end":10574508,"line_start":181,"line_end":181,"column_start":5,"column_end":31}},{"value":"/     .build()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574513,"byte_end":10574529,"line_start":182,"line_end":182,"column_start":5,"column_end":21}},{"value":"/     .unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574534,"byte_end":10574552,"line_start":183,"line_end":183,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574557,"byte_end":10574560,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ rt.spawn(async move {});","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574565,"byte_end":10574593,"line_start":185,"line_end":185,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574598,"byte_end":10574605,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574610,"byte_end":10574613,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ## Current thread runtime (will only run on the current thread via `Runtime::block_on`)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574618,"byte_end":10574709,"line_start":188,"line_end":188,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574714,"byte_end":10574717,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574722,"byte_end":10574729,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574734,"byte_end":10574757,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574762,"byte_end":10574765,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ // Create a runtime that _must_ be driven from a call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574770,"byte_end":10574827,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/ // to `Runtime::block_on`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574832,"byte_end":10574862,"line_start":194,"line_end":194,"column_start":5,"column_end":35}},{"value":"/ let rt = runtime::Builder::new_current_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574867,"byte_end":10574918,"line_start":195,"line_end":195,"column_start":5,"column_end":56}},{"value":"/     .build()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574923,"byte_end":10574939,"line_start":196,"line_end":196,"column_start":5,"column_end":21}},{"value":"/     .unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574944,"byte_end":10574962,"line_start":197,"line_end":197,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574967,"byte_end":10574970,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ // This will run the runtime and future on the current thread","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10574975,"byte_end":10575040,"line_start":199,"line_end":199,"column_start":5,"column_end":70}},{"value":"/ rt.block_on(async move {});","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575045,"byte_end":10575076,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575081,"byte_end":10575088,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575093,"byte_end":10575096,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575101,"byte_end":10575112,"line_start":203,"line_end":203,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575117,"byte_end":10575120,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This will panic if `val` is not larger than `0`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575125,"byte_end":10575177,"line_start":205,"line_end":205,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4298},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575835,"byte_end":10575855,"line_start":225,"line_end":225,"column_start":12,"column_end":32},"name":"max_blocking_threads","qualname":"<Builder>::max_blocking_threads","value":"pub fn max_blocking_threads(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies limit for threads spawned by the Runtime used for blocking operations.","sig":null,"attributes":[{"value":"/ Specifies limit for threads spawned by the Runtime used for blocking operations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575370,"byte_end":10575454,"line_start":212,"line_end":212,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575459,"byte_end":10575462,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575467,"byte_end":10575470,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Similarly to the `worker_threads`, this number should be between 1 and 32,768.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575475,"byte_end":10575557,"line_start":215,"line_end":215,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575562,"byte_end":10575565,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ The default value is 512.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575570,"byte_end":10575599,"line_start":217,"line_end":217,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575604,"byte_end":10575607,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Otherwise as `worker_threads` are always active, it limits additional threads (e.g. for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575612,"byte_end":10575703,"line_start":219,"line_end":219,"column_start":5,"column_end":96}},{"value":"/ blocking annotations).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575708,"byte_end":10575734,"line_start":220,"line_end":220,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575739,"byte_end":10575742,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575747,"byte_end":10575758,"line_start":222,"line_end":222,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575763,"byte_end":10575766,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This will panic if `val` is not larger than `0`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10575771,"byte_end":10575823,"line_start":224,"line_end":224,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4299},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576411,"byte_end":10576422,"line_start":246,"line_end":246,"column_start":12,"column_end":23},"name":"thread_name","qualname":"<Builder>::thread_name","value":"pub fn thread_name<impl Into<String>: Into<String>>(&mut Self,\n                                                    impl Into<String>)\n-> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets name of threads spawned by the `Runtime`'s thread pool.","sig":null,"attributes":[{"value":"/ Sets name of threads spawned by the `Runtime`'s thread pool.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576028,"byte_end":10576092,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576097,"byte_end":10576100,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The default name is \"tokio-runtime-worker\".","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576105,"byte_end":10576152,"line_start":233,"line_end":233,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576157,"byte_end":10576160,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576165,"byte_end":10576179,"line_start":235,"line_end":235,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576184,"byte_end":10576187,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576192,"byte_end":10576199,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576204,"byte_end":10576229,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576234,"byte_end":10576237,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576242,"byte_end":10576263,"line_start":240,"line_end":240,"column_start":5,"column_end":26}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576268,"byte_end":10576317,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/     .thread_name(\"my-pool\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576322,"byte_end":10576353,"line_start":242,"line_end":242,"column_start":5,"column_end":36}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576358,"byte_end":10576375,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576380,"byte_end":10576387,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576392,"byte_end":10576399,"line_start":245,"line_end":245,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4302},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577271,"byte_end":10577285,"line_start":272,"line_end":272,"column_start":12,"column_end":26},"name":"thread_name_fn","qualname":"<Builder>::thread_name_fn","value":"pub fn thread_name_fn<F>(&mut Self, F) -> &mut Self where F: Fn() -> String +\nSend + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Sets a function used to generate the name of threads spawned by the `Runtime`'s thread pool.","sig":null,"attributes":[{"value":"/ Sets a function used to generate the name of threads spawned by the `Runtime`'s thread pool.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576596,"byte_end":10576692,"line_start":252,"line_end":252,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576697,"byte_end":10576700,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The default name fn is `|| \"tokio-runtime-worker\".into()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576705,"byte_end":10576767,"line_start":254,"line_end":254,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576772,"byte_end":10576775,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576780,"byte_end":10576794,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576799,"byte_end":10576802,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576807,"byte_end":10576814,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576819,"byte_end":10576844,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/ # use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576849,"byte_end":10576902,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576907,"byte_end":10576910,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576915,"byte_end":10576936,"line_start":262,"line_end":262,"column_start":5,"column_end":26}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576941,"byte_end":10576990,"line_start":263,"line_end":263,"column_start":5,"column_end":54}},{"value":"/     .thread_name_fn(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10576995,"byte_end":10577023,"line_start":264,"line_end":264,"column_start":5,"column_end":33}},{"value":"/        static ATOMIC_ID: AtomicUsize = AtomicUsize::new(0);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577028,"byte_end":10577091,"line_start":265,"line_end":265,"column_start":5,"column_end":68}},{"value":"/        let id = ATOMIC_ID.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577096,"byte_end":10577157,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/        format!(\"my-pool-{}\", id)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577162,"byte_end":10577198,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/     })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577203,"byte_end":10577213,"line_start":268,"line_end":268,"column_start":5,"column_end":15}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577218,"byte_end":10577235,"line_start":269,"line_end":269,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577240,"byte_end":10577247,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577252,"byte_end":10577259,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4304},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578050,"byte_end":10578067,"line_start":299,"line_end":299,"column_start":12,"column_end":29},"name":"thread_stack_size","qualname":"<Builder>::thread_stack_size","value":"pub fn thread_stack_size(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the stack size (in bytes) for worker threads.","sig":null,"attributes":[{"value":"/ Sets the stack size (in bytes) for worker threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577461,"byte_end":10577515,"line_start":280,"line_end":280,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577520,"byte_end":10577523,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The actual stack size may be greater than this value if the platform","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577528,"byte_end":10577600,"line_start":282,"line_end":282,"column_start":5,"column_end":77}},{"value":"/ specifies minimal stack size.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577605,"byte_end":10577638,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577643,"byte_end":10577646,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The default stack size for spawned threads is 2 MiB, though this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577651,"byte_end":10577719,"line_start":285,"line_end":285,"column_start":5,"column_end":73}},{"value":"/ particular stack size is subject to change in the future.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577724,"byte_end":10577785,"line_start":286,"line_end":286,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577790,"byte_end":10577793,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577798,"byte_end":10577812,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577817,"byte_end":10577820,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577825,"byte_end":10577832,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577837,"byte_end":10577862,"line_start":291,"line_end":291,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577867,"byte_end":10577870,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577875,"byte_end":10577896,"line_start":293,"line_end":293,"column_start":5,"column_end":26}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577901,"byte_end":10577950,"line_start":294,"line_end":294,"column_start":5,"column_end":54}},{"value":"/     .thread_stack_size(32 * 1024)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577955,"byte_end":10577992,"line_start":295,"line_end":295,"column_start":5,"column_end":42}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10577997,"byte_end":10578014,"line_start":296,"line_end":296,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578019,"byte_end":10578026,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578031,"byte_end":10578038,"line_start":298,"line_end":298,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4305},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578687,"byte_end":10578702,"line_start":323,"line_end":323,"column_start":12,"column_end":27},"name":"on_thread_start","qualname":"<Builder>::on_thread_start","value":"pub fn on_thread_start<F>(&mut Self, F) -> &mut Self where F: Fn() -> () +\nSend + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Executes function `f` after each thread is started but before it starts\n doing work.","sig":null,"attributes":[{"value":"/ Executes function `f` after each thread is started but before it starts","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578174,"byte_end":10578249,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ doing work.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578254,"byte_end":10578269,"line_start":305,"line_end":305,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578274,"byte_end":10578277,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ This is intended for bookkeeping and monitoring use cases.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578282,"byte_end":10578344,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578349,"byte_end":10578352,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578357,"byte_end":10578371,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578376,"byte_end":10578379,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578384,"byte_end":10578391,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578396,"byte_end":10578421,"line_start":312,"line_end":312,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578426,"byte_end":10578429,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578434,"byte_end":10578455,"line_start":314,"line_end":314,"column_start":5,"column_end":26}},{"value":"/ let runtime = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578460,"byte_end":10578514,"line_start":315,"line_end":315,"column_start":5,"column_end":59}},{"value":"/     .on_thread_start(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578519,"byte_end":10578548,"line_start":316,"line_end":316,"column_start":5,"column_end":34}},{"value":"/         println!(\"thread started\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578553,"byte_end":10578592,"line_start":317,"line_end":317,"column_start":5,"column_end":44}},{"value":"/     })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578597,"byte_end":10578607,"line_start":318,"line_end":318,"column_start":5,"column_end":15}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578612,"byte_end":10578629,"line_start":319,"line_end":319,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578634,"byte_end":10578641,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578646,"byte_end":10578653,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"cfg(not(loom))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578658,"byte_end":10578675,"line_start":322,"line_end":322,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4307},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579343,"byte_end":10579357,"line_start":349,"line_end":349,"column_start":12,"column_end":26},"name":"on_thread_stop","qualname":"<Builder>::on_thread_stop","value":"pub fn on_thread_stop<F>(&mut Self, F) -> &mut Self where F: Fn() -> () +\nSend + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Executes function `f` before each thread stops.","sig":null,"attributes":[{"value":"/ Executes function `f` before each thread stops.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578874,"byte_end":10578925,"line_start":331,"line_end":331,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578930,"byte_end":10578933,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This is intended for bookkeeping and monitoring use cases.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10578938,"byte_end":10579000,"line_start":333,"line_end":333,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579005,"byte_end":10579008,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579013,"byte_end":10579027,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579032,"byte_end":10579035,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579040,"byte_end":10579047,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579052,"byte_end":10579077,"line_start":338,"line_end":338,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579082,"byte_end":10579085,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579090,"byte_end":10579111,"line_start":340,"line_end":340,"column_start":5,"column_end":26}},{"value":"/ let runtime = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579116,"byte_end":10579170,"line_start":341,"line_end":341,"column_start":5,"column_end":59}},{"value":"/     .on_thread_stop(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579175,"byte_end":10579203,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/         println!(\"thread stopping\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579208,"byte_end":10579248,"line_start":343,"line_end":343,"column_start":5,"column_end":45}},{"value":"/     })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579253,"byte_end":10579263,"line_start":344,"line_end":344,"column_start":5,"column_end":15}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579268,"byte_end":10579285,"line_start":345,"line_end":345,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579290,"byte_end":10579297,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579302,"byte_end":10579309,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"cfg(not(loom))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579314,"byte_end":10579331,"line_start":348,"line_end":348,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4309},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579921,"byte_end":10579926,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"pub fn build(&mut Self) -> io::Result<Runtime>","parent":null,"children":[],"decl_id":null,"docs":" Creates the configured `Runtime`.","sig":null,"attributes":[{"value":"/ Creates the configured `Runtime`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579529,"byte_end":10579566,"line_start":357,"line_end":357,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579571,"byte_end":10579574,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ The returned `Runtime` instance is ready to spawn tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579579,"byte_end":10579639,"line_start":359,"line_end":359,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579644,"byte_end":10579647,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579652,"byte_end":10579666,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579671,"byte_end":10579674,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579679,"byte_end":10579686,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime::Builder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579691,"byte_end":10579723,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579728,"byte_end":10579731,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let rt  = Builder::new_multi_thread().build().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579736,"byte_end":10579795,"line_start":366,"line_end":366,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579800,"byte_end":10579803,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ rt.block_on(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579808,"byte_end":10579831,"line_start":368,"line_end":368,"column_start":5,"column_end":28}},{"value":"/     println!(\"Hello from the Tokio runtime\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579836,"byte_end":10579885,"line_start":369,"line_end":369,"column_start":5,"column_end":54}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579890,"byte_end":10579897,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10579902,"byte_end":10579909,"line_start":371,"line_end":371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4311},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10581060,"byte_end":10581077,"line_start":409,"line_end":409,"column_start":12,"column_end":29},"name":"thread_keep_alive","qualname":"<Builder>::thread_keep_alive","value":"pub fn thread_keep_alive(&mut Self, Duration) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom timeout for a thread in the blocking pool.","sig":null,"attributes":[{"value":"/ Sets a custom timeout for a thread in the blocking pool.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580551,"byte_end":10580611,"line_start":392,"line_end":392,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580616,"byte_end":10580619,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ By default, the timeout for a thread is set to 10 seconds. This can","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580624,"byte_end":10580695,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/ be overriden using .thread_keep_alive().","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580700,"byte_end":10580744,"line_start":395,"line_end":395,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580749,"byte_end":10580752,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580757,"byte_end":10580770,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580775,"byte_end":10580778,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580783,"byte_end":10580790,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ # use tokio::runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580795,"byte_end":10580820,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/ # use std::time::Duration;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580825,"byte_end":10580855,"line_start":401,"line_end":401,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580860,"byte_end":10580863,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580868,"byte_end":10580889,"line_start":403,"line_end":403,"column_start":5,"column_end":26}},{"value":"/ let rt = runtime::Builder::new_multi_thread()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580894,"byte_end":10580943,"line_start":404,"line_end":404,"column_start":5,"column_end":54}},{"value":"/     .thread_keep_alive(Duration::from_millis(100))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10580948,"byte_end":10581002,"line_start":405,"line_end":405,"column_start":5,"column_end":59}},{"value":"/     .build();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10581007,"byte_end":10581024,"line_start":406,"line_end":406,"column_start":5,"column_end":22}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10581029,"byte_end":10581036,"line_start":407,"line_end":407,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10581041,"byte_end":10581048,"line_start":408,"line_end":408,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4418},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10582824,"byte_end":10582833,"line_start":462,"line_end":462,"column_start":16,"column_end":25},"name":"enable_io","qualname":"<Builder>::enable_io","value":"pub fn enable_io(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enables the I/O driver.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4420},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10583357,"byte_end":10583368,"line_start":485,"line_end":485,"column_start":16,"column_end":27},"name":"enable_time","qualname":"<Builder>::enable_time","value":"pub fn enable_time(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enables the time driver.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4456},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593387,"byte_end":10593393,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Handle","qualname":"::runtime::handle::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":4457},{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4462}],"decl_id":null,"docs":" Handle to the runtime.","sig":null,"attributes":[{"value":"/ Handle to the runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593118,"byte_end":10593144,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593145,"byte_end":10593148,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The handle is internally reference-counted and can be freely cloned. A handle can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593149,"byte_end":10593237,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ obtained using the [`Runtime::handle`] method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593238,"byte_end":10593288,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593289,"byte_end":10593292,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Runtime::handle`]: crate::runtime::Runtime::handle()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593293,"byte_end":10593351,"line_start":13,"line_end":13,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4467},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594080,"byte_end":10594090,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"EnterGuard","qualname":"::runtime::handle::EnterGuard","value":"EnterGuard {  }","parent":null,"children":[{"krate":0,"index":4469},{"krate":0,"index":4470}],"decl_id":null,"docs":" Runtime context guard.","sig":null,"attributes":[{"value":"/ Runtime context guard.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593844,"byte_end":10593870,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593871,"byte_end":10593874,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Returned by [`Runtime::enter`] and [`Handle::enter`], the context guard exits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593875,"byte_end":10593956,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ the runtime context on drop.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593957,"byte_end":10593989,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593990,"byte_end":10593993,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Runtime::enter`]: fn@crate::runtime::Runtime::enter","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10593994,"byte_end":10594051,"line_start":39,"line_end":39,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594564,"byte_end":10594569,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"enter","qualname":"<Handle>::enter","value":"pub fn enter(&Self) -> EnterGuard","parent":null,"children":[],"decl_id":null,"docs":" Enter the runtime context. This allows you to construct types that must\n have an executor available on creation such as [`Sleep`] or [`TcpStream`].\n It will also allow you to call methods such as [`tokio::spawn`].","sig":null,"attributes":[{"value":"/ Enter the runtime context. This allows you to construct types that must","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594174,"byte_end":10594249,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ have an executor available on creation such as [`Sleep`] or [`TcpStream`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594254,"byte_end":10594332,"line_start":48,"line_end":48,"column_start":5,"column_end":83}},{"value":"/ It will also allow you to call methods such as [`tokio::spawn`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594337,"byte_end":10594405,"line_start":49,"line_end":49,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594410,"byte_end":10594413,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [`Sleep`]: struct@crate::time::Sleep","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594418,"byte_end":10594458,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/ [`TcpStream`]: struct@crate::net::TcpStream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594463,"byte_end":10594510,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/ [`tokio::spawn`]: fn@crate::spawn","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594515,"byte_end":10594552,"line_start":53,"line_end":53,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4372},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596063,"byte_end":10596070,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"current","qualname":"<Handle>::current","value":"pub fn current() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Handle` view over the currently running `Runtime`","sig":null,"attributes":[{"value":"/ Returns a `Handle` view over the currently running `Runtime`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594714,"byte_end":10594778,"line_start":61,"line_end":61,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594783,"byte_end":10594786,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594791,"byte_end":10594802,"line_start":63,"line_end":63,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594807,"byte_end":10594810,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This will panic if called outside the context of a Tokio runtime. That means that you must","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594815,"byte_end":10594909,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ call this on one of the threads **being run by the runtime**. Calling this from within a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594914,"byte_end":10595006,"line_start":66,"line_end":66,"column_start":5,"column_end":97}},{"value":"/ thread created by `std::thread::spawn` (for example) will cause a panic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595011,"byte_end":10595087,"line_start":67,"line_end":67,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595092,"byte_end":10595095,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595100,"byte_end":10595114,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595119,"byte_end":10595122,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ This can be used to obtain the handle of the surrounding runtime from an async","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595127,"byte_end":10595209,"line_start":71,"line_end":71,"column_start":5,"column_end":87}},{"value":"/ block or function running on that runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595214,"byte_end":10595260,"line_start":72,"line_end":72,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595265,"byte_end":10595268,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595273,"byte_end":10595280,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/ # use std::thread;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595285,"byte_end":10595307,"line_start":75,"line_end":75,"column_start":5,"column_end":27}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595312,"byte_end":10595346,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/ # fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595351,"byte_end":10595367,"line_start":77,"line_end":77,"column_start":5,"column_end":21}},{"value":"/ # let rt = Runtime::new().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595372,"byte_end":10595411,"line_start":78,"line_end":78,"column_start":5,"column_end":44}},{"value":"/ # rt.spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595416,"byte_end":10595438,"line_start":79,"line_end":79,"column_start":5,"column_end":27}},{"value":"/ use tokio::runtime::Handle;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595443,"byte_end":10595474,"line_start":80,"line_end":80,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595479,"byte_end":10595482,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ // Inside an async block or function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595487,"byte_end":10595528,"line_start":82,"line_end":82,"column_start":5,"column_end":46}},{"value":"/ let handle = Handle::current();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595533,"byte_end":10595568,"line_start":83,"line_end":83,"column_start":5,"column_end":40}},{"value":"/ handle.spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595573,"byte_end":10595597,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     println!(\"now running in the existing Runtime\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595602,"byte_end":10595658,"line_start":85,"line_end":85,"column_start":5,"column_end":61}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595663,"byte_end":10595670,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595675,"byte_end":10595678,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # let handle =","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595683,"byte_end":10595701,"line_start":88,"line_end":88,"column_start":5,"column_end":23}},{"value":"/ thread::spawn(move || {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595706,"byte_end":10595733,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"/     // Notice that the handle is created outside of this thread and then moved in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595738,"byte_end":10595823,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/     handle.spawn(async { /* ... */ })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595828,"byte_end":10595869,"line_start":91,"line_end":91,"column_start":5,"column_end":46}},{"value":"/     // This next line would cause a panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595874,"byte_end":10595919,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"/     // let handle2 = Handle::current();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595924,"byte_end":10595967,"line_start":93,"line_end":93,"column_start":5,"column_end":48}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595972,"byte_end":10595979,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ # handle.join().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10595984,"byte_end":10596013,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/ # });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596018,"byte_end":10596027,"line_start":96,"line_end":96,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596032,"byte_end":10596039,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596044,"byte_end":10596051,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4373},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596368,"byte_end":10596379,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"try_current","qualname":"<Handle>::try_current","value":"pub fn try_current() -> Result<Self, TryCurrentError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a Handle view over the currently running Runtime","sig":null,"attributes":[{"value":"/ Returns a Handle view over the currently running Runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596175,"byte_end":10596235,"line_start":103,"line_end":103,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596240,"byte_end":10596243,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Returns an error if no Runtime has been started","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596248,"byte_end":10596299,"line_start":105,"line_end":105,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596304,"byte_end":10596307,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Contrary to `current`, this never panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596312,"byte_end":10596356,"line_start":107,"line_end":107,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4374},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597334,"byte_end":10597339,"line_start":140,"line_end":140,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Handle>::spawn","value":"pub fn spawn<F>(&Self, F) -> JoinHandle<F::Output> where F: Future + Send +\n'static, F::Output: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawn a future onto the Tokio runtime.","sig":null,"attributes":[{"value":"/ Spawn a future onto the Tokio runtime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596482,"byte_end":10596524,"line_start":112,"line_end":112,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596529,"byte_end":10596532,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ This spawns the given future onto the runtime's executor, usually a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596537,"byte_end":10596608,"line_start":114,"line_end":114,"column_start":5,"column_end":76}},{"value":"/ thread pool. The thread pool is then responsible for polling the future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596613,"byte_end":10596688,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ until it completes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596693,"byte_end":10596716,"line_start":116,"line_end":116,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596721,"byte_end":10596724,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ See [module level][mod] documentation for more details.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596729,"byte_end":10596788,"line_start":118,"line_end":118,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596793,"byte_end":10596796,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ [mod]: index.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596801,"byte_end":10596822,"line_start":120,"line_end":120,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596827,"byte_end":10596830,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596835,"byte_end":10596849,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596854,"byte_end":10596857,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596862,"byte_end":10596869,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596874,"byte_end":10596906,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596911,"byte_end":10596914,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596919,"byte_end":10596935,"line_start":127,"line_end":127,"column_start":5,"column_end":21}},{"value":"/ // Create the runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596940,"byte_end":10596965,"line_start":128,"line_end":128,"column_start":5,"column_end":30}},{"value":"/ let rt = Runtime::new().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10596970,"byte_end":10597007,"line_start":129,"line_end":129,"column_start":5,"column_end":42}},{"value":"/ // Get a handle from this runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597012,"byte_end":10597049,"line_start":130,"line_end":130,"column_start":5,"column_end":42}},{"value":"/ let handle = rt.handle();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597054,"byte_end":10597083,"line_start":131,"line_end":131,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597088,"byte_end":10597091,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ // Spawn a future onto the runtime using the handle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597096,"byte_end":10597151,"line_start":133,"line_end":133,"column_start":5,"column_end":60}},{"value":"/ handle.spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597156,"byte_end":10597180,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/     println!(\"now running on a worker thread\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597185,"byte_end":10597236,"line_start":135,"line_end":135,"column_start":5,"column_end":56}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597241,"byte_end":10597248,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597253,"byte_end":10597260,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597265,"byte_end":10597272,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597308,"byte_end":10597320,"line_start":139,"line_end":139,"column_start":36,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4376},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598242,"byte_end":10598256,"line_start":170,"line_end":170,"column_start":12,"column_end":26},"name":"spawn_blocking","qualname":"<Handle>::spawn_blocking","value":"pub fn spawn_blocking<F, R>(&Self, F) -> JoinHandle<R> where F: FnOnce() ->\nR + Send + 'static, R: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Run the provided function on an executor dedicated to blocking\n operations.","sig":null,"attributes":[{"value":"/ Run the provided function on an executor dedicated to blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597639,"byte_end":10597705,"line_start":150,"line_end":150,"column_start":5,"column_end":71}},{"value":"/ operations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597710,"byte_end":10597725,"line_start":151,"line_end":151,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597730,"byte_end":10597733,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597738,"byte_end":10597752,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597757,"byte_end":10597760,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597765,"byte_end":10597772,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597777,"byte_end":10597809,"line_start":156,"line_end":156,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597814,"byte_end":10597817,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597822,"byte_end":10597838,"line_start":158,"line_end":158,"column_start":5,"column_end":21}},{"value":"/ // Create the runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597843,"byte_end":10597868,"line_start":159,"line_end":159,"column_start":5,"column_end":30}},{"value":"/ let rt = Runtime::new().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597873,"byte_end":10597910,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ // Get a handle from this runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597915,"byte_end":10597952,"line_start":161,"line_end":161,"column_start":5,"column_end":42}},{"value":"/ let handle = rt.handle();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597957,"byte_end":10597986,"line_start":162,"line_end":162,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597991,"byte_end":10597994,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ // Spawn a blocking function onto the runtime using the handle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10597999,"byte_end":10598065,"line_start":164,"line_end":164,"column_start":5,"column_end":71}},{"value":"/ handle.spawn_blocking(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598070,"byte_end":10598100,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"/     println!(\"now running on a worker thread\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598105,"byte_end":10598156,"line_start":166,"line_end":166,"column_start":5,"column_end":56}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598161,"byte_end":10598168,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598173,"byte_end":10598180,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10598216,"byte_end":10598228,"line_start":169,"line_end":169,"column_start":36,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":4379},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599525,"byte_end":10599540,"line_start":206,"line_end":206,"column_start":12,"column_end":27},"name":"TryCurrentError","qualname":"::runtime::handle::TryCurrentError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by `try_current` when no Runtime has been started\n","sig":null,"attributes":[{"value":"/ Error returned by `try_current` when no Runtime has been started","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599445,"byte_end":10599513,"line_start":205,"line_end":205,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":4504},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10464596,"byte_end":10464603,"line_start":264,"line_end":264,"column_start":16,"column_end":23},"name":"Runtime","qualname":"::runtime::Runtime","value":"Runtime {  }","parent":null,"children":[{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507}],"decl_id":null,"docs":" The Tokio runtime.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4493},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10467227,"byte_end":10467233,"line_start":342,"line_end":342,"column_start":16,"column_end":22},"name":"handle","qualname":"<Runtime>::handle","value":"pub fn handle(&Self) -> &Handle","parent":null,"children":[],"decl_id":null,"docs":" Return a handle to the runtime's spawner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10468157,"byte_end":10468162,"line_start":372,"line_end":372,"column_start":16,"column_end":21},"name":"spawn","qualname":"<Runtime>::spawn","value":"pub fn spawn<F>(&Self, F) -> JoinHandle<F::Output> where F: Future + Send +\n'static, F::Output: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawn a future onto the Tokio runtime.","sig":null,"attributes":[{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10468127,"byte_end":10468139,"line_start":371,"line_end":371,"column_start":40,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10468935,"byte_end":10468949,"line_start":397,"line_end":397,"column_start":16,"column_end":30},"name":"spawn_blocking","qualname":"<Runtime>::spawn_blocking","value":"pub fn spawn_blocking<F, R>(&Self, F) -> JoinHandle<R> where F: FnOnce() ->\nR + Send + 'static, R: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Run the provided function on an executor dedicated to blocking operations.","sig":null,"attributes":[{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10468905,"byte_end":10468917,"line_start":396,"line_end":396,"column_start":40,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4499},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10470874,"byte_end":10470882,"line_start":446,"line_end":446,"column_start":16,"column_end":24},"name":"block_on","qualname":"<Runtime>::block_on","value":"pub fn block_on<F: Future>(&Self, F) -> F::Output","parent":null,"children":[],"decl_id":null,"docs":" Run a future to completion on the Tokio runtime. This is the\n runtime's entry point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4501},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10472370,"byte_end":10472375,"line_start":488,"line_end":488,"column_start":16,"column_end":21},"name":"enter","qualname":"<Runtime>::enter","value":"pub fn enter(&Self) -> EnterGuard","parent":null,"children":[],"decl_id":null,"docs":" Enter the runtime context.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10473945,"byte_end":10473961,"line_start":527,"line_end":527,"column_start":16,"column_end":32},"name":"shutdown_timeout","qualname":"<Runtime>::shutdown_timeout","value":"pub fn shutdown_timeout(Self, Duration)","parent":null,"children":[],"decl_id":null,"docs":" Shutdown the runtime, waiting for at most `duration` for all spawned\n task to shutdown.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4503},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10475390,"byte_end":10475409,"line_start":559,"line_end":559,"column_start":16,"column_end":35},"name":"shutdown_background","qualname":"<Runtime>::shutdown_background","value":"pub fn shutdown_background(Self)","parent":null,"children":[],"decl_id":null,"docs":" Shutdown the runtime, without waiting for any spawned tasks to shutdown.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4546},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","parent":null,"children":[{"krate":0,"index":4547},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4559},{"krate":0,"index":4560},{"krate":0,"index":4735},{"krate":0,"index":5138},{"krate":0,"index":5227},{"krate":0,"index":5228},{"krate":0,"index":5229},{"krate":0,"index":5230},{"krate":0,"index":5231},{"krate":0,"index":5232},{"krate":0,"index":5290},{"krate":0,"index":5291},{"krate":0,"index":5410},{"krate":0,"index":5502},{"krate":0,"index":5503},{"krate":0,"index":5504},{"krate":0,"index":5505},{"krate":0,"index":5538},{"krate":0,"index":5539},{"krate":0,"index":5540},{"krate":0,"index":5541},{"krate":0,"index":5542},{"krate":0,"index":5641},{"krate":0,"index":5642},{"krate":0,"index":5643},{"krate":0,"index":5644},{"krate":0,"index":5645},{"krate":0,"index":5689},{"krate":0,"index":5690}],"decl_id":null,"docs":" Synchronization primitives for use in asynchronous contexts.","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23059,"byte_end":23083,"line_start":247,"line_end":247,"column_start":13,"column_end":37}},{"value":"/ Synchronization primitives for use in asynchronous contexts.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601096,"byte_end":10601160,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601161,"byte_end":10601164,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Tokio programs tend to be organized as a set of [tasks] where each task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601165,"byte_end":10601240,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ operates independently and may be executed on separate physical threads. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601241,"byte_end":10601321,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ synchronization primitives provided in this module permit these independent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601322,"byte_end":10601401,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ tasks to communicate together.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601402,"byte_end":10601436,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601437,"byte_end":10601440,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [tasks]: crate::task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601441,"byte_end":10601465,"line_start":10,"line_end":10,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601466,"byte_end":10601469,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Message passing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601470,"byte_end":10601491,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601492,"byte_end":10601495,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The most common form of synchronization in a Tokio program is message","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601496,"byte_end":10601569,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ passing. Two tasks operate independently and send messages to each other to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601570,"byte_end":10601649,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ synchronize. Doing so has the advantage of avoiding shared state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601650,"byte_end":10601719,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601720,"byte_end":10601723,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Message passing is implemented using channels. A channel supports sending a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601724,"byte_end":10601803,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ message from one producer task to one or more consumer tasks. There are a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601804,"byte_end":10601881,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ few flavors of channels provided by Tokio. Each channel flavor supports","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601882,"byte_end":10601957,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ different message passing patterns. When a channel supports multiple","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10601958,"byte_end":10602030,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ producers, many separate tasks may **send** messages. When a channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602031,"byte_end":10602103,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ supports multiple consumers, many different separate tasks may **receive**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602104,"byte_end":10602182,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ messages.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602183,"byte_end":10602196,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602197,"byte_end":10602200,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Tokio provides many different channel flavors as different message passing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602201,"byte_end":10602279,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ patterns are best handled with different implementations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602280,"byte_end":10602341,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602342,"byte_end":10602345,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## `oneshot` channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602346,"byte_end":10602370,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602371,"byte_end":10602374,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The [`oneshot` channel][oneshot] supports sending a **single** value from a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602375,"byte_end":10602454,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ single producer to a single consumer. This channel is usually used to send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602455,"byte_end":10602533,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ the result of a computation to a waiter.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602534,"byte_end":10602578,"line_start":33,"line_end":33,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602579,"byte_end":10602582,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ **Example:** using a [`oneshot` channel][oneshot] to receive the result of a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602583,"byte_end":10602663,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ computation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602664,"byte_end":10602680,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602681,"byte_end":10602684,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602685,"byte_end":10602692,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602693,"byte_end":10602722,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602723,"byte_end":10602726,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ async fn some_computation() -> String {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602727,"byte_end":10602770,"line_start":41,"line_end":41,"column_start":1,"column_end":44}},{"value":"/     \"represents the result of the computation\".to_string()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602771,"byte_end":10602833,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602834,"byte_end":10602839,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602840,"byte_end":10602843,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602844,"byte_end":10602862,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602863,"byte_end":10602884,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/     let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602885,"byte_end":10602927,"line_start":47,"line_end":47,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602928,"byte_end":10602931,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602932,"byte_end":10602965,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/         let res = some_computation().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10602966,"byte_end":10603013,"line_start":50,"line_end":50,"column_start":1,"column_end":48}},{"value":"/         tx.send(res).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603014,"byte_end":10603048,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603049,"byte_end":10603060,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603061,"byte_end":10603064,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/     // Do other work while the computation is happening in the background","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603065,"byte_end":10603142,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603143,"byte_end":10603146,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/     // Wait for the computation result","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603147,"byte_end":10603189,"line_start":56,"line_end":56,"column_start":1,"column_end":43}},{"value":"/     let res = rx.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603190,"byte_end":10603226,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603227,"byte_end":10603232,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603233,"byte_end":10603240,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603241,"byte_end":10603244,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Note, if the task produces a computation result as its final","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603245,"byte_end":10603309,"line_start":61,"line_end":61,"column_start":1,"column_end":65}},{"value":"/ action before terminating, the [`JoinHandle`] can be used to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603310,"byte_end":10603374,"line_start":62,"line_end":62,"column_start":1,"column_end":65}},{"value":"/ receive that value instead of allocating resources for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603375,"byte_end":10603437,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/ `oneshot` channel. Awaiting on [`JoinHandle`] returns `Result`. If","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603438,"byte_end":10603508,"line_start":64,"line_end":64,"column_start":1,"column_end":71}},{"value":"/ the task panics, the `Joinhandle` yields `Err` with the panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603509,"byte_end":10603574,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/ cause.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603575,"byte_end":10603585,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603586,"byte_end":10603589,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ **Example:**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603590,"byte_end":10603606,"line_start":68,"line_end":68,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603607,"byte_end":10603610,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603611,"byte_end":10603618,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ async fn some_computation() -> String {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603619,"byte_end":10603662,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/     \"the result of the computation\".to_string()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603663,"byte_end":10603714,"line_start":72,"line_end":72,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603715,"byte_end":10603720,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603721,"byte_end":10603724,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603725,"byte_end":10603743,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603744,"byte_end":10603765,"line_start":76,"line_end":76,"column_start":1,"column_end":22}},{"value":"/     let join_handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603766,"byte_end":10603817,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/         some_computation().await","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603818,"byte_end":10603854,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603855,"byte_end":10603866,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603867,"byte_end":10603870,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/     // Do other work while the computation is happening in the background","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603871,"byte_end":10603948,"line_start":81,"line_end":81,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603949,"byte_end":10603952,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Wait for the computation result","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603953,"byte_end":10603995,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     let res = join_handle.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10603996,"byte_end":10604041,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604042,"byte_end":10604047,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604048,"byte_end":10604055,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604056,"byte_end":10604059,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [oneshot]: oneshot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604060,"byte_end":10604082,"line_start":88,"line_end":88,"column_start":1,"column_end":23}},{"value":"/ [`JoinHandle`]: crate::task::JoinHandle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604083,"byte_end":10604126,"line_start":89,"line_end":89,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604127,"byte_end":10604130,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ## `mpsc` channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604131,"byte_end":10604152,"line_start":91,"line_end":91,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604153,"byte_end":10604156,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The [`mpsc` channel][mpsc] supports sending **many** values from **many**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604157,"byte_end":10604234,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/ producers to a single consumer. This channel is often used to send work to a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604235,"byte_end":10604315,"line_start":94,"line_end":94,"column_start":1,"column_end":81}},{"value":"/ task or to receive the result of many computations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604316,"byte_end":10604371,"line_start":95,"line_end":95,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604372,"byte_end":10604375,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ **Example:** using an mpsc to incrementally stream the results of a series","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604376,"byte_end":10604454,"line_start":97,"line_end":97,"column_start":1,"column_end":79}},{"value":"/ of computations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604455,"byte_end":10604475,"line_start":98,"line_end":98,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604476,"byte_end":10604479,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604480,"byte_end":10604487,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604488,"byte_end":10604514,"line_start":101,"line_end":101,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604515,"byte_end":10604518,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ async fn some_computation(input: u32) -> String {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604519,"byte_end":10604572,"line_start":103,"line_end":103,"column_start":1,"column_end":54}},{"value":"/     format!(\"the result of computation {}\", input)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604573,"byte_end":10604627,"line_start":104,"line_end":104,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604628,"byte_end":10604633,"line_start":105,"line_end":105,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604634,"byte_end":10604637,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604638,"byte_end":10604656,"line_start":107,"line_end":107,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604657,"byte_end":10604678,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx) = mpsc::channel(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604679,"byte_end":10604725,"line_start":109,"line_end":109,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604726,"byte_end":10604729,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604730,"byte_end":10604763,"line_start":111,"line_end":111,"column_start":1,"column_end":34}},{"value":"/         for i in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604764,"byte_end":10604792,"line_start":112,"line_end":112,"column_start":1,"column_end":29}},{"value":"/             let res = some_computation(i).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604793,"byte_end":10604845,"line_start":113,"line_end":113,"column_start":1,"column_end":53}},{"value":"/             tx.send(res).await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604846,"byte_end":10604890,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604891,"byte_end":10604904,"line_start":115,"line_end":115,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604905,"byte_end":10604916,"line_start":116,"line_end":116,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604917,"byte_end":10604920,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/     while let Some(res) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604921,"byte_end":10604968,"line_start":118,"line_end":118,"column_start":1,"column_end":48}},{"value":"/         println!(\"got = {}\", res);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10604969,"byte_end":10605007,"line_start":119,"line_end":119,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605008,"byte_end":10605017,"line_start":120,"line_end":120,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605018,"byte_end":10605023,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605024,"byte_end":10605031,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605032,"byte_end":10605035,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ The argument to `mpsc::channel` is the channel capacity. This is the maximum","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605036,"byte_end":10605116,"line_start":124,"line_end":124,"column_start":1,"column_end":81}},{"value":"/ number of values that can be stored in the channel pending receipt at any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605117,"byte_end":10605194,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ given time. Properly setting this value is key in implementing robust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605195,"byte_end":10605268,"line_start":126,"line_end":126,"column_start":1,"column_end":74}},{"value":"/ programs as the channel capacity plays a critical part in handling back","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605269,"byte_end":10605344,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ pressure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605345,"byte_end":10605358,"line_start":128,"line_end":128,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605359,"byte_end":10605362,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ A common concurrency pattern for resource management is to spawn a task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605363,"byte_end":10605438,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ dedicated to managing that resource and using message passing between other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605439,"byte_end":10605518,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ tasks to interact with the resource. The resource may be anything that may","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605519,"byte_end":10605597,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ not be concurrently used. Some examples include a socket and program state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605598,"byte_end":10605677,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ For example, if multiple tasks need to send data over a single socket, spawn","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605678,"byte_end":10605758,"line_start":134,"line_end":134,"column_start":1,"column_end":81}},{"value":"/ a task to manage the socket and use a channel to synchronize.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605759,"byte_end":10605824,"line_start":135,"line_end":135,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605825,"byte_end":10605828,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ **Example:** sending data from many tasks over a single socket using message","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605829,"byte_end":10605909,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ passing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605910,"byte_end":10605922,"line_start":138,"line_end":138,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605923,"byte_end":10605926,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605927,"byte_end":10605940,"line_start":140,"line_end":140,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::{self, AsyncWriteExt};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605941,"byte_end":10605982,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/ use tokio::net::TcpStream;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10605983,"byte_end":10606013,"line_start":142,"line_end":142,"column_start":1,"column_end":31}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606014,"byte_end":10606040,"line_start":143,"line_end":143,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606041,"byte_end":10606044,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606045,"byte_end":10606063,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/ async fn main() -> io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606064,"byte_end":10606103,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/     let mut socket = TcpStream::connect(\"www.example.com:1234\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606104,"byte_end":10606179,"line_start":147,"line_end":147,"column_start":1,"column_end":76}},{"value":"/     let (tx, mut rx) = mpsc::channel(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606180,"byte_end":10606226,"line_start":148,"line_end":148,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606227,"byte_end":10606230,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/     for _ in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606231,"byte_end":10606255,"line_start":150,"line_end":150,"column_start":1,"column_end":25}},{"value":"/         // Each task needs its own `tx` handle. This is done by cloning the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606256,"byte_end":10606335,"line_start":151,"line_end":151,"column_start":1,"column_end":80}},{"value":"/         // original handle.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606336,"byte_end":10606367,"line_start":152,"line_end":152,"column_start":1,"column_end":32}},{"value":"/         let tx = tx.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606368,"byte_end":10606400,"line_start":153,"line_end":153,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606401,"byte_end":10606404,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606405,"byte_end":10606442,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/             tx.send(&b\"data to write\"[..]).await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606443,"byte_end":10606505,"line_start":156,"line_end":156,"column_start":1,"column_end":63}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606506,"byte_end":10606521,"line_start":157,"line_end":157,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606522,"byte_end":10606531,"line_start":158,"line_end":158,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606532,"byte_end":10606535,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/     // The `rx` half of the channel returns `None` once **all** `tx` clones","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606536,"byte_end":10606615,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/     // drop. To ensure `None` is returned, drop the handle owned by the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606616,"byte_end":10606691,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/     // current task. If this `tx` handle is not dropped, there will always","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606692,"byte_end":10606770,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/     // be a single outstanding `tx` handle.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606771,"byte_end":10606818,"line_start":163,"line_end":163,"column_start":1,"column_end":48}},{"value":"/     drop(tx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606819,"byte_end":10606836,"line_start":164,"line_end":164,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606837,"byte_end":10606840,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/     while let Some(res) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606841,"byte_end":10606888,"line_start":166,"line_end":166,"column_start":1,"column_end":48}},{"value":"/         socket.write_all(res).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606889,"byte_end":10606930,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606931,"byte_end":10606940,"line_start":168,"line_end":168,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606941,"byte_end":10606944,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606945,"byte_end":10606959,"line_start":170,"line_end":170,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606960,"byte_end":10606965,"line_start":171,"line_end":171,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606966,"byte_end":10606973,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606974,"byte_end":10606977,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ The [`mpsc`][mpsc] and [`oneshot`][oneshot] channels can be combined to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10606978,"byte_end":10607053,"line_start":174,"line_end":174,"column_start":1,"column_end":76}},{"value":"/ provide a request / response type synchronization pattern with a shared","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607054,"byte_end":10607129,"line_start":175,"line_end":175,"column_start":1,"column_end":76}},{"value":"/ resource. A task is spawned to synchronize a resource and waits on commands","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607130,"byte_end":10607209,"line_start":176,"line_end":176,"column_start":1,"column_end":80}},{"value":"/ received on a [`mpsc`][mpsc] channel. Each command includes a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607210,"byte_end":10607275,"line_start":177,"line_end":177,"column_start":1,"column_end":66}},{"value":"/ [`oneshot`][oneshot] `Sender` on which the result of the command is sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607276,"byte_end":10607353,"line_start":178,"line_end":178,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607354,"byte_end":10607357,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ **Example:** use a task to synchronize a `u64` counter. Each task sends an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607358,"byte_end":10607436,"line_start":180,"line_end":180,"column_start":1,"column_end":79}},{"value":"/ \"fetch and increment\" command. The counter value **before** the increment is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607437,"byte_end":10607517,"line_start":181,"line_end":181,"column_start":1,"column_end":81}},{"value":"/ sent over the provided `oneshot` channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607518,"byte_end":10607563,"line_start":182,"line_end":182,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607564,"byte_end":10607567,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607568,"byte_end":10607575,"line_start":184,"line_end":184,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::{oneshot, mpsc};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607576,"byte_end":10607613,"line_start":185,"line_end":185,"column_start":1,"column_end":38}},{"value":"/ use Command::Increment;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607614,"byte_end":10607641,"line_start":186,"line_end":186,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607642,"byte_end":10607645,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ enum Command {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607646,"byte_end":10607664,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/     Increment,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607665,"byte_end":10607683,"line_start":189,"line_end":189,"column_start":1,"column_end":19}},{"value":"/     // Other commands can be added here","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607684,"byte_end":10607727,"line_start":190,"line_end":190,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607728,"byte_end":10607733,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607734,"byte_end":10607737,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607738,"byte_end":10607756,"line_start":193,"line_end":193,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607757,"byte_end":10607778,"line_start":194,"line_end":194,"column_start":1,"column_end":22}},{"value":"/     let (cmd_tx, mut cmd_rx) = mpsc::channel::<(Command, oneshot::Sender<u64>)>(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607779,"byte_end":10607868,"line_start":195,"line_end":195,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607869,"byte_end":10607872,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/     // Spawn a task to manage the counter","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607873,"byte_end":10607918,"line_start":197,"line_end":197,"column_start":1,"column_end":46}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607919,"byte_end":10607952,"line_start":198,"line_end":198,"column_start":1,"column_end":34}},{"value":"/         let mut counter: u64 = 0;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607953,"byte_end":10607990,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607991,"byte_end":10607994,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/         while let Some((cmd, response)) = cmd_rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10607995,"byte_end":10608062,"line_start":201,"line_end":201,"column_start":1,"column_end":68}},{"value":"/             match cmd {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608063,"byte_end":10608090,"line_start":202,"line_end":202,"column_start":1,"column_end":28}},{"value":"/                 Increment => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608091,"byte_end":10608125,"line_start":203,"line_end":203,"column_start":1,"column_end":35}},{"value":"/                     let prev = counter;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608126,"byte_end":10608169,"line_start":204,"line_end":204,"column_start":1,"column_end":44}},{"value":"/                     counter += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608170,"byte_end":10608207,"line_start":205,"line_end":205,"column_start":1,"column_end":38}},{"value":"/                     response.send(prev).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608208,"byte_end":10608261,"line_start":206,"line_end":206,"column_start":1,"column_end":54}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608262,"byte_end":10608283,"line_start":207,"line_end":207,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608284,"byte_end":10608301,"line_start":208,"line_end":208,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608302,"byte_end":10608315,"line_start":209,"line_end":209,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608316,"byte_end":10608327,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608328,"byte_end":10608331,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/     let mut join_handles = vec![];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608332,"byte_end":10608370,"line_start":212,"line_end":212,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608371,"byte_end":10608374,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/     // Spawn tasks that will send the increment command.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608375,"byte_end":10608435,"line_start":214,"line_end":214,"column_start":1,"column_end":61}},{"value":"/     for _ in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608436,"byte_end":10608460,"line_start":215,"line_end":215,"column_start":1,"column_end":25}},{"value":"/         let cmd_tx = cmd_tx.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608461,"byte_end":10608501,"line_start":216,"line_end":216,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608502,"byte_end":10608505,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/         join_handles.push(tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608506,"byte_end":10608561,"line_start":218,"line_end":218,"column_start":1,"column_end":56}},{"value":"/             let (resp_tx, resp_rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608562,"byte_end":10608622,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608623,"byte_end":10608626,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/             cmd_tx.send((Increment, resp_tx)).await.ok().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608627,"byte_end":10608697,"line_start":221,"line_end":221,"column_start":1,"column_end":71}},{"value":"/             let res = resp_rx.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608698,"byte_end":10608747,"line_start":222,"line_end":222,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608748,"byte_end":10608751,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/             println!(\"previous value = {}\", res);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608752,"byte_end":10608805,"line_start":224,"line_end":224,"column_start":1,"column_end":54}},{"value":"/         }));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608806,"byte_end":10608822,"line_start":225,"line_end":225,"column_start":1,"column_end":17}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608823,"byte_end":10608832,"line_start":226,"line_end":226,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608833,"byte_end":10608836,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/     // Wait for all tasks to complete","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608837,"byte_end":10608878,"line_start":228,"line_end":228,"column_start":1,"column_end":42}},{"value":"/     for join_handle in join_handles.drain(..) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608879,"byte_end":10608930,"line_start":229,"line_end":229,"column_start":1,"column_end":52}},{"value":"/         join_handle.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608931,"byte_end":10608970,"line_start":230,"line_end":230,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608971,"byte_end":10608980,"line_start":231,"line_end":231,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608981,"byte_end":10608986,"line_start":232,"line_end":232,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608987,"byte_end":10608994,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608995,"byte_end":10608998,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ [mpsc]: mpsc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10608999,"byte_end":10609015,"line_start":235,"line_end":235,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609016,"byte_end":10609019,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ## `broadcast` channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609020,"byte_end":10609046,"line_start":237,"line_end":237,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609047,"byte_end":10609050,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ The [`broadcast` channel] supports sending **many** values from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609051,"byte_end":10609118,"line_start":239,"line_end":239,"column_start":1,"column_end":68}},{"value":"/ **many** producers to **many** consumers. Each consumer will receive","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609119,"byte_end":10609191,"line_start":240,"line_end":240,"column_start":1,"column_end":73}},{"value":"/ **each** value. This channel can be used to implement \"fan out\" style","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609192,"byte_end":10609265,"line_start":241,"line_end":241,"column_start":1,"column_end":74}},{"value":"/ patterns common with pub / sub or \"chat\" systems.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609266,"byte_end":10609319,"line_start":242,"line_end":242,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609320,"byte_end":10609323,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This channel tends to be used less often than `oneshot` and `mpsc` but still","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609324,"byte_end":10609404,"line_start":244,"line_end":244,"column_start":1,"column_end":81}},{"value":"/ has its use cases.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609405,"byte_end":10609427,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609428,"byte_end":10609431,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Basic usage","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609432,"byte_end":10609447,"line_start":247,"line_end":247,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609448,"byte_end":10609451,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609452,"byte_end":10609459,"line_start":249,"line_end":249,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609460,"byte_end":10609491,"line_start":250,"line_end":250,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609492,"byte_end":10609495,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609496,"byte_end":10609514,"line_start":252,"line_end":252,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609515,"byte_end":10609536,"line_start":253,"line_end":253,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609537,"byte_end":10609588,"line_start":254,"line_end":254,"column_start":1,"column_end":52}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609589,"byte_end":10609626,"line_start":255,"line_end":255,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609627,"byte_end":10609630,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609631,"byte_end":10609664,"line_start":257,"line_end":257,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609665,"byte_end":10609719,"line_start":258,"line_end":258,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609720,"byte_end":10609774,"line_start":259,"line_end":259,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609775,"byte_end":10609786,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609787,"byte_end":10609790,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609791,"byte_end":10609824,"line_start":262,"line_end":262,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609825,"byte_end":10609879,"line_start":263,"line_end":263,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609880,"byte_end":10609934,"line_start":264,"line_end":264,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609935,"byte_end":10609946,"line_start":265,"line_end":265,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609947,"byte_end":10609950,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609951,"byte_end":10609980,"line_start":267,"line_end":267,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10609981,"byte_end":10610010,"line_start":268,"line_end":268,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610011,"byte_end":10610016,"line_start":269,"line_end":269,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610017,"byte_end":10610024,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610025,"byte_end":10610028,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ [`broadcast` channel]: crate::sync::broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610029,"byte_end":10610078,"line_start":272,"line_end":272,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610079,"byte_end":10610082,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ ## `watch` channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610083,"byte_end":10610105,"line_start":274,"line_end":274,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610106,"byte_end":10610109,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ The [`watch` channel] supports sending **many** values from a **single**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610110,"byte_end":10610186,"line_start":276,"line_end":276,"column_start":1,"column_end":77}},{"value":"/ producer to **many** consumers. However, only the **most recent** value is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610187,"byte_end":10610265,"line_start":277,"line_end":277,"column_start":1,"column_end":79}},{"value":"/ stored in the channel. Consumers are notified when a new value is sent, but","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610266,"byte_end":10610345,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/ there is no guarantee that consumers will see **all** values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610346,"byte_end":10610411,"line_start":279,"line_end":279,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610412,"byte_end":10610415,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ The [`watch` channel] is similar to a [`broadcast` channel] with capacity 1.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610416,"byte_end":10610496,"line_start":281,"line_end":281,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610497,"byte_end":10610500,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ Use cases for the [`watch` channel] include broadcasting configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610501,"byte_end":10610575,"line_start":283,"line_end":283,"column_start":1,"column_end":75}},{"value":"/ changes or signalling program state changes, such as transitioning to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610576,"byte_end":10610649,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/ shutdown.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610650,"byte_end":10610663,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610664,"byte_end":10610667,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ **Example:** use a [`watch` channel] to notify tasks of configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610668,"byte_end":10610741,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"/ changes. In this example, a configuration file is checked periodically. When","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610742,"byte_end":10610822,"line_start":288,"line_end":288,"column_start":1,"column_end":81}},{"value":"/ the file changes, the configuration changes are signalled to consumers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610823,"byte_end":10610898,"line_start":289,"line_end":289,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610899,"byte_end":10610902,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610903,"byte_end":10610910,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610911,"byte_end":10610938,"line_start":292,"line_end":292,"column_start":1,"column_end":28}},{"value":"/ use tokio::time::{self, Duration, Instant};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610939,"byte_end":10610986,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610987,"byte_end":10610990,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10610991,"byte_end":10611007,"line_start":295,"line_end":295,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611008,"byte_end":10611011,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Eq, PartialEq)]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611012,"byte_end":10611054,"line_start":297,"line_end":297,"column_start":1,"column_end":43}},{"value":"/ struct Config {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611055,"byte_end":10611074,"line_start":298,"line_end":298,"column_start":1,"column_end":20}},{"value":"/     timeout: Duration,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611075,"byte_end":10611101,"line_start":299,"line_end":299,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611102,"byte_end":10611107,"line_start":300,"line_end":300,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611108,"byte_end":10611111,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ impl Config {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611112,"byte_end":10611129,"line_start":302,"line_end":302,"column_start":1,"column_end":18}},{"value":"/     async fn load_from_file() -> io::Result<Config> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611130,"byte_end":10611187,"line_start":303,"line_end":303,"column_start":1,"column_end":58}},{"value":"/         // file loading and deserialization logic here","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611188,"byte_end":10611246,"line_start":304,"line_end":304,"column_start":1,"column_end":59}},{"value":"/ # Ok(Config { timeout: Duration::from_secs(1) })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611247,"byte_end":10611299,"line_start":305,"line_end":305,"column_start":1,"column_end":53}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611300,"byte_end":10611309,"line_start":306,"line_end":306,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611310,"byte_end":10611315,"line_start":307,"line_end":307,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611316,"byte_end":10611319,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ async fn my_async_operation() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611320,"byte_end":10611355,"line_start":309,"line_end":309,"column_start":1,"column_end":36}},{"value":"/     // Do something here","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611356,"byte_end":10611384,"line_start":310,"line_end":310,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611385,"byte_end":10611390,"line_start":311,"line_end":311,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611391,"byte_end":10611394,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611395,"byte_end":10611413,"line_start":313,"line_end":313,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611414,"byte_end":10611435,"line_start":314,"line_end":314,"column_start":1,"column_end":22}},{"value":"/     // Load initial configuration value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611436,"byte_end":10611479,"line_start":315,"line_end":315,"column_start":1,"column_end":44}},{"value":"/     let mut config = Config::load_from_file().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611480,"byte_end":10611545,"line_start":316,"line_end":316,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611546,"byte_end":10611549,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/     // Create the watch channel, initialized with the loaded configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611550,"byte_end":10611628,"line_start":318,"line_end":318,"column_start":1,"column_end":79}},{"value":"/     let (tx, rx) = watch::channel(config.clone());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611629,"byte_end":10611683,"line_start":319,"line_end":319,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611684,"byte_end":10611687,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/     // Spawn a task to monitor the file.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611688,"byte_end":10611732,"line_start":321,"line_end":321,"column_start":1,"column_end":45}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611733,"byte_end":10611766,"line_start":322,"line_end":322,"column_start":1,"column_end":34}},{"value":"/         loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611767,"byte_end":10611785,"line_start":323,"line_end":323,"column_start":1,"column_end":19}},{"value":"/             // Wait 10 seconds between checks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611786,"byte_end":10611835,"line_start":324,"line_end":324,"column_start":1,"column_end":50}},{"value":"/             time::sleep(Duration::from_secs(10)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611836,"byte_end":10611895,"line_start":325,"line_end":325,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611896,"byte_end":10611899,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/             // Load the configuration file","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611900,"byte_end":10611946,"line_start":327,"line_end":327,"column_start":1,"column_end":47}},{"value":"/             let new_config = Config::load_from_file().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10611947,"byte_end":10612020,"line_start":328,"line_end":328,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612021,"byte_end":10612024,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/             // If the configuration changed, send the new config value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612025,"byte_end":10612099,"line_start":330,"line_end":330,"column_start":1,"column_end":75}},{"value":"/             // on the watch channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612100,"byte_end":10612140,"line_start":331,"line_end":331,"column_start":1,"column_end":41}},{"value":"/             if new_config != config {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612141,"byte_end":10612182,"line_start":332,"line_end":332,"column_start":1,"column_end":42}},{"value":"/                 tx.send(new_config.clone()).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612183,"byte_end":10612240,"line_start":333,"line_end":333,"column_start":1,"column_end":58}},{"value":"/                 config = new_config;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612241,"byte_end":10612281,"line_start":334,"line_end":334,"column_start":1,"column_end":41}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612282,"byte_end":10612299,"line_start":335,"line_end":335,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612300,"byte_end":10612313,"line_start":336,"line_end":336,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612314,"byte_end":10612325,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612326,"byte_end":10612329,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/     let mut handles = vec![];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612330,"byte_end":10612363,"line_start":339,"line_end":339,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612364,"byte_end":10612367,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/     // Spawn tasks that runs the async operation for at most `timeout`. If","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612368,"byte_end":10612446,"line_start":341,"line_end":341,"column_start":1,"column_end":79}},{"value":"/     // the timeout elapses, restart the operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612447,"byte_end":10612501,"line_start":342,"line_end":342,"column_start":1,"column_end":55}},{"value":"/     //","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612502,"byte_end":10612512,"line_start":343,"line_end":343,"column_start":1,"column_end":11}},{"value":"/     // The task simultaneously watches the `Config` for changes. When the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612513,"byte_end":10612590,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/     // timeout duration changes, the timeout is updated without restarting","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612591,"byte_end":10612669,"line_start":345,"line_end":345,"column_start":1,"column_end":79}},{"value":"/     // the in-flight operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612670,"byte_end":10612705,"line_start":346,"line_end":346,"column_start":1,"column_end":36}},{"value":"/     for _ in 0..5 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612706,"byte_end":10612729,"line_start":347,"line_end":347,"column_start":1,"column_end":24}},{"value":"/         // Clone a config watch handle for use in this task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612730,"byte_end":10612793,"line_start":348,"line_end":348,"column_start":1,"column_end":64}},{"value":"/         let mut rx = rx.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612794,"byte_end":10612830,"line_start":349,"line_end":349,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612831,"byte_end":10612834,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/         let handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612835,"byte_end":10612885,"line_start":351,"line_end":351,"column_start":1,"column_end":51}},{"value":"/             // Start the initial operation and pin the future to the stack.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612886,"byte_end":10612965,"line_start":352,"line_end":352,"column_start":1,"column_end":80}},{"value":"/             // Pinning to the stack is required to resume the operation","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10612966,"byte_end":10613041,"line_start":353,"line_end":353,"column_start":1,"column_end":76}},{"value":"/             // across multiple calls to `select!`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613042,"byte_end":10613095,"line_start":354,"line_end":354,"column_start":1,"column_end":54}},{"value":"/             let op = my_async_operation();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613096,"byte_end":10613142,"line_start":355,"line_end":355,"column_start":1,"column_end":47}},{"value":"/             tokio::pin!(op);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613143,"byte_end":10613175,"line_start":356,"line_end":356,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613176,"byte_end":10613179,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/             // Get the initial config value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613180,"byte_end":10613227,"line_start":358,"line_end":358,"column_start":1,"column_end":48}},{"value":"/             let mut conf = rx.borrow().clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613228,"byte_end":10613279,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613280,"byte_end":10613283,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/             let mut op_start = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613284,"byte_end":10613334,"line_start":361,"line_end":361,"column_start":1,"column_end":51}},{"value":"/             let sleep = time::sleep_until(op_start + conf.timeout);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613335,"byte_end":10613406,"line_start":362,"line_end":362,"column_start":1,"column_end":72}},{"value":"/             tokio::pin!(sleep);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613407,"byte_end":10613442,"line_start":363,"line_end":363,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613443,"byte_end":10613446,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/             loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613447,"byte_end":10613469,"line_start":365,"line_end":365,"column_start":1,"column_end":23}},{"value":"/                 tokio::select! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613470,"byte_end":10613506,"line_start":366,"line_end":366,"column_start":1,"column_end":37}},{"value":"/                     _ = &mut sleep => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613507,"byte_end":10613550,"line_start":367,"line_end":367,"column_start":1,"column_end":44}},{"value":"/                         // The operation elapsed. Restart it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613551,"byte_end":10613615,"line_start":368,"line_end":368,"column_start":1,"column_end":65}},{"value":"/                         op.set(my_async_operation());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613616,"byte_end":10613673,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613674,"byte_end":10613677,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/                         // Track the new start time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613678,"byte_end":10613733,"line_start":371,"line_end":371,"column_start":1,"column_end":56}},{"value":"/                         op_start = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613734,"byte_end":10613788,"line_start":372,"line_end":372,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613789,"byte_end":10613792,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/                         // Restart the timeout","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613793,"byte_end":10613843,"line_start":374,"line_end":374,"column_start":1,"column_end":51}},{"value":"/                         sleep.set(time::sleep_until(op_start + conf.timeout));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613844,"byte_end":10613926,"line_start":375,"line_end":375,"column_start":1,"column_end":83}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613927,"byte_end":10613952,"line_start":376,"line_end":376,"column_start":1,"column_end":26}},{"value":"/                     _ = rx.changed() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613953,"byte_end":10613998,"line_start":377,"line_end":377,"column_start":1,"column_end":46}},{"value":"/                         conf = rx.borrow().clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10613999,"byte_end":10614054,"line_start":378,"line_end":378,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614055,"byte_end":10614058,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/                         // The configuration has been updated. Update the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614059,"byte_end":10614136,"line_start":380,"line_end":380,"column_start":1,"column_end":78}},{"value":"/                         // `sleep` using the new `timeout` value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614137,"byte_end":10614206,"line_start":381,"line_end":381,"column_start":1,"column_end":70}},{"value":"/                         sleep.as_mut().reset(op_start + conf.timeout);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614207,"byte_end":10614281,"line_start":382,"line_end":382,"column_start":1,"column_end":75}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614282,"byte_end":10614307,"line_start":383,"line_end":383,"column_start":1,"column_end":26}},{"value":"/                     _ = &mut op => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614308,"byte_end":10614348,"line_start":384,"line_end":384,"column_start":1,"column_end":41}},{"value":"/                         // The operation completed!","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614349,"byte_end":10614404,"line_start":385,"line_end":385,"column_start":1,"column_end":56}},{"value":"/                         return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614405,"byte_end":10614439,"line_start":386,"line_end":386,"column_start":1,"column_end":35}},{"value":"/                     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614440,"byte_end":10614465,"line_start":387,"line_end":387,"column_start":1,"column_end":26}},{"value":"/                 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614466,"byte_end":10614487,"line_start":388,"line_end":388,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614488,"byte_end":10614505,"line_start":389,"line_end":389,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614506,"byte_end":10614521,"line_start":390,"line_end":390,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614522,"byte_end":10614525,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/         handles.push(handle);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614526,"byte_end":10614559,"line_start":392,"line_end":392,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614560,"byte_end":10614569,"line_start":393,"line_end":393,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614570,"byte_end":10614573,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/     for handle in handles.drain(..) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614574,"byte_end":10614615,"line_start":395,"line_end":395,"column_start":1,"column_end":42}},{"value":"/         handle.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614616,"byte_end":10614650,"line_start":396,"line_end":396,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614651,"byte_end":10614660,"line_start":397,"line_end":397,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614661,"byte_end":10614666,"line_start":398,"line_end":398,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614667,"byte_end":10614674,"line_start":399,"line_end":399,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614675,"byte_end":10614678,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ [`watch` channel]: mod@crate::sync::watch","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614679,"byte_end":10614724,"line_start":401,"line_end":401,"column_start":1,"column_end":46}},{"value":"/ [`broadcast` channel]: mod@crate::sync::broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614725,"byte_end":10614778,"line_start":402,"line_end":402,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614779,"byte_end":10614782,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ # State synchronization","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614783,"byte_end":10614810,"line_start":404,"line_end":404,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614811,"byte_end":10614814,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ The remaining synchronization primitives focus on synchronizing state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614815,"byte_end":10614889,"line_start":406,"line_end":406,"column_start":1,"column_end":75}},{"value":"/ These are asynchronous equivalents to versions provided by `std`. They","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614890,"byte_end":10614964,"line_start":407,"line_end":407,"column_start":1,"column_end":75}},{"value":"/ operate in a similar way as their `std` counterparts but will wait","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10614965,"byte_end":10615035,"line_start":408,"line_end":408,"column_start":1,"column_end":71}},{"value":"/ asynchronously instead of blocking the thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615036,"byte_end":10615086,"line_start":409,"line_end":409,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615087,"byte_end":10615090,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ * [`Barrier`](Barrier) Ensures multiple tasks will wait for each other to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615091,"byte_end":10615168,"line_start":411,"line_end":411,"column_start":1,"column_end":78}},{"value":"/   reach a point in the program, before continuing execution all together.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615169,"byte_end":10615246,"line_start":412,"line_end":412,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615247,"byte_end":10615250,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ * [`Mutex`](Mutex) Mutual Exclusion mechanism, which ensures that at most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615251,"byte_end":10615328,"line_start":414,"line_end":414,"column_start":1,"column_end":78}},{"value":"/   one thread at a time is able to access some data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615329,"byte_end":10615384,"line_start":415,"line_end":415,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615385,"byte_end":10615388,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ * [`Notify`](Notify) Basic task notification. `Notify` supports notifying a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615389,"byte_end":10615468,"line_start":417,"line_end":417,"column_start":1,"column_end":80}},{"value":"/   receiving task without sending data. In this case, the task wakes up and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615469,"byte_end":10615547,"line_start":418,"line_end":418,"column_start":1,"column_end":79}},{"value":"/   resumes processing.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615548,"byte_end":10615573,"line_start":419,"line_end":419,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615574,"byte_end":10615577,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ * [`RwLock`](RwLock) Provides a mutual exclusion mechanism which allows","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615578,"byte_end":10615653,"line_start":421,"line_end":421,"column_start":1,"column_end":76}},{"value":"/   multiple readers at the same time, while allowing only one writer at a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615654,"byte_end":10615730,"line_start":422,"line_end":422,"column_start":1,"column_end":77}},{"value":"/   time. In some cases, this can be more efficient than a mutex.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615731,"byte_end":10615798,"line_start":423,"line_end":423,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615799,"byte_end":10615802,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ * [`Semaphore`](Semaphore) Limits the amount of concurrency. A semaphore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615803,"byte_end":10615879,"line_start":425,"line_end":425,"column_start":1,"column_end":77}},{"value":"/   holds a number of permits, which tasks may request in order to enter a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615880,"byte_end":10615956,"line_start":426,"line_end":426,"column_start":1,"column_end":77}},{"value":"/   critical section. Semaphores are useful for implementing limiting or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10615957,"byte_end":10616031,"line_start":427,"line_end":427,"column_start":1,"column_end":75}},{"value":"/   bounding of any kind.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616032,"byte_end":10616059,"line_start":428,"line_end":428,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":5743},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618368,"byte_end":10618375,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::sync::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":5744},{"krate":0,"index":5745},{"krate":0,"index":5746}],"decl_id":null,"docs":" A barrier enables multiple threads to synchronize the beginning of some computation.","sig":null,"attributes":[{"value":"/ A barrier enables multiple threads to synchronize the beginning of some computation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617415,"byte_end":10617503,"line_start":5,"line_end":5,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617504,"byte_end":10617507,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617508,"byte_end":10617515,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617516,"byte_end":10617536,"line_start":8,"line_end":8,"column_start":1,"column_end":21}},{"value":"/ # async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617537,"byte_end":10617560,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/ use tokio::sync::Barrier;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617561,"byte_end":10617590,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617591,"byte_end":10617594,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ use futures::future::join_all;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617595,"byte_end":10617629,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617630,"byte_end":10617653,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617654,"byte_end":10617657,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617658,"byte_end":10617703,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/ let barrier = Arc::new(Barrier::new(10));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617704,"byte_end":10617749,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617750,"byte_end":10617770,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617771,"byte_end":10617803,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617804,"byte_end":10617858,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617859,"byte_end":10617904,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/     handles.push(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617905,"byte_end":10617938,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617939,"byte_end":10617975,"line_start":22,"line_end":22,"column_start":1,"column_end":37}},{"value":"/         let wr = c.wait().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10617976,"byte_end":10618012,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618013,"byte_end":10618048,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/         wr","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618049,"byte_end":10618063,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618064,"byte_end":10618075,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618076,"byte_end":10618081,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/ // Will not resolve until all \"before wait\" messages have been printed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618082,"byte_end":10618156,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ let wrs = join_all(handles).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618157,"byte_end":10618195,"line_start":29,"line_end":29,"column_start":1,"column_end":39}},{"value":"/ // Exactly one barrier will resolve as the \"leader\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618196,"byte_end":10618251,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(wrs.into_iter().filter(|wr| wr.is_leader()).count(), 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618252,"byte_end":10618323,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618324,"byte_end":10618331,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618332,"byte_end":10618339,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4551},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618838,"byte_end":10618841,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<Barrier>::new","value":"pub fn new(usize) -> Barrier","parent":null,"children":[],"decl_id":null,"docs":" Creates a new barrier that can block a given number of threads.","sig":null,"attributes":[{"value":"/ Creates a new barrier that can block a given number of threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618598,"byte_end":10618665,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618670,"byte_end":10618673,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ A barrier will block `n`-1 threads which call [`Barrier::wait`] and then wake up all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618678,"byte_end":10618766,"line_start":51,"line_end":51,"column_start":5,"column_end":93}},{"value":"/ threads at once when the `n`th thread calls `wait`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618771,"byte_end":10618826,"line_start":52,"line_end":52,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4552},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619914,"byte_end":10619918,"line_start":82,"line_end":82,"column_start":18,"column_end":22},"name":"wait","qualname":"<Barrier>::wait","value":"pub async fn wait<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Does not resolve until all tasks have rendezvoused here.","sig":null,"attributes":[{"value":"/ Does not resolve until all tasks have rendezvoused here.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619440,"byte_end":10619500,"line_start":74,"line_end":74,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619505,"byte_end":10619508,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Barriers are re-usable after all threads have rendezvoused once, and can","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619513,"byte_end":10619589,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ be used continuously.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619594,"byte_end":10619619,"line_start":77,"line_end":77,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619624,"byte_end":10619627,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ A single (arbitrary) future will receive a [`BarrierWaitResult`] that returns `true` from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619632,"byte_end":10619725,"line_start":79,"line_end":79,"column_start":5,"column_end":98}},{"value":"/ [`BarrierWaitResult::is_leader`] when returning from this function, and all other threads","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619730,"byte_end":10619823,"line_start":80,"line_end":80,"column_start":5,"column_end":98}},{"value":"/ will receive a result that will return `false` from `is_leader`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10619828,"byte_end":10619896,"line_start":81,"line_end":81,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":5755},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621839,"byte_end":10621856,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"BarrierWaitResult","qualname":"::sync::barrier::BarrierWaitResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused.\n","sig":null,"attributes":[{"value":"/ A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621703,"byte_end":10621803,"line_start":126,"line_end":126,"column_start":1,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":4556},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10622104,"byte_end":10622113,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"is_leader","qualname":"<BarrierWaitResult>::is_leader","value":"pub fn is_leader(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this thread from wait is the \"leader thread\".","sig":null,"attributes":[{"value":"/ Returns `true` if this thread from wait is the \"leader thread\".","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621894,"byte_end":10621961,"line_start":131,"line_end":131,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621966,"byte_end":10621969,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Only one thread will have `true` returned from their result, all other threads will have","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621974,"byte_end":10622066,"line_start":133,"line_end":133,"column_start":5,"column_end":97}},{"value":"/ `false` returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10622071,"byte_end":10622092,"line_start":134,"line_end":134,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":4560},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"broadcast","qualname":"::sync::broadcast","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","parent":null,"children":[{"krate":0,"index":4561},{"krate":0,"index":4562},{"krate":0,"index":4563},{"krate":0,"index":4564},{"krate":0,"index":4565},{"krate":0,"index":4566},{"krate":0,"index":4567},{"krate":0,"index":4568},{"krate":0,"index":4569},{"krate":0,"index":4570},{"krate":0,"index":4571},{"krate":0,"index":4572},{"krate":0,"index":4573},{"krate":0,"index":11999},{"krate":0,"index":4574},{"krate":0,"index":4575},{"krate":0,"index":4576},{"krate":0,"index":12005},{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4581},{"krate":0,"index":4582},{"krate":0,"index":4585},{"krate":0,"index":4589},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4609},{"krate":0,"index":4614},{"krate":0,"index":4620},{"krate":0,"index":4625},{"krate":0,"index":4629},{"krate":0,"index":4635},{"krate":0,"index":4639},{"krate":0,"index":4642},{"krate":0,"index":4646},{"krate":0,"index":4649},{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4655},{"krate":0,"index":4657},{"krate":0,"index":4659},{"krate":0,"index":4661},{"krate":0,"index":4663},{"krate":0,"index":4672},{"krate":0,"index":4674},{"krate":0,"index":4676},{"krate":0,"index":4679},{"krate":0,"index":4682},{"krate":0,"index":4686},{"krate":0,"index":4692},{"krate":0,"index":4695},{"krate":0,"index":4700},{"krate":0,"index":4705},{"krate":0,"index":4711},{"krate":0,"index":4717},{"krate":0,"index":4720},{"krate":0,"index":4723},{"krate":0,"index":4728},{"krate":0,"index":4733}],"decl_id":null,"docs":" A multi-producer, multi-consumer broadcast queue. Each sent value is seen by\n all consumers.","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23059,"byte_end":23083,"line_start":247,"line_end":247,"column_start":13,"column_end":37}},{"value":"/ A multi-producer, multi-consumer broadcast queue. Each sent value is seen by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622155,"byte_end":10622235,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ all consumers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622236,"byte_end":10622254,"line_start":2,"line_end":2,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622255,"byte_end":10622258,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ A [`Sender`] is used to broadcast values to **all** connected [`Receiver`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622259,"byte_end":10622337,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ values. [`Sender`] handles are clone-able, allowing concurrent send and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622338,"byte_end":10622413,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ receive actions. [`Sender`] and [`Receiver`] are both `Send` and `Sync` as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622414,"byte_end":10622492,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ long as `T` is also `Send` or `Sync` respectively.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622493,"byte_end":10622547,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622548,"byte_end":10622551,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ When a value is sent, **all** [`Receiver`] handles are notified and will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622552,"byte_end":10622628,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ receive the value. The value is stored once inside the channel and cloned on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622629,"byte_end":10622709,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ demand for each receiver. Once all receivers have received a clone of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622710,"byte_end":10622787,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ value, the value is released from the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622788,"byte_end":10622838,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622839,"byte_end":10622842,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A channel is created by calling [`channel`], specifying the maximum number","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622843,"byte_end":10622921,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ of messages the channel can retain at any given time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622922,"byte_end":10622979,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622980,"byte_end":10622983,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ New [`Receiver`] handles are created by calling [`Sender::subscribe`]. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10622984,"byte_end":10623062,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ returned [`Receiver`] will receive values sent **after** the call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623063,"byte_end":10623135,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/ `subscribe`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623136,"byte_end":10623152,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623153,"byte_end":10623156,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Lagging","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623157,"byte_end":10623171,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623172,"byte_end":10623175,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ As sent messages must be retained until **all** [`Receiver`] handles receive","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623176,"byte_end":10623256,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ a clone, broadcast channels are susceptible to the \"slow receiver\" problem.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623257,"byte_end":10623336,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ In this case, all but one receiver are able to receive values at the rate","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623337,"byte_end":10623414,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ they are sent. Because one receiver is stalled, the channel starts to fill","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623415,"byte_end":10623493,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623494,"byte_end":10623501,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623502,"byte_end":10623505,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This broadcast channel implementation handles this case by setting a hard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623506,"byte_end":10623583,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ upper bound on the number of values the channel may retain at any given","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623584,"byte_end":10623659,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ time. This upper bound is passed to the [`channel`] function as an argument.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623660,"byte_end":10623740,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623741,"byte_end":10623744,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If a value is sent when the channel is at capacity, the oldest value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623745,"byte_end":10623817,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ currently held by the channel is released. This frees up space for the new","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623818,"byte_end":10623896,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ value. Any receiver that has not yet seen the released value will return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623897,"byte_end":10623973,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ [`RecvError::Lagged`] the next time [`recv`] is called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10623974,"byte_end":10624033,"line_start":36,"line_end":36,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624034,"byte_end":10624037,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Once [`RecvError::Lagged`] is returned, the lagging receiver's position is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624038,"byte_end":10624116,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ updated to the oldest value contained by the channel. The next call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624117,"byte_end":10624191,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ [`recv`] will return this value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624192,"byte_end":10624228,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624229,"byte_end":10624232,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This behavior enables a receiver to detect when it has lagged so far behind","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624233,"byte_end":10624312,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ that data has been dropped. The caller may decide how to respond to this:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624313,"byte_end":10624390,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ either by aborting its task or by tolerating lost messages and resuming","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624391,"byte_end":10624466,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ consumption of the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624467,"byte_end":10624498,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624499,"byte_end":10624502,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ## Closing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624503,"byte_end":10624517,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624518,"byte_end":10624521,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ When **all** [`Sender`] handles have been dropped, no new values may be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624522,"byte_end":10624597,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ sent. At this point, the channel is \"closed\". Once a receiver has received","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624598,"byte_end":10624676,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ all values retained by the channel, the next call to [`recv`] will return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624677,"byte_end":10624754,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ with [`RecvError::Closed`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624755,"byte_end":10624786,"line_start":52,"line_end":52,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624787,"byte_end":10624790,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`Sender`]: crate::sync::broadcast::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624791,"byte_end":10624837,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/ [`Sender::subscribe`]: crate::sync::broadcast::Sender::subscribe","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624838,"byte_end":10624906,"line_start":55,"line_end":55,"column_start":1,"column_end":69}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624907,"byte_end":10624957,"line_start":56,"line_end":56,"column_start":1,"column_end":51}},{"value":"/ [`channel`]: crate::sync::broadcast::channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10624958,"byte_end":10625006,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/ [`RecvError::Lagged`]: crate::sync::broadcast::error::RecvError::Lagged","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625007,"byte_end":10625082,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ [`RecvError::Closed`]: crate::sync::broadcast::error::RecvError::Closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625083,"byte_end":10625158,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625159,"byte_end":10625211,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625212,"byte_end":10625215,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625216,"byte_end":10625230,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625231,"byte_end":10625234,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Basic usage","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625235,"byte_end":10625250,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625251,"byte_end":10625254,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625255,"byte_end":10625262,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625263,"byte_end":10625294,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625295,"byte_end":10625298,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625299,"byte_end":10625317,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625318,"byte_end":10625339,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625340,"byte_end":10625391,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625392,"byte_end":10625429,"line_start":72,"line_end":72,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625430,"byte_end":10625433,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625434,"byte_end":10625467,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625468,"byte_end":10625522,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625523,"byte_end":10625577,"line_start":76,"line_end":76,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625578,"byte_end":10625589,"line_start":77,"line_end":77,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625590,"byte_end":10625593,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625594,"byte_end":10625627,"line_start":79,"line_end":79,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625628,"byte_end":10625682,"line_start":80,"line_end":80,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625683,"byte_end":10625737,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625738,"byte_end":10625749,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625750,"byte_end":10625753,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625754,"byte_end":10625783,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625784,"byte_end":10625813,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625814,"byte_end":10625819,"line_start":86,"line_end":86,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625820,"byte_end":10625827,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625828,"byte_end":10625831,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Handling lag","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625832,"byte_end":10625848,"line_start":89,"line_end":89,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625849,"byte_end":10625852,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625853,"byte_end":10625860,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625861,"byte_end":10625892,"line_start":92,"line_end":92,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625893,"byte_end":10625896,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625897,"byte_end":10625915,"line_start":94,"line_end":94,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625916,"byte_end":10625937,"line_start":95,"line_end":95,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx) = broadcast::channel(2);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625938,"byte_end":10625987,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625988,"byte_end":10625991,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10625992,"byte_end":10626021,"line_start":98,"line_end":98,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626022,"byte_end":10626051,"line_start":99,"line_end":99,"column_start":1,"column_end":30}},{"value":"/     tx.send(30).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626052,"byte_end":10626081,"line_start":100,"line_end":100,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626082,"byte_end":10626085,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/     // The receiver lagged behind","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626086,"byte_end":10626123,"line_start":102,"line_end":102,"column_start":1,"column_end":38}},{"value":"/     assert!(rx.recv().await.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626124,"byte_end":10626166,"line_start":103,"line_end":103,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626167,"byte_end":10626170,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/     // At this point, we can abort or continue with lost messages","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626171,"byte_end":10626240,"line_start":105,"line_end":105,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626241,"byte_end":10626244,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(20, rx.recv().await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626245,"byte_end":10626294,"line_start":107,"line_end":107,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(30, rx.recv().await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626295,"byte_end":10626344,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626345,"byte_end":10626350,"line_start":109,"line_end":109,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626351,"byte_end":10626358,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4582},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627555,"byte_end":10627561,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::broadcast::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":4584}],"decl_id":null,"docs":" Sending-half of the [`broadcast`] channel.","sig":null,"attributes":[{"value":"/ Sending-half of the [`broadcast`] channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626762,"byte_end":10626808,"line_start":126,"line_end":126,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626809,"byte_end":10626812,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ May be used from many threads. Messages can be sent with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626813,"byte_end":10626873,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ [`send`][Sender::send].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626874,"byte_end":10626901,"line_start":129,"line_end":129,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626902,"byte_end":10626905,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626906,"byte_end":10626920,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626921,"byte_end":10626924,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626925,"byte_end":10626932,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626933,"byte_end":10626964,"line_start":134,"line_end":134,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626965,"byte_end":10626968,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626969,"byte_end":10626987,"line_start":136,"line_end":136,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10626988,"byte_end":10627009,"line_start":137,"line_end":137,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627010,"byte_end":10627061,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627062,"byte_end":10627099,"line_start":139,"line_end":139,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627100,"byte_end":10627103,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627104,"byte_end":10627137,"line_start":141,"line_end":141,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627138,"byte_end":10627192,"line_start":142,"line_end":142,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627193,"byte_end":10627247,"line_start":143,"line_end":143,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627248,"byte_end":10627259,"line_start":144,"line_end":144,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627260,"byte_end":10627263,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627264,"byte_end":10627297,"line_start":146,"line_end":146,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627298,"byte_end":10627352,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627353,"byte_end":10627407,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627408,"byte_end":10627419,"line_start":149,"line_end":149,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627420,"byte_end":10627423,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627424,"byte_end":10627453,"line_start":151,"line_end":151,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627454,"byte_end":10627483,"line_start":152,"line_end":152,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627484,"byte_end":10627489,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627490,"byte_end":10627497,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627498,"byte_end":10627501,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ [`broadcast`]: crate::sync::broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627502,"byte_end":10627543,"line_start":156,"line_end":156,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4585},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628401,"byte_end":10628409,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::broadcast::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":4587},{"krate":0,"index":4588}],"decl_id":null,"docs":" Receiving-half of the [`broadcast`] channel.","sig":null,"attributes":[{"value":"/ Receiving-half of the [`broadcast`] channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627598,"byte_end":10627646,"line_start":161,"line_end":161,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627647,"byte_end":10627650,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ Must not be used concurrently. Messages may be retrieved using","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627651,"byte_end":10627717,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ [`recv`][Receiver::recv].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627718,"byte_end":10627747,"line_start":164,"line_end":164,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627748,"byte_end":10627751,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627752,"byte_end":10627766,"line_start":166,"line_end":166,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627767,"byte_end":10627770,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627771,"byte_end":10627778,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627779,"byte_end":10627810,"line_start":169,"line_end":169,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627811,"byte_end":10627814,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627815,"byte_end":10627833,"line_start":171,"line_end":171,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627834,"byte_end":10627855,"line_start":172,"line_end":172,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627856,"byte_end":10627907,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627908,"byte_end":10627945,"line_start":174,"line_end":174,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627946,"byte_end":10627949,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627950,"byte_end":10627983,"line_start":176,"line_end":176,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10627984,"byte_end":10628038,"line_start":177,"line_end":177,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628039,"byte_end":10628093,"line_start":178,"line_end":178,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628094,"byte_end":10628105,"line_start":179,"line_end":179,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628106,"byte_end":10628109,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628110,"byte_end":10628143,"line_start":181,"line_end":181,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628144,"byte_end":10628198,"line_start":182,"line_end":182,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628199,"byte_end":10628253,"line_start":183,"line_end":183,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628254,"byte_end":10628265,"line_start":184,"line_end":184,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628266,"byte_end":10628269,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628270,"byte_end":10628299,"line_start":186,"line_end":186,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628300,"byte_end":10628329,"line_start":187,"line_end":187,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628330,"byte_end":10628335,"line_start":188,"line_end":188,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628336,"byte_end":10628343,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628344,"byte_end":10628347,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`broadcast`]: crate::sync::broadcast","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628348,"byte_end":10628389,"line_start":191,"line_end":191,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":4589},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628558,"byte_end":10628563,"line_start":200,"line_end":200,"column_start":9,"column_end":14},"name":"error","qualname":"::sync::broadcast::error","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","parent":null,"children":[{"krate":0,"index":4590},{"krate":0,"index":5762},{"krate":0,"index":5766},{"krate":0,"index":4591},{"krate":0,"index":4594},{"krate":0,"index":5769},{"krate":0,"index":5779},{"krate":0,"index":5775},{"krate":0,"index":5776},{"krate":0,"index":4596},{"krate":0,"index":4598},{"krate":0,"index":5781},{"krate":0,"index":5793},{"krate":0,"index":5789},{"krate":0,"index":5790},{"krate":0,"index":4599},{"krate":0,"index":4601}],"decl_id":null,"docs":" Broadcast error types\n","sig":null,"attributes":[{"value":"/ Broadcast error types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628570,"byte_end":10628595,"line_start":201,"line_end":201,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":5762},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629067,"byte_end":10629076,"line_start":214,"line_end":214,"column_start":16,"column_end":25},"name":"SendError","qualname":"::sync::broadcast::error::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by from the [`send`] function on a [`Sender`].","sig":null,"attributes":[{"value":"/ Error returned by from the [`send`] function on a [`Sender`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628620,"byte_end":10628685,"line_start":205,"line_end":205,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628690,"byte_end":10628693,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ A **send** operation can only fail if there are no active receivers,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628698,"byte_end":10628770,"line_start":207,"line_end":207,"column_start":5,"column_end":77}},{"value":"/ implying that the message could never be received. The error contains the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628775,"byte_end":10628852,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"/ message being sent as a payload so it can be recovered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628857,"byte_end":10628916,"line_start":209,"line_end":209,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628921,"byte_end":10628924,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ [`send`]: crate::sync::broadcast::Sender::send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628929,"byte_end":10628979,"line_start":211,"line_end":211,"column_start":5,"column_end":55}},{"value":"/ [`Sender`]: crate::sync::broadcast::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10628984,"byte_end":10629030,"line_start":212,"line_end":212,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5765},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629080,"byte_end":10629085,"line_start":214,"line_end":214,"column_start":29,"column_end":34},"name":"0","qualname":"::sync::broadcast::error::SendError::0","value":"T","parent":{"krate":0,"index":5762},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5770},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629682,"byte_end":10629688,"line_start":232,"line_end":232,"column_start":9,"column_end":15},"name":"Closed","qualname":"::sync::broadcast::error::RecvError::Closed","value":"RecvError::Closed","parent":{"krate":0,"index":5769},"children":[],"decl_id":null,"docs":" There are no more active senders implying no further messages will ever\n be sent.\n","sig":null,"attributes":[{"value":"/ There are no more active senders implying no further messages will ever","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629577,"byte_end":10629652,"line_start":230,"line_end":230,"column_start":9,"column_end":84}},{"value":"/ be sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629661,"byte_end":10629673,"line_start":231,"line_end":231,"column_start":9,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5772},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629914,"byte_end":10629920,"line_start":238,"line_end":238,"column_start":9,"column_end":15},"name":"Lagged","qualname":"::sync::broadcast::error::RecvError::Lagged","value":"RecvError::Lagged(u64)","parent":{"krate":0,"index":5769},"children":[],"decl_id":null,"docs":" The receiver lagged too far behind. Attempting to receive again will\n return the oldest message still retained by the channel.","sig":null,"attributes":[{"value":"/ The receiver lagged too far behind. Attempting to receive again will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629699,"byte_end":10629771,"line_start":234,"line_end":234,"column_start":9,"column_end":81}},{"value":"/ return the oldest message still retained by the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629780,"byte_end":10629840,"line_start":235,"line_end":235,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629849,"byte_end":10629852,"line_start":236,"line_end":236,"column_start":9,"column_end":12}},{"value":"/ Includes the number of skipped messages.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629861,"byte_end":10629905,"line_start":237,"line_end":237,"column_start":9,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":5769},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629557,"byte_end":10629566,"line_start":229,"line_end":229,"column_start":14,"column_end":23},"name":"RecvError","qualname":"::sync::broadcast::error::RecvError","value":"pub enum RecvError {\n\n    /// There are no more active senders implying no further messages will ever\n    /// be sent.\n    Closed,\n\n    /// The receiver lagged too far behind. Attempting to receive again will\n    /// return the oldest message still retained by the channel.\n    ///\n    /// Includes the number of skipped messages.\n    Lagged(u64),\n}","parent":null,"children":[{"krate":0,"index":5770},{"krate":0,"index":5772}],"decl_id":null,"docs":" An error returned from the [`recv`] function on a [`Receiver`].","sig":null,"attributes":[{"value":"/ An error returned from the [`recv`] function on a [`Receiver`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629324,"byte_end":10629391,"line_start":224,"line_end":224,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629396,"byte_end":10629399,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629404,"byte_end":10629456,"line_start":226,"line_end":226,"column_start":5,"column_end":57}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629461,"byte_end":10629511,"line_start":227,"line_end":227,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5782},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630760,"byte_end":10630765,"line_start":262,"line_end":262,"column_start":9,"column_end":14},"name":"Empty","qualname":"::sync::broadcast::error::TryRecvError::Empty","value":"TryRecvError::Empty","parent":{"krate":0,"index":5781},"children":[],"decl_id":null,"docs":" The channel is currently empty. There are still active\n [`Sender`] handles, so data may yet become available.","sig":null,"attributes":[{"value":"/ The channel is currently empty. There are still active","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630560,"byte_end":10630618,"line_start":258,"line_end":258,"column_start":9,"column_end":67}},{"value":"/ [`Sender`] handles, so data may yet become available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630627,"byte_end":10630684,"line_start":259,"line_end":259,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630693,"byte_end":10630696,"line_start":260,"line_end":260,"column_start":9,"column_end":12}},{"value":"/ [`Sender`]: crate::sync::broadcast::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630705,"byte_end":10630751,"line_start":261,"line_end":261,"column_start":9,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5784},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630881,"byte_end":10630887,"line_start":266,"line_end":266,"column_start":9,"column_end":15},"name":"Closed","qualname":"::sync::broadcast::error::TryRecvError::Closed","value":"TryRecvError::Closed","parent":{"krate":0,"index":5781},"children":[],"decl_id":null,"docs":" There are no more active senders implying no further messages will ever\n be sent.\n","sig":null,"attributes":[{"value":"/ There are no more active senders implying no further messages will ever","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630776,"byte_end":10630851,"line_start":264,"line_end":264,"column_start":9,"column_end":84}},{"value":"/ be sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630860,"byte_end":10630872,"line_start":265,"line_end":265,"column_start":9,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5786},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631160,"byte_end":10631166,"line_start":273,"line_end":273,"column_start":9,"column_end":15},"name":"Lagged","qualname":"::sync::broadcast::error::TryRecvError::Lagged","value":"TryRecvError::Lagged(u64)","parent":{"krate":0,"index":5781},"children":[],"decl_id":null,"docs":" The receiver lagged too far behind and has been forcibly disconnected.\n Attempting to receive again will return the oldest message still\n retained by the channel.","sig":null,"attributes":[{"value":"/ The receiver lagged too far behind and has been forcibly disconnected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630898,"byte_end":10630972,"line_start":268,"line_end":268,"column_start":9,"column_end":83}},{"value":"/ Attempting to receive again will return the oldest message still","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630981,"byte_end":10631049,"line_start":269,"line_end":269,"column_start":9,"column_end":77}},{"value":"/ retained by the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631058,"byte_end":10631086,"line_start":270,"line_end":270,"column_start":9,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631095,"byte_end":10631098,"line_start":271,"line_end":271,"column_start":9,"column_end":12}},{"value":"/ Includes the number of skipped messages.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631107,"byte_end":10631151,"line_start":272,"line_end":272,"column_start":9,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":5781},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630537,"byte_end":10630549,"line_start":257,"line_end":257,"column_start":14,"column_end":26},"name":"TryRecvError","qualname":"::sync::broadcast::error::TryRecvError","value":"pub enum TryRecvError {\n\n    /// The channel is currently empty. There are still active\n    /// [`Sender`] handles, so data may yet become available.\n    ///\n    /// [`Sender`]: crate::sync::broadcast::Sender\n    Empty,\n\n    /// There are no more active senders implying no further messages will ever\n    /// be sent.\n    Closed,\n\n    /// The receiver lagged too far behind and has been forcibly disconnected.\n    /// Attempting to receive again will return the oldest message still\n    /// retained by the channel.\n    ///\n    /// Includes the number of skipped messages.\n    Lagged(u64),\n}","parent":null,"children":[{"krate":0,"index":5782},{"krate":0,"index":5784},{"krate":0,"index":5786}],"decl_id":null,"docs":" An error returned from the [`try_recv`] function on a [`Receiver`].","sig":null,"attributes":[{"value":"/ An error returned from the [`try_recv`] function on a [`Receiver`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630292,"byte_end":10630363,"line_start":252,"line_end":252,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630368,"byte_end":10630371,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ [`try_recv`]: crate::sync::broadcast::Receiver::try_recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630376,"byte_end":10630436,"line_start":254,"line_end":254,"column_start":5,"column_end":65}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630441,"byte_end":10630491,"line_start":255,"line_end":255,"column_start":5,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":4653},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635980,"byte_end":10635987,"line_start":445,"line_end":445,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::broadcast::channel","value":"pub fn channel<T: Clone>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a bounded, multi-producer, multi-consumer channel where each sent\n value is broadcasted to all active receivers.","sig":null,"attributes":[{"value":"/ Create a bounded, multi-producer, multi-consumer channel where each sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634354,"byte_end":10634430,"line_start":400,"line_end":400,"column_start":1,"column_end":77}},{"value":"/ value is broadcasted to all active receivers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634431,"byte_end":10634480,"line_start":401,"line_end":401,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634481,"byte_end":10634484,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ All data sent on [`Sender`] will become available on every active","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634485,"byte_end":10634554,"line_start":403,"line_end":403,"column_start":1,"column_end":70}},{"value":"/ [`Receiver`] in the same order as it was sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634555,"byte_end":10634605,"line_start":404,"line_end":404,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634606,"byte_end":10634609,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ The `Sender` can be cloned to `send` to the same channel from multiple","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634610,"byte_end":10634684,"line_start":406,"line_end":406,"column_start":1,"column_end":75}},{"value":"/ points in the process or it can be used concurrently from an `Arc`. New","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634685,"byte_end":10634760,"line_start":407,"line_end":407,"column_start":1,"column_end":76}},{"value":"/ `Receiver` handles are created by calling [`Sender::subscribe`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634761,"byte_end":10634829,"line_start":408,"line_end":408,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634830,"byte_end":10634833,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ If all [`Receiver`] handles are dropped, the `send` method will return a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634834,"byte_end":10634910,"line_start":410,"line_end":410,"column_start":1,"column_end":77}},{"value":"/ [`SendError`]. Similarly, if all [`Sender`] handles are dropped, the [`recv`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634911,"byte_end":10634992,"line_start":411,"line_end":411,"column_start":1,"column_end":82}},{"value":"/ method will return a [`RecvError`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634993,"byte_end":10635032,"line_start":412,"line_end":412,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635033,"byte_end":10635036,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ [`Sender`]: crate::sync::broadcast::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635037,"byte_end":10635083,"line_start":414,"line_end":414,"column_start":1,"column_end":47}},{"value":"/ [`Sender::subscribe`]: crate::sync::broadcast::Sender::subscribe","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635084,"byte_end":10635152,"line_start":415,"line_end":415,"column_start":1,"column_end":69}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635153,"byte_end":10635203,"line_start":416,"line_end":416,"column_start":1,"column_end":51}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635204,"byte_end":10635256,"line_start":417,"line_end":417,"column_start":1,"column_end":53}},{"value":"/ [`SendError`]: crate::sync::broadcast::error::SendError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635257,"byte_end":10635316,"line_start":418,"line_end":418,"column_start":1,"column_end":60}},{"value":"/ [`RecvError`]: crate::sync::broadcast::error::RecvError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635317,"byte_end":10635376,"line_start":419,"line_end":419,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635377,"byte_end":10635380,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635381,"byte_end":10635395,"line_start":421,"line_end":421,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635396,"byte_end":10635399,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635400,"byte_end":10635407,"line_start":423,"line_end":423,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635408,"byte_end":10635439,"line_start":424,"line_end":424,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635440,"byte_end":10635443,"line_start":425,"line_end":425,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635444,"byte_end":10635462,"line_start":426,"line_end":426,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635463,"byte_end":10635484,"line_start":427,"line_end":427,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635485,"byte_end":10635536,"line_start":428,"line_end":428,"column_start":1,"column_end":52}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635537,"byte_end":10635574,"line_start":429,"line_end":429,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635575,"byte_end":10635578,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635579,"byte_end":10635612,"line_start":431,"line_end":431,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635613,"byte_end":10635667,"line_start":432,"line_end":432,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635668,"byte_end":10635722,"line_start":433,"line_end":433,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635723,"byte_end":10635734,"line_start":434,"line_end":434,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635735,"byte_end":10635738,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635739,"byte_end":10635772,"line_start":436,"line_end":436,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635773,"byte_end":10635827,"line_start":437,"line_end":437,"column_start":1,"column_end":55}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635828,"byte_end":10635882,"line_start":438,"line_end":438,"column_start":1,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635883,"byte_end":10635894,"line_start":439,"line_end":439,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635895,"byte_end":10635898,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635899,"byte_end":10635928,"line_start":441,"line_end":441,"column_start":1,"column_end":30}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635929,"byte_end":10635958,"line_start":442,"line_end":442,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635959,"byte_end":10635964,"line_start":443,"line_end":443,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10635965,"byte_end":10635972,"line_start":444,"line_end":444,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4665},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639039,"byte_end":10639043,"line_start":542,"line_end":542,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(&Self, T) -> Result<usize, SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a value to all active [`Receiver`] handles, returning\n it back if it could not be sent.","sig":null,"attributes":[{"value":"/ Attempts to send a value to all active [`Receiver`] handles, returning","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637189,"byte_end":10637263,"line_start":492,"line_end":492,"column_start":5,"column_end":79}},{"value":"/ it back if it could not be sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637268,"byte_end":10637304,"line_start":493,"line_end":493,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637309,"byte_end":10637312,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ A successful send occurs when there is at least one active [`Receiver`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637317,"byte_end":10637392,"line_start":495,"line_end":495,"column_start":5,"column_end":80}},{"value":"/ handle. An unsuccessful send would be one where all associated","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637397,"byte_end":10637463,"line_start":496,"line_end":496,"column_start":5,"column_end":71}},{"value":"/ [`Receiver`] handles have already been dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637468,"byte_end":10637519,"line_start":497,"line_end":497,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637524,"byte_end":10637527,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637532,"byte_end":10637544,"line_start":499,"line_end":499,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637549,"byte_end":10637552,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ On success, the number of subscribed [`Receiver`] handles is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637557,"byte_end":10637631,"line_start":501,"line_end":501,"column_start":5,"column_end":79}},{"value":"/ This does not mean that this number of receivers will see the message as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637636,"byte_end":10637712,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ a receiver may drop before receiving the message.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637717,"byte_end":10637770,"line_start":503,"line_end":503,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637775,"byte_end":10637778,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637783,"byte_end":10637793,"line_start":505,"line_end":505,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637798,"byte_end":10637801,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ A return value of `Ok` **does not** mean that the sent value will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637806,"byte_end":10637878,"line_start":507,"line_end":507,"column_start":5,"column_end":77}},{"value":"/ observed by all or any of the active [`Receiver`] handles. [`Receiver`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637883,"byte_end":10637958,"line_start":508,"line_end":508,"column_start":5,"column_end":80}},{"value":"/ handles may be dropped before receiving the sent message.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637963,"byte_end":10638024,"line_start":509,"line_end":509,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638029,"byte_end":10638032,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ A return value of `Err` **does not** mean that future calls to `send`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638037,"byte_end":10638110,"line_start":511,"line_end":511,"column_start":5,"column_end":78}},{"value":"/ will fail. New [`Receiver`] handles may be created by calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638115,"byte_end":10638180,"line_start":512,"line_end":512,"column_start":5,"column_end":70}},{"value":"/ [`subscribe`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638185,"byte_end":10638203,"line_start":513,"line_end":513,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638208,"byte_end":10638211,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638216,"byte_end":10638266,"line_start":515,"line_end":515,"column_start":5,"column_end":55}},{"value":"/ [`subscribe`]: crate::sync::broadcast::Sender::subscribe","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638271,"byte_end":10638331,"line_start":516,"line_end":516,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638336,"byte_end":10638339,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638344,"byte_end":10638358,"line_start":518,"line_end":518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638363,"byte_end":10638366,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638371,"byte_end":10638378,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638383,"byte_end":10638414,"line_start":521,"line_end":521,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638419,"byte_end":10638422,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638427,"byte_end":10638445,"line_start":523,"line_end":523,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638450,"byte_end":10638471,"line_start":524,"line_end":524,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638476,"byte_end":10638527,"line_start":525,"line_end":525,"column_start":5,"column_end":56}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638532,"byte_end":10638569,"line_start":526,"line_end":526,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638574,"byte_end":10638577,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638582,"byte_end":10638615,"line_start":528,"line_end":528,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638620,"byte_end":10638674,"line_start":529,"line_end":529,"column_start":5,"column_end":59}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638679,"byte_end":10638733,"line_start":530,"line_end":530,"column_start":5,"column_end":59}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638738,"byte_end":10638749,"line_start":531,"line_end":531,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638754,"byte_end":10638757,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638762,"byte_end":10638795,"line_start":533,"line_end":533,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638800,"byte_end":10638854,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638859,"byte_end":10638913,"line_start":535,"line_end":535,"column_start":5,"column_end":59}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638918,"byte_end":10638929,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638934,"byte_end":10638937,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638942,"byte_end":10638971,"line_start":538,"line_end":538,"column_start":5,"column_end":34}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10638976,"byte_end":10639005,"line_start":539,"line_end":539,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639010,"byte_end":10639015,"line_start":540,"line_end":540,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639020,"byte_end":10639027,"line_start":541,"line_end":541,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4667},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639803,"byte_end":10639812,"line_start":570,"line_end":570,"column_start":12,"column_end":21},"name":"subscribe","qualname":"<Sender<T>>::subscribe","value":"pub fn subscribe(&Self) -> Receiver<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Receiver`] handle that will receive values sent **after**\n this call to `subscribe`.","sig":null,"attributes":[{"value":"/ Creates a new [`Receiver`] handle that will receive values sent **after**","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639208,"byte_end":10639285,"line_start":547,"line_end":547,"column_start":5,"column_end":82}},{"value":"/ this call to `subscribe`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639290,"byte_end":10639319,"line_start":548,"line_end":548,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639324,"byte_end":10639327,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639332,"byte_end":10639346,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639351,"byte_end":10639354,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639359,"byte_end":10639366,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639371,"byte_end":10639402,"line_start":553,"line_end":553,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639407,"byte_end":10639410,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639415,"byte_end":10639433,"line_start":555,"line_end":555,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639438,"byte_end":10639459,"line_start":556,"line_end":556,"column_start":5,"column_end":26}},{"value":"/     let (tx, _rx) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639464,"byte_end":10639511,"line_start":557,"line_end":557,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639516,"byte_end":10639519,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/     // Will not be seen","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639524,"byte_end":10639551,"line_start":559,"line_end":559,"column_start":5,"column_end":32}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639556,"byte_end":10639585,"line_start":560,"line_end":560,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639590,"byte_end":10639593,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/     let mut rx = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639598,"byte_end":10639634,"line_start":562,"line_end":562,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639639,"byte_end":10639642,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639647,"byte_end":10639676,"line_start":564,"line_end":564,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639681,"byte_end":10639684,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/     let value = rx.recv().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639689,"byte_end":10639734,"line_start":566,"line_end":566,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(20, value);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639739,"byte_end":10639769,"line_start":567,"line_end":567,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639774,"byte_end":10639779,"line_start":568,"line_end":568,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639784,"byte_end":10639791,"line_start":569,"line_end":569,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4668},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10641071,"byte_end":10641085,"line_start":611,"line_end":611,"column_start":12,"column_end":26},"name":"receiver_count","qualname":"<Sender<T>>::receiver_count","value":"pub fn receiver_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of active receivers","sig":null,"attributes":[{"value":"/ Returns the number of active receivers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639919,"byte_end":10639961,"line_start":575,"line_end":575,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639966,"byte_end":10639969,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ An active receiver is a [`Receiver`] handle returned from [`channel`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10639974,"byte_end":10640050,"line_start":577,"line_end":577,"column_start":5,"column_end":81}},{"value":"/ [`subscribe`]. These are the handles that will receive values sent on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640055,"byte_end":10640128,"line_start":578,"line_end":578,"column_start":5,"column_end":78}},{"value":"/ this [`Sender`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640133,"byte_end":10640153,"line_start":579,"line_end":579,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640158,"byte_end":10640161,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640166,"byte_end":10640176,"line_start":581,"line_end":581,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640181,"byte_end":10640184,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ It is not guaranteed that a sent message will reach this number of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640189,"byte_end":10640259,"line_start":583,"line_end":583,"column_start":5,"column_end":75}},{"value":"/ receivers. Active receivers may never call [`recv`] again before","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640264,"byte_end":10640332,"line_start":584,"line_end":584,"column_start":5,"column_end":73}},{"value":"/ dropping.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640337,"byte_end":10640350,"line_start":585,"line_end":585,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640355,"byte_end":10640358,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640363,"byte_end":10640415,"line_start":587,"line_end":587,"column_start":5,"column_end":57}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640420,"byte_end":10640470,"line_start":588,"line_end":588,"column_start":5,"column_end":55}},{"value":"/ [`Sender`]: crate::sync::broadcast::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640475,"byte_end":10640521,"line_start":589,"line_end":589,"column_start":5,"column_end":51}},{"value":"/ [`subscribe`]: crate::sync::broadcast::Sender::subscribe","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640526,"byte_end":10640586,"line_start":590,"line_end":590,"column_start":5,"column_end":65}},{"value":"/ [`channel`]: crate::sync::broadcast::channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640591,"byte_end":10640639,"line_start":591,"line_end":591,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640644,"byte_end":10640647,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640652,"byte_end":10640666,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640671,"byte_end":10640674,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640679,"byte_end":10640686,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640691,"byte_end":10640722,"line_start":596,"line_end":596,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640727,"byte_end":10640730,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640735,"byte_end":10640753,"line_start":598,"line_end":598,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640758,"byte_end":10640779,"line_start":599,"line_end":599,"column_start":5,"column_end":26}},{"value":"/     let (tx, _rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640784,"byte_end":10640832,"line_start":600,"line_end":600,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640837,"byte_end":10640840,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(1, tx.receiver_count());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640845,"byte_end":10640888,"line_start":602,"line_end":602,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640893,"byte_end":10640896,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/     let mut _rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640901,"byte_end":10640939,"line_start":604,"line_end":604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640944,"byte_end":10640947,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(2, tx.receiver_count());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10640952,"byte_end":10640995,"line_start":606,"line_end":606,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10641000,"byte_end":10641003,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10641008,"byte_end":10641037,"line_start":608,"line_end":608,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10641042,"byte_end":10641047,"line_start":609,"line_end":609,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10641052,"byte_end":10641059,"line_start":610,"line_end":610,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650648,"byte_end":10650652,"line_start":894,"line_end":894,"column_start":18,"column_end":22},"name":"recv","qualname":"<Receiver<T>>::recv","value":"pub async fn recv<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives the next value for this receiver.","sig":null,"attributes":[{"value":"/ Receives the next value for this receiver.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648420,"byte_end":10648466,"line_start":829,"line_end":829,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648471,"byte_end":10648474,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Each [`Receiver`] handle will receive a clone of all values sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648479,"byte_end":10648547,"line_start":831,"line_end":831,"column_start":5,"column_end":73}},{"value":"/ **after** it has subscribed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648552,"byte_end":10648584,"line_start":832,"line_end":832,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648589,"byte_end":10648592,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ `Err(RecvError::Closed)` is returned when all `Sender` halves have","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648597,"byte_end":10648667,"line_start":834,"line_end":834,"column_start":5,"column_end":75}},{"value":"/ dropped, indicating that no further values can be sent on the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648672,"byte_end":10648746,"line_start":835,"line_end":835,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648751,"byte_end":10648754,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ If the [`Receiver`] handle falls behind, once the channel is full, newly","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648759,"byte_end":10648835,"line_start":837,"line_end":837,"column_start":5,"column_end":81}},{"value":"/ sent values will overwrite old values. At this point, a call to [`recv`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648840,"byte_end":10648916,"line_start":838,"line_end":838,"column_start":5,"column_end":81}},{"value":"/ will return with `Err(RecvError::Lagged)` and the [`Receiver`]'s","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648921,"byte_end":10648989,"line_start":839,"line_end":839,"column_start":5,"column_end":73}},{"value":"/ internal cursor is updated to point to the oldest value still held by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648994,"byte_end":10649067,"line_start":840,"line_end":840,"column_start":5,"column_end":78}},{"value":"/ the channel. A subsequent call to [`recv`] will return this value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649072,"byte_end":10649141,"line_start":841,"line_end":841,"column_start":5,"column_end":74}},{"value":"/ **unless** it has been since overwritten.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649146,"byte_end":10649191,"line_start":842,"line_end":842,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649196,"byte_end":10649199,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649204,"byte_end":10649254,"line_start":844,"line_end":844,"column_start":5,"column_end":55}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649259,"byte_end":10649311,"line_start":845,"line_end":845,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649316,"byte_end":10649319,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649324,"byte_end":10649338,"line_start":847,"line_end":847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649343,"byte_end":10649346,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649351,"byte_end":10649358,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649363,"byte_end":10649394,"line_start":850,"line_end":850,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649399,"byte_end":10649402,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649407,"byte_end":10649425,"line_start":852,"line_end":852,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649430,"byte_end":10649451,"line_start":853,"line_end":853,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx1) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649456,"byte_end":10649507,"line_start":854,"line_end":854,"column_start":5,"column_end":56}},{"value":"/     let mut rx2 = tx.subscribe();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649512,"byte_end":10649549,"line_start":855,"line_end":855,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649554,"byte_end":10649557,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649562,"byte_end":10649595,"line_start":857,"line_end":857,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649600,"byte_end":10649654,"line_start":858,"line_end":858,"column_start":5,"column_end":59}},{"value":"/         assert_eq!(rx1.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649659,"byte_end":10649713,"line_start":859,"line_end":859,"column_start":5,"column_end":59}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649718,"byte_end":10649729,"line_start":860,"line_end":860,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649734,"byte_end":10649737,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649742,"byte_end":10649775,"line_start":862,"line_end":862,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649780,"byte_end":10649834,"line_start":863,"line_end":863,"column_start":5,"column_end":59}},{"value":"/         assert_eq!(rx2.recv().await.unwrap(), 20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649839,"byte_end":10649893,"line_start":864,"line_end":864,"column_start":5,"column_end":59}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649898,"byte_end":10649909,"line_start":865,"line_end":865,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649914,"byte_end":10649917,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649922,"byte_end":10649951,"line_start":867,"line_end":867,"column_start":5,"column_end":34}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649956,"byte_end":10649985,"line_start":868,"line_end":868,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10649990,"byte_end":10649995,"line_start":869,"line_end":869,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650000,"byte_end":10650007,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650012,"byte_end":10650015,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Handling lag","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650020,"byte_end":10650036,"line_start":872,"line_end":872,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650041,"byte_end":10650044,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650049,"byte_end":10650056,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650061,"byte_end":10650092,"line_start":875,"line_end":875,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650097,"byte_end":10650100,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650105,"byte_end":10650123,"line_start":877,"line_end":877,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650128,"byte_end":10650149,"line_start":878,"line_end":878,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = broadcast::channel(2);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650154,"byte_end":10650203,"line_start":879,"line_end":879,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650208,"byte_end":10650211,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650216,"byte_end":10650245,"line_start":881,"line_end":881,"column_start":5,"column_end":34}},{"value":"/     tx.send(20).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650250,"byte_end":10650279,"line_start":882,"line_end":882,"column_start":5,"column_end":34}},{"value":"/     tx.send(30).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650284,"byte_end":10650313,"line_start":883,"line_end":883,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650318,"byte_end":10650321,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/     // The receiver lagged behind","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650326,"byte_end":10650363,"line_start":885,"line_end":885,"column_start":5,"column_end":42}},{"value":"/     assert!(rx.recv().await.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650368,"byte_end":10650410,"line_start":886,"line_end":886,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650415,"byte_end":10650418,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/     // At this point, we can abort or continue with lost messages","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650423,"byte_end":10650492,"line_start":888,"line_end":888,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650497,"byte_end":10650500,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(20, rx.recv().await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650505,"byte_end":10650554,"line_start":890,"line_end":890,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(30, rx.recv().await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650559,"byte_end":10650608,"line_start":891,"line_end":891,"column_start":5,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650613,"byte_end":10650618,"line_start":892,"line_end":892,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650623,"byte_end":10650630,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4691},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652429,"byte_end":10652437,"line_start":939,"line_end":939,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"pub fn try_recv(&mut Self) -> Result<T, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to return a pending value on this receiver without awaiting.","sig":null,"attributes":[{"value":"/ Attempts to return a pending value on this receiver without awaiting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650770,"byte_end":10650843,"line_start":899,"line_end":899,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650848,"byte_end":10650851,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ This is useful for a flavor of \"optimistic check\" before deciding to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650856,"byte_end":10650928,"line_start":901,"line_end":901,"column_start":5,"column_end":77}},{"value":"/ await on a receiver.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650933,"byte_end":10650957,"line_start":902,"line_end":902,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650962,"byte_end":10650965,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ Compared with [`recv`], this function has three failure cases instead of two","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10650970,"byte_end":10651050,"line_start":904,"line_end":904,"column_start":5,"column_end":85}},{"value":"/ (one for closed, one for an empty buffer, one for a lagging receiver).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651055,"byte_end":10651129,"line_start":905,"line_end":905,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651134,"byte_end":10651137,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ `Err(TryRecvError::Closed)` is returned when all `Sender` halves have","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651142,"byte_end":10651215,"line_start":907,"line_end":907,"column_start":5,"column_end":78}},{"value":"/ dropped, indicating that no further values can be sent on the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651220,"byte_end":10651294,"line_start":908,"line_end":908,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651299,"byte_end":10651302,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ If the [`Receiver`] handle falls behind, once the channel is full, newly","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651307,"byte_end":10651383,"line_start":910,"line_end":910,"column_start":5,"column_end":81}},{"value":"/ sent values will overwrite old values. At this point, a call to [`recv`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651388,"byte_end":10651464,"line_start":911,"line_end":911,"column_start":5,"column_end":81}},{"value":"/ will return with `Err(TryRecvError::Lagged)` and the [`Receiver`]'s","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651469,"byte_end":10651540,"line_start":912,"line_end":912,"column_start":5,"column_end":76}},{"value":"/ internal cursor is updated to point to the oldest value still held by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651545,"byte_end":10651618,"line_start":913,"line_end":913,"column_start":5,"column_end":78}},{"value":"/ the channel. A subsequent call to [`try_recv`] will return this value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651623,"byte_end":10651696,"line_start":914,"line_end":914,"column_start":5,"column_end":78}},{"value":"/ **unless** it has been since overwritten. If there are no values to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651701,"byte_end":10651772,"line_start":915,"line_end":915,"column_start":5,"column_end":76}},{"value":"/ receive, `Err(TryRecvError::Empty)` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651777,"byte_end":10651829,"line_start":916,"line_end":916,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651834,"byte_end":10651837,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ [`recv`]: crate::sync::broadcast::Receiver::recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651842,"byte_end":10651894,"line_start":918,"line_end":918,"column_start":5,"column_end":57}},{"value":"/ [`try_recv`]: crate::sync::broadcast::Receiver::try_recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651899,"byte_end":10651959,"line_start":919,"line_end":919,"column_start":5,"column_end":65}},{"value":"/ [`Receiver`]: crate::sync::broadcast::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10651964,"byte_end":10652014,"line_start":920,"line_end":920,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652019,"byte_end":10652022,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652027,"byte_end":10652041,"line_start":922,"line_end":922,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652046,"byte_end":10652049,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652054,"byte_end":10652061,"line_start":924,"line_end":924,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::broadcast;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652066,"byte_end":10652097,"line_start":925,"line_end":925,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652102,"byte_end":10652105,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652110,"byte_end":10652128,"line_start":927,"line_end":927,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652133,"byte_end":10652154,"line_start":928,"line_end":928,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = broadcast::channel(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652159,"byte_end":10652209,"line_start":929,"line_end":929,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652214,"byte_end":10652217,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/     assert!(rx.try_recv().is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652222,"byte_end":10652262,"line_start":931,"line_end":931,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652267,"byte_end":10652270,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/     tx.send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652275,"byte_end":10652304,"line_start":933,"line_end":933,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652309,"byte_end":10652312,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/     let value = rx.try_recv().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652317,"byte_end":10652360,"line_start":935,"line_end":935,"column_start":5,"column_end":48}},{"value":"/     assert_eq!(10, value);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652365,"byte_end":10652395,"line_start":936,"line_end":936,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652400,"byte_end":10652405,"line_start":937,"line_end":937,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652410,"byte_end":10652417,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":4735},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::sync::mpsc","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","parent":null,"children":[{"krate":0,"index":4736},{"krate":0,"index":4808},{"krate":0,"index":4884},{"krate":0,"index":4885},{"krate":0,"index":4886},{"krate":0,"index":4887},{"krate":0,"index":4888},{"krate":0,"index":4889},{"krate":0,"index":5019},{"krate":0,"index":5064},{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5116},{"krate":0,"index":5117},{"krate":0,"index":5118},{"krate":0,"index":5137}],"decl_id":null,"docs":" A multi-producer, single-consumer queue for sending values between\n asynchronous tasks.","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23059,"byte_end":23083,"line_start":247,"line_end":247,"column_start":13,"column_end":37}},{"value":"/ A multi-producer, single-consumer queue for sending values between","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10656839,"byte_end":10656909,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ asynchronous tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10656910,"byte_end":10656933,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10656934,"byte_end":10656937,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides two variants of the channel: bounded and unbounded. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10656938,"byte_end":10657018,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ bounded variant has a limit on the number of messages that the channel can","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657019,"byte_end":10657097,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ store, and if this limit is reached, trying to send another message will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657098,"byte_end":10657174,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ wait until a message is received from the channel. An unbounded channel has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657175,"byte_end":10657254,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ an infinite capacity, so the `send` method will always complete immediately.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657255,"byte_end":10657335,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ This makes the [`UnboundedSender`] usable from both synchronous and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657336,"byte_end":10657407,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ asynchronous code.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657408,"byte_end":10657430,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657431,"byte_end":10657434,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Similar to the `mpsc` channels provided by `std`, the channel constructor","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657435,"byte_end":10657512,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ functions provide separate send and receive handles, [`Sender`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657513,"byte_end":10657584,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ [`Receiver`] for the bounded channel, [`UnboundedSender`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657585,"byte_end":10657650,"line_start":16,"line_end":16,"column_start":1,"column_end":66}},{"value":"/ [`UnboundedReceiver`] for the unbounded channel. If there is no message to read,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657651,"byte_end":10657735,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ the current task will be notified when a new value is sent. [`Sender`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657736,"byte_end":10657814,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ [`UnboundedSender`] allow sending values into the channel. If the bounded","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657815,"byte_end":10657892,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ channel is at capacity, the send is rejected and the task will be notified","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657893,"byte_end":10657971,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ when additional capacity is available. In other words, the channel provides","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10657972,"byte_end":10658051,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ backpressure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658052,"byte_end":10658069,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658070,"byte_end":10658073,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658074,"byte_end":10658077,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Disconnection","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658078,"byte_end":10658097,"line_start":25,"line_end":25,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658098,"byte_end":10658101,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ When all [`Sender`] handles have been dropped, it is no longer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658102,"byte_end":10658168,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ possible to send values into the channel. This is considered the termination","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658169,"byte_end":10658249,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ event of the stream. As such, `Receiver::poll` returns `Ok(Ready(None))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658250,"byte_end":10658327,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658328,"byte_end":10658331,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the [`Receiver`] handle is dropped, then messages can no longer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658332,"byte_end":10658402,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ be read out of the channel. In this case, all further attempts to send will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658403,"byte_end":10658482,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ result in an error.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658483,"byte_end":10658506,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658507,"byte_end":10658510,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Clean Shutdown","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658511,"byte_end":10658531,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658532,"byte_end":10658535,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ When the [`Receiver`] is dropped, it is possible for unprocessed messages to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658536,"byte_end":10658616,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ remain in the channel. Instead, it is usually desirable to perform a \"clean\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658617,"byte_end":10658697,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ shutdown. To do this, the receiver first calls `close`, which will prevent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658698,"byte_end":10658776,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ any further messages to be sent into the channel. Then, the receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658777,"byte_end":10658849,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/ consumes the channel to completion, at which point the receiver can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658850,"byte_end":10658924,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658925,"byte_end":10658937,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658938,"byte_end":10658941,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Communicating between sync and async code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658942,"byte_end":10658989,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658990,"byte_end":10658993,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ When you want to communicate between synchronous and asynchronous code, there","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10658994,"byte_end":10659075,"line_start":46,"line_end":46,"column_start":1,"column_end":82}},{"value":"/ are two situations to consider:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659076,"byte_end":10659111,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659112,"byte_end":10659115,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ **Bounded channel**: If you need a bounded channel, you should use a bounded","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659116,"byte_end":10659196,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ Tokio `mpsc` channel for both directions of communication. Instead of calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659197,"byte_end":10659278,"line_start":50,"line_end":50,"column_start":1,"column_end":82}},{"value":"/ the async [`send`][bounded-send] or [`recv`][bounded-recv] methods, in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659279,"byte_end":10659353,"line_start":51,"line_end":51,"column_start":1,"column_end":75}},{"value":"/ synchronous code you will need to use the [`blocking_send`][blocking-send] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659354,"byte_end":10659435,"line_start":52,"line_end":52,"column_start":1,"column_end":82}},{"value":"/ [`blocking_recv`][blocking-recv] methods.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659436,"byte_end":10659481,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659482,"byte_end":10659485,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ **Unbounded channel**: You should use the kind of channel that matches where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659486,"byte_end":10659566,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ the receiver is. So for sending a message _from async to sync_, you should","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659567,"byte_end":10659645,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ use [the standard library unbounded channel][std-unbounded] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659646,"byte_end":10659712,"line_start":57,"line_end":57,"column_start":1,"column_end":67}},{"value":"/ [crossbeam][crossbeam-unbounded].  Similarly, for sending a message _from sync","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659713,"byte_end":10659795,"line_start":58,"line_end":58,"column_start":1,"column_end":83}},{"value":"/ to async_, you should use an unbounded Tokio `mpsc` channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659796,"byte_end":10659860,"line_start":59,"line_end":59,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659861,"byte_end":10659864,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [`Sender`]: crate::sync::mpsc::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659865,"byte_end":10659906,"line_start":61,"line_end":61,"column_start":1,"column_end":42}},{"value":"/ [`Receiver`]: crate::sync::mpsc::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659907,"byte_end":10659952,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ [bounded-send]: crate::sync::mpsc::Sender::send()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10659953,"byte_end":10660006,"line_start":63,"line_end":63,"column_start":1,"column_end":54}},{"value":"/ [bounded-recv]: crate::sync::mpsc::Receiver::recv()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660007,"byte_end":10660062,"line_start":64,"line_end":64,"column_start":1,"column_end":56}},{"value":"/ [blocking-send]: crate::sync::mpsc::Sender::blocking_send()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660063,"byte_end":10660126,"line_start":65,"line_end":65,"column_start":1,"column_end":64}},{"value":"/ [blocking-recv]: crate::sync::mpsc::Receiver::blocking_recv()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660127,"byte_end":10660192,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"/ [`UnboundedSender`]: crate::sync::mpsc::UnboundedSender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660193,"byte_end":10660252,"line_start":67,"line_end":67,"column_start":1,"column_end":60}},{"value":"/ [`UnboundedReceiver`]: crate::sync::mpsc::UnboundedReceiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660253,"byte_end":10660316,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/ [`Handle::block_on`]: crate::runtime::Handle::block_on()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660317,"byte_end":10660377,"line_start":69,"line_end":69,"column_start":1,"column_end":61}},{"value":"/ [std-unbounded]: std::sync::mpsc::channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660378,"byte_end":10660423,"line_start":70,"line_end":70,"column_start":1,"column_end":46}},{"value":"/ [crossbeam-unbounded]: https://docs.rs/crossbeam/*/crossbeam/channel/fn.unbounded.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660424,"byte_end":10660514,"line_start":71,"line_end":71,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":4820},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674515,"byte_end":10674521,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::mpsc::bounded::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":4822}],"decl_id":null,"docs":" Send values to the associated `Receiver`.","sig":null,"attributes":[{"value":"/ Send values to the associated `Receiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674390,"byte_end":10674435,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674436,"byte_end":10674439,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674440,"byte_end":10674503,"line_start":18,"line_end":18,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4823},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674815,"byte_end":10674821,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Permit","qualname":"::sync::mpsc::bounded::Permit","value":"Permit {  }","parent":null,"children":[{"krate":0,"index":4826}],"decl_id":null,"docs":" Permit to send one value into the channel.","sig":null,"attributes":[{"value":"/ Permit to send one value into the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674564,"byte_end":10674610,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674611,"byte_end":10674614,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ `Permit` values are returned by [`Sender::reserve()`] and are used to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674615,"byte_end":10674688,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ guarantee channel capacity before generating a message to send.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674689,"byte_end":10674756,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674757,"byte_end":10674760,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`Sender::reserve()`]: Sender::reserve","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674761,"byte_end":10674803,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":4827},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675000,"byte_end":10675008,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::mpsc::bounded::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":4829}],"decl_id":null,"docs":" Receive values from the associated `Sender`.","sig":null,"attributes":[{"value":"/ Receive values from the associated `Sender`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674872,"byte_end":10674920,"line_start":33,"line_end":33,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674921,"byte_end":10674924,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10674925,"byte_end":10674988,"line_start":35,"line_end":35,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":4830},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676466,"byte_end":10676473,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::mpsc::bounded::channel","value":"pub fn channel<T>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a bounded mpsc channel for communicating between asynchronous tasks\n with backpressure.","sig":null,"attributes":[{"value":"/ Creates a bounded mpsc channel for communicating between asynchronous tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675080,"byte_end":10675159,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ with backpressure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675160,"byte_end":10675182,"line_start":42,"line_end":42,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675183,"byte_end":10675186,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The channel will buffer up to the provided number of messages.  Once the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675187,"byte_end":10675263,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ buffer is full, attempts to `send` new messages will wait until a message is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675264,"byte_end":10675344,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/ received from the channel. The provided buffer capacity must be at least 1.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675345,"byte_end":10675424,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675425,"byte_end":10675428,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ All data sent on `Sender` will become available on `Receiver` in the same","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675429,"byte_end":10675506,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ order as it was sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675507,"byte_end":10675532,"line_start":49,"line_end":49,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675533,"byte_end":10675536,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The `Sender` can be cloned to `send` to the same channel from multiple code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675537,"byte_end":10675616,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ locations. Only one `Receiver` is supported.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675617,"byte_end":10675665,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675666,"byte_end":10675669,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ If the `Receiver` is disconnected while trying to `send`, the `send` method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675670,"byte_end":10675749,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ will return a `SendError`. Similarly, if `Sender` is disconnected while","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675750,"byte_end":10675825,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ trying to `recv`, the `recv` method will return a `RecvError`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675826,"byte_end":10675892,"line_start":56,"line_end":56,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675893,"byte_end":10675896,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675897,"byte_end":10675909,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675910,"byte_end":10675913,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Panics if the buffer capacity is 0.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675914,"byte_end":10675953,"line_start":60,"line_end":60,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675954,"byte_end":10675957,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675958,"byte_end":10675972,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675973,"byte_end":10675976,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675977,"byte_end":10675988,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10675989,"byte_end":10676015,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676016,"byte_end":10676019,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676020,"byte_end":10676038,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676039,"byte_end":10676060,"line_start":68,"line_end":68,"column_start":1,"column_end":22}},{"value":"/     let (tx, mut rx) = mpsc::channel(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676061,"byte_end":10676107,"line_start":69,"line_end":69,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676108,"byte_end":10676111,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676112,"byte_end":10676145,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/         for i in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676146,"byte_end":10676174,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/             if let Err(_) = tx.send(i).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676175,"byte_end":10676225,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/                 println!(\"receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676226,"byte_end":10676275,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/                 return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676276,"byte_end":10676303,"line_start":75,"line_end":75,"column_start":1,"column_end":28}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676304,"byte_end":10676321,"line_start":76,"line_end":76,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676322,"byte_end":10676335,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676336,"byte_end":10676347,"line_start":78,"line_end":78,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676348,"byte_end":10676351,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/     while let Some(i) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676352,"byte_end":10676397,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/         println!(\"got = {}\", i);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676398,"byte_end":10676434,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676435,"byte_end":10676444,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676445,"byte_end":10676450,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676451,"byte_end":10676458,"line_start":84,"line_end":84,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4836},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678147,"byte_end":10678151,"line_start":144,"line_end":144,"column_start":18,"column_end":22},"name":"recv","qualname":"<Receiver<T>>::recv","value":"pub async fn recv<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives the next value for this receiver.","sig":null,"attributes":[{"value":"/ Receives the next value for this receiver.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677073,"byte_end":10677119,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677124,"byte_end":10677127,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ `None` is returned when all `Sender` halves have dropped, indicating","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677132,"byte_end":10677204,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ that no further values can be sent on the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677209,"byte_end":10677263,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677268,"byte_end":10677271,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677276,"byte_end":10677290,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677295,"byte_end":10677298,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677303,"byte_end":10677310,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677315,"byte_end":10677341,"line_start":113,"line_end":113,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677346,"byte_end":10677349,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677354,"byte_end":10677372,"line_start":115,"line_end":115,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677377,"byte_end":10677398,"line_start":116,"line_end":116,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677403,"byte_end":10677449,"line_start":117,"line_end":117,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677454,"byte_end":10677457,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677462,"byte_end":10677495,"line_start":119,"line_end":119,"column_start":5,"column_end":38}},{"value":"/         tx.send(\"hello\").await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677500,"byte_end":10677544,"line_start":120,"line_end":120,"column_start":5,"column_end":49}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677549,"byte_end":10677560,"line_start":121,"line_end":121,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677565,"byte_end":10677568,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(Some(\"hello\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677573,"byte_end":10677624,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(None, rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677629,"byte_end":10677671,"line_start":124,"line_end":124,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677676,"byte_end":10677681,"line_start":125,"line_end":125,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677686,"byte_end":10677693,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677698,"byte_end":10677701,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Values are buffered:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677706,"byte_end":10677730,"line_start":128,"line_end":128,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677735,"byte_end":10677738,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677743,"byte_end":10677750,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677755,"byte_end":10677781,"line_start":131,"line_end":131,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677786,"byte_end":10677789,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677794,"byte_end":10677812,"line_start":133,"line_end":133,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677817,"byte_end":10677838,"line_start":134,"line_end":134,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(100);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677843,"byte_end":10677889,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677894,"byte_end":10677897,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/     tx.send(\"hello\").await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677902,"byte_end":10677942,"line_start":137,"line_end":137,"column_start":5,"column_end":45}},{"value":"/     tx.send(\"world\").await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677947,"byte_end":10677987,"line_start":138,"line_end":138,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10677992,"byte_end":10677995,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(Some(\"hello\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678000,"byte_end":10678051,"line_start":140,"line_end":140,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(Some(\"world\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678056,"byte_end":10678107,"line_start":141,"line_end":141,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678112,"byte_end":10678117,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678122,"byte_end":10678129,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4841},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679082,"byte_end":10679095,"line_start":179,"line_end":179,"column_start":12,"column_end":25},"name":"blocking_recv","qualname":"<Receiver<T>>::blocking_recv","value":"pub fn blocking_recv(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Blocking receive to call outside of asynchronous contexts.","sig":null,"attributes":[{"value":"/ Blocking receive to call outside of asynchronous contexts.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678272,"byte_end":10678334,"line_start":149,"line_end":149,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678339,"byte_end":10678342,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678347,"byte_end":10678359,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678364,"byte_end":10678367,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This function panics if called within an asynchronous execution","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678372,"byte_end":10678439,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678444,"byte_end":10678456,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678461,"byte_end":10678464,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678469,"byte_end":10678483,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678488,"byte_end":10678491,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678496,"byte_end":10678503,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ use std::thread;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678508,"byte_end":10678528,"line_start":159,"line_end":159,"column_start":5,"column_end":25}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678533,"byte_end":10678565,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678570,"byte_end":10678596,"line_start":161,"line_end":161,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678601,"byte_end":10678604,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678609,"byte_end":10678624,"line_start":163,"line_end":163,"column_start":5,"column_end":20}},{"value":"/     let (tx, mut rx) = mpsc::channel::<u8>(10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678629,"byte_end":10678680,"line_start":164,"line_end":164,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678685,"byte_end":10678688,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/     let sync_code = thread::spawn(move || {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678693,"byte_end":10678740,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/         assert_eq!(Some(10), rx.blocking_recv());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678745,"byte_end":10678798,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678803,"byte_end":10678814,"line_start":168,"line_end":168,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678819,"byte_end":10678822,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/     Runtime::new()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678827,"byte_end":10678849,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/         .unwrap()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678854,"byte_end":10678875,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/         .block_on(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678880,"byte_end":10678914,"line_start":172,"line_end":172,"column_start":5,"column_end":39}},{"value":"/             let _ = tx.send(10).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678919,"byte_end":10678961,"line_start":173,"line_end":173,"column_start":5,"column_end":47}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678966,"byte_end":10678981,"line_start":174,"line_end":174,"column_start":5,"column_end":20}},{"value":"/     sync_code.join().unwrap()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10678986,"byte_end":10679019,"line_start":175,"line_end":175,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679024,"byte_end":10679029,"line_start":176,"line_end":176,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679034,"byte_end":10679041,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679046,"byte_end":10679070,"line_start":178,"line_end":178,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4842},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681061,"byte_end":10681066,"line_start":237,"line_end":237,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679911,"byte_end":10679975,"line_start":200,"line_end":200,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679980,"byte_end":10679983,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10679988,"byte_end":10680063,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered. Any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680068,"byte_end":10680140,"line_start":203,"line_end":203,"column_start":5,"column_end":77}},{"value":"/ outstanding [`Permit`] values will still be able to send messages.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680145,"byte_end":10680215,"line_start":204,"line_end":204,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680220,"byte_end":10680223,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ In order to guarantee no messages are dropped, after calling `close()`,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680228,"byte_end":10680303,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ `recv()` must be called until `None` is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680308,"byte_end":10680361,"line_start":207,"line_end":207,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680366,"byte_end":10680369,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ [`Permit`]: Permit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680374,"byte_end":10680396,"line_start":209,"line_end":209,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680401,"byte_end":10680404,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680409,"byte_end":10680423,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680428,"byte_end":10680431,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680436,"byte_end":10680443,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680448,"byte_end":10680474,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680479,"byte_end":10680482,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680487,"byte_end":10680505,"line_start":216,"line_end":216,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680510,"byte_end":10680531,"line_start":217,"line_end":217,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(20);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680536,"byte_end":10680581,"line_start":218,"line_end":218,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680586,"byte_end":10680589,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680594,"byte_end":10680627,"line_start":220,"line_end":220,"column_start":5,"column_end":38}},{"value":"/         let mut i = 0;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680632,"byte_end":10680658,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/         while let Ok(permit) = tx.reserve().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680663,"byte_end":10680718,"line_start":222,"line_end":222,"column_start":5,"column_end":60}},{"value":"/             permit.send(i);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680723,"byte_end":10680754,"line_start":223,"line_end":223,"column_start":5,"column_end":36}},{"value":"/             i += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680759,"byte_end":10680782,"line_start":224,"line_end":224,"column_start":5,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680787,"byte_end":10680800,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680805,"byte_end":10680816,"line_start":226,"line_end":226,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680821,"byte_end":10680824,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/     rx.close();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680829,"byte_end":10680848,"line_start":228,"line_end":228,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680853,"byte_end":10680856,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/     while let Some(msg) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680861,"byte_end":10680908,"line_start":230,"line_end":230,"column_start":5,"column_end":52}},{"value":"/         println!(\"got {}\", msg);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680913,"byte_end":10680949,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680954,"byte_end":10680963,"line_start":232,"line_end":232,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680968,"byte_end":10680971,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/     // Channel closed and no messages are lost.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10680976,"byte_end":10681027,"line_start":234,"line_end":234,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681032,"byte_end":10681037,"line_start":235,"line_end":235,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681042,"byte_end":10681049,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4843},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681907,"byte_end":10681916,"line_start":256,"line_end":256,"column_start":12,"column_end":21},"name":"poll_recv","qualname":"<Receiver<T>>::poll_recv","value":"pub fn poll_recv(&mut Self, &mut Context) -> Poll<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Polls to receive the next message on this channel.","sig":null,"attributes":[{"value":"/ Polls to receive the next message on this channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681118,"byte_end":10681172,"line_start":241,"line_end":241,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681177,"byte_end":10681180,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681185,"byte_end":10681209,"line_start":243,"line_end":243,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681214,"byte_end":10681217,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if no messages are available but the channel is not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681222,"byte_end":10681296,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/    closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681301,"byte_end":10681315,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/  * `Poll::Ready(Some(message))` if a message is available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681320,"byte_end":10681382,"line_start":247,"line_end":247,"column_start":5,"column_end":67}},{"value":"/  * `Poll::Ready(None)` if the channel has been closed and all messages","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681387,"byte_end":10681461,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/    sent before it was closed have been received.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681466,"byte_end":10681518,"line_start":249,"line_end":249,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681523,"byte_end":10681526,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ When the method returns `Poll::Pending`, the `Waker` in the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681531,"byte_end":10681603,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/ `Context` is scheduled to receive a wakeup when a message is sent on any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681608,"byte_end":10681684,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ receiver, or when the channel is closed.  Note that on multiple calls to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681689,"byte_end":10681765,"line_start":253,"line_end":253,"column_start":5,"column_end":81}},{"value":"/ `poll_recv`, only the `Waker` from the `Context` passed to the most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681770,"byte_end":10681841,"line_start":254,"line_end":254,"column_start":5,"column_end":76}},{"value":"/ recent call is scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10681846,"byte_end":10681895,"line_start":255,"line_end":255,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4852},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684012,"byte_end":10684016,"line_start":321,"line_end":321,"column_start":18,"column_end":22},"name":"send","qualname":"<Sender<T>>::send","value":"pub async fn send<'_>(&'_ Self, T) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Sends a value, waiting until there is capacity.","sig":null,"attributes":[{"value":"/ Sends a value, waiting until there is capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682372,"byte_end":10682423,"line_start":276,"line_end":276,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682428,"byte_end":10682431,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ A successful send occurs when it is determined that the other end of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682436,"byte_end":10682512,"line_start":278,"line_end":278,"column_start":5,"column_end":81}},{"value":"/ channel has not hung up already. An unsuccessful send would be one where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682517,"byte_end":10682593,"line_start":279,"line_end":279,"column_start":5,"column_end":81}},{"value":"/ the corresponding receiver has already been closed. Note that a return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682598,"byte_end":10682672,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/ value of `Err` means that the data will never be received, but a return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682677,"byte_end":10682752,"line_start":281,"line_end":281,"column_start":5,"column_end":80}},{"value":"/ value of `Ok` does not mean that the data will be received. It is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682757,"byte_end":10682826,"line_start":282,"line_end":282,"column_start":5,"column_end":74}},{"value":"/ possible for the corresponding receiver to hang up immediately after","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682831,"byte_end":10682903,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ this function returns `Ok`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682908,"byte_end":10682939,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682944,"byte_end":10682947,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682952,"byte_end":10682964,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682969,"byte_end":10682972,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ If the receive half of the channel is closed, either due to [`close`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682977,"byte_end":10683050,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ being called or the [`Receiver`] handle dropping, the function returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683055,"byte_end":10683129,"line_start":289,"line_end":289,"column_start":5,"column_end":79}},{"value":"/ an error. The error includes the value passed to `send`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683134,"byte_end":10683194,"line_start":290,"line_end":290,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683199,"byte_end":10683202,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ [`close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683207,"byte_end":10683237,"line_start":292,"line_end":292,"column_start":5,"column_end":35}},{"value":"/ [`Receiver`]: Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683242,"byte_end":10683268,"line_start":293,"line_end":293,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683273,"byte_end":10683276,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683281,"byte_end":10683295,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683300,"byte_end":10683303,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ In the following example, each call to `send` will block until the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683308,"byte_end":10683378,"line_start":297,"line_end":297,"column_start":5,"column_end":75}},{"value":"/ previously sent value was received.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683383,"byte_end":10683422,"line_start":298,"line_end":298,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683427,"byte_end":10683430,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683435,"byte_end":10683446,"line_start":300,"line_end":300,"column_start":5,"column_end":16}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683451,"byte_end":10683477,"line_start":301,"line_end":301,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683482,"byte_end":10683485,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683490,"byte_end":10683508,"line_start":303,"line_end":303,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683513,"byte_end":10683534,"line_start":304,"line_end":304,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683539,"byte_end":10683583,"line_start":305,"line_end":305,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683588,"byte_end":10683591,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683596,"byte_end":10683629,"line_start":307,"line_end":307,"column_start":5,"column_end":38}},{"value":"/         for i in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683634,"byte_end":10683662,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"/             if let Err(_) = tx.send(i).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683667,"byte_end":10683717,"line_start":309,"line_end":309,"column_start":5,"column_end":55}},{"value":"/                 println!(\"receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683722,"byte_end":10683771,"line_start":310,"line_end":310,"column_start":5,"column_end":54}},{"value":"/                 return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683776,"byte_end":10683803,"line_start":311,"line_end":311,"column_start":5,"column_end":32}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683808,"byte_end":10683825,"line_start":312,"line_end":312,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683830,"byte_end":10683843,"line_start":313,"line_end":313,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683848,"byte_end":10683859,"line_start":314,"line_end":314,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683864,"byte_end":10683867,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/     while let Some(i) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683872,"byte_end":10683917,"line_start":316,"line_end":316,"column_start":5,"column_end":50}},{"value":"/         println!(\"got = {}\", i);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683922,"byte_end":10683958,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683963,"byte_end":10683972,"line_start":318,"line_end":318,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683977,"byte_end":10683982,"line_start":319,"line_end":319,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10683987,"byte_end":10683994,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4855},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685150,"byte_end":10685156,"line_start":362,"line_end":362,"column_start":18,"column_end":24},"name":"closed","qualname":"<Sender<T>>::closed","value":"pub async fn closed<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Completes when the receiver has dropped.","sig":null,"attributes":[{"value":"/ Completes when the receiver has dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684268,"byte_end":10684312,"line_start":331,"line_end":331,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684317,"byte_end":10684320,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This allows the producers to get notified when interest in the produced","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684325,"byte_end":10684400,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ values is canceled and immediately stop doing work.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684405,"byte_end":10684460,"line_start":334,"line_end":334,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684465,"byte_end":10684468,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684473,"byte_end":10684487,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684492,"byte_end":10684495,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684500,"byte_end":10684507,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684512,"byte_end":10684538,"line_start":339,"line_end":339,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684543,"byte_end":10684546,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684551,"byte_end":10684569,"line_start":341,"line_end":341,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684574,"byte_end":10684595,"line_start":342,"line_end":342,"column_start":5,"column_end":26}},{"value":"/     let (tx1, rx) = mpsc::channel::<()>(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684600,"byte_end":10684647,"line_start":343,"line_end":343,"column_start":5,"column_end":52}},{"value":"/     let tx2 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684652,"byte_end":10684682,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/     let tx3 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684687,"byte_end":10684717,"line_start":345,"line_end":345,"column_start":5,"column_end":35}},{"value":"/     let tx4 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684722,"byte_end":10684752,"line_start":346,"line_end":346,"column_start":5,"column_end":35}},{"value":"/     let tx5 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684757,"byte_end":10684787,"line_start":347,"line_end":347,"column_start":5,"column_end":35}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684792,"byte_end":10684825,"line_start":348,"line_end":348,"column_start":5,"column_end":38}},{"value":"/         drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684830,"byte_end":10684851,"line_start":349,"line_end":349,"column_start":5,"column_end":26}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684856,"byte_end":10684867,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684872,"byte_end":10684875,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/     futures::join!(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684880,"byte_end":10684903,"line_start":352,"line_end":352,"column_start":5,"column_end":28}},{"value":"/         tx1.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684908,"byte_end":10684933,"line_start":353,"line_end":353,"column_start":5,"column_end":30}},{"value":"/         tx2.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684938,"byte_end":10684963,"line_start":354,"line_end":354,"column_start":5,"column_end":30}},{"value":"/         tx3.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684968,"byte_end":10684993,"line_start":355,"line_end":355,"column_start":5,"column_end":30}},{"value":"/         tx4.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10684998,"byte_end":10685023,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/         tx5.closed()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685028,"byte_end":10685052,"line_start":357,"line_end":357,"column_start":5,"column_end":29}},{"value":"/     );","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685057,"byte_end":10685067,"line_start":358,"line_end":358,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685115,"byte_end":10685120,"line_start":360,"line_end":360,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685125,"byte_end":10685132,"line_start":361,"line_end":361,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4858},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687330,"byte_end":10687338,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"pub fn try_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to immediately send a message on this `Sender`","sig":null,"attributes":[{"value":"/ Attempts to immediately send a message on this `Sender`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685210,"byte_end":10685269,"line_start":366,"line_end":366,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685274,"byte_end":10685277,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This method differs from [`send`] by returning immediately if the channel's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685282,"byte_end":10685361,"line_start":368,"line_end":368,"column_start":5,"column_end":84}},{"value":"/ buffer is full or no receiver is waiting to acquire some data. Compared","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685366,"byte_end":10685441,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ with [`send`], this function has two failure cases instead of one (one for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685446,"byte_end":10685524,"line_start":370,"line_end":370,"column_start":5,"column_end":83}},{"value":"/ disconnection, one for a full buffer).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685529,"byte_end":10685571,"line_start":371,"line_end":371,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685576,"byte_end":10685579,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685584,"byte_end":10685596,"line_start":373,"line_end":373,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685601,"byte_end":10685604,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ If the channel capacity has been reached, i.e., the channel has `n`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685609,"byte_end":10685680,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ buffered values where `n` is the argument passed to [`channel`], then an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685685,"byte_end":10685761,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/ error is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685766,"byte_end":10685788,"line_start":377,"line_end":377,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685793,"byte_end":10685796,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ If the receive half of the channel is closed, either due to [`close`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685801,"byte_end":10685874,"line_start":379,"line_end":379,"column_start":5,"column_end":78}},{"value":"/ being called or the [`Receiver`] handle dropping, the function returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685879,"byte_end":10685953,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ an error. The error includes the value passed to `send`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10685958,"byte_end":10686018,"line_start":381,"line_end":381,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686023,"byte_end":10686026,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ [`send`]: Sender::send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686031,"byte_end":10686057,"line_start":383,"line_end":383,"column_start":5,"column_end":31}},{"value":"/ [`channel`]: channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686062,"byte_end":10686086,"line_start":384,"line_end":384,"column_start":5,"column_end":29}},{"value":"/ [`close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686091,"byte_end":10686121,"line_start":385,"line_end":385,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686126,"byte_end":10686129,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686134,"byte_end":10686148,"line_start":387,"line_end":387,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686153,"byte_end":10686156,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686161,"byte_end":10686168,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686173,"byte_end":10686199,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686204,"byte_end":10686207,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686212,"byte_end":10686230,"line_start":392,"line_end":392,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686235,"byte_end":10686256,"line_start":393,"line_end":393,"column_start":5,"column_end":26}},{"value":"/     // Create a channel with buffer size 1","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686261,"byte_end":10686307,"line_start":394,"line_end":394,"column_start":5,"column_end":51}},{"value":"/     let (tx1, mut rx) = mpsc::channel(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686312,"byte_end":10686357,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/     let tx2 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686362,"byte_end":10686392,"line_start":396,"line_end":396,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686397,"byte_end":10686400,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686405,"byte_end":10686438,"line_start":398,"line_end":398,"column_start":5,"column_end":38}},{"value":"/         tx1.send(1).await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686443,"byte_end":10686482,"line_start":399,"line_end":399,"column_start":5,"column_end":44}},{"value":"/         tx1.send(2).await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686487,"byte_end":10686526,"line_start":400,"line_end":400,"column_start":5,"column_end":44}},{"value":"/         // task waits until the receiver receives a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686531,"byte_end":10686593,"line_start":401,"line_end":401,"column_start":5,"column_end":67}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686598,"byte_end":10686609,"line_start":402,"line_end":402,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686614,"byte_end":10686617,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686622,"byte_end":10686655,"line_start":404,"line_end":404,"column_start":5,"column_end":38}},{"value":"/         // This will return an error and send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686660,"byte_end":10686709,"line_start":405,"line_end":405,"column_start":5,"column_end":54}},{"value":"/         // no message if the buffer is full","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686714,"byte_end":10686761,"line_start":406,"line_end":406,"column_start":5,"column_end":52}},{"value":"/         let _ = tx2.try_send(3);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686766,"byte_end":10686802,"line_start":407,"line_end":407,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686807,"byte_end":10686818,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686823,"byte_end":10686826,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/     let mut msg;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686831,"byte_end":10686851,"line_start":410,"line_end":410,"column_start":5,"column_end":25}},{"value":"/     msg = rx.recv().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686856,"byte_end":10686895,"line_start":411,"line_end":411,"column_start":5,"column_end":44}},{"value":"/     println!(\"message {} received\", msg);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686900,"byte_end":10686945,"line_start":412,"line_end":412,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686950,"byte_end":10686953,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/     msg = rx.recv().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10686958,"byte_end":10686997,"line_start":414,"line_end":414,"column_start":5,"column_end":44}},{"value":"/     println!(\"message {} received\", msg);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687002,"byte_end":10687047,"line_start":415,"line_end":415,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687052,"byte_end":10687055,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/     // Third message may have never been sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687060,"byte_end":10687109,"line_start":417,"line_end":417,"column_start":5,"column_end":54}},{"value":"/     match rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687114,"byte_end":10687145,"line_start":418,"line_end":418,"column_start":5,"column_end":36}},{"value":"/         Some(msg) => println!(\"message {} received\", msg),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687150,"byte_end":10687212,"line_start":419,"line_end":419,"column_start":5,"column_end":67}},{"value":"/         None => println!(\"the third message was never sent\"),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687217,"byte_end":10687282,"line_start":420,"line_end":420,"column_start":5,"column_end":70}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687287,"byte_end":10687296,"line_start":421,"line_end":421,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687301,"byte_end":10687306,"line_start":422,"line_end":422,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687311,"byte_end":10687318,"line_start":423,"line_end":423,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4859},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689427,"byte_end":10689439,"line_start":483,"line_end":483,"column_start":18,"column_end":30},"name":"send_timeout","qualname":"<Sender<T>>::send_timeout","value":"pub async fn send_timeout<'_>(&'_ Self, T, Duration) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Sends a value, waiting until there is capacity, but only for a limited time.","sig":null,"attributes":[{"value":"/ Sends a value, waiting until there is capacity, but only for a limited time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687743,"byte_end":10687823,"line_start":436,"line_end":436,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687828,"byte_end":10687831,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Shares the same success and error conditions as [`send`], adding one more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687836,"byte_end":10687913,"line_start":438,"line_end":438,"column_start":5,"column_end":82}},{"value":"/ condition for an unsuccessful send, which is when the provided timeout has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10687918,"byte_end":10687996,"line_start":439,"line_end":439,"column_start":5,"column_end":83}},{"value":"/ elapsed, and there is no capacity available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688001,"byte_end":10688049,"line_start":440,"line_end":440,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688054,"byte_end":10688057,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ [`send`]: Sender::send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688062,"byte_end":10688088,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688093,"byte_end":10688096,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688101,"byte_end":10688113,"line_start":444,"line_end":444,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688118,"byte_end":10688121,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ If the receive half of the channel is closed, either due to [`close`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688126,"byte_end":10688199,"line_start":446,"line_end":446,"column_start":5,"column_end":78}},{"value":"/ being called or the [`Receiver`] having been dropped,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688204,"byte_end":10688261,"line_start":447,"line_end":447,"column_start":5,"column_end":62}},{"value":"/ the function returns an error. The error includes the value passed to `send`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688266,"byte_end":10688347,"line_start":448,"line_end":448,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688352,"byte_end":10688355,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ [`close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688360,"byte_end":10688390,"line_start":450,"line_end":450,"column_start":5,"column_end":35}},{"value":"/ [`Receiver`]: Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688395,"byte_end":10688421,"line_start":451,"line_end":451,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688426,"byte_end":10688429,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688434,"byte_end":10688448,"line_start":453,"line_end":453,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688453,"byte_end":10688456,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ In the following example, each call to `send_timeout` will block until the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688461,"byte_end":10688539,"line_start":455,"line_end":455,"column_start":5,"column_end":83}},{"value":"/ previously sent value was received, unless the timeout has elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688544,"byte_end":10688615,"line_start":456,"line_end":456,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688620,"byte_end":10688623,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688628,"byte_end":10688639,"line_start":458,"line_end":458,"column_start":5,"column_end":16}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688644,"byte_end":10688670,"line_start":459,"line_end":459,"column_start":5,"column_end":31}},{"value":"/ use tokio::time::{sleep, Duration};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688675,"byte_end":10688714,"line_start":460,"line_end":460,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688719,"byte_end":10688722,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688727,"byte_end":10688745,"line_start":462,"line_end":462,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688750,"byte_end":10688771,"line_start":463,"line_end":463,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688776,"byte_end":10688820,"line_start":464,"line_end":464,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688825,"byte_end":10688828,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688833,"byte_end":10688866,"line_start":466,"line_end":466,"column_start":5,"column_end":38}},{"value":"/         for i in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688871,"byte_end":10688899,"line_start":467,"line_end":467,"column_start":5,"column_end":33}},{"value":"/             if let Err(e) = tx.send_timeout(i, Duration::from_millis(100)).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688904,"byte_end":10688990,"line_start":468,"line_end":468,"column_start":5,"column_end":91}},{"value":"/                 println!(\"send error: #{:?}\", e);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10688995,"byte_end":10689048,"line_start":469,"line_end":469,"column_start":5,"column_end":58}},{"value":"/                 return;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689053,"byte_end":10689080,"line_start":470,"line_end":470,"column_start":5,"column_end":32}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689085,"byte_end":10689102,"line_start":471,"line_end":471,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689107,"byte_end":10689120,"line_start":472,"line_end":472,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689125,"byte_end":10689136,"line_start":473,"line_end":473,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689141,"byte_end":10689144,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/     while let Some(i) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689149,"byte_end":10689194,"line_start":475,"line_end":475,"column_start":5,"column_end":50}},{"value":"/         println!(\"got = {}\", i);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689199,"byte_end":10689235,"line_start":476,"line_end":476,"column_start":5,"column_end":41}},{"value":"/         sleep(Duration::from_millis(200)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689240,"byte_end":10689292,"line_start":477,"line_end":477,"column_start":5,"column_end":57}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689297,"byte_end":10689306,"line_start":478,"line_end":478,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689311,"byte_end":10689316,"line_start":479,"line_end":479,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689321,"byte_end":10689328,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"time\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689333,"byte_end":10689357,"line_start":481,"line_end":481,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4862},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690697,"byte_end":10690710,"line_start":530,"line_end":530,"column_start":12,"column_end":25},"name":"blocking_send","qualname":"<Sender<T>>::blocking_send","value":"pub fn blocking_send(&Self, T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Blocking send to call outside of asynchronous contexts.","sig":null,"attributes":[{"value":"/ Blocking send to call outside of asynchronous contexts.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689932,"byte_end":10689991,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10689996,"byte_end":10689999,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690004,"byte_end":10690016,"line_start":504,"line_end":504,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690021,"byte_end":10690024,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This function panics if called within an asynchronous execution","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690029,"byte_end":10690096,"line_start":506,"line_end":506,"column_start":5,"column_end":72}},{"value":"/ context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690101,"byte_end":10690113,"line_start":507,"line_end":507,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690118,"byte_end":10690121,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690126,"byte_end":10690140,"line_start":509,"line_end":509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690145,"byte_end":10690148,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690153,"byte_end":10690160,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ use std::thread;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690165,"byte_end":10690185,"line_start":512,"line_end":512,"column_start":5,"column_end":25}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690190,"byte_end":10690222,"line_start":513,"line_end":513,"column_start":5,"column_end":37}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690227,"byte_end":10690253,"line_start":514,"line_end":514,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690258,"byte_end":10690261,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690266,"byte_end":10690281,"line_start":516,"line_end":516,"column_start":5,"column_end":20}},{"value":"/     let (tx, mut rx) = mpsc::channel::<u8>(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690286,"byte_end":10690336,"line_start":517,"line_end":517,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690341,"byte_end":10690344,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/     let sync_code = thread::spawn(move || {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690349,"byte_end":10690396,"line_start":519,"line_end":519,"column_start":5,"column_end":52}},{"value":"/         tx.blocking_send(10).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690401,"byte_end":10690443,"line_start":520,"line_end":520,"column_start":5,"column_end":47}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690448,"byte_end":10690459,"line_start":521,"line_end":521,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690464,"byte_end":10690467,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/     Runtime::new().unwrap().block_on(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690472,"byte_end":10690525,"line_start":523,"line_end":523,"column_start":5,"column_end":58}},{"value":"/         assert_eq!(Some(10), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690530,"byte_end":10690580,"line_start":524,"line_end":524,"column_start":5,"column_end":55}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690585,"byte_end":10690596,"line_start":525,"line_end":525,"column_start":5,"column_end":16}},{"value":"/     sync_code.join().unwrap()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690601,"byte_end":10690634,"line_start":526,"line_end":526,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690639,"byte_end":10690644,"line_start":527,"line_end":527,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690649,"byte_end":10690656,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690661,"byte_end":10690685,"line_start":529,"line_end":529,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4863},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691401,"byte_end":10691410,"line_start":552,"line_end":552,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the channel has been closed. This happens when the\n [`Receiver`] is dropped, or when the [`Receiver::close`] method is\n called.","sig":null,"attributes":[{"value":"/ Checks if the channel has been closed. This happens when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690819,"byte_end":10690883,"line_start":534,"line_end":534,"column_start":5,"column_end":69}},{"value":"/ [`Receiver`] is dropped, or when the [`Receiver::close`] method is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690888,"byte_end":10690958,"line_start":535,"line_end":535,"column_start":5,"column_end":75}},{"value":"/ called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690963,"byte_end":10690974,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690979,"byte_end":10690982,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: crate::sync::mpsc::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10690987,"byte_end":10691032,"line_start":538,"line_end":538,"column_start":5,"column_end":50}},{"value":"/ [`Receiver::close`]: crate::sync::mpsc::Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691037,"byte_end":10691096,"line_start":539,"line_end":539,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691101,"byte_end":10691104,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691109,"byte_end":10691116,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/ let (tx, rx) = tokio::sync::mpsc::channel::<()>(42);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691121,"byte_end":10691177,"line_start":542,"line_end":542,"column_start":5,"column_end":61}},{"value":"/ assert!(!tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691182,"byte_end":10691211,"line_start":543,"line_end":543,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691216,"byte_end":10691219,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ let tx2 = tx.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691224,"byte_end":10691249,"line_start":545,"line_end":545,"column_start":5,"column_end":30}},{"value":"/ assert!(!tx2.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691254,"byte_end":10691284,"line_start":546,"line_end":546,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691289,"byte_end":10691292,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691297,"byte_end":10691310,"line_start":548,"line_end":548,"column_start":5,"column_end":18}},{"value":"/ assert!(tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691315,"byte_end":10691343,"line_start":549,"line_end":549,"column_start":5,"column_end":33}},{"value":"/ assert!(tx2.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691348,"byte_end":10691377,"line_start":550,"line_end":550,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691382,"byte_end":10691389,"line_start":551,"line_end":551,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4864},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692801,"byte_end":10692808,"line_start":594,"line_end":594,"column_start":18,"column_end":25},"name":"reserve","qualname":"<Sender<T>>::reserve","value":"pub async fn reserve<'_, '_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for channel capacity. Once capacity to send one message is\n available, it is reserved for the caller.","sig":null,"attributes":[{"value":"/ Wait for channel capacity. Once capacity to send one message is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691469,"byte_end":10691536,"line_start":556,"line_end":556,"column_start":5,"column_end":72}},{"value":"/ available, it is reserved for the caller.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691541,"byte_end":10691586,"line_start":557,"line_end":557,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691591,"byte_end":10691594,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ If the channel is full, the function waits for the number of unreceived","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691599,"byte_end":10691674,"line_start":559,"line_end":559,"column_start":5,"column_end":80}},{"value":"/ messages to become less than the channel capacity. Capacity to send one","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691679,"byte_end":10691754,"line_start":560,"line_end":560,"column_start":5,"column_end":80}},{"value":"/ message is reserved for the caller. A [`Permit`] is returned to track","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691759,"byte_end":10691832,"line_start":561,"line_end":561,"column_start":5,"column_end":78}},{"value":"/ the reserved capacity. The [`send`] function on [`Permit`] consumes the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691837,"byte_end":10691912,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ reserved capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691917,"byte_end":10691939,"line_start":563,"line_end":563,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691944,"byte_end":10691947,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ Dropping [`Permit`] without sending a message releases the capacity back","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10691952,"byte_end":10692028,"line_start":565,"line_end":565,"column_start":5,"column_end":81}},{"value":"/ to the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692033,"byte_end":10692052,"line_start":566,"line_end":566,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692057,"byte_end":10692060,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ [`Permit`]: Permit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692065,"byte_end":10692087,"line_start":568,"line_end":568,"column_start":5,"column_end":27}},{"value":"/ [`send`]: Permit::send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692092,"byte_end":10692118,"line_start":569,"line_end":569,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692123,"byte_end":10692126,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692131,"byte_end":10692145,"line_start":571,"line_end":571,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692150,"byte_end":10692153,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692158,"byte_end":10692165,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692170,"byte_end":10692196,"line_start":574,"line_end":574,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692201,"byte_end":10692204,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692209,"byte_end":10692227,"line_start":576,"line_end":576,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692232,"byte_end":10692253,"line_start":577,"line_end":577,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692258,"byte_end":10692302,"line_start":578,"line_end":578,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692307,"byte_end":10692310,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/     // Reserve capacity","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692315,"byte_end":10692342,"line_start":580,"line_end":580,"column_start":5,"column_end":32}},{"value":"/     let permit = tx.reserve().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692347,"byte_end":10692396,"line_start":581,"line_end":581,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692401,"byte_end":10692404,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/     // Trying to send directly on the `tx` will fail due to no","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692409,"byte_end":10692475,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/     // available capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692480,"byte_end":10692510,"line_start":584,"line_end":584,"column_start":5,"column_end":35}},{"value":"/     assert!(tx.try_send(123).is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692515,"byte_end":10692558,"line_start":585,"line_end":585,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692563,"byte_end":10692566,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/     // Sending on the permit succeeds","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692571,"byte_end":10692612,"line_start":587,"line_end":587,"column_start":5,"column_end":46}},{"value":"/     permit.send(456);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692617,"byte_end":10692642,"line_start":588,"line_end":588,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692647,"byte_end":10692650,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/     // The value sent on the permit is received","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692655,"byte_end":10692706,"line_start":590,"line_end":590,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(rx.recv().await.unwrap(), 456);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692711,"byte_end":10692761,"line_start":591,"line_end":591,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692766,"byte_end":10692771,"line_start":592,"line_end":592,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10692776,"byte_end":10692783,"line_start":593,"line_end":593,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4875},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694515,"byte_end":10694519,"line_start":655,"line_end":655,"column_start":12,"column_end":16},"name":"send","qualname":"<Permit>::send","value":"pub fn send(Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Sends a value using the reserved capacity.","sig":null,"attributes":[{"value":"/ Sends a value using the reserved capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693442,"byte_end":10693488,"line_start":623,"line_end":623,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693493,"byte_end":10693496,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Capacity for the message has already been reserved. The message is sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693501,"byte_end":10693576,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ to the receiver and the permit is consumed. The operation will succeed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693581,"byte_end":10693655,"line_start":626,"line_end":626,"column_start":5,"column_end":79}},{"value":"/ even if the receiver half has been closed. See [`Receiver::close`] for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693660,"byte_end":10693734,"line_start":627,"line_end":627,"column_start":5,"column_end":79}},{"value":"/ more details on performing a clean shutdown.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693739,"byte_end":10693787,"line_start":628,"line_end":628,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693792,"byte_end":10693795,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ [`Receiver::close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693800,"byte_end":10693840,"line_start":630,"line_end":630,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693845,"byte_end":10693848,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693853,"byte_end":10693867,"line_start":632,"line_end":632,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693872,"byte_end":10693875,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693880,"byte_end":10693887,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693892,"byte_end":10693918,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693923,"byte_end":10693926,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693931,"byte_end":10693949,"line_start":637,"line_end":637,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693954,"byte_end":10693975,"line_start":638,"line_end":638,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::channel(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693980,"byte_end":10694024,"line_start":639,"line_end":639,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694029,"byte_end":10694032,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/     // Reserve capacity","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694037,"byte_end":10694064,"line_start":641,"line_end":641,"column_start":5,"column_end":32}},{"value":"/     let permit = tx.reserve().await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694069,"byte_end":10694118,"line_start":642,"line_end":642,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694123,"byte_end":10694126,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/     // Trying to send directly on the `tx` will fail due to no","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694131,"byte_end":10694197,"line_start":644,"line_end":644,"column_start":5,"column_end":71}},{"value":"/     // available capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694202,"byte_end":10694232,"line_start":645,"line_end":645,"column_start":5,"column_end":35}},{"value":"/     assert!(tx.try_send(123).is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694237,"byte_end":10694280,"line_start":646,"line_end":646,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694285,"byte_end":10694288,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/     // Send a message on the permit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694293,"byte_end":10694332,"line_start":648,"line_end":648,"column_start":5,"column_end":44}},{"value":"/     permit.send(456);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694337,"byte_end":10694362,"line_start":649,"line_end":649,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694367,"byte_end":10694370,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/     // The value sent on the permit is received","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694375,"byte_end":10694426,"line_start":651,"line_end":651,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(rx.recv().await.unwrap(), 456);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694431,"byte_end":10694481,"line_start":652,"line_end":652,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694486,"byte_end":10694491,"line_start":653,"line_end":653,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694496,"byte_end":10694503,"line_start":654,"line_end":654,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5072},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716762,"byte_end":10716777,"line_start":12,"line_end":12,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::sync::mpsc::unbounded::UnboundedSender","value":"UnboundedSender {  }","parent":null,"children":[{"krate":0,"index":5074}],"decl_id":null,"docs":" Send values to the associated `UnboundedReceiver`.","sig":null,"attributes":[{"value":"/ Send values to the associated `UnboundedReceiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716604,"byte_end":10716658,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716659,"byte_end":10716662,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716663,"byte_end":10716695,"line_start":10,"line_end":10,"column_start":1,"column_end":33}},{"value":"/ [`unbounded_channel`](unbounded_channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716696,"byte_end":10716750,"line_start":11,"line_end":11,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":5081},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717355,"byte_end":10717372,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::sync::mpsc::unbounded::UnboundedReceiver","value":"UnboundedReceiver {  }","parent":null,"children":[{"krate":0,"index":5083}],"decl_id":null,"docs":" Receive values from the associated `UnboundedSender`.","sig":null,"attributes":[{"value":"/ Receive values from the associated `UnboundedSender`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717194,"byte_end":10717251,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717252,"byte_end":10717255,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717256,"byte_end":10717288,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ [`unbounded_channel`](unbounded_channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717289,"byte_end":10717343,"line_start":35,"line_end":35,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":5087},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718204,"byte_end":10718221,"line_start":59,"line_end":59,"column_start":8,"column_end":25},"name":"unbounded_channel","qualname":"::sync::mpsc::unbounded::unbounded_channel","value":"pub fn unbounded_channel<T>() -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded mpsc channel for communicating between asynchronous\n tasks without backpressure.","sig":null,"attributes":[{"value":"/ Creates an unbounded mpsc channel for communicating between asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717671,"byte_end":10717747,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ tasks without backpressure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717748,"byte_end":10717779,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717780,"byte_end":10717783,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ A `send` on this channel will always succeed as long as the receive half has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717784,"byte_end":10717864,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ not been closed. If the receiver falls behind, messages will be arbitrarily","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717865,"byte_end":10717944,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ buffered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717945,"byte_end":10717958,"line_start":54,"line_end":54,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717959,"byte_end":10717962,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ **Note** that the amount of available system memory is an implicit bound to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717963,"byte_end":10718042,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ the channel. Using an `unbounded` channel has the ability of causing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718043,"byte_end":10718119,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ process to run out of memory. In this case, the process will be aborted.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718120,"byte_end":10718196,"line_start":58,"line_end":58,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":5093},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719700,"byte_end":10719704,"line_start":115,"line_end":115,"column_start":18,"column_end":22},"name":"recv","qualname":"<UnboundedReceiver<T>>::recv","value":"pub async fn recv<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Receives the next value for this receiver.","sig":null,"attributes":[{"value":"/ Receives the next value for this receiver.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718630,"byte_end":10718676,"line_start":76,"line_end":76,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718681,"byte_end":10718684,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ `None` is returned when all `Sender` halves have dropped, indicating","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718689,"byte_end":10718761,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ that no further values can be sent on the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718766,"byte_end":10718820,"line_start":79,"line_end":79,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718825,"byte_end":10718828,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718833,"byte_end":10718847,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718852,"byte_end":10718855,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718860,"byte_end":10718867,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718872,"byte_end":10718898,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718903,"byte_end":10718906,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718911,"byte_end":10718929,"line_start":86,"line_end":86,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718934,"byte_end":10718955,"line_start":87,"line_end":87,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::unbounded_channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718960,"byte_end":10719013,"line_start":88,"line_end":88,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719018,"byte_end":10719021,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719026,"byte_end":10719059,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/         tx.send(\"hello\").unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719064,"byte_end":10719102,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719107,"byte_end":10719118,"line_start":92,"line_end":92,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719123,"byte_end":10719126,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(Some(\"hello\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719131,"byte_end":10719182,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(None, rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719187,"byte_end":10719229,"line_start":95,"line_end":95,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719234,"byte_end":10719239,"line_start":96,"line_end":96,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719244,"byte_end":10719251,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719256,"byte_end":10719259,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Values are buffered:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719264,"byte_end":10719288,"line_start":99,"line_end":99,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719293,"byte_end":10719296,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719301,"byte_end":10719308,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719313,"byte_end":10719339,"line_start":102,"line_end":102,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719344,"byte_end":10719347,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719352,"byte_end":10719370,"line_start":104,"line_end":104,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719375,"byte_end":10719396,"line_start":105,"line_end":105,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::unbounded_channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719401,"byte_end":10719454,"line_start":106,"line_end":106,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719459,"byte_end":10719462,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/     tx.send(\"hello\").unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719467,"byte_end":10719501,"line_start":108,"line_end":108,"column_start":5,"column_end":39}},{"value":"/     tx.send(\"world\").unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719506,"byte_end":10719540,"line_start":109,"line_end":109,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719545,"byte_end":10719548,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(Some(\"hello\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719553,"byte_end":10719604,"line_start":111,"line_end":111,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(Some(\"world\"), rx.recv().await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719609,"byte_end":10719660,"line_start":112,"line_end":112,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719665,"byte_end":10719670,"line_start":113,"line_end":113,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719675,"byte_end":10719682,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720511,"byte_end":10720524,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"blocking_recv","qualname":"<UnboundedReceiver<T>>::blocking_recv","value":"pub fn blocking_recv(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Blocking receive to call outside of asynchronous contexts.","sig":null,"attributes":[{"value":"/ Blocking receive to call outside of asynchronous contexts.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719826,"byte_end":10719888,"line_start":121,"line_end":121,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719893,"byte_end":10719896,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719901,"byte_end":10719913,"line_start":123,"line_end":123,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719918,"byte_end":10719921,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This function panics if called within an asynchronous execution","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719926,"byte_end":10719993,"line_start":125,"line_end":125,"column_start":5,"column_end":72}},{"value":"/ context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10719998,"byte_end":10720010,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720015,"byte_end":10720018,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720023,"byte_end":10720037,"line_start":128,"line_end":128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720042,"byte_end":10720045,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720050,"byte_end":10720057,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use std::thread;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720062,"byte_end":10720082,"line_start":131,"line_end":131,"column_start":5,"column_end":25}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720087,"byte_end":10720113,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720118,"byte_end":10720121,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720126,"byte_end":10720144,"line_start":134,"line_end":134,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720149,"byte_end":10720170,"line_start":135,"line_end":135,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = mpsc::unbounded_channel::<u8>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720175,"byte_end":10720234,"line_start":136,"line_end":136,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720239,"byte_end":10720242,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/     let sync_code = thread::spawn(move || {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720247,"byte_end":10720294,"line_start":138,"line_end":138,"column_start":5,"column_end":52}},{"value":"/         assert_eq!(Some(10), rx.blocking_recv());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720299,"byte_end":10720352,"line_start":139,"line_end":139,"column_start":5,"column_end":58}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720357,"byte_end":10720368,"line_start":140,"line_end":140,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720373,"byte_end":10720376,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/     let _ = tx.send(10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720381,"byte_end":10720409,"line_start":142,"line_end":142,"column_start":5,"column_end":33}},{"value":"/     sync_code.join().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720414,"byte_end":10720448,"line_start":143,"line_end":143,"column_start":5,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720453,"byte_end":10720458,"line_start":144,"line_end":144,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720463,"byte_end":10720470,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720475,"byte_end":10720499,"line_start":146,"line_end":146,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5099},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720844,"byte_end":10720849,"line_start":155,"line_end":155,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720607,"byte_end":10720671,"line_start":151,"line_end":151,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720676,"byte_end":10720679,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720684,"byte_end":10720759,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720764,"byte_end":10720832,"line_start":154,"line_end":154,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":5100},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721690,"byte_end":10721699,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"poll_recv","qualname":"<UnboundedReceiver<T>>::poll_recv","value":"pub fn poll_recv(&mut Self, &mut Context) -> Poll<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Polls to receive the next message on this channel.","sig":null,"attributes":[{"value":"/ Polls to receive the next message on this channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720901,"byte_end":10720955,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720960,"byte_end":10720963,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720968,"byte_end":10720992,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10720997,"byte_end":10721000,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if no messages are available but the channel is not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721005,"byte_end":10721079,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/    closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721084,"byte_end":10721098,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/  * `Poll::Ready(Some(message))` if a message is available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721103,"byte_end":10721165,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"/  * `Poll::Ready(None)` if the channel has been closed and all messages","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721170,"byte_end":10721244,"line_start":166,"line_end":166,"column_start":5,"column_end":79}},{"value":"/    sent before it was closed have been received.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721249,"byte_end":10721301,"line_start":167,"line_end":167,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721306,"byte_end":10721309,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ When the method returns `Poll::Pending`, the `Waker` in the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721314,"byte_end":10721386,"line_start":169,"line_end":169,"column_start":5,"column_end":77}},{"value":"/ `Context` is scheduled to receive a wakeup when a message is sent on any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721391,"byte_end":10721467,"line_start":170,"line_end":170,"column_start":5,"column_end":81}},{"value":"/ receiver, or when the channel is closed.  Note that on multiple calls to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721472,"byte_end":10721548,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ `poll_recv`, only the `Waker` from the `Context` passed to the most","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721553,"byte_end":10721624,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/ recent call is scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721629,"byte_end":10721678,"line_start":173,"line_end":173,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5104},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722627,"byte_end":10722631,"line_start":196,"line_end":196,"column_start":12,"column_end":16},"name":"send","qualname":"<UnboundedSender<T>>::send","value":"pub fn send(&Self, T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a message on this `UnboundedSender` without blocking.","sig":null,"attributes":[{"value":"/ Attempts to send a message on this `UnboundedSender` without blocking.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721939,"byte_end":10722013,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722018,"byte_end":10722021,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This method is not marked async because sending a message to an unbounded channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722026,"byte_end":10722111,"line_start":186,"line_end":186,"column_start":5,"column_end":90}},{"value":"/ never requires any form of waiting. Because of this, the `send` method can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722116,"byte_end":10722197,"line_start":187,"line_end":187,"column_start":5,"column_end":86}},{"value":"/ used in both synchronous and asynchronous code without problems.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722202,"byte_end":10722270,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722275,"byte_end":10722278,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ If the receive half of the channel is closed, either due to [`close`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722283,"byte_end":10722356,"line_start":190,"line_end":190,"column_start":5,"column_end":78}},{"value":"/ being called or the [`UnboundedReceiver`] having been dropped, this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722361,"byte_end":10722432,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ function returns an error. The error includes the value passed to `send`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722437,"byte_end":10722514,"line_start":192,"line_end":192,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722519,"byte_end":10722522,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ [`close`]: UnboundedReceiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722527,"byte_end":10722566,"line_start":194,"line_end":194,"column_start":5,"column_end":44}},{"value":"/ [`UnboundedReceiver`]: UnboundedReceiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10722571,"byte_end":10722615,"line_start":195,"line_end":195,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5110},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724560,"byte_end":10724566,"line_start":266,"line_end":266,"column_start":18,"column_end":24},"name":"closed","qualname":"<UnboundedSender<T>>::closed","value":"pub async fn closed<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Completes when the receiver has dropped.","sig":null,"attributes":[{"value":"/ Completes when the receiver has dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723669,"byte_end":10723713,"line_start":235,"line_end":235,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723718,"byte_end":10723721,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This allows the producers to get notified when interest in the produced","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723726,"byte_end":10723801,"line_start":237,"line_end":237,"column_start":5,"column_end":80}},{"value":"/ values is canceled and immediately stop doing work.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723806,"byte_end":10723861,"line_start":238,"line_end":238,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723866,"byte_end":10723869,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723874,"byte_end":10723888,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723893,"byte_end":10723896,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723901,"byte_end":10723908,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723913,"byte_end":10723939,"line_start":243,"line_end":243,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723944,"byte_end":10723947,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723952,"byte_end":10723970,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10723975,"byte_end":10723996,"line_start":246,"line_end":246,"column_start":5,"column_end":26}},{"value":"/     let (tx1, rx) = mpsc::unbounded_channel::<()>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724001,"byte_end":10724057,"line_start":247,"line_end":247,"column_start":5,"column_end":61}},{"value":"/     let tx2 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724062,"byte_end":10724092,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/     let tx3 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724097,"byte_end":10724127,"line_start":249,"line_end":249,"column_start":5,"column_end":35}},{"value":"/     let tx4 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724132,"byte_end":10724162,"line_start":250,"line_end":250,"column_start":5,"column_end":35}},{"value":"/     let tx5 = tx1.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724167,"byte_end":10724197,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724202,"byte_end":10724235,"line_start":252,"line_end":252,"column_start":5,"column_end":38}},{"value":"/         drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724240,"byte_end":10724261,"line_start":253,"line_end":253,"column_start":5,"column_end":26}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724266,"byte_end":10724277,"line_start":254,"line_end":254,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724282,"byte_end":10724285,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/     futures::join!(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724290,"byte_end":10724313,"line_start":256,"line_end":256,"column_start":5,"column_end":28}},{"value":"/         tx1.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724318,"byte_end":10724343,"line_start":257,"line_end":257,"column_start":5,"column_end":30}},{"value":"/         tx2.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724348,"byte_end":10724373,"line_start":258,"line_end":258,"column_start":5,"column_end":30}},{"value":"/         tx3.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724378,"byte_end":10724403,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/         tx4.closed(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724408,"byte_end":10724433,"line_start":260,"line_end":260,"column_start":5,"column_end":30}},{"value":"/         tx5.closed()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724438,"byte_end":10724462,"line_start":261,"line_end":261,"column_start":5,"column_end":29}},{"value":"/     );","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724467,"byte_end":10724477,"line_start":262,"line_end":262,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724525,"byte_end":10724530,"line_start":264,"line_end":264,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724535,"byte_end":10724542,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5113},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725263,"byte_end":10725272,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<UnboundedSender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the channel has been closed. This happens when the\n [`UnboundedReceiver`] is dropped, or when the\n [`UnboundedReceiver::close`] method is called.","sig":null,"attributes":[{"value":"/ Checks if the channel has been closed. This happens when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724619,"byte_end":10724683,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/ [`UnboundedReceiver`] is dropped, or when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724688,"byte_end":10724737,"line_start":270,"line_end":270,"column_start":5,"column_end":54}},{"value":"/ [`UnboundedReceiver::close`] method is called.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724742,"byte_end":10724792,"line_start":271,"line_end":271,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724797,"byte_end":10724800,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ [`UnboundedReceiver`]: crate::sync::mpsc::UnboundedReceiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724805,"byte_end":10724868,"line_start":273,"line_end":273,"column_start":5,"column_end":68}},{"value":"/ [`UnboundedReceiver::close`]: crate::sync::mpsc::UnboundedReceiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724873,"byte_end":10724950,"line_start":274,"line_end":274,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724955,"byte_end":10724958,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724963,"byte_end":10724970,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ let (tx, rx) = tokio::sync::mpsc::unbounded_channel::<()>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10724975,"byte_end":10725039,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/ assert!(!tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725044,"byte_end":10725073,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725078,"byte_end":10725081,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let tx2 = tx.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725086,"byte_end":10725111,"line_start":280,"line_end":280,"column_start":5,"column_end":30}},{"value":"/ assert!(!tx2.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725116,"byte_end":10725146,"line_start":281,"line_end":281,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725151,"byte_end":10725154,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725159,"byte_end":10725172,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/ assert!(tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725177,"byte_end":10725205,"line_start":284,"line_end":284,"column_start":5,"column_end":33}},{"value":"/ assert!(tx2.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725210,"byte_end":10725239,"line_start":285,"line_end":285,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10725244,"byte_end":10725251,"line_start":286,"line_end":286,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":5118},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::sync::mpsc::error","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","parent":null,"children":[{"krate":0,"index":5119},{"krate":0,"index":5120},{"krate":0,"index":5799},{"krate":0,"index":5803},{"krate":0,"index":5121},{"krate":0,"index":5124},{"krate":0,"index":5806},{"krate":0,"index":5814},{"krate":0,"index":5126},{"krate":0,"index":5128},{"krate":0,"index":5131},{"krate":0,"index":5817},{"krate":0,"index":5820},{"krate":0,"index":5134},{"krate":0,"index":5136},{"krate":0,"index":5827},{"krate":0,"index":5835},{"krate":0,"index":5822},{"krate":0,"index":5824}],"decl_id":null,"docs":" Channel error types\n","sig":null,"attributes":[{"value":"/ Channel error types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725329,"byte_end":10725352,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5799},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725456,"byte_end":10725465,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"SendError","qualname":"::sync::mpsc::error::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by the `Sender`.\n","sig":null,"attributes":[{"value":"/ Error returned by the `Sender`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725392,"byte_end":10725427,"line_start":6,"line_end":6,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5802},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725469,"byte_end":10725474,"line_start":8,"line_end":8,"column_start":25,"column_end":30},"name":"0","qualname":"::sync::mpsc::error::SendError::0","value":"T","parent":{"krate":0,"index":5799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5808},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726018,"byte_end":10726022,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Full","qualname":"::sync::mpsc::error::TrySendError::Full","value":"TrySendError::Full(T)","parent":{"krate":0,"index":5806},"children":[],"decl_id":null,"docs":" The data could not be sent on the channel because the channel is\n currently full and sending would require blocking.\n","sig":null,"attributes":[{"value":"/ The data could not be sent on the channel because the channel is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725886,"byte_end":10725954,"line_start":24,"line_end":24,"column_start":5,"column_end":73}},{"value":"/ currently full and sending would require blocking.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725959,"byte_end":10726013,"line_start":25,"line_end":25,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5811},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726123,"byte_end":10726129,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Closed","qualname":"::sync::mpsc::error::TrySendError::Closed","value":"TrySendError::Closed(T)","parent":{"krate":0,"index":5806},"children":[],"decl_id":null,"docs":" The receive half of the channel was explicitly closed or has been\n dropped.\n","sig":null,"attributes":[{"value":"/ The receive half of the channel was explicitly closed or has been","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726032,"byte_end":10726101,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726106,"byte_end":10726118,"line_start":29,"line_end":29,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":5806},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725864,"byte_end":10725876,"line_start":23,"line_end":23,"column_start":10,"column_end":22},"name":"TrySendError","qualname":"::sync::mpsc::error::TrySendError","value":"pub enum TrySendError<T> {\n\n    /// The data could not be sent on the channel because the channel is\n    /// currently full and sending would require blocking.\n    Full(T),\n\n    /// The receive half of the channel was explicitly closed or has been\n    /// dropped.\n    Closed(T),\n}","parent":null,"children":[{"krate":0,"index":5808},{"krate":0,"index":5811}],"decl_id":null,"docs":" This enumeration is the list of the possible error outcomes for the\n [try_send](super::Sender::try_send) method.\n","sig":null,"attributes":[{"value":"/ This enumeration is the list of the possible error outcomes for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725718,"byte_end":10725789,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ [try_send](super::Sender::try_send) method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725790,"byte_end":10725837,"line_start":21,"line_end":21,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5817},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726767,"byte_end":10726776,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"RecvError","qualname":"::sync::mpsc::error::RecvError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by `Receiver`.\n","sig":null,"attributes":[{"value":"/ Error returned by `Receiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726705,"byte_end":10726738,"line_start":56,"line_end":56,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5829},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728282,"byte_end":10728289,"line_start":109,"line_end":109,"column_start":9,"column_end":16},"name":"Timeout","qualname":"::sync::mpsc::error::SendTimeoutError::Timeout","value":"SendTimeoutError::Timeout(T)","parent":{"krate":0,"index":5827},"children":[],"decl_id":null,"docs":" The data could not be sent on the channel because the channel is\n full, and the timeout to send has elapsed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5832},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728402,"byte_end":10728408,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"Closed","qualname":"::sync::mpsc::error::SendTimeoutError::Closed","value":"SendTimeoutError::Closed(T)","parent":{"krate":0,"index":5827},"children":[],"decl_id":null,"docs":" The receive half of the channel was explicitly closed or has been\n dropped.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5827},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728120,"byte_end":10728136,"line_start":106,"line_end":106,"column_start":14,"column_end":30},"name":"SendTimeoutError","qualname":"::sync::mpsc::error::SendTimeoutError","value":"pub enum SendTimeoutError<T> {\n\n    #[doc =\n      r\" The data could not be sent on the channel because the channel is\"]\n    #[doc = r\" full, and the timeout to send has elapsed.\"]\n    Timeout(T),\n\n    #[doc =\n      r\" The receive half of the channel was explicitly closed or has been\"]\n    #[doc = r\" dropped.\"]\n    Closed(T),\n}","parent":null,"children":[{"krate":0,"index":5829},{"krate":0,"index":5832}],"decl_id":null,"docs":" Error returned by [`Sender::send_timeout`](super::Sender::send_timeout)].\n","sig":null,"attributes":[{"value":"cfg(feature = \"time\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":24365,"byte_end":24389,"line_start":311,"line_end":311,"column_start":13,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5147},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733394,"byte_end":10733399,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::sync::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":5149},{"krate":0,"index":5150}],"decl_id":null,"docs":" An asynchronous `Mutex`-like type.","sig":null,"attributes":[{"value":"/ An asynchronous `Mutex`-like type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729141,"byte_end":10729179,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729180,"byte_end":10729183,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type acts similarly to an asynchronous [`std::sync::Mutex`], with one","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729184,"byte_end":10729262,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ major difference: [`lock`] does not block and the lock guard can be held","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729263,"byte_end":10729339,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ across await points.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729340,"byte_end":10729364,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729365,"byte_end":10729368,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Which kind of mutex should you use?","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729369,"byte_end":10729410,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729411,"byte_end":10729414,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Contrary to popular belief, it is ok and often preferred to use the ordinary","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729415,"byte_end":10729495,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ [`Mutex`][std] from the standard library in asynchronous code. This section","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729496,"byte_end":10729575,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ will help you decide on which kind of mutex you should use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729576,"byte_end":10729639,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729640,"byte_end":10729643,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The primary use case of the async mutex is to provide shared mutable access","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729644,"byte_end":10729723,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ to IO resources such as a database connection. If the data stored behind the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729724,"byte_end":10729804,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ mutex is just data, it is often better to use a blocking mutex such as the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729805,"byte_end":10729883,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ one in the standard library or [`parking_lot`]. This is because the feature","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729884,"byte_end":10729963,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ that the async mutex offers over the blocking mutex is that it is possible","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10729964,"byte_end":10730042,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to keep the mutex locked across an `.await` point, which is rarely necessary","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730043,"byte_end":10730123,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ for data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730124,"byte_end":10730137,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730138,"byte_end":10730141,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A common pattern is to wrap the `Arc<Mutex<...>>` in a struct that provides","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730142,"byte_end":10730221,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ non-async methods for performing operations on the data within, and only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730222,"byte_end":10730298,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ lock the mutex inside these methods. The [mini-redis] example provides an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730299,"byte_end":10730376,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ illustration of this pattern.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730377,"byte_end":10730410,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730411,"byte_end":10730414,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Additionally, when you _do_ want shared access to an IO resource, it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730415,"byte_end":10730490,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ often better to spawn a task to manage the IO resource, and to use message","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730491,"byte_end":10730569,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ passing to communicate with that task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730570,"byte_end":10730612,"line_start":38,"line_end":38,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730613,"byte_end":10730616,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [std]: std::sync::Mutex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730617,"byte_end":10730644,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/ [`parking_lot`]: https://docs.rs/parking_lot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730645,"byte_end":10730693,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [mini-redis]: https://github.com/tokio-rs/mini-redis/blob/master/src/db.rs","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730694,"byte_end":10730772,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730773,"byte_end":10730776,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730777,"byte_end":10730792,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730793,"byte_end":10730796,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730797,"byte_end":10730815,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730816,"byte_end":10730843,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730844,"byte_end":10730867,"line_start":48,"line_end":48,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730868,"byte_end":10730871,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730872,"byte_end":10730890,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730891,"byte_end":10730912,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/     let data1 = Arc::new(Mutex::new(0));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730913,"byte_end":10730957,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/     let data2 = Arc::clone(&data1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730958,"byte_end":10730997,"line_start":53,"line_end":53,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10730998,"byte_end":10731001,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731002,"byte_end":10731035,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         let mut lock = data2.lock().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731036,"byte_end":10731082,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/         *lock += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731083,"byte_end":10731106,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731107,"byte_end":10731118,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731119,"byte_end":10731122,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/     let mut lock = data1.lock().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731123,"byte_end":10731165,"line_start":60,"line_end":60,"column_start":1,"column_end":43}},{"value":"/     *lock += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731166,"byte_end":10731185,"line_start":61,"line_end":61,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731186,"byte_end":10731191,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731192,"byte_end":10731199,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731200,"byte_end":10731203,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731204,"byte_end":10731207,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731208,"byte_end":10731226,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731227,"byte_end":10731254,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731255,"byte_end":10731278,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731279,"byte_end":10731282,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731283,"byte_end":10731301,"line_start":70,"line_end":70,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731302,"byte_end":10731323,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/     let count = Arc::new(Mutex::new(0));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731324,"byte_end":10731368,"line_start":72,"line_end":72,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731369,"byte_end":10731372,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/     for _ in 0..5 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731373,"byte_end":10731396,"line_start":74,"line_end":74,"column_start":1,"column_end":24}},{"value":"/         let my_count = Arc::clone(&count);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731397,"byte_end":10731443,"line_start":75,"line_end":75,"column_start":1,"column_end":47}},{"value":"/         tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731444,"byte_end":10731481,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/             for _ in 0..10 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731482,"byte_end":10731514,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/                 let mut lock = my_count.lock().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731515,"byte_end":10731572,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"/                 *lock += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731573,"byte_end":10731604,"line_start":79,"line_end":79,"column_start":1,"column_end":32}},{"value":"/                 println!(\"{}\", lock);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731605,"byte_end":10731646,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731647,"byte_end":10731664,"line_start":81,"line_end":81,"column_start":1,"column_end":18}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731665,"byte_end":10731680,"line_start":82,"line_end":82,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731681,"byte_end":10731690,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731691,"byte_end":10731694,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731695,"byte_end":10731709,"line_start":85,"line_end":85,"column_start":1,"column_end":15}},{"value":"/         if *count.lock().await >= 50 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731710,"byte_end":10731752,"line_start":86,"line_end":86,"column_start":1,"column_end":43}},{"value":"/             break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731753,"byte_end":10731775,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731776,"byte_end":10731789,"line_start":88,"line_end":88,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731790,"byte_end":10731799,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/     println!(\"Count hit 50.\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731800,"byte_end":10731834,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731835,"byte_end":10731840,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731841,"byte_end":10731848,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ There are a few things of note here to pay attention to in this example.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731849,"byte_end":10731925,"line_start":93,"line_end":93,"column_start":1,"column_end":77}},{"value":"/ 1. The mutex is wrapped in an [`Arc`] to allow it to be shared across","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10731926,"byte_end":10731999,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/    threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732000,"byte_end":10732015,"line_start":95,"line_end":95,"column_start":1,"column_end":16}},{"value":"/ 2. Each spawned task obtains a lock and releases it on every iteration.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732016,"byte_end":10732091,"line_start":96,"line_end":96,"column_start":1,"column_end":76}},{"value":"/ 3. Mutation of the data protected by the Mutex is done by de-referencing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732092,"byte_end":10732168,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/    the obtained lock as seen on lines 12 and 19.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732169,"byte_end":10732221,"line_start":98,"line_end":98,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732222,"byte_end":10732225,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Tokio's Mutex works in a simple FIFO (first in, first out) style where all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732226,"byte_end":10732304,"line_start":100,"line_end":100,"column_start":1,"column_end":79}},{"value":"/ calls to [`lock`] complete in the order they were performed. In that way the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732305,"byte_end":10732385,"line_start":101,"line_end":101,"column_start":1,"column_end":81}},{"value":"/ Mutex is \"fair\" and predictable in how it distributes the locks to inner","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732386,"byte_end":10732462,"line_start":102,"line_end":102,"column_start":1,"column_end":77}},{"value":"/ data. This is why the output of the program above is an in-order count to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732463,"byte_end":10732540,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"/ 50. Locks are released and reacquired after every iteration, so basically,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732541,"byte_end":10732619,"line_start":104,"line_end":104,"column_start":1,"column_end":79}},{"value":"/ each thread goes to the back of the line after it increments the value once.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732620,"byte_end":10732700,"line_start":105,"line_end":105,"column_start":1,"column_end":81}},{"value":"/ Finally, since there is only a single valid lock at any given time, there is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732701,"byte_end":10732781,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/ no possibility of a race condition when mutating the inner value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732782,"byte_end":10732851,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732852,"byte_end":10732855,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note that in contrast to [`std::sync::Mutex`], this implementation does not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732856,"byte_end":10732935,"line_start":109,"line_end":109,"column_start":1,"column_end":80}},{"value":"/ poison the mutex when a thread holding the [`MutexGuard`] panics. In such a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10732936,"byte_end":10733015,"line_start":110,"line_end":110,"column_start":1,"column_end":80}},{"value":"/ case, the mutex will be unlocked. If the panic is caught, this might leave","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733016,"byte_end":10733094,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ the data protected by the mutex in an inconsistent state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733095,"byte_end":10733156,"line_start":112,"line_end":112,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733157,"byte_end":10733160,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: struct@Mutex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733161,"byte_end":10733188,"line_start":114,"line_end":114,"column_start":1,"column_end":28}},{"value":"/ [`MutexGuard`]: struct@MutexGuard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733189,"byte_end":10733226,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/ [`Arc`]: struct@std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733227,"byte_end":10733261,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/ [`std::sync::Mutex`]: struct@std::sync::Mutex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733262,"byte_end":10733311,"line_start":117,"line_end":117,"column_start":1,"column_end":50}},{"value":"/ [`Send`]: trait@std::marker::Send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733312,"byte_end":10733349,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/ [`lock`]: method@Mutex::lock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733350,"byte_end":10733382,"line_start":119,"line_end":119,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733828,"byte_end":10733838,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::sync::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":5154}],"decl_id":null,"docs":" A handle to a held `Mutex`.","sig":null,"attributes":[{"value":"/ A handle to a held `Mutex`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733467,"byte_end":10733498,"line_start":125,"line_end":125,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733499,"byte_end":10733502,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ As long as you have this guard, you have exclusive access to the underlying","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733503,"byte_end":10733582,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ `T`. The guard internally borrows the `Mutex`, so the mutex will not be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733583,"byte_end":10733658,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ dropped while a guard exists.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733659,"byte_end":10733692,"line_start":129,"line_end":129,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733693,"byte_end":10733696,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ The lock is automatically released whenever the guard is dropped, at which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733697,"byte_end":10733775,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ point `lock` will succeed yet again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733776,"byte_end":10733816,"line_start":132,"line_end":132,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5155},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734625,"byte_end":10734640,"line_start":152,"line_end":152,"column_start":12,"column_end":27},"name":"OwnedMutexGuard","qualname":"::sync::mutex::OwnedMutexGuard","value":"OwnedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":5157}],"decl_id":null,"docs":" An owned handle to a held `Mutex`.","sig":null,"attributes":[{"value":"/ An owned handle to a held `Mutex`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733883,"byte_end":10733921,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733922,"byte_end":10733925,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This guard is only available from a `Mutex` that is wrapped in an [`Arc`]. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10733926,"byte_end":10734007,"line_start":139,"line_end":139,"column_start":1,"column_end":82}},{"value":"/ is identical to `MutexGuard`, except that rather than borrowing the `Mutex`,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734008,"byte_end":10734088,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/ it clones the `Arc`, incrementing the reference count. This means that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734089,"byte_end":10734163,"line_start":141,"line_end":141,"column_start":1,"column_end":75}},{"value":"/ unlike `MutexGuard`, it will have the `'static` lifetime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734164,"byte_end":10734225,"line_start":142,"line_end":142,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734226,"byte_end":10734229,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ As long as you have this guard, you have exclusive access to the underlying","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734230,"byte_end":10734309,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ `T`. The guard internally keeps a reference-couned pointer to the original","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734310,"byte_end":10734388,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ `Mutex`, so even if the lock goes away, the guard remains valid.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734389,"byte_end":10734457,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734458,"byte_end":10734461,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ The lock is automatically released whenever the guard is dropped, at which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734462,"byte_end":10734540,"line_start":148,"line_end":148,"column_start":1,"column_end":79}},{"value":"/ point `lock` will succeed yet again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734541,"byte_end":10734581,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734582,"byte_end":10734585,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ [`Arc`]: std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734586,"byte_end":10734613,"line_start":151,"line_end":151,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":5838},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735348,"byte_end":10735360,"line_start":170,"line_end":170,"column_start":12,"column_end":24},"name":"TryLockError","qualname":"::sync::mutex::TryLockError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from the [`Mutex::try_lock`] function.","sig":null,"attributes":[{"value":"/ Error returned from the [`Mutex::try_lock`] function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735140,"byte_end":10735197,"line_start":164,"line_end":164,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735198,"byte_end":10735201,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ A `try_lock` operation can only fail if the mutex is already locked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735202,"byte_end":10735274,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735275,"byte_end":10735278,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ [`Mutex::try_lock`]: Mutex::try_lock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735279,"byte_end":10735319,"line_start":168,"line_end":168,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5171},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736576,"byte_end":10736579,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<T>>::new","value":"pub fn new(T) -> Self where T: Sized","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lock in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new lock in an unlocked state ready for use.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736373,"byte_end":10736431,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736436,"byte_end":10736439,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736444,"byte_end":10736458,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736463,"byte_end":10736466,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736471,"byte_end":10736478,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736483,"byte_end":10736510,"line_start":210,"line_end":210,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736515,"byte_end":10736518,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let lock = Mutex::new(5);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736523,"byte_end":10736552,"line_start":212,"line_end":212,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736557,"byte_end":10736564,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737737,"byte_end":10737741,"line_start":262,"line_end":262,"column_start":18,"column_end":22},"name":"lock","qualname":"<Mutex<T>>::lock","value":"pub async fn lock<'_, '_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks this mutex, causing the current task\n to yield until the lock has been acquired.\n When the lock has been acquired, function returns a [`MutexGuard`].","sig":null,"attributes":[{"value":"/ Locks this mutex, causing the current task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737277,"byte_end":10737323,"line_start":245,"line_end":245,"column_start":5,"column_end":51}},{"value":"/ to yield until the lock has been acquired.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737328,"byte_end":10737374,"line_start":246,"line_end":246,"column_start":5,"column_end":51}},{"value":"/ When the lock has been acquired, function returns a [`MutexGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737379,"byte_end":10737450,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737455,"byte_end":10737458,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737463,"byte_end":10737477,"line_start":249,"line_end":249,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737482,"byte_end":10737485,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737490,"byte_end":10737497,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737502,"byte_end":10737529,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737534,"byte_end":10737537,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737542,"byte_end":10737560,"line_start":254,"line_end":254,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737565,"byte_end":10737586,"line_start":255,"line_end":255,"column_start":5,"column_end":26}},{"value":"/     let mutex = Mutex::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737591,"byte_end":10737625,"line_start":256,"line_end":256,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737630,"byte_end":10737633,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/     let mut n = mutex.lock().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737638,"byte_end":10737677,"line_start":258,"line_end":258,"column_start":5,"column_end":44}},{"value":"/     *n = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737682,"byte_end":10737697,"line_start":259,"line_end":259,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737702,"byte_end":10737707,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737712,"byte_end":10737719,"line_start":261,"line_end":261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5175},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738768,"byte_end":10738778,"line_start":293,"line_end":293,"column_start":18,"column_end":28},"name":"lock_owned","qualname":"<Mutex<T>>::lock_owned","value":"pub async fn lock_owned(Arc<Self>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks this mutex, causing the current task to yield until the lock has\n been acquired. When the lock has been acquired, this returns an\n [`OwnedMutexGuard`].","sig":null,"attributes":[{"value":"/ Locks this mutex, causing the current task to yield until the lock has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737847,"byte_end":10737921,"line_start":267,"line_end":267,"column_start":5,"column_end":79}},{"value":"/ been acquired. When the lock has been acquired, this returns an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737926,"byte_end":10737993,"line_start":268,"line_end":268,"column_start":5,"column_end":72}},{"value":"/ [`OwnedMutexGuard`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10737998,"byte_end":10738022,"line_start":269,"line_end":269,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738027,"byte_end":10738030,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This method is identical to [`Mutex::lock`], except that the returned","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738035,"byte_end":10738108,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/ guard references the `Mutex` with an [`Arc`] rather than by borrowing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738113,"byte_end":10738186,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ it. Therefore, the `Mutex` must be wrapped in an `Arc` to call this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738191,"byte_end":10738262,"line_start":273,"line_end":273,"column_start":5,"column_end":76}},{"value":"/ method, and the guard will live for the `'static` lifetime, as it keeps","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738267,"byte_end":10738342,"line_start":274,"line_end":274,"column_start":5,"column_end":80}},{"value":"/ the `Mutex` alive by holding an `Arc`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738347,"byte_end":10738389,"line_start":275,"line_end":275,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738394,"byte_end":10738397,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738402,"byte_end":10738416,"line_start":277,"line_end":277,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738421,"byte_end":10738424,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738429,"byte_end":10738436,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738441,"byte_end":10738468,"line_start":280,"line_end":280,"column_start":5,"column_end":32}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738473,"byte_end":10738496,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738501,"byte_end":10738504,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738509,"byte_end":10738527,"line_start":283,"line_end":283,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738532,"byte_end":10738553,"line_start":284,"line_end":284,"column_start":5,"column_end":26}},{"value":"/     let mutex = Arc::new(Mutex::new(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738558,"byte_end":10738602,"line_start":285,"line_end":285,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738607,"byte_end":10738610,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/     let mut n = mutex.clone().lock_owned().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738615,"byte_end":10738668,"line_start":287,"line_end":287,"column_start":5,"column_end":58}},{"value":"/     *n = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738673,"byte_end":10738688,"line_start":288,"line_end":288,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738693,"byte_end":10738698,"line_start":289,"line_end":289,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738703,"byte_end":10738710,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738715,"byte_end":10738718,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ [`Arc`]: std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10738723,"byte_end":10738750,"line_start":292,"line_end":292,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":5182},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739655,"byte_end":10739663,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Result<MutexGuard<, T>, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire the lock, and returns [`TryLockError`] if the\n lock is currently held somewhere else.","sig":null,"attributes":[{"value":"/ Attempts to acquire the lock, and returns [`TryLockError`] if the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739187,"byte_end":10739256,"line_start":306,"line_end":306,"column_start":5,"column_end":74}},{"value":"/ lock is currently held somewhere else.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739261,"byte_end":10739303,"line_start":307,"line_end":307,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739308,"byte_end":10739311,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ [`TryLockError`]: TryLockError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739316,"byte_end":10739350,"line_start":309,"line_end":309,"column_start":5,"column_end":39}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739355,"byte_end":10739369,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739374,"byte_end":10739377,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739382,"byte_end":10739389,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739394,"byte_end":10739421,"line_start":313,"line_end":313,"column_start":5,"column_end":32}},{"value":"/ # async fn dox() -> Result<(), tokio::sync::TryLockError> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739426,"byte_end":10739489,"line_start":314,"line_end":314,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739494,"byte_end":10739497,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let mutex = Mutex::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739502,"byte_end":10739532,"line_start":316,"line_end":316,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739537,"byte_end":10739540,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let n = mutex.try_lock()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739545,"byte_end":10739575,"line_start":318,"line_end":318,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(*n, 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739580,"byte_end":10739602,"line_start":319,"line_end":319,"column_start":5,"column_end":27}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739607,"byte_end":10739619,"line_start":320,"line_end":320,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739624,"byte_end":10739631,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739636,"byte_end":10739643,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5183},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740343,"byte_end":10740350,"line_start":347,"line_end":347,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739872,"byte_end":10739927,"line_start":330,"line_end":330,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739932,"byte_end":10739935,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10739940,"byte_end":10740015,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/ take place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740020,"byte_end":10740094,"line_start":333,"line_end":333,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740099,"byte_end":10740102,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740107,"byte_end":10740121,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740126,"byte_end":10740129,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740134,"byte_end":10740141,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740146,"byte_end":10740173,"line_start":338,"line_end":338,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740178,"byte_end":10740181,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740186,"byte_end":10740201,"line_start":340,"line_end":340,"column_start":5,"column_end":20}},{"value":"/     let mut mutex = Mutex::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740206,"byte_end":10740244,"line_start":341,"line_end":341,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740249,"byte_end":10740252,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/     let n = mutex.get_mut();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740257,"byte_end":10740289,"line_start":343,"line_end":343,"column_start":5,"column_end":37}},{"value":"/     *n = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740294,"byte_end":10740309,"line_start":344,"line_end":344,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740314,"byte_end":10740319,"line_start":345,"line_end":345,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740324,"byte_end":10740331,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5184},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741431,"byte_end":10741445,"line_start":378,"line_end":378,"column_start":12,"column_end":26},"name":"try_lock_owned","qualname":"<Mutex<T>>::try_lock_owned","value":"pub fn try_lock_owned(Arc<Self>) -> Result<OwnedMutexGuard<T>, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire the lock, and returns [`TryLockError`] if the lock\n is currently held somewhere else.","sig":null,"attributes":[{"value":"/ Attempts to acquire the lock, and returns [`TryLockError`] if the lock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740519,"byte_end":10740593,"line_start":354,"line_end":354,"column_start":5,"column_end":79}},{"value":"/ is currently held somewhere else.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740598,"byte_end":10740635,"line_start":355,"line_end":355,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740640,"byte_end":10740643,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This method is identical to [`Mutex::try_lock`], except that the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740648,"byte_end":10740716,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/ returned  guard references the `Mutex` with an [`Arc`] rather than by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740721,"byte_end":10740794,"line_start":358,"line_end":358,"column_start":5,"column_end":78}},{"value":"/ borrowing it. Therefore, the `Mutex` must be wrapped in an `Arc` to call","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740799,"byte_end":10740875,"line_start":359,"line_end":359,"column_start":5,"column_end":81}},{"value":"/ this method, and the guard will live for the `'static` lifetime, as it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740880,"byte_end":10740954,"line_start":360,"line_end":360,"column_start":5,"column_end":79}},{"value":"/ keeps the `Mutex` alive by holding an `Arc`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10740959,"byte_end":10741007,"line_start":361,"line_end":361,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741012,"byte_end":10741015,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ [`TryLockError`]: TryLockError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741020,"byte_end":10741054,"line_start":363,"line_end":363,"column_start":5,"column_end":39}},{"value":"/ [`Arc`]: std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741059,"byte_end":10741086,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741091,"byte_end":10741105,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741110,"byte_end":10741113,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741118,"byte_end":10741125,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741130,"byte_end":10741157,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741162,"byte_end":10741185,"line_start":369,"line_end":369,"column_start":5,"column_end":28}},{"value":"/ # async fn dox() -> Result<(), tokio::sync::TryLockError> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741190,"byte_end":10741253,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741258,"byte_end":10741261,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let mutex = Arc::new(Mutex::new(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741266,"byte_end":10741306,"line_start":372,"line_end":372,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741311,"byte_end":10741314,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let n = mutex.clone().try_lock_owned()?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741319,"byte_end":10741363,"line_start":374,"line_end":374,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(*n, 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741368,"byte_end":10741390,"line_start":375,"line_end":375,"column_start":5,"column_end":27}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741395,"byte_end":10741407,"line_start":376,"line_end":376,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741412,"byte_end":10741419,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5185},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742003,"byte_end":10742013,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T where T: Sized","parent":null,"children":[],"decl_id":null,"docs":" Consumes the mutex, returning the underlying data.\n # Examples","sig":null,"attributes":[{"value":"/ Consumes the mutex, returning the underlying data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741670,"byte_end":10741724,"line_start":385,"line_end":385,"column_start":5,"column_end":59}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741729,"byte_end":10741743,"line_start":386,"line_end":386,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741748,"byte_end":10741751,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741756,"byte_end":10741763,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741768,"byte_end":10741795,"line_start":389,"line_end":389,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741800,"byte_end":10741803,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741808,"byte_end":10741826,"line_start":391,"line_end":391,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741831,"byte_end":10741852,"line_start":392,"line_end":392,"column_start":5,"column_end":26}},{"value":"/     let mutex = Mutex::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741857,"byte_end":10741891,"line_start":393,"line_end":393,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741896,"byte_end":10741899,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/     let n = mutex.into_inner();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741904,"byte_end":10741939,"line_start":395,"line_end":395,"column_start":5,"column_end":40}},{"value":"/     assert_eq!(n, 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741944,"byte_end":10741969,"line_start":396,"line_end":396,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741974,"byte_end":10741979,"line_start":397,"line_end":397,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10741984,"byte_end":10741991,"line_start":398,"line_end":398,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5843},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747917,"byte_end":10747923,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"Notify","qualname":"::sync::notify::Notify","value":"Notify {  }","parent":null,"children":[{"krate":0,"index":5844},{"krate":0,"index":5845}],"decl_id":null,"docs":" Notify a single task to wake up.","sig":null,"attributes":[{"value":"/ Notify a single task to wake up.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745074,"byte_end":10745110,"line_start":22,"line_end":22,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745111,"byte_end":10745114,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `Notify` provides a basic mechanism to notify a single task of an event.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745115,"byte_end":10745191,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ `Notify` itself does not carry any data. Instead, it is to be used to signal","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745192,"byte_end":10745272,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ another task to perform an operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745273,"byte_end":10745314,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745315,"byte_end":10745318,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `Notify` can be thought of as a [`Semaphore`] starting with 0 permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745319,"byte_end":10745393,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ [`notified().await`] waits for a permit to become available, and [`notify_one()`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745394,"byte_end":10745479,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ sets a permit **if there currently are no available permits**.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745480,"byte_end":10745546,"line_start":30,"line_end":30,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745547,"byte_end":10745550,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The synchronization details of `Notify` are similar to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745551,"byte_end":10745609,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"/ [`thread::park`][park] and [`Thread::unpark`][unpark] from std. A [`Notify`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745610,"byte_end":10745690,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ value contains a single permit. [`notified().await`] waits for the permit to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745691,"byte_end":10745771,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ be made available, consumes the permit, and resumes.  [`notify_one()`] sets the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745772,"byte_end":10745855,"line_start":35,"line_end":35,"column_start":1,"column_end":84}},{"value":"/ permit, waking a pending task if there is one.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745856,"byte_end":10745906,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745907,"byte_end":10745910,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `notify_one()` is called **before** `notified().await`, then the next call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745911,"byte_end":10745995,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ `notified().await` will complete immediately, consuming the permit. Any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10745996,"byte_end":10746071,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ subsequent calls to `notified().await` will wait for a new permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746072,"byte_end":10746142,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746143,"byte_end":10746146,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ If `notify_one()` is called **multiple** times before `notified().await`, only a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746147,"byte_end":10746231,"line_start":42,"line_end":42,"column_start":1,"column_end":85}},{"value":"/ **single** permit is stored. The next call to `notified().await` will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746232,"byte_end":10746305,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ complete immediately, but the one after will wait for a new permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746306,"byte_end":10746377,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746378,"byte_end":10746381,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746382,"byte_end":10746396,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746397,"byte_end":10746400,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Basic usage.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746401,"byte_end":10746417,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746418,"byte_end":10746421,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746422,"byte_end":10746429,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746430,"byte_end":10746458,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746459,"byte_end":10746482,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746483,"byte_end":10746486,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746487,"byte_end":10746505,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746506,"byte_end":10746527,"line_start":55,"line_end":55,"column_start":1,"column_end":22}},{"value":"/     let notify = Arc::new(Notify::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746528,"byte_end":10746573,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"/     let notify2 = notify.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746574,"byte_end":10746611,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746612,"byte_end":10746615,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746616,"byte_end":10746649,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/         notify2.notified().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746650,"byte_end":10746687,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/         println!(\"received notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746688,"byte_end":10746734,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746735,"byte_end":10746746,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746747,"byte_end":10746750,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     println!(\"sending notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746751,"byte_end":10746792,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/     notify.notify_one();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746793,"byte_end":10746821,"line_start":65,"line_end":65,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746822,"byte_end":10746827,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746828,"byte_end":10746835,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746836,"byte_end":10746839,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Unbound mpsc channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746840,"byte_end":10746865,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746866,"byte_end":10746869,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746870,"byte_end":10746877,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746878,"byte_end":10746906,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746907,"byte_end":10746910,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746911,"byte_end":10746946,"line_start":74,"line_end":74,"column_start":1,"column_end":36}},{"value":"/ use std::sync::Mutex;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746947,"byte_end":10746972,"line_start":75,"line_end":75,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746973,"byte_end":10746976,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ struct Channel<T> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10746977,"byte_end":10747000,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/     values: Mutex<VecDeque<T>>,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747001,"byte_end":10747036,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"/     notify: Notify,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747037,"byte_end":10747060,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747061,"byte_end":10747066,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747067,"byte_end":10747070,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ impl<T> Channel<T> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747071,"byte_end":10747095,"line_start":82,"line_end":82,"column_start":1,"column_end":25}},{"value":"/     pub fn send(&self, value: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747096,"byte_end":10747134,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/         self.values.lock().unwrap()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747135,"byte_end":10747174,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/             .push_back(value);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747175,"byte_end":10747209,"line_start":85,"line_end":85,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747210,"byte_end":10747213,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/         // Notify the consumer a value is available","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747214,"byte_end":10747269,"line_start":87,"line_end":87,"column_start":1,"column_end":56}},{"value":"/         self.notify.notify_one();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747270,"byte_end":10747307,"line_start":88,"line_end":88,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747308,"byte_end":10747317,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747318,"byte_end":10747321,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/     pub async fn recv(&self) -> T {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747322,"byte_end":10747361,"line_start":91,"line_end":91,"column_start":1,"column_end":40}},{"value":"/         loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747362,"byte_end":10747380,"line_start":92,"line_end":92,"column_start":1,"column_end":19}},{"value":"/             // Drain values","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747381,"byte_end":10747412,"line_start":93,"line_end":93,"column_start":1,"column_end":32}},{"value":"/             if let Some(value) = self.values.lock().unwrap().pop_front() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747413,"byte_end":10747491,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/                 return value;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747492,"byte_end":10747525,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747526,"byte_end":10747543,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747544,"byte_end":10747547,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/             // Wait for values to be available","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747548,"byte_end":10747598,"line_start":98,"line_end":98,"column_start":1,"column_end":51}},{"value":"/             self.notify.notified().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747599,"byte_end":10747644,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747645,"byte_end":10747658,"line_start":100,"line_end":100,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747659,"byte_end":10747668,"line_start":101,"line_end":101,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747669,"byte_end":10747674,"line_start":102,"line_end":102,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747675,"byte_end":10747682,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747683,"byte_end":10747686,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [park]: std::thread::park","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747687,"byte_end":10747716,"line_start":105,"line_end":105,"column_start":1,"column_end":30}},{"value":"/ [unpark]: std::thread::Thread::unpark","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747717,"byte_end":10747758,"line_start":106,"line_end":106,"column_start":1,"column_end":42}},{"value":"/ [`notified().await`]: Notify::notified()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747759,"byte_end":10747803,"line_start":107,"line_end":107,"column_start":1,"column_end":45}},{"value":"/ [`notify_one()`]: Notify::notify_one()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747804,"byte_end":10747846,"line_start":108,"line_end":108,"column_start":1,"column_end":43}},{"value":"/ [`Semaphore`]: crate::sync::Semaphore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10747847,"byte_end":10747888,"line_start":109,"line_end":109,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5865},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10748773,"byte_end":10748781,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"Notified","qualname":"::sync::notify::Notified","value":"Notified {  }","parent":null,"children":[{"krate":0,"index":5867},{"krate":0,"index":5868},{"krate":0,"index":5869}],"decl_id":null,"docs":" Future returned from `notified()`\n","sig":null,"attributes":[{"value":"/ Future returned from `notified()`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10748707,"byte_end":10748744,"line_start":143,"line_end":143,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5264},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750122,"byte_end":10750125,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"new","qualname":"<Notify>::new","value":"pub fn new() -> Notify","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Notify`, initialized without a permit.","sig":null,"attributes":[{"value":"/ Create a new `Notify`, initialized without a permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749918,"byte_end":10749974,"line_start":196,"line_end":196,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749979,"byte_end":10749982,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749987,"byte_end":10750001,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750006,"byte_end":10750009,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750014,"byte_end":10750021,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750026,"byte_end":10750054,"line_start":201,"line_end":201,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750059,"byte_end":10750062,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let notify = Notify::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750067,"byte_end":10750098,"line_start":203,"line_end":203,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750103,"byte_end":10750110,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5265},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751826,"byte_end":10751834,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"notified","qualname":"<Notify>::notified","value":"pub fn notified(&Self) -> Notified","parent":null,"children":[],"decl_id":null,"docs":" Wait for a notification.","sig":null,"attributes":[{"value":"/ Wait for a notification.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750779,"byte_end":10750807,"line_start":230,"line_end":230,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750812,"byte_end":10750815,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Equivalent to:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750820,"byte_end":10750838,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750843,"byte_end":10750846,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750851,"byte_end":10750864,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/ async fn notified(&self);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750869,"byte_end":10750898,"line_start":235,"line_end":235,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750903,"byte_end":10750910,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750915,"byte_end":10750918,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Each `Notify` value holds a single permit. If a permit is available from","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10750923,"byte_end":10750999,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ an earlier call to [`notify_one()`], then `notified().await` will complete","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751004,"byte_end":10751082,"line_start":239,"line_end":239,"column_start":5,"column_end":83}},{"value":"/ immediately, consuming that permit. Otherwise, `notified().await` waits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751087,"byte_end":10751162,"line_start":240,"line_end":240,"column_start":5,"column_end":80}},{"value":"/ for a permit to be made available by the next call to `notify_one()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751167,"byte_end":10751240,"line_start":241,"line_end":241,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751245,"byte_end":10751248,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ [`notify_one()`]: Notify::notify_one","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751253,"byte_end":10751293,"line_start":243,"line_end":243,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751298,"byte_end":10751301,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751306,"byte_end":10751320,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751325,"byte_end":10751328,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751333,"byte_end":10751340,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751345,"byte_end":10751373,"line_start":248,"line_end":248,"column_start":5,"column_end":33}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751378,"byte_end":10751401,"line_start":249,"line_end":249,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751406,"byte_end":10751409,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751414,"byte_end":10751432,"line_start":251,"line_end":251,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751437,"byte_end":10751458,"line_start":252,"line_end":252,"column_start":5,"column_end":26}},{"value":"/     let notify = Arc::new(Notify::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751463,"byte_end":10751508,"line_start":253,"line_end":253,"column_start":5,"column_end":50}},{"value":"/     let notify2 = notify.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751513,"byte_end":10751550,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751555,"byte_end":10751558,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751563,"byte_end":10751596,"line_start":256,"line_end":256,"column_start":5,"column_end":38}},{"value":"/         notify2.notified().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751601,"byte_end":10751638,"line_start":257,"line_end":257,"column_start":5,"column_end":42}},{"value":"/         println!(\"received notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751643,"byte_end":10751689,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751694,"byte_end":10751705,"line_start":259,"line_end":259,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751710,"byte_end":10751713,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/     println!(\"sending notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751718,"byte_end":10751759,"line_start":261,"line_end":261,"column_start":5,"column_end":46}},{"value":"/     notify.notify_one();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751764,"byte_end":10751792,"line_start":262,"line_end":262,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751797,"byte_end":10751802,"line_start":263,"line_end":263,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10751807,"byte_end":10751814,"line_start":264,"line_end":264,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5266},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753530,"byte_end":10753540,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Notify>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notifies a waiting task","sig":null,"attributes":[{"value":"/ Notifies a waiting task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752359,"byte_end":10752386,"line_start":281,"line_end":281,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752391,"byte_end":10752394,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ If a task is currently waiting, that task is notified. Otherwise, a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752399,"byte_end":10752470,"line_start":283,"line_end":283,"column_start":5,"column_end":76}},{"value":"/ permit is stored in this `Notify` value and the **next** call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752475,"byte_end":10752543,"line_start":284,"line_end":284,"column_start":5,"column_end":73}},{"value":"/ [`notified().await`] will complete immediately consuming the permit made","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752548,"byte_end":10752624,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ available by this call to `notify_one()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752629,"byte_end":10752674,"line_start":286,"line_end":286,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752679,"byte_end":10752682,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ At most one permit may be stored by `Notify`. Many sequential calls to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752687,"byte_end":10752761,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/ `notify_one` will result in a single permit being stored. The next call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752766,"byte_end":10752844,"line_start":289,"line_end":289,"column_start":5,"column_end":83}},{"value":"/ `notified().await` will complete immediately, but the one after that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752849,"byte_end":10752921,"line_start":290,"line_end":290,"column_start":5,"column_end":77}},{"value":"/ will wait.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752926,"byte_end":10752940,"line_start":291,"line_end":291,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752945,"byte_end":10752948,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ [`notified().await`]: Notify::notified()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10752953,"byte_end":10752997,"line_start":293,"line_end":293,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753002,"byte_end":10753005,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753010,"byte_end":10753024,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753029,"byte_end":10753032,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753037,"byte_end":10753044,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753049,"byte_end":10753077,"line_start":298,"line_end":298,"column_start":5,"column_end":33}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753082,"byte_end":10753105,"line_start":299,"line_end":299,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753110,"byte_end":10753113,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753118,"byte_end":10753136,"line_start":301,"line_end":301,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753141,"byte_end":10753162,"line_start":302,"line_end":302,"column_start":5,"column_end":26}},{"value":"/     let notify = Arc::new(Notify::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753167,"byte_end":10753212,"line_start":303,"line_end":303,"column_start":5,"column_end":50}},{"value":"/     let notify2 = notify.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753217,"byte_end":10753254,"line_start":304,"line_end":304,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753259,"byte_end":10753262,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753267,"byte_end":10753300,"line_start":306,"line_end":306,"column_start":5,"column_end":38}},{"value":"/         notify2.notified().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753305,"byte_end":10753342,"line_start":307,"line_end":307,"column_start":5,"column_end":42}},{"value":"/         println!(\"received notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753347,"byte_end":10753393,"line_start":308,"line_end":308,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753398,"byte_end":10753409,"line_start":309,"line_end":309,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753414,"byte_end":10753417,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/     println!(\"sending notification\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753422,"byte_end":10753463,"line_start":311,"line_end":311,"column_start":5,"column_end":46}},{"value":"/     notify.notify_one();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753468,"byte_end":10753496,"line_start":312,"line_end":312,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753501,"byte_end":10753506,"line_start":313,"line_end":313,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10753511,"byte_end":10753518,"line_start":314,"line_end":314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5267},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755873,"byte_end":10755887,"line_start":381,"line_end":381,"column_start":12,"column_end":26},"name":"notify_waiters","qualname":"<Notify>::notify_waiters","value":"pub fn notify_waiters(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notifies all waiting tasks","sig":null,"attributes":[{"value":"/ Notifies all waiting tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10754783,"byte_end":10754813,"line_start":349,"line_end":349,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10754818,"byte_end":10754821,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If a task is currently waiting, that task is notified. Unlike with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10754826,"byte_end":10754896,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ `notify()`, no permit is stored to be used by the next call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10754901,"byte_end":10754967,"line_start":352,"line_end":352,"column_start":5,"column_end":71}},{"value":"/ [`notified().await`]. The purpose of this method is to notify all","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10754972,"byte_end":10755041,"line_start":353,"line_end":353,"column_start":5,"column_end":74}},{"value":"/ already registered waiters. Registering for notification is done by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755046,"byte_end":10755117,"line_start":354,"line_end":354,"column_start":5,"column_end":76}},{"value":"/ acquiring an instance of the `Notified` future via calling `notified()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755122,"byte_end":10755198,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755203,"byte_end":10755206,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755211,"byte_end":10755225,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755230,"byte_end":10755233,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755238,"byte_end":10755245,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Notify;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755250,"byte_end":10755278,"line_start":360,"line_end":360,"column_start":5,"column_end":33}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755283,"byte_end":10755306,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755311,"byte_end":10755314,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755319,"byte_end":10755337,"line_start":363,"line_end":363,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755342,"byte_end":10755363,"line_start":364,"line_end":364,"column_start":5,"column_end":26}},{"value":"/     let notify = Arc::new(Notify::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755368,"byte_end":10755413,"line_start":365,"line_end":365,"column_start":5,"column_end":50}},{"value":"/     let notify2 = notify.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755418,"byte_end":10755455,"line_start":366,"line_end":366,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755460,"byte_end":10755463,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/     let notified1 = notify.notified();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755468,"byte_end":10755510,"line_start":368,"line_end":368,"column_start":5,"column_end":47}},{"value":"/     let notified2 = notify.notified();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755515,"byte_end":10755557,"line_start":369,"line_end":369,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755562,"byte_end":10755565,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/     let handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755570,"byte_end":10755616,"line_start":371,"line_end":371,"column_start":5,"column_end":51}},{"value":"/         println!(\"sending notifications\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755621,"byte_end":10755667,"line_start":372,"line_end":372,"column_start":5,"column_end":51}},{"value":"/         notify2.notify_waiters();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755672,"byte_end":10755709,"line_start":373,"line_end":373,"column_start":5,"column_end":42}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755714,"byte_end":10755725,"line_start":374,"line_end":374,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755730,"byte_end":10755733,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/     notified1.await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755738,"byte_end":10755762,"line_start":376,"line_end":376,"column_start":5,"column_end":29}},{"value":"/     notified2.await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755767,"byte_end":10755791,"line_start":377,"line_end":377,"column_start":5,"column_end":29}},{"value":"/     println!(\"received notifications\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755796,"byte_end":10755839,"line_start":378,"line_end":378,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755844,"byte_end":10755849,"line_start":379,"line_end":379,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10755854,"byte_end":10755861,"line_start":380,"line_end":380,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":5291},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::sync::oneshot","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","parent":null,"children":[{"krate":0,"index":5292},{"krate":0,"index":5293},{"krate":0,"index":5294},{"krate":0,"index":5295},{"krate":0,"index":5296},{"krate":0,"index":5297},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":12233},{"krate":0,"index":5302},{"krate":0,"index":12235},{"krate":0,"index":5303},{"krate":0,"index":5304},{"krate":0,"index":12237},{"krate":0,"index":5305},{"krate":0,"index":12239},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5309},{"krate":0,"index":5883},{"krate":0,"index":5886},{"krate":0,"index":5889},{"krate":0,"index":5892},{"krate":0,"index":5310},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5920},{"krate":0,"index":5924},{"krate":0,"index":5923},{"krate":0,"index":5325},{"krate":0,"index":5327},{"krate":0,"index":5340},{"krate":0,"index":5343},{"krate":0,"index":5347},{"krate":0,"index":5350},{"krate":0,"index":5354},{"krate":0,"index":5378},{"krate":0,"index":5380},{"krate":0,"index":5382},{"krate":0,"index":5386},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394},{"krate":0,"index":5408}],"decl_id":null,"docs":" A channel for sending a single message between asynchronous tasks.\n","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23059,"byte_end":23083,"line_start":247,"line_end":247,"column_start":13,"column_end":37}},{"value":"/ A channel for sending a single message between asynchronous tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770189,"byte_end":10770259,"line_start":3,"line_end":3,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":5883},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770738,"byte_end":10770744,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5885}],"decl_id":null,"docs":" Sends a value to the associated `Receiver`.","sig":null,"attributes":[{"value":"/ Sends a value to the associated `Receiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770591,"byte_end":10770638,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770639,"byte_end":10770642,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](fn@channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770643,"byte_end":10770709,"line_start":19,"line_end":19,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5889},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770936,"byte_end":10770944,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5891}],"decl_id":null,"docs":" Receive a value from the associated `Sender`.","sig":null,"attributes":[{"value":"/ Receive a value from the associated `Sender`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770787,"byte_end":10770836,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770837,"byte_end":10770840,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](fn@channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770841,"byte_end":10770907,"line_start":27,"line_end":27,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":5310},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10770995,"byte_end":10771000,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"error","qualname":"::sync::oneshot::error","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","parent":null,"children":[{"krate":0,"index":5311},{"krate":0,"index":5895},{"krate":0,"index":5905},{"krate":0,"index":5902},{"krate":0,"index":5903},{"krate":0,"index":5898},{"krate":0,"index":5899},{"krate":0,"index":5907},{"krate":0,"index":5918},{"krate":0,"index":5915},{"krate":0,"index":5916},{"krate":0,"index":5912},{"krate":0,"index":5913},{"krate":0,"index":5312},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5317}],"decl_id":null,"docs":" Oneshot error types\n","sig":null,"attributes":[{"value":"/ Oneshot error types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771007,"byte_end":10771030,"line_start":34,"line_end":34,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":5895},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771172,"byte_end":10771181,"line_start":40,"line_end":40,"column_start":16,"column_end":25},"name":"RecvError","qualname":"::sync::oneshot::error::RecvError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by the `Future` implementation for `Receiver`.\n","sig":null,"attributes":[{"value":"/ Error returned by the `Future` implementation for `Receiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771055,"byte_end":10771120,"line_start":38,"line_end":38,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5908},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771403,"byte_end":10771408,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"Empty","qualname":"::sync::oneshot::error::TryRecvError::Empty","value":"TryRecvError::Empty","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" The send half of the channel has not yet sent a value.\n","sig":null,"attributes":[{"value":"/ The send half of the channel has not yet sent a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771336,"byte_end":10771394,"line_start":45,"line_end":45,"column_start":9,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5910},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771497,"byte_end":10771503,"line_start":49,"line_end":49,"column_start":9,"column_end":15},"name":"Closed","qualname":"::sync::oneshot::error::TryRecvError::Closed","value":"TryRecvError::Closed","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" The send half of the channel was dropped without sending a value.\n","sig":null,"attributes":[{"value":"/ The send half of the channel was dropped without sending a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771419,"byte_end":10771488,"line_start":48,"line_end":48,"column_start":9,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":5907},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771313,"byte_end":10771325,"line_start":44,"line_end":44,"column_start":14,"column_end":26},"name":"TryRecvError","qualname":"::sync::oneshot::error::TryRecvError","value":"pub enum TryRecvError {\n\n    /// The send half of the channel has not yet sent a value.\n    Empty,\n\n    /// The send half of the channel was dropped without sending a value.\n    Closed,\n}","parent":null,"children":[{"krate":0,"index":5908},{"krate":0,"index":5910}],"decl_id":null,"docs":" Error returned by the `try_recv` function on `Receiver`.\n","sig":null,"attributes":[{"value":"/ Error returned by the `try_recv` function on `Receiver`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771203,"byte_end":10771263,"line_start":42,"line_end":42,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":5325},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773500,"byte_end":10773507,"line_start":126,"line_end":126,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::oneshot::channel","value":"pub fn channel<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a new one-shot channel for sending single values across asynchronous\n tasks.","sig":null,"attributes":[{"value":"/ Create a new one-shot channel for sending single values across asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772685,"byte_end":10772764,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/ tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772765,"byte_end":10772775,"line_start":97,"line_end":97,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772776,"byte_end":10772779,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The function returns separate \"send\" and \"receive\" handles. The `Sender`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772780,"byte_end":10772856,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"/ handle is used by the producer to send the value. The `Receiver` handle is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772857,"byte_end":10772935,"line_start":100,"line_end":100,"column_start":1,"column_end":79}},{"value":"/ used by the consumer to receive the value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772936,"byte_end":10772982,"line_start":101,"line_end":101,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772983,"byte_end":10772986,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Each handle can be used on separate tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772987,"byte_end":10773033,"line_start":103,"line_end":103,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773034,"byte_end":10773037,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773038,"byte_end":10773052,"line_start":105,"line_end":105,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773053,"byte_end":10773056,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773057,"byte_end":10773064,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773065,"byte_end":10773094,"line_start":108,"line_end":108,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773095,"byte_end":10773098,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773099,"byte_end":10773117,"line_start":110,"line_end":110,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773118,"byte_end":10773139,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/     let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773140,"byte_end":10773182,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773183,"byte_end":10773186,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773187,"byte_end":10773220,"line_start":114,"line_end":114,"column_start":1,"column_end":34}},{"value":"/         if let Err(_) = tx.send(3) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773221,"byte_end":10773261,"line_start":115,"line_end":115,"column_start":1,"column_end":41}},{"value":"/             println!(\"the receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773262,"byte_end":10773311,"line_start":116,"line_end":116,"column_start":1,"column_end":50}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773312,"byte_end":10773325,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773326,"byte_end":10773337,"line_start":118,"line_end":118,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773338,"byte_end":10773341,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/     match rx.await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773342,"byte_end":10773366,"line_start":120,"line_end":120,"column_start":1,"column_end":25}},{"value":"/         Ok(v) => println!(\"got = {:?}\", v),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773367,"byte_end":10773414,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/         Err(_) => println!(\"the sender dropped\"),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773415,"byte_end":10773468,"line_start":122,"line_end":122,"column_start":1,"column_end":54}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773469,"byte_end":10773478,"line_start":123,"line_end":123,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773479,"byte_end":10773484,"line_start":124,"line_end":124,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773485,"byte_end":10773492,"line_start":125,"line_end":125,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5329},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775518,"byte_end":10775522,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a value on this channel, returning it back if it could\n not be sent.","sig":null,"attributes":[{"value":"/ Attempts to send a value on this channel, returning it back if it could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773947,"byte_end":10774022,"line_start":143,"line_end":143,"column_start":5,"column_end":80}},{"value":"/ not be sent.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774027,"byte_end":10774043,"line_start":144,"line_end":144,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774048,"byte_end":10774051,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ This method consumes `self` as only one value may ever be sent on a oneshot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774056,"byte_end":10774135,"line_start":146,"line_end":146,"column_start":5,"column_end":84}},{"value":"/ channel. It is not marked async because sending a message to an oneshot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774140,"byte_end":10774215,"line_start":147,"line_end":147,"column_start":5,"column_end":80}},{"value":"/ channel never requires any form of waiting.  Because of this, the `send`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774220,"byte_end":10774296,"line_start":148,"line_end":148,"column_start":5,"column_end":81}},{"value":"/ method can be used in both synchronous and asynchronous code without","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774301,"byte_end":10774373,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/ problems.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774378,"byte_end":10774391,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774396,"byte_end":10774399,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ A successful send occurs when it is determined that the other end of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774404,"byte_end":10774480,"line_start":152,"line_end":152,"column_start":5,"column_end":81}},{"value":"/ channel has not hung up already. An unsuccessful send would be one where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774485,"byte_end":10774561,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/ the corresponding receiver has already been deallocated. Note that a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774566,"byte_end":10774638,"line_start":154,"line_end":154,"column_start":5,"column_end":77}},{"value":"/ return value of `Err` means that the data will never be received, but","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774643,"byte_end":10774716,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ a return value of `Ok` does *not* mean that the data will be received.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774721,"byte_end":10774795,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ It is possible for the corresponding receiver to hang up immediately","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774800,"byte_end":10774872,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ after this function returns `Ok`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774877,"byte_end":10774914,"line_start":158,"line_end":158,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774919,"byte_end":10774922,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774927,"byte_end":10774941,"line_start":160,"line_end":160,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774946,"byte_end":10774949,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Send a value to another task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774954,"byte_end":10774986,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774991,"byte_end":10774994,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10774999,"byte_end":10775006,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775011,"byte_end":10775040,"line_start":165,"line_end":165,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775045,"byte_end":10775048,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775053,"byte_end":10775071,"line_start":167,"line_end":167,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775076,"byte_end":10775097,"line_start":168,"line_end":168,"column_start":5,"column_end":26}},{"value":"/     let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775102,"byte_end":10775144,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775149,"byte_end":10775152,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775157,"byte_end":10775190,"line_start":171,"line_end":171,"column_start":5,"column_end":38}},{"value":"/         if let Err(_) = tx.send(3) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775195,"byte_end":10775235,"line_start":172,"line_end":172,"column_start":5,"column_end":45}},{"value":"/             println!(\"the receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775240,"byte_end":10775289,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775294,"byte_end":10775307,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775312,"byte_end":10775323,"line_start":175,"line_end":175,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775328,"byte_end":10775331,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/     match rx.await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775336,"byte_end":10775360,"line_start":177,"line_end":177,"column_start":5,"column_end":29}},{"value":"/         Ok(v) => println!(\"got = {:?}\", v),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775365,"byte_end":10775412,"line_start":178,"line_end":178,"column_start":5,"column_end":52}},{"value":"/         Err(_) => println!(\"the sender dropped\"),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775417,"byte_end":10775470,"line_start":179,"line_end":179,"column_start":5,"column_end":58}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775475,"byte_end":10775484,"line_start":180,"line_end":180,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775489,"byte_end":10775494,"line_start":181,"line_end":181,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775499,"byte_end":10775506,"line_start":182,"line_end":182,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5332},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777886,"byte_end":10777892,"line_start":266,"line_end":266,"column_start":18,"column_end":24},"name":"closed","qualname":"<Sender<T>>::closed","value":"pub async fn closed<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Waits for the associated [`Receiver`] handle to close.","sig":null,"attributes":[{"value":"/ Waits for the associated [`Receiver`] handle to close.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775881,"byte_end":10775939,"line_start":199,"line_end":199,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775944,"byte_end":10775947,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ A [`Receiver`] is closed by either calling [`close`] explicitly or the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10775952,"byte_end":10776026,"line_start":201,"line_end":201,"column_start":5,"column_end":79}},{"value":"/ [`Receiver`] value is dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776031,"byte_end":10776065,"line_start":202,"line_end":202,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776070,"byte_end":10776073,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ This function is useful when paired with `select!` to abort a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776078,"byte_end":10776143,"line_start":204,"line_end":204,"column_start":5,"column_end":70}},{"value":"/ computation when the receiver is no longer interested in the result.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776148,"byte_end":10776220,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776225,"byte_end":10776228,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776233,"byte_end":10776245,"line_start":207,"line_end":207,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776250,"byte_end":10776253,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Returns a `Future` which must be awaited on.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776258,"byte_end":10776306,"line_start":209,"line_end":209,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776311,"byte_end":10776314,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776319,"byte_end":10776345,"line_start":211,"line_end":211,"column_start":5,"column_end":31}},{"value":"/ [`close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776350,"byte_end":10776380,"line_start":212,"line_end":212,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776385,"byte_end":10776388,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776393,"byte_end":10776407,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776412,"byte_end":10776415,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Basic usage","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776420,"byte_end":10776435,"line_start":216,"line_end":216,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776440,"byte_end":10776443,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776448,"byte_end":10776455,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776460,"byte_end":10776489,"line_start":219,"line_end":219,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776494,"byte_end":10776497,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776502,"byte_end":10776520,"line_start":221,"line_end":221,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776525,"byte_end":10776546,"line_start":222,"line_end":222,"column_start":5,"column_end":26}},{"value":"/     let (mut tx, rx) = oneshot::channel::<()>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776551,"byte_end":10776603,"line_start":223,"line_end":223,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776608,"byte_end":10776611,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776616,"byte_end":10776649,"line_start":225,"line_end":225,"column_start":5,"column_end":38}},{"value":"/         drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776654,"byte_end":10776675,"line_start":226,"line_end":226,"column_start":5,"column_end":26}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776680,"byte_end":10776691,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776696,"byte_end":10776699,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/     tx.closed().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776704,"byte_end":10776730,"line_start":229,"line_end":229,"column_start":5,"column_end":31}},{"value":"/     println!(\"the receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776735,"byte_end":10776776,"line_start":230,"line_end":230,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776781,"byte_end":10776786,"line_start":231,"line_end":231,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776791,"byte_end":10776798,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776803,"byte_end":10776806,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Paired with select","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776811,"byte_end":10776833,"line_start":234,"line_end":234,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776838,"byte_end":10776841,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776846,"byte_end":10776853,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776858,"byte_end":10776887,"line_start":237,"line_end":237,"column_start":5,"column_end":34}},{"value":"/ use tokio::time::{self, Duration};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776892,"byte_end":10776930,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776935,"byte_end":10776938,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ async fn compute() -> String {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776943,"byte_end":10776977,"line_start":240,"line_end":240,"column_start":5,"column_end":39}},{"value":"/     // Complex computation returning a `String`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10776982,"byte_end":10777033,"line_start":241,"line_end":241,"column_start":5,"column_end":56}},{"value":"/ # \"hello\".to_string()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777038,"byte_end":10777063,"line_start":242,"line_end":242,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777068,"byte_end":10777073,"line_start":243,"line_end":243,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777078,"byte_end":10777081,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777086,"byte_end":10777104,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777109,"byte_end":10777130,"line_start":246,"line_end":246,"column_start":5,"column_end":26}},{"value":"/     let (mut tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777135,"byte_end":10777181,"line_start":247,"line_end":247,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777186,"byte_end":10777189,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777194,"byte_end":10777227,"line_start":249,"line_end":249,"column_start":5,"column_end":38}},{"value":"/         tokio::select! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777232,"byte_end":10777260,"line_start":250,"line_end":250,"column_start":5,"column_end":33}},{"value":"/             _ = tx.closed() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777265,"byte_end":10777301,"line_start":251,"line_end":251,"column_start":5,"column_end":41}},{"value":"/                 // The receiver dropped, no need to do any further work","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777306,"byte_end":10777381,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777386,"byte_end":10777403,"line_start":253,"line_end":253,"column_start":5,"column_end":22}},{"value":"/             value = compute() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777408,"byte_end":10777446,"line_start":254,"line_end":254,"column_start":5,"column_end":43}},{"value":"/                 // The send can fail if the channel was closed at the exact same","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777451,"byte_end":10777535,"line_start":255,"line_end":255,"column_start":5,"column_end":89}},{"value":"/                 // time as when compute() finished, so just ignore the failure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777540,"byte_end":10777623,"line_start":256,"line_end":256,"column_start":5,"column_end":88}},{"value":"/                 let _ = tx.send(value);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777628,"byte_end":10777671,"line_start":257,"line_end":257,"column_start":5,"column_end":48}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777676,"byte_end":10777693,"line_start":258,"line_end":258,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777698,"byte_end":10777711,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777716,"byte_end":10777727,"line_start":260,"line_end":260,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777732,"byte_end":10777735,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/     // Wait for up to 10 seconds","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777740,"byte_end":10777776,"line_start":262,"line_end":262,"column_start":5,"column_end":41}},{"value":"/     let _ = time::timeout(Duration::from_secs(10), rx).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777781,"byte_end":10777846,"line_start":263,"line_end":263,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777851,"byte_end":10777856,"line_start":264,"line_end":264,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10777861,"byte_end":10777868,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5337},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778762,"byte_end":10778771,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the associated [`Receiver`] handle has been dropped.","sig":null,"attributes":[{"value":"/ Returns `true` if the associated [`Receiver`] handle has been dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778003,"byte_end":10778077,"line_start":272,"line_end":272,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778082,"byte_end":10778085,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ A [`Receiver`] is closed by either calling [`close`] explicitly or the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778090,"byte_end":10778164,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ [`Receiver`] value is dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778169,"byte_end":10778203,"line_start":275,"line_end":275,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778208,"byte_end":10778211,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ If `true` is returned, a call to `send` will always result in an error.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778216,"byte_end":10778291,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778296,"byte_end":10778299,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778304,"byte_end":10778330,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/ [`close`]: Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778335,"byte_end":10778365,"line_start":280,"line_end":280,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778370,"byte_end":10778373,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778378,"byte_end":10778392,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778397,"byte_end":10778400,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778405,"byte_end":10778412,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778417,"byte_end":10778446,"line_start":285,"line_end":285,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778451,"byte_end":10778454,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778459,"byte_end":10778477,"line_start":287,"line_end":287,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778482,"byte_end":10778503,"line_start":288,"line_end":288,"column_start":5,"column_end":26}},{"value":"/     let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778508,"byte_end":10778550,"line_start":289,"line_end":289,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778555,"byte_end":10778558,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/     assert!(!tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778563,"byte_end":10778596,"line_start":291,"line_end":291,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778601,"byte_end":10778604,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/     drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778609,"byte_end":10778626,"line_start":293,"line_end":293,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778631,"byte_end":10778634,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/     assert!(tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778639,"byte_end":10778671,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"/     assert!(tx.send(\"never received\").is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778676,"byte_end":10778728,"line_start":296,"line_end":296,"column_start":5,"column_end":57}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778733,"byte_end":10778738,"line_start":297,"line_end":297,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778743,"byte_end":10778750,"line_start":298,"line_end":298,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5338},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780217,"byte_end":10780228,"line_start":346,"line_end":346,"column_start":12,"column_end":23},"name":"poll_closed","qualname":"<Sender<T>>::poll_closed","value":"pub fn poll_closed(&mut Self, &mut Context) -> Poll<()>","parent":null,"children":[],"decl_id":null,"docs":" Check whether the oneshot channel has been closed, and if not, schedules the\n `Waker` in the provided `Context` to receive a notification when the channel is\n closed.","sig":null,"attributes":[{"value":"/ Check whether the oneshot channel has been closed, and if not, schedules the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10778933,"byte_end":10779013,"line_start":306,"line_end":306,"column_start":5,"column_end":85}},{"value":"/ `Waker` in the provided `Context` to receive a notification when the channel is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779018,"byte_end":10779101,"line_start":307,"line_end":307,"column_start":5,"column_end":88}},{"value":"/ closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779106,"byte_end":10779117,"line_start":308,"line_end":308,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779122,"byte_end":10779125,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ A [`Receiver`] is closed by either calling [`close`] explicitly, or when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779130,"byte_end":10779210,"line_start":310,"line_end":310,"column_start":5,"column_end":85}},{"value":"/ [`Receiver`] value is dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779215,"byte_end":10779249,"line_start":311,"line_end":311,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779254,"byte_end":10779257,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Note that on multiple calls to poll, only the `Waker` from the `Context` passed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779262,"byte_end":10779345,"line_start":313,"line_end":313,"column_start":5,"column_end":88}},{"value":"/ to the most recent call will be scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779350,"byte_end":10779416,"line_start":314,"line_end":314,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779421,"byte_end":10779424,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ [`Receiver`]: struct@crate::sync::oneshot::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779429,"byte_end":10779484,"line_start":316,"line_end":316,"column_start":5,"column_end":60}},{"value":"/ [`close`]: fn@crate::sync::oneshot::Receiver::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779489,"byte_end":10779544,"line_start":317,"line_end":317,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779549,"byte_end":10779552,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779557,"byte_end":10779575,"line_start":319,"line_end":319,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779580,"byte_end":10779583,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This function returns:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779588,"byte_end":10779614,"line_start":321,"line_end":321,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779619,"byte_end":10779622,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if the channel is still open.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779627,"byte_end":10779679,"line_start":323,"line_end":323,"column_start":5,"column_end":57}},{"value":"/  * `Poll::Ready(())` if the channel is closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779684,"byte_end":10779734,"line_start":324,"line_end":324,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779739,"byte_end":10779742,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779747,"byte_end":10779761,"line_start":326,"line_end":326,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779766,"byte_end":10779769,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779774,"byte_end":10779781,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779786,"byte_end":10779815,"line_start":329,"line_end":329,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779820,"byte_end":10779823,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ use futures::future::poll_fn;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779828,"byte_end":10779861,"line_start":331,"line_end":331,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779866,"byte_end":10779869,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779874,"byte_end":10779892,"line_start":333,"line_end":333,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779897,"byte_end":10779918,"line_start":334,"line_end":334,"column_start":5,"column_end":26}},{"value":"/     let (mut tx, mut rx) = oneshot::channel::<()>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779923,"byte_end":10779979,"line_start":335,"line_end":335,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779984,"byte_end":10779987,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10779992,"byte_end":10780025,"line_start":337,"line_end":337,"column_start":5,"column_end":38}},{"value":"/         rx.close();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780030,"byte_end":10780053,"line_start":338,"line_end":338,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780058,"byte_end":10780069,"line_start":339,"line_end":339,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780074,"byte_end":10780077,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/     poll_fn(|cx| tx.poll_closed(cx)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780082,"byte_end":10780129,"line_start":341,"line_end":341,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780134,"byte_end":10780137,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/     println!(\"the receiver dropped\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780142,"byte_end":10780183,"line_start":343,"line_end":343,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780188,"byte_end":10780193,"line_start":344,"line_end":344,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10780198,"byte_end":10780205,"line_start":345,"line_end":345,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5345},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783401,"byte_end":10783406,"line_start":460,"line_end":460,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Prevents the associated [`Sender`] handle from sending a value.","sig":null,"attributes":[{"value":"/ Prevents the associated [`Sender`] handle from sending a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781763,"byte_end":10781830,"line_start":404,"line_end":404,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781835,"byte_end":10781838,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Any `send` operation which happens after calling `close` is guaranteed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781843,"byte_end":10781917,"line_start":406,"line_end":406,"column_start":5,"column_end":79}},{"value":"/ to fail. After calling `close`, [`try_recv`] should be called to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781922,"byte_end":10781990,"line_start":407,"line_end":407,"column_start":5,"column_end":73}},{"value":"/ receive a value if one was sent **before** the call to `close`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781995,"byte_end":10782061,"line_start":408,"line_end":408,"column_start":5,"column_end":71}},{"value":"/ completed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782066,"byte_end":10782080,"line_start":409,"line_end":409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782085,"byte_end":10782088,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This function is useful to perform a graceful shutdown and ensure that a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782093,"byte_end":10782169,"line_start":411,"line_end":411,"column_start":5,"column_end":81}},{"value":"/ value will not be sent into the channel and never received.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782174,"byte_end":10782237,"line_start":412,"line_end":412,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782242,"byte_end":10782245,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`Sender`]: Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782250,"byte_end":10782272,"line_start":414,"line_end":414,"column_start":5,"column_end":27}},{"value":"/ [`try_recv`]: Receiver::try_recv","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782277,"byte_end":10782313,"line_start":415,"line_end":415,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782318,"byte_end":10782321,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782326,"byte_end":10782340,"line_start":417,"line_end":417,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782345,"byte_end":10782348,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Prevent a value from being sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782353,"byte_end":10782388,"line_start":419,"line_end":419,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782393,"byte_end":10782396,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782401,"byte_end":10782408,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782413,"byte_end":10782442,"line_start":422,"line_end":422,"column_start":5,"column_end":34}},{"value":"/ use tokio::sync::oneshot::error::TryRecvError;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782447,"byte_end":10782497,"line_start":423,"line_end":423,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782502,"byte_end":10782505,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782510,"byte_end":10782528,"line_start":425,"line_end":425,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782533,"byte_end":10782554,"line_start":426,"line_end":426,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782559,"byte_end":10782605,"line_start":427,"line_end":427,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782610,"byte_end":10782613,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/     assert!(!tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782618,"byte_end":10782651,"line_start":429,"line_end":429,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782656,"byte_end":10782659,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/     rx.close();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782664,"byte_end":10782683,"line_start":431,"line_end":431,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782688,"byte_end":10782691,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/     assert!(tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782696,"byte_end":10782728,"line_start":433,"line_end":433,"column_start":5,"column_end":37}},{"value":"/     assert!(tx.send(\"never received\").is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782733,"byte_end":10782785,"line_start":434,"line_end":434,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782790,"byte_end":10782793,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/     match rx.try_recv() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782798,"byte_end":10782827,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/         Err(TryRecvError::Closed) => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782832,"byte_end":10782875,"line_start":437,"line_end":437,"column_start":5,"column_end":48}},{"value":"/         _ => unreachable!(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782880,"byte_end":10782912,"line_start":438,"line_end":438,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782917,"byte_end":10782926,"line_start":439,"line_end":439,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782931,"byte_end":10782936,"line_start":440,"line_end":440,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782941,"byte_end":10782948,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782953,"byte_end":10782956,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Receive a value sent **before** calling `close`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10782961,"byte_end":10783012,"line_start":443,"line_end":443,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783017,"byte_end":10783020,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783025,"byte_end":10783032,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783037,"byte_end":10783066,"line_start":446,"line_end":446,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783071,"byte_end":10783074,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783079,"byte_end":10783097,"line_start":448,"line_end":448,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783102,"byte_end":10783123,"line_start":449,"line_end":449,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783128,"byte_end":10783174,"line_start":450,"line_end":450,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783179,"byte_end":10783182,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/     assert!(tx.send(\"will receive\").is_ok());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783187,"byte_end":10783236,"line_start":452,"line_end":452,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783241,"byte_end":10783244,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/     rx.close();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783249,"byte_end":10783268,"line_start":454,"line_end":454,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783273,"byte_end":10783276,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/     let msg = rx.try_recv().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783281,"byte_end":10783322,"line_start":456,"line_end":456,"column_start":5,"column_end":46}},{"value":"/     assert_eq!(msg, \"will receive\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783327,"byte_end":10783367,"line_start":457,"line_end":457,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783372,"byte_end":10783377,"line_start":458,"line_end":458,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783382,"byte_end":10783389,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5346},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785389,"byte_end":10785397,"line_start":528,"line_end":528,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"pub fn try_recv(&mut Self) -> Result<T, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a value.","sig":null,"attributes":[{"value":"/ Attempts to receive a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783504,"byte_end":10783536,"line_start":465,"line_end":465,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783541,"byte_end":10783544,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ If a pending value exists in the channel, it is returned. If no value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783549,"byte_end":10783622,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/ has been sent, the current task **will not** be registered for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783627,"byte_end":10783693,"line_start":468,"line_end":468,"column_start":5,"column_end":71}},{"value":"/ future notification.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783698,"byte_end":10783722,"line_start":469,"line_end":469,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783727,"byte_end":10783730,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function is useful to call from outside the context of an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783735,"byte_end":10783801,"line_start":471,"line_end":471,"column_start":5,"column_end":71}},{"value":"/ asynchronous task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783806,"byte_end":10783828,"line_start":472,"line_end":472,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783833,"byte_end":10783836,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783841,"byte_end":10783853,"line_start":474,"line_end":474,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783858,"byte_end":10783861,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ - `Ok(T)` if a value is pending in the channel.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783866,"byte_end":10783917,"line_start":476,"line_end":476,"column_start":5,"column_end":56}},{"value":"/ - `Err(TryRecvError::Empty)` if no value has been sent yet.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783922,"byte_end":10783985,"line_start":477,"line_end":477,"column_start":5,"column_end":68}},{"value":"/ - `Err(TryRecvError::Closed)` if the sender has dropped without sending","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10783990,"byte_end":10784065,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"/   a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784070,"byte_end":10784084,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784089,"byte_end":10784092,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784097,"byte_end":10784111,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784116,"byte_end":10784119,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ `try_recv` before a value is sent, then after.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784124,"byte_end":10784174,"line_start":483,"line_end":483,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784179,"byte_end":10784182,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784187,"byte_end":10784194,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784199,"byte_end":10784228,"line_start":486,"line_end":486,"column_start":5,"column_end":34}},{"value":"/ use tokio::sync::oneshot::error::TryRecvError;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784233,"byte_end":10784283,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784288,"byte_end":10784291,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784296,"byte_end":10784314,"line_start":489,"line_end":489,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784319,"byte_end":10784340,"line_start":490,"line_end":490,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784345,"byte_end":10784391,"line_start":491,"line_end":491,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784396,"byte_end":10784399,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/     match rx.try_recv() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784404,"byte_end":10784433,"line_start":493,"line_end":493,"column_start":5,"column_end":34}},{"value":"/         // The channel is currently empty","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784438,"byte_end":10784483,"line_start":494,"line_end":494,"column_start":5,"column_end":50}},{"value":"/         Err(TryRecvError::Empty) => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784488,"byte_end":10784530,"line_start":495,"line_end":495,"column_start":5,"column_end":47}},{"value":"/         _ => unreachable!(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784535,"byte_end":10784567,"line_start":496,"line_end":496,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784572,"byte_end":10784581,"line_start":497,"line_end":497,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784586,"byte_end":10784589,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/     // Send a value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784594,"byte_end":10784617,"line_start":499,"line_end":499,"column_start":5,"column_end":28}},{"value":"/     tx.send(\"hello\").unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784622,"byte_end":10784656,"line_start":500,"line_end":500,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784661,"byte_end":10784664,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/     match rx.try_recv() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784669,"byte_end":10784698,"line_start":502,"line_end":502,"column_start":5,"column_end":34}},{"value":"/         Ok(value) => assert_eq!(value, \"hello\"),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784703,"byte_end":10784755,"line_start":503,"line_end":503,"column_start":5,"column_end":57}},{"value":"/         _ => unreachable!(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784760,"byte_end":10784792,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784797,"byte_end":10784806,"line_start":505,"line_end":505,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784811,"byte_end":10784816,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784821,"byte_end":10784828,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784833,"byte_end":10784836,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ `try_recv` when the sender dropped before sending a value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784841,"byte_end":10784902,"line_start":509,"line_end":509,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784907,"byte_end":10784910,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784915,"byte_end":10784922,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784927,"byte_end":10784956,"line_start":512,"line_end":512,"column_start":5,"column_end":34}},{"value":"/ use tokio::sync::oneshot::error::TryRecvError;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10784961,"byte_end":10785011,"line_start":513,"line_end":513,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785016,"byte_end":10785019,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785024,"byte_end":10785042,"line_start":515,"line_end":515,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785047,"byte_end":10785068,"line_start":516,"line_end":516,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = oneshot::channel::<()>();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785073,"byte_end":10785125,"line_start":517,"line_end":517,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785130,"byte_end":10785133,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/     drop(tx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785138,"byte_end":10785155,"line_start":519,"line_end":519,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785160,"byte_end":10785163,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/     match rx.try_recv() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785168,"byte_end":10785197,"line_start":521,"line_end":521,"column_start":5,"column_end":34}},{"value":"/         // The channel will never receive a value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785202,"byte_end":10785256,"line_start":522,"line_end":522,"column_start":5,"column_end":59}},{"value":"/         Err(TryRecvError::Closed) => {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785261,"byte_end":10785304,"line_start":523,"line_end":523,"column_start":5,"column_end":48}},{"value":"/         _ => unreachable!(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785309,"byte_end":10785341,"line_start":524,"line_end":524,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785346,"byte_end":10785355,"line_start":525,"line_end":525,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785360,"byte_end":10785365,"line_start":526,"line_end":526,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10785370,"byte_end":10785377,"line_start":527,"line_end":527,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5927},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796153,"byte_end":10796159,"line_start":52,"line_end":52,"column_start":5,"column_end":11},"name":"Closed","qualname":"::sync::batch_semaphore::TryAcquireError::Closed","value":"TryAcquireError::Closed","parent":{"krate":0,"index":5926},"children":[],"decl_id":null,"docs":" The semaphore has been [closed] and cannot issue new permits.","sig":null,"attributes":[{"value":"/ The semaphore has been [closed] and cannot issue new permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796027,"byte_end":10796092,"line_start":49,"line_end":49,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796097,"byte_end":10796100,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [closed]: crate::sync::Semaphore::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796105,"byte_end":10796148,"line_start":51,"line_end":51,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5929},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796214,"byte_end":10796223,"line_start":55,"line_end":55,"column_start":5,"column_end":14},"name":"NoPermits","qualname":"::sync::batch_semaphore::TryAcquireError::NoPermits","value":"TryAcquireError::NoPermits","parent":{"krate":0,"index":5926},"children":[],"decl_id":null,"docs":" The semaphore has no available permits.\n","sig":null,"attributes":[{"value":"/ The semaphore has no available permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796166,"byte_end":10796209,"line_start":54,"line_end":54,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":5926},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796005,"byte_end":10796020,"line_start":48,"line_end":48,"column_start":10,"column_end":25},"name":"TryAcquireError","qualname":"::sync::batch_semaphore::TryAcquireError","value":"pub enum TryAcquireError {\n\n    /// The semaphore has been [closed] and cannot issue new permits.\n    ///\n    /// [closed]: crate::sync::Semaphore::close\n    Closed,\n\n    /// The semaphore has no available permits.\n    NoPermits,\n}","parent":null,"children":[{"krate":0,"index":5927},{"krate":0,"index":5929}],"decl_id":null,"docs":" Error returned from the [`Semaphore::try_acquire`] function.","sig":null,"attributes":[{"value":"/ Error returned from the [`Semaphore::try_acquire`] function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10795831,"byte_end":10795895,"line_start":44,"line_end":44,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10795896,"byte_end":10795899,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`Semaphore::try_acquire`]: crate::sync::Semaphore::try_acquire","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10795900,"byte_end":10795967,"line_start":46,"line_end":46,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5936},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796509,"byte_end":10796521,"line_start":65,"line_end":65,"column_start":12,"column_end":24},"name":"AcquireError","qualname":"::sync::batch_semaphore::AcquireError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from the [`Semaphore::acquire`] function.","sig":null,"attributes":[{"value":"/ Error returned from the [`Semaphore::acquire`] function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796227,"byte_end":10796287,"line_start":57,"line_end":57,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796288,"byte_end":10796291,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ An `acquire` operation can only fail if the semaphore has been","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796292,"byte_end":10796358,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ [closed].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796359,"byte_end":10796372,"line_start":60,"line_end":60,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796373,"byte_end":10796376,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [closed]: crate::sync::Semaphore::close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796377,"byte_end":10796420,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/ [`Semaphore::acquire`]: crate::sync::Semaphore::acquire","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10796421,"byte_end":10796480,"line_start":63,"line_end":63,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5941},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815570,"byte_end":10815579,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"Semaphore","qualname":"::sync::semaphore::Semaphore","value":"Semaphore {  }","parent":null,"children":[{"krate":0,"index":5942}],"decl_id":null,"docs":" Counting semaphore performing asynchronous permit acquisition.","sig":null,"attributes":[{"value":"/ Counting semaphore performing asynchronous permit acquisition.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10814918,"byte_end":10814984,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10814985,"byte_end":10814988,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ A semaphore maintains a set of permits. Permits are used to synchronize","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10814989,"byte_end":10815064,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ access to a shared resource. A semaphore differs from a mutex in that it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815065,"byte_end":10815141,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ can allow more than one concurrent caller to access the shared resource at a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815142,"byte_end":10815222,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815223,"byte_end":10815232,"line_start":10,"line_end":10,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815233,"byte_end":10815236,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ When `acquire` is called and the semaphore has remaining permits, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815237,"byte_end":10815310,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ function immediately returns a permit. However, if no remaining permits are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815311,"byte_end":10815390,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ available, `acquire` (asynchronously) waits until an outstanding permit is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815391,"byte_end":10815469,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ dropped. At this point, the freed permit is assigned to the caller.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815470,"byte_end":10815541,"line_start":15,"line_end":15,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5945},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815828,"byte_end":10815843,"line_start":29,"line_end":29,"column_start":12,"column_end":27},"name":"SemaphorePermit","qualname":"::sync::semaphore::SemaphorePermit","value":"SemaphorePermit {  }","parent":null,"children":[{"krate":0,"index":5947},{"krate":0,"index":5948}],"decl_id":null,"docs":" A permit from the semaphore.","sig":null,"attributes":[{"value":"/ A permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815644,"byte_end":10815676,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815677,"byte_end":10815680,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type is created by the [`acquire`] method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815681,"byte_end":10815732,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815733,"byte_end":10815736,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [`acquire`]: crate::sync::Semaphore::acquire()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815737,"byte_end":10815787,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"must_use","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815788,"byte_end":10815799,"line_start":27,"line_end":27,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5952},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816104,"byte_end":10816124,"line_start":41,"line_end":41,"column_start":12,"column_end":32},"name":"OwnedSemaphorePermit","qualname":"::sync::semaphore::OwnedSemaphorePermit","value":"OwnedSemaphorePermit {  }","parent":null,"children":[{"krate":0,"index":5953},{"krate":0,"index":5954}],"decl_id":null,"docs":" An owned permit from the semaphore.","sig":null,"attributes":[{"value":"/ An owned permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815895,"byte_end":10815934,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815935,"byte_end":10815938,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This type is created by the [`acquire_owned`] method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815939,"byte_end":10815996,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10815997,"byte_end":10816000,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`acquire_owned`]: crate::sync::Semaphore::acquire_owned()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816001,"byte_end":10816063,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"must_use","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816064,"byte_end":10816075,"line_start":39,"line_end":39,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5512},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816720,"byte_end":10816723,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Semaphore>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new semaphore with the initial number of permits.\n","sig":null,"attributes":[{"value":"/ Creates a new semaphore with the initial number of permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816645,"byte_end":10816708,"line_start":62,"line_end":62,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5513},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817229,"byte_end":10817246,"line_start":79,"line_end":79,"column_start":12,"column_end":29},"name":"available_permits","qualname":"<Semaphore>::available_permits","value":"pub fn available_permits(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current number of available permits.\n","sig":null,"attributes":[{"value":"/ Returns the current number of available permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817165,"byte_end":10817217,"line_start":78,"line_end":78,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":5514},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817493,"byte_end":10817504,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"add_permits","qualname":"<Semaphore>::add_permits","value":"pub fn add_permits(&Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Adds `n` new permits to the semaphore.","sig":null,"attributes":[{"value":"/ Adds `n` new permits to the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817316,"byte_end":10817358,"line_start":83,"line_end":83,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817363,"byte_end":10817366,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ The maximum number of permits is `usize::MAX >> 3`, and this function will panic if the limit is exceeded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817371,"byte_end":10817481,"line_start":85,"line_end":85,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":5515},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817924,"byte_end":10817931,"line_start":98,"line_end":98,"column_start":18,"column_end":25},"name":"acquire","qualname":"<Semaphore>::acquire","value":"pub async fn acquire<'_, '_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Acquires a permit from the semaphore.","sig":null,"attributes":[{"value":"/ Acquires a permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817567,"byte_end":10817608,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817613,"byte_end":10817616,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ If the semaphore has been closed, this returns an [`AcquireError`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817621,"byte_end":10817692,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/ Otherwise, this returns a [`SemaphorePermit`] representing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817697,"byte_end":10817763,"line_start":93,"line_end":93,"column_start":5,"column_end":71}},{"value":"/ acquired permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817768,"byte_end":10817788,"line_start":94,"line_end":94,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817793,"byte_end":10817796,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ [`AcquireError`]: crate::sync::AcquireError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817801,"byte_end":10817848,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/ [`SemaphorePermit`]: crate::sync::SemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10817853,"byte_end":10817906,"line_start":97,"line_end":97,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5518},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818485,"byte_end":10818497,"line_start":114,"line_end":114,"column_start":18,"column_end":30},"name":"acquire_many","qualname":"<Semaphore>::acquire_many","value":"pub async fn acquire_many<'_, '_>(&'_ Self, u32) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Acquires `n` permits from the semaphore.","sig":null,"attributes":[{"value":"/ Acquires `n` permits from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818124,"byte_end":10818168,"line_start":106,"line_end":106,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818173,"byte_end":10818176,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ If the semaphore has been closed, this returns an [`AcquireError`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818181,"byte_end":10818252,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ Otherwise, this returns a [`SemaphorePermit`] representing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818257,"byte_end":10818323,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ acquired permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818328,"byte_end":10818349,"line_start":110,"line_end":110,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818354,"byte_end":10818357,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ [`AcquireError`]: crate::sync::AcquireError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818362,"byte_end":10818409,"line_start":112,"line_end":112,"column_start":5,"column_end":52}},{"value":"/ [`SemaphorePermit`]: crate::sync::SemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818414,"byte_end":10818467,"line_start":113,"line_end":113,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5521},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819236,"byte_end":10819247,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"try_acquire","qualname":"<Semaphore>::try_acquire","value":"pub fn try_acquire(&Self) -> Result<SemaphorePermit, TryAcquireError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to acquire a permit from the semaphore.","sig":null,"attributes":[{"value":"/ Tries to acquire a permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818698,"byte_end":10818747,"line_start":122,"line_end":122,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818752,"byte_end":10818755,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ If the semaphore has been closed, this returns a [`TryAcquireError::Closed`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818760,"byte_end":10818840,"line_start":124,"line_end":124,"column_start":5,"column_end":85}},{"value":"/ and a [`TryAcquireError::NoPermits`] if there are no permits left. Otherwise,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818845,"byte_end":10818926,"line_start":125,"line_end":125,"column_start":5,"column_end":86}},{"value":"/ this returns a [`SemaphorePermit`] representing the acquired permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10818931,"byte_end":10819004,"line_start":126,"line_end":126,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819009,"byte_end":10819012,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ [`TryAcquireError::Closed`]: crate::sync::TryAcquireError::Closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819017,"byte_end":10819086,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/ [`TryAcquireError::NoPermits`]: crate::sync::TryAcquireError::NoPermits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819091,"byte_end":10819166,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ [`SemaphorePermit`]: crate::sync::SemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819171,"byte_end":10819224,"line_start":130,"line_end":130,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5522},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820051,"byte_end":10820067,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"try_acquire_many","qualname":"<Semaphore>::try_acquire_many","value":"pub fn try_acquire_many(&Self, u32)\n-> Result<SemaphorePermit, TryAcquireError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to acquire n permits from the semaphore.","sig":null,"attributes":[{"value":"/ Tries to acquire n permits from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819512,"byte_end":10819562,"line_start":141,"line_end":141,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819567,"byte_end":10819570,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the semaphore has been closed, this returns a [`TryAcquireError::Closed`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819575,"byte_end":10819655,"line_start":143,"line_end":143,"column_start":5,"column_end":85}},{"value":"/ and a [`TryAcquireError::NoPermits`] if there are no permits left. Otherwise,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819660,"byte_end":10819741,"line_start":144,"line_end":144,"column_start":5,"column_end":86}},{"value":"/ this returns a [`SemaphorePermit`] representing the acquired permits.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819746,"byte_end":10819819,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819824,"byte_end":10819827,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ [`TryAcquireError::Closed`]: crate::sync::TryAcquireError::Closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819832,"byte_end":10819901,"line_start":147,"line_end":147,"column_start":5,"column_end":74}},{"value":"/ [`TryAcquireError::NoPermits`]: crate::sync::TryAcquireError::NoPermits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819906,"byte_end":10819981,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ [`SemaphorePermit`]: crate::sync::SemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10819986,"byte_end":10820039,"line_start":149,"line_end":149,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5523},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820817,"byte_end":10820830,"line_start":170,"line_end":170,"column_start":18,"column_end":31},"name":"acquire_owned","qualname":"<Semaphore>::acquire_owned","value":"pub async fn acquire_owned(Arc<Self>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Acquires a permit from the semaphore.","sig":null,"attributes":[{"value":"/ Acquires a permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820340,"byte_end":10820381,"line_start":160,"line_end":160,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820386,"byte_end":10820389,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The semaphore must be wrapped in an [`Arc`] to call this method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820394,"byte_end":10820462,"line_start":162,"line_end":162,"column_start":5,"column_end":73}},{"value":"/ If the semaphore has been closed, this returns an [`AcquireError`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820467,"byte_end":10820538,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ Otherwise, this returns a [`OwnedSemaphorePermit`] representing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820543,"byte_end":10820614,"line_start":164,"line_end":164,"column_start":5,"column_end":76}},{"value":"/ acquired permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820619,"byte_end":10820639,"line_start":165,"line_end":165,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820644,"byte_end":10820647,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ [`Arc`]: std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820652,"byte_end":10820679,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/ [`AcquireError`]: crate::sync::AcquireError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820684,"byte_end":10820731,"line_start":168,"line_end":168,"column_start":5,"column_end":52}},{"value":"/ [`OwnedSemaphorePermit`]: crate::sync::OwnedSemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10820736,"byte_end":10820799,"line_start":169,"line_end":169,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5526},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821703,"byte_end":10821720,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"try_acquire_owned","qualname":"<Semaphore>::try_acquire_owned","value":"pub fn try_acquire_owned(Arc<Self>)\n-> Result<OwnedSemaphorePermit, TryAcquireError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to acquire a permit from the semaphore.","sig":null,"attributes":[{"value":"/ Tries to acquire a permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821038,"byte_end":10821087,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821092,"byte_end":10821095,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ The semaphore must be wrapped in an [`Arc`] to call this method. If","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821100,"byte_end":10821171,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ the semaphore has been closed, this returns a [`TryAcquireError::Closed`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821176,"byte_end":10821253,"line_start":181,"line_end":181,"column_start":5,"column_end":82}},{"value":"/ and a [`TryAcquireError::NoPermits`] if there are no permits left.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821258,"byte_end":10821328,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/ Otherwise, this returns a [`OwnedSemaphorePermit`] representing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821333,"byte_end":10821404,"line_start":183,"line_end":183,"column_start":5,"column_end":76}},{"value":"/ acquired permit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821409,"byte_end":10821429,"line_start":184,"line_end":184,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821434,"byte_end":10821437,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ [`Arc`]: std::sync::Arc","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821442,"byte_end":10821469,"line_start":186,"line_end":186,"column_start":5,"column_end":32}},{"value":"/ [`TryAcquireError::Closed`]: crate::sync::TryAcquireError::Closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821474,"byte_end":10821543,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"/ [`TryAcquireError::NoPermits`]: crate::sync::TryAcquireError::NoPermits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821548,"byte_end":10821623,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ [`OwnedSemaphorePermit`]: crate::sync::OwnedSemaphorePermit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10821628,"byte_end":10821691,"line_start":189,"line_end":189,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5527},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822914,"byte_end":10822919,"line_start":229,"line_end":229,"column_start":12,"column_end":17},"name":"close","qualname":"<Semaphore>::close","value":"pub fn close(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the semaphore.","sig":null,"attributes":[{"value":"/ Closes the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822001,"byte_end":10822026,"line_start":200,"line_end":200,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822031,"byte_end":10822034,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ This prevents the semaphore from issuing new permits and notifies all pending waiters.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822039,"byte_end":10822129,"line_start":202,"line_end":202,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822134,"byte_end":10822137,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822142,"byte_end":10822156,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822161,"byte_end":10822164,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822169,"byte_end":10822176,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::Semaphore;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822181,"byte_end":10822212,"line_start":207,"line_end":207,"column_start":5,"column_end":36}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822217,"byte_end":10822240,"line_start":208,"line_end":208,"column_start":5,"column_end":28}},{"value":"/ use tokio::sync::TryAcquireError;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822245,"byte_end":10822282,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822287,"byte_end":10822290,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822295,"byte_end":10822313,"line_start":211,"line_end":211,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822318,"byte_end":10822339,"line_start":212,"line_end":212,"column_start":5,"column_end":26}},{"value":"/     let semaphore = Arc::new(Semaphore::new(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822344,"byte_end":10822396,"line_start":213,"line_end":213,"column_start":5,"column_end":57}},{"value":"/     let semaphore2 = semaphore.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822401,"byte_end":10822444,"line_start":214,"line_end":214,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822449,"byte_end":10822452,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822457,"byte_end":10822490,"line_start":216,"line_end":216,"column_start":5,"column_end":38}},{"value":"/         let permit = semaphore.acquire_many(2).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822495,"byte_end":10822552,"line_start":217,"line_end":217,"column_start":5,"column_end":62}},{"value":"/         assert!(permit.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822557,"byte_end":10822594,"line_start":218,"line_end":218,"column_start":5,"column_end":42}},{"value":"/         println!(\"waiter received error\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822599,"byte_end":10822645,"line_start":219,"line_end":219,"column_start":5,"column_end":51}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822650,"byte_end":10822661,"line_start":220,"line_end":220,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822666,"byte_end":10822669,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/     println!(\"closing semaphore\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822674,"byte_end":10822712,"line_start":222,"line_end":222,"column_start":5,"column_end":43}},{"value":"/     semaphore2.close();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822717,"byte_end":10822744,"line_start":223,"line_end":223,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822749,"byte_end":10822752,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/     // Cannot obtain more permits","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822757,"byte_end":10822794,"line_start":225,"line_end":225,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(semaphore2.try_acquire().err(), Some(TryAcquireError::Closed))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822799,"byte_end":10822880,"line_start":226,"line_end":226,"column_start":5,"column_end":86}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822885,"byte_end":10822890,"line_start":227,"line_end":227,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822895,"byte_end":10822902,"line_start":228,"line_end":228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5530},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823177,"byte_end":10823183,"line_start":238,"line_end":238,"column_start":12,"column_end":18},"name":"forget","qualname":"<SemaphorePermit>::forget","value":"pub fn forget(Self)","parent":null,"children":[],"decl_id":null,"docs":" Forgets the permit **without** releasing it back to the semaphore.\n This can be used to reduce the amount of permits available from a\n semaphore.\n","sig":null,"attributes":[{"value":"/ Forgets the permit **without** releasing it back to the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823002,"byte_end":10823072,"line_start":235,"line_end":235,"column_start":5,"column_end":75}},{"value":"/ This can be used to reduce the amount of permits available from a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823077,"byte_end":10823146,"line_start":236,"line_end":236,"column_start":5,"column_end":74}},{"value":"/ semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823151,"byte_end":10823165,"line_start":237,"line_end":237,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":5532},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823438,"byte_end":10823444,"line_start":247,"line_end":247,"column_start":12,"column_end":18},"name":"forget","qualname":"<OwnedSemaphorePermit>::forget","value":"pub fn forget(Self)","parent":null,"children":[],"decl_id":null,"docs":" Forgets the permit **without** releasing it back to the semaphore.\n This can be used to reduce the amount of permits available from a\n semaphore.\n","sig":null,"attributes":[{"value":"/ Forgets the permit **without** releasing it back to the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823263,"byte_end":10823333,"line_start":244,"line_end":244,"column_start":5,"column_end":75}},{"value":"/ This can be used to reduce the amount of permits available from a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823338,"byte_end":10823407,"line_start":245,"line_end":245,"column_start":5,"column_end":74}},{"value":"/ semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823412,"byte_end":10823426,"line_start":246,"line_end":246,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":5957},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826497,"byte_end":10826503,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::sync::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":5959},{"krate":0,"index":5960}],"decl_id":null,"docs":" An asynchronous reader-writer lock.","sig":null,"attributes":[{"value":"/ An asynchronous reader-writer lock.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10823966,"byte_end":10824005,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824006,"byte_end":10824009,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824010,"byte_end":10824087,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824088,"byte_end":10824167,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824168,"byte_end":10824247,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824248,"byte_end":10824306,"line_start":19,"line_end":19,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824307,"byte_end":10824310,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In comparison, a [`Mutex`] does not distinguish between readers or writers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824311,"byte_end":10824389,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ that acquire the lock, therefore causing any tasks waiting for the lock to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824390,"byte_end":10824468,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ become available to yield. An `RwLock` will allow any number of readers to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824469,"byte_end":10824547,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ acquire the lock as long as a writer is not holding the lock.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824548,"byte_end":10824613,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824614,"byte_end":10824617,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The priority policy of Tokio's read-write lock is _fair_ (or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824618,"byte_end":10824682,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/ [_write-preferring_]), in order to ensure that readers cannot starve","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824683,"byte_end":10824755,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ writers. Fairness is ensured using a first-in, first-out queue for the tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824756,"byte_end":10824836,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ awaiting the lock; if a task that wishes to acquire the write lock is at the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824837,"byte_end":10824917,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ head of the queue, read locks will not be given out until the write lock has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824918,"byte_end":10824998,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ been released. This is in contrast to the Rust standard library's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10824999,"byte_end":10825068,"line_start":31,"line_end":31,"column_start":1,"column_end":70}},{"value":"/ `std::sync::RwLock`, where the priority policy is dependent on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825069,"byte_end":10825139,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ operating system's implementation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825140,"byte_end":10825178,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825179,"byte_end":10825182,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825183,"byte_end":10825260,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies [`Send`] to be shared across threads. The RAII guards","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825261,"byte_end":10825346,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"/ returned from the locking methods implement [`Deref`](trait@std::ops::Deref)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825347,"byte_end":10825427,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ (and [`DerefMut`](trait@std::ops::DerefMut)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825428,"byte_end":10825475,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ for the `write` methods) to allow access to the content of the lock.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825476,"byte_end":10825548,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825549,"byte_end":10825552,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825553,"byte_end":10825567,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825568,"byte_end":10825571,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825572,"byte_end":10825579,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825580,"byte_end":10825608,"line_start":44,"line_end":44,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825609,"byte_end":10825612,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825613,"byte_end":10825631,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825632,"byte_end":10825653,"line_start":47,"line_end":47,"column_start":1,"column_end":22}},{"value":"/     let lock = RwLock::new(5);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825654,"byte_end":10825688,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825689,"byte_end":10825692,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/     // many reader locks can be held at once","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825693,"byte_end":10825741,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/     {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825742,"byte_end":10825751,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/         let r1 = lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825752,"byte_end":10825791,"line_start":52,"line_end":52,"column_start":1,"column_end":40}},{"value":"/         let r2 = lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825792,"byte_end":10825831,"line_start":53,"line_end":53,"column_start":1,"column_end":40}},{"value":"/         assert_eq!(*r1, 5);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825832,"byte_end":10825863,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/         assert_eq!(*r2, 5);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825864,"byte_end":10825895,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/     } // read locks are dropped at this point","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825896,"byte_end":10825945,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825946,"byte_end":10825949,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/     // only one write lock may be held, however","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10825950,"byte_end":10826001,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826002,"byte_end":10826011,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"/         let mut w = lock.write().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826012,"byte_end":10826055,"line_start":60,"line_end":60,"column_start":1,"column_end":44}},{"value":"/         *w += 1;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826056,"byte_end":10826076,"line_start":61,"line_end":61,"column_start":1,"column_end":21}},{"value":"/         assert_eq!(*w, 6);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826077,"byte_end":10826107,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/     } // write lock is dropped here","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826108,"byte_end":10826147,"line_start":63,"line_end":63,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826148,"byte_end":10826153,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826154,"byte_end":10826161,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826162,"byte_end":10826165,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: struct@super::Mutex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826166,"byte_end":10826200,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ [`RwLock`]: struct@RwLock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826201,"byte_end":10826230,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ [`RwLockReadGuard`]: struct@RwLockReadGuard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826231,"byte_end":10826278,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/ [`RwLockWriteGuard`]: struct@RwLockWriteGuard","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826279,"byte_end":10826328,"line_start":70,"line_end":70,"column_start":1,"column_end":50}},{"value":"/ [`Send`]: trait@std::marker::Send","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826329,"byte_end":10826366,"line_start":71,"line_end":71,"column_start":1,"column_end":38}},{"value":"/ [_write-preferring_]: https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock#Priority_policies","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826367,"byte_end":10826468,"line_start":72,"line_end":72,"column_start":1,"column_end":102}}]},{"kind":"Struct","id":{"krate":0,"index":5550},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826878,"byte_end":10826893,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::sync::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":5553},{"krate":0,"index":5554},{"krate":0,"index":5555}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826637,"byte_end":10826709,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826710,"byte_end":10826722,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826723,"byte_end":10826726,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This structure is created by the [`read`] method on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826727,"byte_end":10826782,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ [`RwLock`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826783,"byte_end":10826798,"line_start":86,"line_end":86,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826799,"byte_end":10826802,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [`read`]: method@RwLock::read","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826803,"byte_end":10826836,"line_start":88,"line_end":88,"column_start":1,"column_end":34}},{"value":"/ [`RwLock`]: struct@RwLock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10826837,"byte_end":10826866,"line_start":89,"line_end":89,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5559},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828211,"byte_end":10828214,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<F, U: ?Sized>(Self, F) -> RwLockReadGuard where F: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `RwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `RwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827037,"byte_end":10827105,"line_start":97,"line_end":97,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827110,"byte_end":10827113,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed in already","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827118,"byte_end":10827191,"line_start":99,"line_end":99,"column_start":5,"column_end":78}},{"value":"/ locked the data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827196,"byte_end":10827216,"line_start":100,"line_end":100,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827221,"byte_end":10827224,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827229,"byte_end":10827280,"line_start":102,"line_end":102,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827285,"byte_end":10827355,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ methods of the same name on the contents of the locked data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827360,"byte_end":10827424,"line_start":104,"line_end":104,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827429,"byte_end":10827432,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This is an asynchronous version of [`RwLockReadGuard::map`] from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827437,"byte_end":10827509,"line_start":106,"line_end":106,"column_start":5,"column_end":77}},{"value":"/ [`parking_lot` crate].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827514,"byte_end":10827540,"line_start":107,"line_end":107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827545,"byte_end":10827548,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`RwLockReadGuard::map`]: https://docs.rs/lock_api/latest/lock_api/struct.RwLockReadGuard.html#method.map","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827553,"byte_end":10827662,"line_start":109,"line_end":109,"column_start":5,"column_end":114}},{"value":"/ [`parking_lot` crate]: https://crates.io/crates/parking_lot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827667,"byte_end":10827730,"line_start":110,"line_end":110,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827735,"byte_end":10827738,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827743,"byte_end":10827757,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827762,"byte_end":10827765,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827770,"byte_end":10827777,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::{RwLock, RwLockReadGuard};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827782,"byte_end":10827829,"line_start":115,"line_end":115,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827834,"byte_end":10827837,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq, Eq)]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827842,"byte_end":10827890,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"/ struct Foo(u32);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827895,"byte_end":10827915,"line_start":118,"line_end":118,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827920,"byte_end":10827923,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827928,"byte_end":10827948,"line_start":120,"line_end":120,"column_start":5,"column_end":25}},{"value":"/ # async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827953,"byte_end":10827976,"line_start":121,"line_end":121,"column_start":5,"column_end":28}},{"value":"/ let lock = RwLock::new(Foo(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827981,"byte_end":10828016,"line_start":122,"line_end":122,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828021,"byte_end":10828024,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let guard = lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828029,"byte_end":10828063,"line_start":124,"line_end":124,"column_start":5,"column_end":39}},{"value":"/ let guard = RwLockReadGuard::map(guard, |f| &f.0);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828068,"byte_end":10828122,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828127,"byte_end":10828130,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, *guard);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828135,"byte_end":10828161,"line_start":127,"line_end":127,"column_start":5,"column_end":31}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828166,"byte_end":10828173,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828178,"byte_end":10828185,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828190,"byte_end":10828199,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5562},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829909,"byte_end":10829916,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<F, U: ?Sized>(Self, F) -> Result<RwLockReadGuard, Self> where\nF: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new [`RwLockReadGuard`] for a component of the\n locked data. The original guard is returned if the closure returns\n `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new [`RwLockReadGuard`] for a component of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828592,"byte_end":10828661,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is returned if the closure returns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828666,"byte_end":10828736,"line_start":147,"line_end":147,"column_start":5,"column_end":75}},{"value":"/ `None`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828741,"byte_end":10828752,"line_start":148,"line_end":148,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828757,"byte_end":10828760,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed in already","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828765,"byte_end":10828838,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ locked the data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828843,"byte_end":10828863,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828868,"byte_end":10828871,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be used as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828876,"byte_end":10828935,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/ `RwLockReadGuard::try_map(..)`. A method would interfere with methods of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10828940,"byte_end":10829020,"line_start":154,"line_end":154,"column_start":5,"column_end":85}},{"value":"/ same name on the contents of the locked data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829025,"byte_end":10829074,"line_start":155,"line_end":155,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829079,"byte_end":10829082,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This is an asynchronous version of [`RwLockReadGuard::try_map`] from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829087,"byte_end":10829163,"line_start":157,"line_end":157,"column_start":5,"column_end":81}},{"value":"/ [`parking_lot` crate].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829168,"byte_end":10829194,"line_start":158,"line_end":158,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829199,"byte_end":10829202,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ [`RwLockReadGuard::try_map`]: https://docs.rs/lock_api/latest/lock_api/struct.RwLockReadGuard.html#method.try_map","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829207,"byte_end":10829324,"line_start":160,"line_end":160,"column_start":5,"column_end":122}},{"value":"/ [`parking_lot` crate]: https://crates.io/crates/parking_lot","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829329,"byte_end":10829392,"line_start":161,"line_end":161,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829397,"byte_end":10829400,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829405,"byte_end":10829419,"line_start":163,"line_end":163,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829424,"byte_end":10829427,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829432,"byte_end":10829439,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::{RwLock, RwLockReadGuard};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829444,"byte_end":10829491,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829496,"byte_end":10829499,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq, Eq)]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829504,"byte_end":10829552,"line_start":168,"line_end":168,"column_start":5,"column_end":53}},{"value":"/ struct Foo(u32);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829557,"byte_end":10829577,"line_start":169,"line_end":169,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829582,"byte_end":10829585,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829590,"byte_end":10829610,"line_start":171,"line_end":171,"column_start":5,"column_end":25}},{"value":"/ # async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829615,"byte_end":10829638,"line_start":172,"line_end":172,"column_start":5,"column_end":28}},{"value":"/ let lock = RwLock::new(Foo(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829643,"byte_end":10829678,"line_start":173,"line_end":173,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829683,"byte_end":10829686,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let guard = lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829691,"byte_end":10829725,"line_start":175,"line_end":175,"column_start":5,"column_end":39}},{"value":"/ let guard = RwLockReadGuard::try_map(guard, |f| Some(&f.0)).expect(\"should not fail\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829730,"byte_end":10829820,"line_start":176,"line_end":176,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829825,"byte_end":10829828,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, *guard);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829833,"byte_end":10829859,"line_start":178,"line_end":178,"column_start":5,"column_end":31}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829864,"byte_end":10829871,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829876,"byte_end":10829883,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10829888,"byte_end":10829897,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5577},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831165,"byte_end":10831181,"line_start":233,"line_end":233,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::sync::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":5580},{"krate":0,"index":5581},{"krate":0,"index":5582}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830913,"byte_end":10830989,"line_start":225,"line_end":225,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830990,"byte_end":10831002,"line_start":226,"line_end":226,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831003,"byte_end":10831006,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This structure is created by the [`write`] and method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831007,"byte_end":10831064,"line_start":228,"line_end":228,"column_start":1,"column_end":58}},{"value":"/ on [`RwLock`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831065,"byte_end":10831083,"line_start":229,"line_end":229,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831084,"byte_end":10831087,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ [`write`]: method@RwLock::write","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831088,"byte_end":10831123,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/ [`RwLock`]: struct@RwLock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831124,"byte_end":10831153,"line_start":232,"line_end":232,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5586},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832499,"byte_end":10832508,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing\n any writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831336,"byte_end":10831408,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ any writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831413,"byte_end":10831482,"line_start":241,"line_end":241,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831487,"byte_end":10831490,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ **Note:** This won't *necessarily* allow any additional readers to acquire","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831495,"byte_end":10831573,"line_start":243,"line_end":243,"column_start":5,"column_end":83}},{"value":"/ locks, since [`RwLock`] is fair and it is possible that a writer is next","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831578,"byte_end":10831654,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ in line.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831659,"byte_end":10831671,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831676,"byte_end":10831679,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the read access of this rwlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831684,"byte_end":10831756,"line_start":247,"line_end":247,"column_start":5,"column_end":77}},{"value":"/ when dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831761,"byte_end":10831778,"line_start":248,"line_end":248,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831783,"byte_end":10831786,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831791,"byte_end":10831805,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831810,"byte_end":10831813,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831818,"byte_end":10831825,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ # use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831830,"byte_end":10831860,"line_start":253,"line_end":253,"column_start":5,"column_end":35}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831865,"byte_end":10831890,"line_start":254,"line_end":254,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831895,"byte_end":10831900,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/ # #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831905,"byte_end":10831925,"line_start":256,"line_end":256,"column_start":5,"column_end":25}},{"value":"/ # async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831930,"byte_end":10831953,"line_start":257,"line_end":257,"column_start":5,"column_end":28}},{"value":"/ let lock = Arc::new(RwLock::new(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831958,"byte_end":10831998,"line_start":258,"line_end":258,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832003,"byte_end":10832006,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let n = lock.write().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832011,"byte_end":10832042,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/   ","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832047,"byte_end":10832053,"line_start":261,"line_end":261,"column_start":5,"column_end":11}},{"value":"/ let cloned_lock = lock.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832058,"byte_end":10832093,"line_start":262,"line_end":262,"column_start":5,"column_end":40}},{"value":"/ let handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832098,"byte_end":10832140,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/     *cloned_lock.write().await = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832145,"byte_end":10832184,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832189,"byte_end":10832196,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832201,"byte_end":10832204,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let n = n.downgrade();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832209,"byte_end":10832235,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(*n, 1, \"downgrade is atomic\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832240,"byte_end":10832285,"line_start":268,"line_end":268,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832290,"byte_end":10832293,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ drop(n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832298,"byte_end":10832310,"line_start":270,"line_end":270,"column_start":5,"column_end":17}},{"value":"/ handle.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832315,"byte_end":10832341,"line_start":271,"line_end":271,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(*lock.read().await, 2, \"second writer obtained write lock\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832346,"byte_end":10832421,"line_start":272,"line_end":272,"column_start":5,"column_end":80}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832426,"byte_end":10832433,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832438,"byte_end":10832445,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832450,"byte_end":10832453,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ [`RwLock`]: struct@RwLock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832458,"byte_end":10832487,"line_start":276,"line_end":276,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5613},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835504,"byte_end":10835507,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<T>>::new","value":"pub fn new(T) -> RwLock<T> where T: Sized","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835294,"byte_end":10835357,"line_start":360,"line_end":360,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835362,"byte_end":10835365,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835370,"byte_end":10835384,"line_start":362,"line_end":362,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835389,"byte_end":10835392,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835397,"byte_end":10835404,"line_start":364,"line_end":364,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835409,"byte_end":10835437,"line_start":365,"line_end":365,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835442,"byte_end":10835445,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835450,"byte_end":10835480,"line_start":367,"line_end":367,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835485,"byte_end":10835492,"line_start":368,"line_end":368,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5614},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837274,"byte_end":10837278,"line_start":431,"line_end":431,"column_start":18,"column_end":22},"name":"read","qualname":"<RwLock<T>>::read","value":"pub async fn read<'_, '_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, causing the current task\n to yield until the lock has been acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, causing the current task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836236,"byte_end":10836307,"line_start":400,"line_end":400,"column_start":5,"column_end":76}},{"value":"/ to yield until the lock has been acquired.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836312,"byte_end":10836358,"line_start":401,"line_end":401,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836363,"byte_end":10836366,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ The calling task will yield until there are no more writers which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836371,"byte_end":10836440,"line_start":403,"line_end":403,"column_start":5,"column_end":74}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836445,"byte_end":10836521,"line_start":404,"line_end":404,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836526,"byte_end":10836550,"line_start":405,"line_end":405,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836555,"byte_end":10836558,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836563,"byte_end":10836577,"line_start":407,"line_end":407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836582,"byte_end":10836585,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836590,"byte_end":10836597,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836602,"byte_end":10836625,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836630,"byte_end":10836658,"line_start":411,"line_end":411,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836663,"byte_end":10836666,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836671,"byte_end":10836689,"line_start":413,"line_end":413,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836694,"byte_end":10836715,"line_start":414,"line_end":414,"column_start":5,"column_end":26}},{"value":"/     let lock = Arc::new(RwLock::new(1));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836720,"byte_end":10836764,"line_start":415,"line_end":415,"column_start":5,"column_end":49}},{"value":"/     let c_lock = lock.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836769,"byte_end":10836803,"line_start":416,"line_end":416,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836808,"byte_end":10836811,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/     let n = lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836816,"byte_end":10836850,"line_start":418,"line_end":418,"column_start":5,"column_end":39}},{"value":"/     assert_eq!(*n, 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836855,"byte_end":10836881,"line_start":419,"line_end":419,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836886,"byte_end":10836889,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836894,"byte_end":10836927,"line_start":421,"line_end":421,"column_start":5,"column_end":38}},{"value":"/         // While main has an active read lock, we acquire one too.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10836932,"byte_end":10837002,"line_start":422,"line_end":422,"column_start":5,"column_end":75}},{"value":"/         let r = c_lock.read().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837007,"byte_end":10837047,"line_start":423,"line_end":423,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(*r, 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837052,"byte_end":10837082,"line_start":424,"line_end":424,"column_start":5,"column_end":35}},{"value":"/     }).await.expect(\"The spawned task has paniced\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837087,"byte_end":10837143,"line_start":425,"line_end":425,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837148,"byte_end":10837151,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/     // Drop the guard after the spawned task finishes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837156,"byte_end":10837214,"line_start":427,"line_end":427,"column_start":5,"column_end":63}},{"value":"/     drop(n);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837219,"byte_end":10837235,"line_start":428,"line_end":428,"column_start":5,"column_end":21}},{"value":"/}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837240,"byte_end":10837244,"line_start":429,"line_end":429,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837249,"byte_end":10837256,"line_start":430,"line_end":430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5618},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838366,"byte_end":10838371,"line_start":466,"line_end":466,"column_start":18,"column_end":23},"name":"write","qualname":"<RwLock<T>>::write","value":"pub async fn write<'_, '_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with exclusive write access, causing the current task\n to yield until the lock has been acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with exclusive write access, causing the current task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837725,"byte_end":10837800,"line_start":444,"line_end":444,"column_start":5,"column_end":80}},{"value":"/ to yield until the lock has been acquired.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837805,"byte_end":10837851,"line_start":445,"line_end":445,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837856,"byte_end":10837859,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837864,"byte_end":10837934,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837939,"byte_end":10837977,"line_start":448,"line_end":448,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837982,"byte_end":10837985,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10837990,"byte_end":10838063,"line_start":450,"line_end":450,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838068,"byte_end":10838085,"line_start":451,"line_end":451,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838090,"byte_end":10838093,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838098,"byte_end":10838112,"line_start":453,"line_end":453,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838117,"byte_end":10838120,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838125,"byte_end":10838132,"line_start":455,"line_end":455,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838137,"byte_end":10838165,"line_start":456,"line_end":456,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838170,"byte_end":10838173,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838178,"byte_end":10838196,"line_start":458,"line_end":458,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838201,"byte_end":10838222,"line_start":459,"line_end":459,"column_start":5,"column_end":26}},{"value":"/   let lock = RwLock::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838227,"byte_end":10838259,"line_start":460,"line_end":460,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838264,"byte_end":10838267,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/   let mut n = lock.write().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838272,"byte_end":10838309,"line_start":462,"line_end":462,"column_start":5,"column_end":42}},{"value":"/   *n = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838314,"byte_end":10838327,"line_start":463,"line_end":463,"column_start":5,"column_end":18}},{"value":"/}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838332,"byte_end":10838336,"line_start":464,"line_end":464,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838341,"byte_end":10838348,"line_start":465,"line_end":465,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5622},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839307,"byte_end":10839314,"line_start":496,"line_end":496,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838835,"byte_end":10838890,"line_start":479,"line_end":479,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838895,"byte_end":10838898,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838903,"byte_end":10838979,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/ take place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10838984,"byte_end":10839058,"line_start":482,"line_end":482,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839063,"byte_end":10839066,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839071,"byte_end":10839085,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839090,"byte_end":10839093,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839098,"byte_end":10839105,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::RwLock;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839110,"byte_end":10839138,"line_start":487,"line_end":487,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839143,"byte_end":10839146,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839151,"byte_end":10839166,"line_start":489,"line_end":489,"column_start":5,"column_end":20}},{"value":"/     let mut lock = RwLock::new(1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839171,"byte_end":10839209,"line_start":490,"line_end":490,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839214,"byte_end":10839217,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/     let n = lock.get_mut();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839222,"byte_end":10839253,"line_start":492,"line_end":492,"column_start":5,"column_end":36}},{"value":"/     *n = 2;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839258,"byte_end":10839273,"line_start":493,"line_end":493,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839278,"byte_end":10839283,"line_start":494,"line_end":494,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839288,"byte_end":10839295,"line_start":495,"line_end":495,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5623},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839548,"byte_end":10839558,"line_start":504,"line_end":504,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T>>::into_inner","value":"pub fn into_inner(Self) -> T where T: Sized","parent":null,"children":[],"decl_id":null,"docs":" Consumes the lock, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes the lock, returning the underlying data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839483,"byte_end":10839536,"line_start":503,"line_end":503,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":5690},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"watch","qualname":"::sync::watch","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","parent":null,"children":[{"krate":0,"index":5691},{"krate":0,"index":5692},{"krate":0,"index":5693},{"krate":0,"index":5694},{"krate":0,"index":12343},{"krate":0,"index":5695},{"krate":0,"index":12345},{"krate":0,"index":5696},{"krate":0,"index":5697},{"krate":0,"index":5698},{"krate":0,"index":5699},{"krate":0,"index":5700},{"krate":0,"index":5964},{"krate":0,"index":5968},{"krate":0,"index":5971},{"krate":0,"index":5974},{"krate":0,"index":5977},{"krate":0,"index":5981},{"krate":0,"index":5985},{"krate":0,"index":5992},{"krate":0,"index":5701},{"krate":0,"index":5711},{"krate":0,"index":5712},{"krate":0,"index":5714},{"krate":0,"index":5720},{"krate":0,"index":5722},{"krate":0,"index":5725},{"krate":0,"index":5728},{"krate":0,"index":5736},{"krate":0,"index":5739}],"decl_id":null,"docs":" A single-producer, multi-consumer channel that only retains the *last* sent\n value.","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23059,"byte_end":23083,"line_start":247,"line_end":247,"column_start":13,"column_end":37}},{"value":"/ A single-producer, multi-consumer channel that only retains the *last* sent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10852953,"byte_end":10853032,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/ value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853033,"byte_end":10853043,"line_start":2,"line_end":2,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853044,"byte_end":10853047,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ This channel is useful for watching for changes to a value from multiple","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853048,"byte_end":10853124,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ points in the code base, for example, changes to configuration values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853125,"byte_end":10853199,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853200,"byte_end":10853203,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853204,"byte_end":10853215,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853216,"byte_end":10853219,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`channel`] returns a [`Sender`] / [`Receiver`] pair. These are the producer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853220,"byte_end":10853300,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ and sender halves of the channel. The channel is created with an initial","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853301,"byte_end":10853377,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ value. The **latest** value stored in the channel is accessed with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853378,"byte_end":10853448,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ [`Receiver::borrow()`]. Awaiting [`Receiver::changed()`] waits for a new","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853449,"byte_end":10853525,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ value to sent by the [`Sender`] half.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853526,"byte_end":10853567,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853568,"byte_end":10853571,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853572,"byte_end":10853586,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853587,"byte_end":10853590,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853591,"byte_end":10853598,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853599,"byte_end":10853626,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853627,"byte_end":10853630,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853631,"byte_end":10853695,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/     let (tx, mut rx) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853696,"byte_end":10853747,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853748,"byte_end":10853751,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853752,"byte_end":10853785,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/         while rx.changed().await.is_ok() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853786,"byte_end":10853832,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/             println!(\"received = {:?}\", *rx.borrow());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853833,"byte_end":10853891,"line_start":25,"line_end":25,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853892,"byte_end":10853905,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853906,"byte_end":10853917,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853918,"byte_end":10853921,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"world\")?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853922,"byte_end":10853948,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853949,"byte_end":10853961,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853962,"byte_end":10853969,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853970,"byte_end":10853977,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853978,"byte_end":10853981,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Closing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853982,"byte_end":10853995,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10853996,"byte_end":10853999,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [`Sender::is_closed`] and [`Sender::closed`] allow the producer to detect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854000,"byte_end":10854077,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ when all [`Receiver`] handles have been dropped. This indicates that there","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854078,"byte_end":10854156,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ is no further interest in the values being produced and work can be stopped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854157,"byte_end":10854237,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854238,"byte_end":10854241,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Thread safety","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854242,"byte_end":10854261,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854262,"byte_end":10854265,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Both [`Sender`] and [`Receiver`] are thread safe. They can be moved to other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854266,"byte_end":10854346,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ threads and can be used in a concurrent environment. Clones of [`Receiver`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854347,"byte_end":10854426,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ handles may be moved to separate threads and also used concurrently.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854427,"byte_end":10854499,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854500,"byte_end":10854503,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`Sender`]: crate::sync::watch::Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854504,"byte_end":10854546,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ [`Receiver`]: crate::sync::watch::Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854547,"byte_end":10854593,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/ [`Receiver::changed()`]: crate::sync::watch::Receiver::changed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854594,"byte_end":10854660,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"/ [`Receiver::borrow()`]: crate::sync::watch::Receiver::borrow","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854661,"byte_end":10854725,"line_start":49,"line_end":49,"column_start":1,"column_end":65}},{"value":"/ [`channel`]: crate::sync::watch::channel","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854726,"byte_end":10854770,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ [`Sender::is_closed`]: crate::sync::watch::Sender::is_closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854771,"byte_end":10854835,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ [`Sender::closed`]: crate::sync::watch::Sender::closed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10854836,"byte_end":10854894,"line_start":52,"line_end":52,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5964},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855262,"byte_end":10855270,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::watch::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5966},{"krate":0,"index":5967}],"decl_id":null,"docs":" Receives values from the associated [`Sender`](struct@Sender).","sig":null,"attributes":[{"value":"/ Receives values from the associated [`Sender`](struct@Sender).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855096,"byte_end":10855162,"line_start":61,"line_end":61,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855163,"byte_end":10855166,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](fn@channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855167,"byte_end":10855233,"line_start":63,"line_end":63,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5971},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855559,"byte_end":10855565,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::watch::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5973}],"decl_id":null,"docs":" Sends values to the associated [`Receiver`](struct@Receiver).","sig":null,"attributes":[{"value":"/ Sends values to the associated [`Receiver`](struct@Receiver).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855394,"byte_end":10855459,"line_start":73,"line_end":73,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855460,"byte_end":10855463,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Instances are created by the [`channel`](fn@channel) function.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855464,"byte_end":10855530,"line_start":75,"line_end":75,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5977},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855885,"byte_end":10855888,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"Ref","qualname":"::sync::watch::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":5980}],"decl_id":null,"docs":" Returns a reference to the inner value","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855602,"byte_end":10855644,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855645,"byte_end":10855648,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Outstanding borrows hold a read lock on the inner value. This means that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855649,"byte_end":10855725,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/ long lived borrows could cause the produce half to block. It is recommended","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855726,"byte_end":10855805,"line_start":84,"line_end":84,"column_start":1,"column_end":80}},{"value":"/ to keep the borrow as short lived as possible.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10855806,"byte_end":10855856,"line_start":85,"line_end":85,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":5701},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856465,"byte_end":10856470,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"error","qualname":"::sync::watch::error","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","parent":null,"children":[{"krate":0,"index":5702},{"krate":0,"index":5995},{"krate":0,"index":5998},{"krate":0,"index":5703},{"krate":0,"index":5706},{"krate":0,"index":6001},{"krate":0,"index":6004},{"krate":0,"index":5708},{"krate":0,"index":5710}],"decl_id":null,"docs":" Watch error types\n","sig":null,"attributes":[{"value":"/ Watch error types","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856477,"byte_end":10856498,"line_start":113,"line_end":113,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5995},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856606,"byte_end":10856615,"line_start":119,"line_end":119,"column_start":16,"column_end":25},"name":"SendError","qualname":"::sync::watch::error::SendError","value":"SendError {  }","parent":null,"children":[{"krate":0,"index":5997}],"decl_id":null,"docs":" Error produced when sending a value fails.\n","sig":null,"attributes":[{"value":"/ Error produced when sending a value fails.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856523,"byte_end":10856569,"line_start":117,"line_end":117,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6001},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857036,"byte_end":10857045,"line_start":135,"line_end":135,"column_start":16,"column_end":25},"name":"RecvError","qualname":"::sync::watch::error::RecvError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error produced when receiving a change notification.\n","sig":null,"attributes":[{"value":"/ Error produced when receiving a change notification.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856943,"byte_end":10856999,"line_start":133,"line_end":133,"column_start":5,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":5712},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858100,"byte_end":10858107,"line_start":177,"line_end":177,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::watch::channel","value":"pub fn channel<T>(T) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new watch channel, returning the \"send\" and \"receive\" handles.","sig":null,"attributes":[{"value":"/ Creates a new watch channel, returning the \"send\" and \"receive\" handles.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857337,"byte_end":10857413,"line_start":150,"line_end":150,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857414,"byte_end":10857417,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ All values sent by [`Sender`] will become visible to the [`Receiver`] handles.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857418,"byte_end":10857500,"line_start":152,"line_end":152,"column_start":1,"column_end":83}},{"value":"/ Only the last value sent is made available to the [`Receiver`] half. All","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857501,"byte_end":10857577,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ intermediate values are dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857578,"byte_end":10857614,"line_start":154,"line_end":154,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857615,"byte_end":10857618,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857619,"byte_end":10857633,"line_start":156,"line_end":156,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857634,"byte_end":10857637,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857638,"byte_end":10857645,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857646,"byte_end":10857673,"line_start":159,"line_end":159,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857674,"byte_end":10857677,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ # async fn dox() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857678,"byte_end":10857742,"line_start":161,"line_end":161,"column_start":1,"column_end":65}},{"value":"/     let (tx, mut rx) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857743,"byte_end":10857794,"line_start":162,"line_end":162,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857795,"byte_end":10857798,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857799,"byte_end":10857832,"line_start":164,"line_end":164,"column_start":1,"column_end":34}},{"value":"/         while rx.changed().await.is_ok() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857833,"byte_end":10857879,"line_start":165,"line_end":165,"column_start":1,"column_end":47}},{"value":"/             println!(\"received = {:?}\", *rx.borrow());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857880,"byte_end":10857938,"line_start":166,"line_end":166,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857939,"byte_end":10857952,"line_start":167,"line_end":167,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857953,"byte_end":10857964,"line_start":168,"line_end":168,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857965,"byte_end":10857968,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"world\")?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857969,"byte_end":10857995,"line_start":170,"line_end":170,"column_start":1,"column_end":27}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857996,"byte_end":10858008,"line_start":171,"line_end":171,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858009,"byte_end":10858016,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858017,"byte_end":10858024,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858025,"byte_end":10858028,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ [`Sender`]: struct@Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858029,"byte_end":10858058,"line_start":175,"line_end":175,"column_start":1,"column_end":30}},{"value":"/ [`Receiver`]: struct@Receiver","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858059,"byte_end":10858092,"line_start":176,"line_end":176,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5716},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858990,"byte_end":10858996,"line_start":210,"line_end":210,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Receiver<T>>::borrow","value":"pub fn borrow(&Self) -> Ref<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the most recently sent value","sig":null,"attributes":[{"value":"/ Returns a reference to the most recently sent value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858528,"byte_end":10858583,"line_start":196,"line_end":196,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858588,"byte_end":10858591,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Outstanding borrows hold a read lock. This means that long lived borrows","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858596,"byte_end":10858672,"line_start":198,"line_end":198,"column_start":5,"column_end":81}},{"value":"/ could cause the send half to block. It is recommended to keep the borrow","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858677,"byte_end":10858753,"line_start":199,"line_end":199,"column_start":5,"column_end":81}},{"value":"/ as short lived as possible.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858758,"byte_end":10858789,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858794,"byte_end":10858797,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858802,"byte_end":10858816,"line_start":202,"line_end":202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858821,"byte_end":10858824,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858829,"byte_end":10858836,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858841,"byte_end":10858868,"line_start":205,"line_end":205,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858873,"byte_end":10858876,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let (_, rx) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858881,"byte_end":10858923,"line_start":207,"line_end":207,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(*rx.borrow(), \"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858928,"byte_end":10858966,"line_start":208,"line_end":208,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858971,"byte_end":10858978,"line_start":209,"line_end":209,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5717},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859922,"byte_end":10859929,"line_start":243,"line_end":243,"column_start":18,"column_end":25},"name":"changed","qualname":"<Receiver<T>>::changed","value":"pub async fn changed<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Wait for a change notification","sig":null,"attributes":[{"value":"/ Wait for a change notification","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859108,"byte_end":10859142,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859147,"byte_end":10859150,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Returns when a new value has been sent by the [`Sender`] since the last","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859155,"byte_end":10859230,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ time `changed()` was called. When the `Sender` half is dropped, `Err` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859235,"byte_end":10859311,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859316,"byte_end":10859329,"line_start":219,"line_end":219,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859334,"byte_end":10859337,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ [`Sender`]: struct@Sender","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859342,"byte_end":10859371,"line_start":221,"line_end":221,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859376,"byte_end":10859379,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859384,"byte_end":10859398,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859403,"byte_end":10859406,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859411,"byte_end":10859418,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859423,"byte_end":10859450,"line_start":226,"line_end":226,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859455,"byte_end":10859458,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859463,"byte_end":10859481,"line_start":228,"line_end":228,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859486,"byte_end":10859507,"line_start":229,"line_end":229,"column_start":5,"column_end":26}},{"value":"/     let (tx, mut rx) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859512,"byte_end":10859563,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859568,"byte_end":10859571,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859576,"byte_end":10859609,"line_start":232,"line_end":232,"column_start":5,"column_end":38}},{"value":"/         tx.send(\"goodbye\").unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859614,"byte_end":10859654,"line_start":233,"line_end":233,"column_start":5,"column_end":45}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859659,"byte_end":10859670,"line_start":234,"line_end":234,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859675,"byte_end":10859678,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/     assert!(rx.changed().await.is_ok());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859683,"byte_end":10859727,"line_start":236,"line_end":236,"column_start":5,"column_end":49}},{"value":"/     assert_eq!(*rx.borrow(), \"goodbye\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859732,"byte_end":10859776,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859781,"byte_end":10859784,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/     // The `tx` handle has been dropped","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859789,"byte_end":10859832,"line_start":239,"line_end":239,"column_start":5,"column_end":48}},{"value":"/     assert!(rx.changed().await.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859837,"byte_end":10859882,"line_start":240,"line_end":240,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859887,"byte_end":10859892,"line_start":241,"line_end":241,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10859897,"byte_end":10859904,"line_start":242,"line_end":242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5730},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861866,"byte_end":10861870,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(&Self, T) -> Result<(), error::SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends a new value via the channel, notifying all receivers.\n","sig":null,"attributes":[{"value":"/ Sends a new value via the channel, notifying all receivers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861791,"byte_end":10861854,"line_start":307,"line_end":307,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5731},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862897,"byte_end":10862903,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Sender<T>>::borrow","value":"pub fn borrow(&Self) -> Ref<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the most recently sent value","sig":null,"attributes":[{"value":"/ Returns a reference to the most recently sent value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862435,"byte_end":10862490,"line_start":325,"line_end":325,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862495,"byte_end":10862498,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Outstanding borrows hold a read lock. This means that long lived borrows","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862503,"byte_end":10862579,"line_start":327,"line_end":327,"column_start":5,"column_end":81}},{"value":"/ could cause the send half to block. It is recommended to keep the borrow","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862584,"byte_end":10862660,"line_start":328,"line_end":328,"column_start":5,"column_end":81}},{"value":"/ as short lived as possible.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862665,"byte_end":10862696,"line_start":329,"line_end":329,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862701,"byte_end":10862704,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862709,"byte_end":10862723,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862728,"byte_end":10862731,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862736,"byte_end":10862743,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862748,"byte_end":10862775,"line_start":334,"line_end":334,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862780,"byte_end":10862783,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let (tx, _) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862788,"byte_end":10862830,"line_start":336,"line_end":336,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(*tx.borrow(), \"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862835,"byte_end":10862873,"line_start":337,"line_end":337,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10862878,"byte_end":10862885,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5732},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863331,"byte_end":10863340,"line_start":356,"line_end":356,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the channel has been closed. This happens when all receivers\n have dropped.","sig":null,"attributes":[{"value":"/ Checks if the channel has been closed. This happens when all receivers","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863015,"byte_end":10863089,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ have dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863094,"byte_end":10863111,"line_start":345,"line_end":345,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863116,"byte_end":10863119,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863124,"byte_end":10863138,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863143,"byte_end":10863146,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863151,"byte_end":10863158,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ let (tx, rx) = tokio::sync::watch::channel(());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863163,"byte_end":10863214,"line_start":350,"line_end":350,"column_start":5,"column_end":56}},{"value":"/ assert!(!tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863219,"byte_end":10863248,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863253,"byte_end":10863256,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863261,"byte_end":10863274,"line_start":353,"line_end":353,"column_start":5,"column_end":18}},{"value":"/ assert!(tx.is_closed());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863279,"byte_end":10863307,"line_start":354,"line_end":354,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863312,"byte_end":10863319,"line_start":355,"line_end":355,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5733},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864084,"byte_end":10864090,"line_start":384,"line_end":384,"column_start":18,"column_end":24},"name":"closed","qualname":"<Sender<T>>::closed","value":"pub async fn closed<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Completes when all receivers have dropped.","sig":null,"attributes":[{"value":"/ Completes when all receivers have dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863421,"byte_end":10863467,"line_start":360,"line_end":360,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863472,"byte_end":10863475,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This allows the producer to get notified when interest in the produced","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863480,"byte_end":10863554,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ values is canceled and immediately stop doing work.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863559,"byte_end":10863614,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863619,"byte_end":10863622,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863627,"byte_end":10863641,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863646,"byte_end":10863649,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863654,"byte_end":10863661,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ use tokio::sync::watch;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863666,"byte_end":10863693,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863698,"byte_end":10863701,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863706,"byte_end":10863724,"line_start":370,"line_end":370,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863729,"byte_end":10863750,"line_start":371,"line_end":371,"column_start":5,"column_end":26}},{"value":"/     let (tx, rx) = watch::channel(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863755,"byte_end":10863802,"line_start":372,"line_end":372,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863807,"byte_end":10863810,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863815,"byte_end":10863848,"line_start":374,"line_end":374,"column_start":5,"column_end":38}},{"value":"/         // use `rx`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863853,"byte_end":10863876,"line_start":375,"line_end":375,"column_start":5,"column_end":28}},{"value":"/         drop(rx);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863881,"byte_end":10863902,"line_start":376,"line_end":376,"column_start":5,"column_end":26}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863907,"byte_end":10863918,"line_start":377,"line_end":377,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863923,"byte_end":10863926,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/     // Waits for `rx` to drop","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863931,"byte_end":10863964,"line_start":379,"line_end":379,"column_start":5,"column_end":38}},{"value":"/     tx.closed().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10863969,"byte_end":10863995,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/     println!(\"the `rx` handles dropped\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864000,"byte_end":10864044,"line_start":381,"line_end":381,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864049,"byte_end":10864054,"line_start":382,"line_end":382,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864059,"byte_end":10864066,"line_start":383,"line_end":383,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":614},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","parent":null,"children":[{"krate":0,"index":6006},{"krate":0,"index":6007},{"krate":0,"index":6008},{"krate":0,"index":6009},{"krate":0,"index":6011},{"krate":0,"index":6012},{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6023},{"krate":0,"index":6024},{"krate":0,"index":6104},{"krate":0,"index":6105},{"krate":0,"index":6106},{"krate":0,"index":6107},{"krate":0,"index":6168}],"decl_id":null,"docs":" Asynchronous green-threads.","sig":null,"attributes":[{"value":"/ Asynchronous green-threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":124941,"byte_end":124972,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":124973,"byte_end":124976,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## What are Tasks?","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":124977,"byte_end":124999,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125000,"byte_end":125003,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ A _task_ is a light weight, non-blocking unit of execution. A task is similar","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125004,"byte_end":125085,"line_start":5,"line_end":5,"column_start":1,"column_end":82}},{"value":"/ to an OS thread, but rather than being managed by the OS scheduler, they are","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125086,"byte_end":125166,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ managed by the [Tokio runtime][rt]. Another name for this general pattern is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125167,"byte_end":125247,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ [green threads]. If you are familiar with [Go's goroutines], [Kotlin's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125248,"byte_end":125322,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/ coroutines], or [Erlang's processes], you can think of Tokio's tasks as","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125323,"byte_end":125398,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ something similar.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125399,"byte_end":125421,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125422,"byte_end":125425,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Key points about tasks include:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125426,"byte_end":125461,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125462,"byte_end":125465,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * Tasks are **light weight**. Because tasks are scheduled by the Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125466,"byte_end":125540,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/   runtime rather than the operating system, creating new tasks or switching","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125541,"byte_end":125620,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/   between tasks does not require a context switch and has fairly low","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125621,"byte_end":125693,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/   overhead. Creating, running, and destroying large numbers of tasks is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125694,"byte_end":125769,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/   quite cheap, especially compared to OS threads.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125770,"byte_end":125823,"line_start":18,"line_end":18,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125824,"byte_end":125827,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * Tasks are scheduled **cooperatively**. Most operating systems implement","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125828,"byte_end":125905,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/   _preemptive multitasking_. This is a scheduling technique where the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125906,"byte_end":125979,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/   operating system allows each thread to run for a period of time, and then","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":125980,"byte_end":126059,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/   _preempts_ it, temporarily pausing that thread and switching to another.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126060,"byte_end":126138,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/   Tasks, on the other hand, implement _cooperative multitasking_. In","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126139,"byte_end":126211,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   cooperative multitasking, a task is allowed to run until it _yields_,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126212,"byte_end":126287,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/   indicating to the Tokio runtime's scheduler that it cannot currently","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126288,"byte_end":126362,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/   continue executing. When a task yields, the Tokio runtime switches to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126363,"byte_end":126438,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/   executing the next task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126439,"byte_end":126469,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126470,"byte_end":126473,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ * Tasks are **non-blocking**. Typically, when an OS thread performs I/O or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126474,"byte_end":126552,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/   must synchronize with another thread, it _blocks_, allowing the OS to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126553,"byte_end":126628,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/   schedule another thread. When a task cannot continue executing, it must","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126629,"byte_end":126706,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   yield instead, allowing the Tokio runtime to schedule another task. Tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126707,"byte_end":126786,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/   should generally not perform system calls or other operations that could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126787,"byte_end":126865,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/   block a thread, as this would prevent other tasks running on the same","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126866,"byte_end":126941,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/   thread from executing as well. Instead, this module provides APIs for","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":126942,"byte_end":127017,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/   running blocking operations in an asynchronous context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127018,"byte_end":127079,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127080,"byte_end":127083,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [rt]: crate::runtime","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127084,"byte_end":127108,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ [green threads]: https://en.wikipedia.org/wiki/Green_threads","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127109,"byte_end":127173,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ [Go's goroutines]: https://tour.golang.org/concurrency/1","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127174,"byte_end":127234,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ [Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127235,"byte_end":127324,"line_start":42,"line_end":42,"column_start":1,"column_end":90}},{"value":"/ [Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127325,"byte_end":127413,"line_start":43,"line_end":43,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127414,"byte_end":127417,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ## Working with Tasks","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127418,"byte_end":127443,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127444,"byte_end":127447,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This module provides the following APIs for working with tasks:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127448,"byte_end":127515,"line_start":47,"line_end":47,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127516,"byte_end":127519,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ### Spawning","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127520,"byte_end":127536,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127537,"byte_end":127540,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Perhaps the most important function in this module is [`task::spawn`]. This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127541,"byte_end":127620,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ function can be thought of as an async equivalent to the standard library's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127621,"byte_end":127700,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ [`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127701,"byte_end":127780,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ [future], and creates a new task to run that work concurrently:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127781,"byte_end":127848,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127849,"byte_end":127852,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127853,"byte_end":127860,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127861,"byte_end":127881,"line_start":57,"line_end":57,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127882,"byte_end":127885,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # async fn doc() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127886,"byte_end":127908,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/ task::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127909,"byte_end":127932,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/     // perform some work here...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127933,"byte_end":127969,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127970,"byte_end":127977,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127978,"byte_end":127985,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127986,"byte_end":127993,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127994,"byte_end":127997,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Like [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":127998,"byte_end":128077,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ A `JoinHandle` is itself a future which may be used to await the output of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128078,"byte_end":128156,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ the spawned task. For example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128157,"byte_end":128191,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128192,"byte_end":128195,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128196,"byte_end":128203,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128204,"byte_end":128224,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128225,"byte_end":128228,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128229,"byte_end":128309,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ let join = task::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128310,"byte_end":128344,"line_start":74,"line_end":74,"column_start":1,"column_end":35}},{"value":"/     // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128345,"byte_end":128359,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/     \"hello world!\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128360,"byte_end":128382,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128383,"byte_end":128390,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128391,"byte_end":128394,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128395,"byte_end":128405,"line_start":79,"line_end":79,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128406,"byte_end":128409,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ // Await the result of the spawned task.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128410,"byte_end":128454,"line_start":81,"line_end":81,"column_start":1,"column_end":45}},{"value":"/ let result = join.await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128455,"byte_end":128484,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(result, \"hello world!\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128485,"byte_end":128524,"line_start":83,"line_end":83,"column_start":1,"column_end":40}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128525,"byte_end":128537,"line_start":84,"line_end":84,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128538,"byte_end":128545,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128546,"byte_end":128553,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128554,"byte_end":128557,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Again, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128558,"byte_end":128638,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ task panics, awaiting its `JoinHandle` will return a [`JoinError`]`. For","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128639,"byte_end":128715,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128716,"byte_end":128728,"line_start":90,"line_end":90,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128729,"byte_end":128732,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128733,"byte_end":128740,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128741,"byte_end":128761,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128762,"byte_end":128765,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ # #[tokio::main] async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128766,"byte_end":128804,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ let join = task::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128805,"byte_end":128839,"line_start":96,"line_end":96,"column_start":1,"column_end":35}},{"value":"/     panic!(\"something bad happened!\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128840,"byte_end":128881,"line_start":97,"line_end":97,"column_start":1,"column_end":42}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128882,"byte_end":128889,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128890,"byte_end":128893,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // The returned result indicates that the task failed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128894,"byte_end":128952,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/ assert!(join.await.is_err());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128953,"byte_end":128986,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128987,"byte_end":128994,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":128995,"byte_end":129002,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129003,"byte_end":129006,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129007,"byte_end":129075,"line_start":105,"line_end":105,"column_start":1,"column_end":69}},{"value":"/ feature flag is enabled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129076,"byte_end":129104,"line_start":106,"line_end":106,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129105,"byte_end":129108,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`task::spawn`]: crate::task::spawn()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129109,"byte_end":129150,"line_start":108,"line_end":108,"column_start":1,"column_end":42}},{"value":"/ [future]: std::future::Future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129151,"byte_end":129184,"line_start":109,"line_end":109,"column_start":1,"column_end":34}},{"value":"/ [`std::thread::spawn`]: std::thread::spawn","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129185,"byte_end":129231,"line_start":110,"line_end":110,"column_start":1,"column_end":47}},{"value":"/ [`JoinHandle`]: crate::task::JoinHandle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129232,"byte_end":129275,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/ [thread_join]: std::thread::JoinHandle","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129276,"byte_end":129318,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/ [`JoinError`]: crate::task::JoinError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129319,"byte_end":129360,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129361,"byte_end":129364,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ### Blocking and Yielding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129365,"byte_end":129394,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129395,"byte_end":129398,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ As we discussed above, code running in asynchronous tasks should not perform","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129399,"byte_end":129479,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/ operations that can block. A blocking operation performed in a task running","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129480,"byte_end":129559,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/ on a thread that is also running other tasks would block the entire thread,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129560,"byte_end":129639,"line_start":119,"line_end":119,"column_start":1,"column_end":80}},{"value":"/ preventing other tasks from running.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129640,"byte_end":129680,"line_start":120,"line_end":120,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129681,"byte_end":129684,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Instead, Tokio provides two APIs for running blocking operations in an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129685,"byte_end":129759,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"/ asynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129760,"byte_end":129840,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129841,"byte_end":129844,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ #### spawn_blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129845,"byte_end":129868,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129869,"byte_end":129872,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ The `task::spawn_blocking` function is similar to the `task::spawn` function","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129873,"byte_end":129953,"line_start":127,"line_end":127,"column_start":1,"column_end":81}},{"value":"/ discussed in the previous section, but rather than spawning an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":129954,"byte_end":130020,"line_start":128,"line_end":128,"column_start":1,"column_end":67}},{"value":"/ _non-blocking_ future on the Tokio runtime, it instead spawns a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130021,"byte_end":130088,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ _blocking_ function on a dedicated thread pool for blocking tasks. For","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130089,"byte_end":130163,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130164,"byte_end":130176,"line_start":131,"line_end":131,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130177,"byte_end":130180,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130181,"byte_end":130188,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130189,"byte_end":130209,"line_start":134,"line_end":134,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130210,"byte_end":130213,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # async fn docs() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130214,"byte_end":130237,"line_start":136,"line_end":136,"column_start":1,"column_end":24}},{"value":"/ task::spawn_blocking(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130238,"byte_end":130267,"line_start":137,"line_end":137,"column_start":1,"column_end":30}},{"value":"/     // do some compute-heavy work or call synchronous code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130268,"byte_end":130330,"line_start":138,"line_end":138,"column_start":1,"column_end":63}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130331,"byte_end":130338,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130339,"byte_end":130346,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130347,"byte_end":130354,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130355,"byte_end":130358,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Just like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130359,"byte_end":130433,"line_start":143,"line_end":143,"column_start":1,"column_end":75}},{"value":"/ which we can use to await the result of the blocking operation:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130434,"byte_end":130501,"line_start":144,"line_end":144,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130502,"byte_end":130505,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130506,"byte_end":130517,"line_start":146,"line_end":146,"column_start":1,"column_end":12}},{"value":"/ # use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130518,"byte_end":130540,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ # async fn docs() -> Result<(), Box<dyn std::error::Error>>{","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130541,"byte_end":130605,"line_start":148,"line_end":148,"column_start":1,"column_end":65}},{"value":"/ let join = task::spawn_blocking(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130606,"byte_end":130646,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/     // do some compute-heavy work or call synchronous code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130647,"byte_end":130709,"line_start":150,"line_end":150,"column_start":1,"column_end":63}},{"value":"/     \"blocking completed\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130710,"byte_end":130738,"line_start":151,"line_end":151,"column_start":1,"column_end":29}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130739,"byte_end":130746,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130747,"byte_end":130750,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ let result = join.await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130751,"byte_end":130780,"line_start":154,"line_end":154,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(result, \"blocking completed\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130781,"byte_end":130826,"line_start":155,"line_end":155,"column_start":1,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130827,"byte_end":130839,"line_start":156,"line_end":156,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130840,"byte_end":130847,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130848,"byte_end":130855,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130856,"byte_end":130859,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ #### block_in_place","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130860,"byte_end":130883,"line_start":160,"line_end":160,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130884,"byte_end":130887,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ When using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130888,"byte_end":130978,"line_start":162,"line_end":162,"column_start":1,"column_end":91}},{"value":"/ function is also available. Like `task::spawn_blocking`, this function","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":130979,"byte_end":131053,"line_start":163,"line_end":163,"column_start":1,"column_end":75}},{"value":"/ allows running a blocking operation from an asynchronous context. Unlike","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131054,"byte_end":131130,"line_start":164,"line_end":164,"column_start":1,"column_end":77}},{"value":"/ `spawn_blocking`, however, `block_in_place` works by transitioning the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131131,"byte_end":131205,"line_start":165,"line_end":165,"column_start":1,"column_end":75}},{"value":"/ _current_ worker thread to a blocking thread, moving other tasks running on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131206,"byte_end":131285,"line_start":166,"line_end":166,"column_start":1,"column_end":80}},{"value":"/ that thread to another worker thread. This can improve performance by avoiding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131286,"byte_end":131368,"line_start":167,"line_end":167,"column_start":1,"column_end":83}},{"value":"/ context switches.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131369,"byte_end":131390,"line_start":168,"line_end":168,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131391,"byte_end":131394,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ For example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131395,"byte_end":131411,"line_start":170,"line_end":170,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131412,"byte_end":131415,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131416,"byte_end":131423,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131424,"byte_end":131444,"line_start":173,"line_end":173,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131445,"byte_end":131448,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ # async fn docs() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131449,"byte_end":131472,"line_start":175,"line_end":175,"column_start":1,"column_end":24}},{"value":"/ let result = task::block_in_place(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131473,"byte_end":131515,"line_start":176,"line_end":176,"column_start":1,"column_end":43}},{"value":"/     // do some compute-heavy work or call synchronous code","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131516,"byte_end":131578,"line_start":177,"line_end":177,"column_start":1,"column_end":63}},{"value":"/     \"blocking completed\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131579,"byte_end":131607,"line_start":178,"line_end":178,"column_start":1,"column_end":29}},{"value":"/ });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131608,"byte_end":131615,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131616,"byte_end":131619,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(result, \"blocking completed\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131620,"byte_end":131665,"line_start":181,"line_end":181,"column_start":1,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131666,"byte_end":131673,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131674,"byte_end":131681,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131682,"byte_end":131685,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ #### yield_now","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131686,"byte_end":131704,"line_start":185,"line_end":185,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131705,"byte_end":131708,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ In addition, this module provides a [`task::yield_now`] async function","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131709,"byte_end":131783,"line_start":187,"line_end":187,"column_start":1,"column_end":75}},{"value":"/ that is analogous to the standard library's [`thread::yield_now`]. Calling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131784,"byte_end":131862,"line_start":188,"line_end":188,"column_start":1,"column_end":79}},{"value":"/ and `await`ing this function will cause the current task to yield to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131863,"byte_end":131939,"line_start":189,"line_end":189,"column_start":1,"column_end":77}},{"value":"/ Tokio runtime's scheduler, allowing other tasks to be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131940,"byte_end":131997,"line_start":190,"line_end":190,"column_start":1,"column_end":58}},{"value":"/ scheduled. Eventually, the yielding task will be polled again, allowing it","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":131998,"byte_end":132076,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/ to execute. For example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132077,"byte_end":132105,"line_start":192,"line_end":192,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132106,"byte_end":132109,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132110,"byte_end":132121,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132122,"byte_end":132142,"line_start":195,"line_end":195,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132143,"byte_end":132146,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ # #[tokio::main] async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132147,"byte_end":132185,"line_start":197,"line_end":197,"column_start":1,"column_end":39}},{"value":"/ async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132186,"byte_end":132197,"line_start":198,"line_end":198,"column_start":1,"column_end":12}},{"value":"/     task::spawn(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132198,"byte_end":132225,"line_start":199,"line_end":199,"column_start":1,"column_end":28}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132226,"byte_end":132244,"line_start":200,"line_end":200,"column_start":1,"column_end":19}},{"value":"/         println!(\"spawned task done!\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132245,"byte_end":132287,"line_start":201,"line_end":201,"column_start":1,"column_end":43}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132288,"byte_end":132299,"line_start":202,"line_end":202,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132300,"byte_end":132303,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/     // Yield, allowing the newly-spawned task to execute first.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132304,"byte_end":132371,"line_start":204,"line_end":204,"column_start":1,"column_end":68}},{"value":"/     task::yield_now().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132372,"byte_end":132404,"line_start":205,"line_end":205,"column_start":1,"column_end":33}},{"value":"/     println!(\"main task done!\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132405,"byte_end":132441,"line_start":206,"line_end":206,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132442,"byte_end":132447,"line_start":207,"line_end":207,"column_start":1,"column_end":6}},{"value":"/ # .await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132448,"byte_end":132461,"line_start":208,"line_end":208,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132462,"byte_end":132469,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132470,"byte_end":132477,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132478,"byte_end":132481,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ [`task::spawn_blocking`]: crate::task::spawn_blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132482,"byte_end":132539,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ [`task::block_in_place`]: crate::task::block_in_place","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132540,"byte_end":132597,"line_start":213,"line_end":213,"column_start":1,"column_end":58}},{"value":"/ [rt-multi-thread]: ../runtime/index.html#threaded-scheduler","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132598,"byte_end":132661,"line_start":214,"line_end":214,"column_start":1,"column_end":64}},{"value":"/ [`task::yield_now`]: crate::task::yield_now()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132662,"byte_end":132711,"line_start":215,"line_end":215,"column_start":1,"column_end":50}},{"value":"/ [`thread::yield_now`]: std::thread::yield_now","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/mod.rs","byte_start":132712,"byte_end":132761,"line_start":216,"line_end":216,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":6169},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/blocking.rs","byte_start":10871774,"byte_end":10871788,"line_start":109,"line_end":109,"column_start":12,"column_end":26},"name":"spawn_blocking","qualname":"::task::blocking::spawn_blocking","value":"pub fn spawn_blocking<F, R>(F) -> JoinHandle<R> where F: FnOnce() -> R +\nSend + 'static, R: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Runs the provided closure on a thread where blocking is acceptable.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/blocking.rs","byte_start":10871748,"byte_end":10871760,"line_start":108,"line_end":108,"column_start":36,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":6172},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/spawn.rs","byte_start":10875628,"byte_end":10875633,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"spawn","qualname":"::task::spawn::spawn","value":"pub fn spawn<T>(T) -> JoinHandle<T::Output> where T: Future + Send + 'static,\nT::Output: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new asynchronous task, returning a\n [`JoinHandle`](super::JoinHandle) for it.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/spawn.rs","byte_start":10875602,"byte_end":10875614,"line_start":125,"line_end":125,"column_start":36,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":6174},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/yield_now.rs","byte_start":10876701,"byte_end":10876710,"line_start":16,"line_end":16,"column_start":18,"column_end":27},"name":"yield_now","qualname":"::task::yield_now::yield_now","value":"pub async fn yield_now() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Yields execution back to the Tokio runtime.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}},{"value":"must_use = \"yield_now does nothing unless polled/`await`-ed\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/yield_now.rs","byte_start":10876620,"byte_end":10876683,"line_start":15,"line_end":15,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6182},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10881107,"byte_end":10881115,"line_start":112,"line_end":112,"column_start":16,"column_end":24},"name":"LocalSet","qualname":"::task::local::LocalSet","value":"LocalSet {  }","parent":null,"children":[{"krate":0,"index":6183},{"krate":0,"index":6184},{"krate":0,"index":6185}],"decl_id":null,"docs":" A set of tasks which are executed on the same thread.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":6191},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10883209,"byte_end":10883220,"line_start":194,"line_end":194,"column_start":12,"column_end":23},"name":"spawn_local","qualname":"::task::local::spawn_local","value":"pub fn spawn_local<F>(F) -> JoinHandle<F::Output> where F: Future + 'static,\nF::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `!Send` future on the local task set.","sig":null,"attributes":[{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":23366,"byte_end":23388,"line_start":263,"line_end":263,"column_start":13,"column_end":35}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10883183,"byte_end":10883195,"line_start":193,"line_end":193,"column_start":36,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":6059},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884117,"byte_end":10884120,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"new","qualname":"<LocalSet>::new","value":"pub fn new() -> LocalSet","parent":null,"children":[],"decl_id":null,"docs":" Returns a new local task set.\n","sig":null,"attributes":[{"value":"/ Returns a new local task set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884072,"byte_end":10884105,"line_start":223,"line_end":223,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":6060},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885875,"byte_end":10885886,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"spawn_local","qualname":"<LocalSet>::spawn_local","value":"pub fn spawn_local<F>(&Self, F) -> JoinHandle<F::Output> where F: Future +\n'static, F::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `!Send` task onto the local task set.","sig":null,"attributes":[{"value":"/ Spawns a `!Send` task onto the local task set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884662,"byte_end":10884712,"line_start":241,"line_end":241,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884717,"byte_end":10884720,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This task is guaranteed to be run on the current thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884725,"byte_end":10884785,"line_start":243,"line_end":243,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884790,"byte_end":10884793,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Unlike the free function [`spawn_local`], this method may be used to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884798,"byte_end":10884870,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ spawn local tasks when the task set is _not_ running. For example:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884875,"byte_end":10884945,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884950,"byte_end":10884961,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884966,"byte_end":10884986,"line_start":248,"line_end":248,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884991,"byte_end":10884994,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884999,"byte_end":10885017,"line_start":250,"line_end":250,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885022,"byte_end":10885043,"line_start":251,"line_end":251,"column_start":5,"column_end":26}},{"value":"/     let local = task::LocalSet::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885048,"byte_end":10885090,"line_start":252,"line_end":252,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885095,"byte_end":10885098,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/     // Spawn a future on the local set. This future will be run when","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885103,"byte_end":10885175,"line_start":254,"line_end":254,"column_start":5,"column_end":77}},{"value":"/     // we call `run_until` to drive the task set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885180,"byte_end":10885233,"line_start":255,"line_end":255,"column_start":5,"column_end":58}},{"value":"/     local.spawn_local(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885238,"byte_end":10885271,"line_start":256,"line_end":256,"column_start":5,"column_end":38}},{"value":"/        // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885276,"byte_end":10885293,"line_start":257,"line_end":257,"column_start":5,"column_end":22}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885298,"byte_end":10885309,"line_start":258,"line_end":258,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885314,"byte_end":10885317,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/     // Run the local task set.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885322,"byte_end":10885356,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/     local.run_until(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885361,"byte_end":10885397,"line_start":261,"line_end":261,"column_start":5,"column_end":41}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885402,"byte_end":10885420,"line_start":262,"line_end":262,"column_start":5,"column_end":23}},{"value":"/     }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885425,"byte_end":10885442,"line_start":263,"line_end":263,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885447,"byte_end":10885450,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/     // When `run` finishes, we can spawn _more_ futures, which will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885455,"byte_end":10885526,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/     // run in subsequent calls to `run_until`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885531,"byte_end":10885581,"line_start":266,"line_end":266,"column_start":5,"column_end":55}},{"value":"/     local.spawn_local(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885586,"byte_end":10885619,"line_start":267,"line_end":267,"column_start":5,"column_end":38}},{"value":"/        // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885624,"byte_end":10885641,"line_start":268,"line_end":268,"column_start":5,"column_end":22}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885646,"byte_end":10885657,"line_start":269,"line_end":269,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885662,"byte_end":10885665,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/     local.run_until(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885670,"byte_end":10885706,"line_start":271,"line_end":271,"column_start":5,"column_end":41}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885711,"byte_end":10885729,"line_start":272,"line_end":272,"column_start":5,"column_end":23}},{"value":"/     }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885734,"byte_end":10885751,"line_start":273,"line_end":273,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885756,"byte_end":10885761,"line_start":274,"line_end":274,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885766,"byte_end":10885773,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ [`spawn_local`]: fn@spawn_local","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885778,"byte_end":10885813,"line_start":276,"line_end":276,"column_start":5,"column_end":40}},{"value":"track_caller","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10885849,"byte_end":10885861,"line_start":277,"line_end":277,"column_start":36,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":6062},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888684,"byte_end":10888692,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"block_on","qualname":"<LocalSet>::block_on","value":"pub fn block_on<F>(&Self, &crate::runtime::Runtime, F) -> F::Output where\nF: Future","parent":null,"children":[],"decl_id":null,"docs":" Runs a future to completion on the provided runtime, driving any local\n futures spawned on this task set on the current thread.","sig":null,"attributes":[{"value":"/ Runs a future to completion on the provided runtime, driving any local","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886229,"byte_end":10886303,"line_start":289,"line_end":289,"column_start":5,"column_end":79}},{"value":"/ futures spawned on this task set on the current thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886308,"byte_end":10886367,"line_start":290,"line_end":290,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886372,"byte_end":10886375,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This runs the given future on the runtime, blocking until it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886380,"byte_end":10886447,"line_start":292,"line_end":292,"column_start":5,"column_end":72}},{"value":"/ complete, and yielding its resolved result. Any tasks or timers which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886452,"byte_end":10886525,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/ the future spawns internally will be executed on the runtime. The future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886530,"byte_end":10886606,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ may also call [`spawn_local`] to spawn_local additional local futures on the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886611,"byte_end":10886691,"line_start":295,"line_end":295,"column_start":5,"column_end":85}},{"value":"/ current thread.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886696,"byte_end":10886715,"line_start":296,"line_end":296,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886720,"byte_end":10886723,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ This method should not be called from an asynchronous context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886728,"byte_end":10886794,"line_start":298,"line_end":298,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886799,"byte_end":10886802,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886807,"byte_end":10886819,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886824,"byte_end":10886827,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This function panics if the executor is at capacity, if the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886832,"byte_end":10886904,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ future panics, or if called within an asynchronous execution context.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886909,"byte_end":10886982,"line_start":303,"line_end":303,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886987,"byte_end":10886990,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10886995,"byte_end":10887006,"line_start":305,"line_end":305,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887011,"byte_end":10887014,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Since this function internally calls [`Runtime::block_on`], and drives","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887019,"byte_end":10887093,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/ futures in the local task set inside that call to `block_on`, the local","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887098,"byte_end":10887173,"line_start":308,"line_end":308,"column_start":5,"column_end":80}},{"value":"/ futures may not use [in-place blocking]. If a blocking call needs to be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887178,"byte_end":10887253,"line_start":309,"line_end":309,"column_start":5,"column_end":80}},{"value":"/ issued from a local task, the [`spawn_blocking`] API may be used instead.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887258,"byte_end":10887335,"line_start":310,"line_end":310,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887340,"byte_end":10887343,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ For example, this will panic:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887348,"byte_end":10887381,"line_start":312,"line_end":312,"column_start":5,"column_end":38}},{"value":"/ ```should_panic","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887386,"byte_end":10887405,"line_start":313,"line_end":313,"column_start":5,"column_end":24}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887410,"byte_end":10887442,"line_start":314,"line_end":314,"column_start":5,"column_end":37}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887447,"byte_end":10887467,"line_start":315,"line_end":315,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887472,"byte_end":10887475,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let rt  = Runtime::new().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887480,"byte_end":10887518,"line_start":317,"line_end":317,"column_start":5,"column_end":43}},{"value":"/ let local = task::LocalSet::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887523,"byte_end":10887561,"line_start":318,"line_end":318,"column_start":5,"column_end":43}},{"value":"/ local.block_on(&rt, async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887566,"byte_end":10887597,"line_start":319,"line_end":319,"column_start":5,"column_end":36}},{"value":"/     let join = task::spawn_local(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887602,"byte_end":10887646,"line_start":320,"line_end":320,"column_start":5,"column_end":49}},{"value":"/         let blocking_result = task::block_in_place(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887651,"byte_end":10887710,"line_start":321,"line_end":321,"column_start":5,"column_end":64}},{"value":"/             // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887715,"byte_end":10887737,"line_start":322,"line_end":322,"column_start":5,"column_end":27}},{"value":"/         });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887742,"byte_end":10887757,"line_start":323,"line_end":323,"column_start":5,"column_end":20}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887762,"byte_end":10887780,"line_start":324,"line_end":324,"column_start":5,"column_end":23}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887785,"byte_end":10887796,"line_start":325,"line_end":325,"column_start":5,"column_end":16}},{"value":"/     join.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887801,"byte_end":10887829,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/ })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887834,"byte_end":10887840,"line_start":327,"line_end":327,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887845,"byte_end":10887852,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ This, however, will not panic:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887857,"byte_end":10887891,"line_start":329,"line_end":329,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887896,"byte_end":10887903,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use tokio::runtime::Runtime;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887908,"byte_end":10887940,"line_start":331,"line_end":331,"column_start":5,"column_end":37}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887945,"byte_end":10887965,"line_start":332,"line_end":332,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887970,"byte_end":10887973,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ let rt  = Runtime::new().unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10887978,"byte_end":10888016,"line_start":334,"line_end":334,"column_start":5,"column_end":43}},{"value":"/ let local = task::LocalSet::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888021,"byte_end":10888059,"line_start":335,"line_end":335,"column_start":5,"column_end":43}},{"value":"/ local.block_on(&rt, async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888064,"byte_end":10888095,"line_start":336,"line_end":336,"column_start":5,"column_end":36}},{"value":"/     let join = task::spawn_local(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888100,"byte_end":10888144,"line_start":337,"line_end":337,"column_start":5,"column_end":49}},{"value":"/         let blocking_result = task::spawn_blocking(|| {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888149,"byte_end":10888208,"line_start":338,"line_end":338,"column_start":5,"column_end":64}},{"value":"/             // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888213,"byte_end":10888235,"line_start":339,"line_end":339,"column_start":5,"column_end":27}},{"value":"/         }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888240,"byte_end":10888261,"line_start":340,"line_end":340,"column_start":5,"column_end":26}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888266,"byte_end":10888284,"line_start":341,"line_end":341,"column_start":5,"column_end":23}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888289,"byte_end":10888300,"line_start":342,"line_end":342,"column_start":5,"column_end":16}},{"value":"/     join.await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888305,"byte_end":10888333,"line_start":343,"line_end":343,"column_start":5,"column_end":33}},{"value":"/ })","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888338,"byte_end":10888344,"line_start":344,"line_end":344,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888349,"byte_end":10888356,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888361,"byte_end":10888364,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ [`spawn_local`]: fn@spawn_local","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888369,"byte_end":10888404,"line_start":347,"line_end":347,"column_start":5,"column_end":40}},{"value":"/ [`Runtime::block_on`]: method@crate::runtime::Runtime::block_on","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888409,"byte_end":10888476,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/ [in-place blocking]: fn@crate::task::block_in_place","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888481,"byte_end":10888536,"line_start":349,"line_end":349,"column_start":5,"column_end":60}},{"value":"/ [`spawn_blocking`]: fn@crate::task::spawn_blocking","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888541,"byte_end":10888595,"line_start":350,"line_end":350,"column_start":5,"column_end":59}},{"value":"cfg(feature = \"rt\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888600,"byte_end":10888622,"line_start":351,"line_end":351,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":6064},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889939,"byte_end":10889948,"line_start":388,"line_end":388,"column_start":18,"column_end":27},"name":"run_until","qualname":"<LocalSet>::run_until","value":"pub async fn run_until<F, '_>(&'_ Self, F) -> /*impl Trait*/ where F: Future","parent":null,"children":[],"decl_id":null,"docs":" Run a future to completion on the local set, returning its output.","sig":null,"attributes":[{"value":"/ Run a future to completion on the local set, returning its output.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888847,"byte_end":10888917,"line_start":360,"line_end":360,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888922,"byte_end":10888925,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This returns a future that runs the given future with a local set,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10888930,"byte_end":10889000,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ allowing it to call [`spawn_local`] to spawn additional `!Send` futures.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889005,"byte_end":10889081,"line_start":363,"line_end":363,"column_start":5,"column_end":81}},{"value":"/ Any local futures spawned on the local set will be driven in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889086,"byte_end":10889154,"line_start":364,"line_end":364,"column_start":5,"column_end":73}},{"value":"/ background until the future passed to `run_until` completes. When the future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889159,"byte_end":10889239,"line_start":365,"line_end":365,"column_start":5,"column_end":85}},{"value":"/ passed to `run` finishes, any local futures which have not completed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889244,"byte_end":10889316,"line_start":366,"line_end":366,"column_start":5,"column_end":77}},{"value":"/ will remain on the local set, and will be driven on subsequent calls to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889321,"byte_end":10889396,"line_start":367,"line_end":367,"column_start":5,"column_end":80}},{"value":"/ `run_until` or when [awaiting the local set] itself.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889401,"byte_end":10889457,"line_start":368,"line_end":368,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889462,"byte_end":10889465,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889470,"byte_end":10889484,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889489,"byte_end":10889492,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889497,"byte_end":10889508,"line_start":372,"line_end":372,"column_start":5,"column_end":16}},{"value":"/ use tokio::task;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889513,"byte_end":10889533,"line_start":373,"line_end":373,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889538,"byte_end":10889541,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889546,"byte_end":10889564,"line_start":375,"line_end":375,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889569,"byte_end":10889590,"line_start":376,"line_end":376,"column_start":5,"column_end":26}},{"value":"/     task::LocalSet::new().run_until(async {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889595,"byte_end":10889642,"line_start":377,"line_end":377,"column_start":5,"column_end":52}},{"value":"/         task::spawn_local(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889647,"byte_end":10889689,"line_start":378,"line_end":378,"column_start":5,"column_end":47}},{"value":"/             // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889694,"byte_end":10889716,"line_start":379,"line_end":379,"column_start":5,"column_end":27}},{"value":"/         }).await.unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889721,"byte_end":10889751,"line_start":380,"line_end":380,"column_start":5,"column_end":35}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889756,"byte_end":10889774,"line_start":381,"line_end":381,"column_start":5,"column_end":23}},{"value":"/     }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889779,"byte_end":10889796,"line_start":382,"line_end":382,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889801,"byte_end":10889806,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889811,"byte_end":10889818,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889823,"byte_end":10889826,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ [`spawn_local`]: fn@spawn_local","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889831,"byte_end":10889866,"line_start":386,"line_end":386,"column_start":5,"column_end":40}},{"value":"/ [awaiting the local set]: #awaiting-a-localset","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10889871,"byte_end":10889921,"line_start":387,"line_end":387,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":6121},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898957,"byte_end":10898965,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"LocalKey","qualname":"::task::task_local::LocalKey","value":"LocalKey { inner }","parent":null,"children":[{"krate":0,"index":6123}],"decl_id":null,"docs":" A key for task-local data.","sig":null,"attributes":[{"value":"/ A key for task-local data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898078,"byte_end":10898108,"line_start":63,"line_end":63,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898109,"byte_end":10898112,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ This type is generated by the `task_local!` macro.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898113,"byte_end":10898167,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898168,"byte_end":10898171,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Unlike [`std::thread::LocalKey`], `tokio::task::LocalKey` will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898172,"byte_end":10898238,"line_start":67,"line_end":67,"column_start":1,"column_end":67}},{"value":"/ _not_ lazily initialize the value on first access. Instead, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898239,"byte_end":10898306,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"/ value is first initialized when the future containing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898307,"byte_end":10898364,"line_start":69,"line_end":69,"column_start":1,"column_end":58}},{"value":"/ the task-local is first polled by a futures executor, like Tokio.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898365,"byte_end":10898434,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898435,"byte_end":10898438,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898439,"byte_end":10898453,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898454,"byte_end":10898457,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898458,"byte_end":10898465,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ # async fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898466,"byte_end":10898488,"line_start":75,"line_end":75,"column_start":1,"column_end":23}},{"value":"/ tokio::task_local! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898489,"byte_end":10898513,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/     static NUMBER: u32;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898514,"byte_end":10898541,"line_start":77,"line_end":77,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898542,"byte_end":10898547,"line_start":78,"line_end":78,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898548,"byte_end":10898551,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ NUMBER.scope(1, async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898552,"byte_end":10898584,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/     assert_eq!(NUMBER.get(), 1);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898585,"byte_end":10898621,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/ }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898622,"byte_end":10898635,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898636,"byte_end":10898639,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ NUMBER.scope(2, async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898640,"byte_end":10898672,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"/     assert_eq!(NUMBER.get(), 2);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898673,"byte_end":10898709,"line_start":85,"line_end":85,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898710,"byte_end":10898713,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/     NUMBER.scope(3, async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898714,"byte_end":10898750,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/         assert_eq!(NUMBER.get(), 3);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898751,"byte_end":10898791,"line_start":88,"line_end":88,"column_start":1,"column_end":41}},{"value":"/     }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898792,"byte_end":10898809,"line_start":89,"line_end":89,"column_start":1,"column_end":18}},{"value":"/ }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898810,"byte_end":10898823,"line_start":90,"line_end":90,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898824,"byte_end":10898831,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898832,"byte_end":10898839,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ [`std::thread::LocalKey`]: struct@std::thread::LocalKey","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10898840,"byte_end":10898899,"line_start":93,"line_end":93,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6123},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899007,"byte_end":10899012,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"inner","qualname":"::task::task_local::LocalKey::inner","value":"std::thread::LocalKey<std::cell::RefCell<std::option::Option<T>>>","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6126},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899540,"byte_end":10899545,"line_start":118,"line_end":118,"column_start":18,"column_end":23},"name":"scope","qualname":"<LocalKey<T>>::scope","value":"pub async fn scope<F>(&'static Self, T, F) -> /*impl Trait*/ where F: Future","parent":null,"children":[],"decl_id":null,"docs":" Sets a value `T` as the task-local value for the future `F`.","sig":null,"attributes":[{"value":"/ Sets a value `T` as the task-local value for the future `F`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899090,"byte_end":10899154,"line_start":101,"line_end":101,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899159,"byte_end":10899162,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ On completion of `scope`, the task-local will be dropped.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899167,"byte_end":10899228,"line_start":103,"line_end":103,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899233,"byte_end":10899236,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ### Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899241,"byte_end":10899257,"line_start":105,"line_end":105,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899262,"byte_end":10899265,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899270,"byte_end":10899277,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ # async fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899282,"byte_end":10899304,"line_start":108,"line_end":108,"column_start":5,"column_end":27}},{"value":"/ tokio::task_local! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899309,"byte_end":10899333,"line_start":109,"line_end":109,"column_start":5,"column_end":29}},{"value":"/     static NUMBER: u32;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899338,"byte_end":10899365,"line_start":110,"line_end":110,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899370,"byte_end":10899375,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899380,"byte_end":10899383,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ NUMBER.scope(1, async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899388,"byte_end":10899420,"line_start":113,"line_end":113,"column_start":5,"column_end":37}},{"value":"/     println!(\"task local value: {}\", NUMBER.get());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899425,"byte_end":10899480,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/ }).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899485,"byte_end":10899498,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899503,"byte_end":10899510,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899515,"byte_end":10899522,"line_start":117,"line_end":117,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6130},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900019,"byte_end":10900023,"line_start":136,"line_end":136,"column_start":12,"column_end":16},"name":"with","qualname":"<LocalKey<T>>::with","value":"pub fn with<F, R>(&'static Self, F) -> R where F: FnOnce(&T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Accesses the current task-local and runs the provided closure.","sig":null,"attributes":[{"value":"/ Accesses the current task-local and runs the provided closure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899770,"byte_end":10899836,"line_start":130,"line_end":130,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899841,"byte_end":10899844,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899849,"byte_end":10899861,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899866,"byte_end":10899869,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This function will panic if not called within the context","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899874,"byte_end":10899935,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/ of a future containing a task-local with the corresponding key.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899940,"byte_end":10900007,"line_start":135,"line_end":135,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":6133},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900511,"byte_end":10900519,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"try_with","qualname":"<LocalKey<T>>::try_with","value":"pub fn try_with<F, R>(&'static Self, F) -> Result<R, AccessError> where\nF: FnOnce(&T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Accesses the current task-local and runs the provided closure.","sig":null,"attributes":[{"value":"/ Accesses the current task-local and runs the provided closure.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900264,"byte_end":10900330,"line_start":146,"line_end":146,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900335,"byte_end":10900338,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ If the task-local with the accociated key is not present, this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900343,"byte_end":10900409,"line_start":148,"line_end":148,"column_start":5,"column_end":71}},{"value":"/ method will return an `AccessError`. For a panicking variant,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900414,"byte_end":10900479,"line_start":149,"line_end":149,"column_start":5,"column_end":70}},{"value":"/ see `with`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900484,"byte_end":10900499,"line_start":150,"line_end":150,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6139},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900979,"byte_end":10900982,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"get","qualname":"<LocalKey<T>>::get","value":"pub fn get(&'static Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the task-local value\n if the task-local value implements `Copy`.\n","sig":null,"attributes":[{"value":"/ Returns a copy of the task-local value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900874,"byte_end":10900916,"line_start":166,"line_end":166,"column_start":5,"column_end":47}},{"value":"/ if the task-local value implements `Copy`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900921,"byte_end":10900967,"line_start":167,"line_end":167,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6194},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902471,"byte_end":10902482,"line_start":226,"line_end":226,"column_start":12,"column_end":23},"name":"AccessError","qualname":"::task::task_local::AccessError","value":"AccessError {  }","parent":null,"children":[{"krate":0,"index":6195}],"decl_id":null,"docs":" An error returned by [`LocalKey::try_with`](method@LocalKey::try_with).\n","sig":null,"attributes":[{"value":"/ An error returned by [`LocalKey::try_with`](method@LocalKey::try_with).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902346,"byte_end":10902421,"line_start":224,"line_end":224,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":6207},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"time","qualname":"::time","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","parent":null,"children":[{"krate":0,"index":6208},{"krate":0,"index":6209},{"krate":0,"index":6210},{"krate":0,"index":6461},{"krate":0,"index":6462},{"krate":0,"index":6463},{"krate":0,"index":6464},{"krate":0,"index":6465},{"krate":0,"index":6489},{"krate":0,"index":6525},{"krate":0,"index":6526},{"krate":0,"index":6546},{"krate":0,"index":6547},{"krate":0,"index":6548},{"krate":0,"index":6549},{"krate":0,"index":6550},{"krate":0,"index":6577},{"krate":0,"index":6578},{"krate":0,"index":6579},{"krate":0,"index":6580},{"krate":0,"index":6581}],"decl_id":null,"docs":" Utilities for tracking time.","sig":null,"attributes":[{"value":"cfg(feature = \"time\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/cfg.rs","byte_start":24365,"byte_end":24389,"line_start":311,"line_end":311,"column_start":13,"column_end":37}},{"value":"/ Utilities for tracking time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902855,"byte_end":10902887,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902888,"byte_end":10902891,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides a number of types for executing code after a set period","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902892,"byte_end":10902972,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ of time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902973,"byte_end":10902985,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902986,"byte_end":10902989,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ * `Sleep` is a future that does no work and completes at a specific `Instant`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10902990,"byte_end":10903071,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/   in time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903072,"byte_end":10903086,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903087,"byte_end":10903090,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ * `Interval` is a stream yielding a value at a fixed period. It is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903091,"byte_end":10903161,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/   initialized with a `Duration` and repeatedly yields each time the duration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903162,"byte_end":10903242,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/   elapses.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903243,"byte_end":10903257,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903258,"byte_end":10903261,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ * `Timeout`: Wraps a future or stream, setting an upper bound to the amount","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903262,"byte_end":10903341,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/   of time it is allowed to execute. If the future or stream does not","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903342,"byte_end":10903414,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/   complete in time, then it is canceled and an error is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903415,"byte_end":10903484,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903485,"byte_end":10903488,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ These types are sufficient for handling a large number of scenarios","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903489,"byte_end":10903560,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ involving time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903561,"byte_end":10903580,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903581,"byte_end":10903584,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ These types must be used from within the context of the `Runtime`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903585,"byte_end":10903655,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903656,"byte_end":10903659,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903660,"byte_end":10903674,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903675,"byte_end":10903678,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Wait 100ms and print \"100 ms have elapsed\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903679,"byte_end":10903725,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903726,"byte_end":10903729,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903730,"byte_end":10903737,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use tokio::time::sleep;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903738,"byte_end":10903765,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903766,"byte_end":10903769,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903770,"byte_end":10903798,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903799,"byte_end":10903802,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903803,"byte_end":10903806,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903807,"byte_end":10903825,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903826,"byte_end":10903847,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/     sleep(Duration::from_millis(100)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903848,"byte_end":10903896,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/     println!(\"100 ms have elapsed\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903897,"byte_end":10903937,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903938,"byte_end":10903943,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903944,"byte_end":10903951,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903952,"byte_end":10903955,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Require that an operation takes no more than 300ms.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10903956,"byte_end":10904011,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904012,"byte_end":10904015,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904016,"byte_end":10904023,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use tokio::time::{timeout, Duration};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904024,"byte_end":10904065,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904066,"byte_end":10904069,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ async fn long_future() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904070,"byte_end":10904098,"line_start":44,"line_end":44,"column_start":1,"column_end":29}},{"value":"/     // do work here","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904099,"byte_end":10904122,"line_start":45,"line_end":45,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904123,"byte_end":10904128,"line_start":46,"line_end":46,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904129,"byte_end":10904132,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # async fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904133,"byte_end":10904155,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/ let res = timeout(Duration::from_secs(1), long_future()).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904156,"byte_end":10904223,"line_start":49,"line_end":49,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904224,"byte_end":10904227,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ if res.is_err() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904228,"byte_end":10904249,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/     println!(\"operation timed out\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904250,"byte_end":10904290,"line_start":52,"line_end":52,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904291,"byte_end":10904296,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904297,"byte_end":10904304,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904305,"byte_end":10904312,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904313,"byte_end":10904316,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ A simple example using [`interval`] to execute a task every two seconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904317,"byte_end":10904393,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904394,"byte_end":10904397,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The difference between [`interval`] and [`sleep`] is that an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904398,"byte_end":10904462,"line_start":59,"line_end":59,"column_start":1,"column_end":65}},{"value":"/ [`interval`] measures the time since the last tick, which means that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904463,"byte_end":10904535,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ `.tick().await` may wait for a shorter time than the duration specified","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904536,"byte_end":10904611,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ for the interval if some time has passed between calls to `.tick().await`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904612,"byte_end":10904690,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904691,"byte_end":10904694,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ If the tick in the example below was replaced with [`sleep`], the task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904695,"byte_end":10904769,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ would only be executed once every three seconds, and not every two","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904770,"byte_end":10904840,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ seconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904841,"byte_end":10904853,"line_start":66,"line_end":66,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904854,"byte_end":10904857,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904858,"byte_end":10904865,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ use tokio::time;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904866,"byte_end":10904886,"line_start":69,"line_end":69,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904887,"byte_end":10904890,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ async fn task_that_takes_a_second() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904891,"byte_end":10904932,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/     println!(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904933,"byte_end":10904959,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/     time::sleep(time::Duration::from_secs(1)).await","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10904960,"byte_end":10905015,"line_start":73,"line_end":73,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905016,"byte_end":10905021,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905022,"byte_end":10905025,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905026,"byte_end":10905044,"line_start":76,"line_end":76,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905045,"byte_end":10905066,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"/     let interval = time::interval(time::Duration::from_secs(2));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905067,"byte_end":10905135,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/     tokio::pin!(interval);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905136,"byte_end":10905166,"line_start":79,"line_end":79,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905167,"byte_end":10905170,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/     for _i in 0..5 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905171,"byte_end":10905195,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/         interval.as_mut().tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905196,"byte_end":10905239,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/         task_that_takes_a_second().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905240,"byte_end":10905285,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905286,"byte_end":10905295,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905296,"byte_end":10905301,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905302,"byte_end":10905309,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905310,"byte_end":10905313,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [`sleep`]: crate::time::sleep()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905314,"byte_end":10905349,"line_start":88,"line_end":88,"column_start":1,"column_end":36}},{"value":"/ [`interval`]: crate::time::interval()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905350,"byte_end":10905391,"line_start":89,"line_end":89,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":6387},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974529,"byte_end":10974540,"line_start":19,"line_end":19,"column_start":8,"column_end":19},"name":"sleep_until","qualname":"::time::driver::sleep::sleep_until","value":"pub fn sleep_until(Instant) -> Sleep","parent":null,"children":[],"decl_id":null,"docs":" Waits until `deadline` is reached.","sig":null,"attributes":[{"value":"/ Waits until `deadline` is reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974141,"byte_end":10974179,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974180,"byte_end":10974183,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ No work is performed while awaiting on the sleep future to complete. `Sleep`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974184,"byte_end":10974264,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ operates at millisecond granularity and should not be used for tasks that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974265,"byte_end":10974342,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ require high-resolution timers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974343,"byte_end":10974378,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974379,"byte_end":10974382,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Cancellation","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974383,"byte_end":10974401,"line_start":15,"line_end":15,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974402,"byte_end":10974405,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Canceling a sleep instance is done by dropping the returned future. No additional","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974406,"byte_end":10974491,"line_start":17,"line_end":17,"column_start":1,"column_end":86}},{"value":"/ cleanup work is required.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974492,"byte_end":10974521,"line_start":18,"line_end":18,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":6388},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975594,"byte_end":10975599,"line_start":56,"line_end":56,"column_start":8,"column_end":13},"name":"sleep","qualname":"::time::driver::sleep::sleep","value":"pub fn sleep(Duration) -> Sleep","parent":null,"children":[],"decl_id":null,"docs":" Waits until `duration` has elapsed.","sig":null,"attributes":[{"value":"/ Waits until `duration` has elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974607,"byte_end":10974646,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974647,"byte_end":10974650,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `sleep_until(Instant::now() + duration)`. An asynchronous","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974651,"byte_end":10974726,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ analog to `std::thread::sleep`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974727,"byte_end":10974762,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974763,"byte_end":10974766,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ No work is performed while awaiting on the sleep future to complete. `Sleep`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974767,"byte_end":10974847,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ operates at millisecond granularity and should not be used for tasks that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974848,"byte_end":10974925,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ require high-resolution timers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974926,"byte_end":10974961,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974962,"byte_end":10974965,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ To run something regularly on a schedule, see [`interval`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10974966,"byte_end":10975029,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975030,"byte_end":10975033,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The maximum duration for a sleep is 68719476734 milliseconds (approximately 2.2 years).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975034,"byte_end":10975125,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975126,"byte_end":10975129,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Cancellation","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975130,"byte_end":10975148,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975149,"byte_end":10975152,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Canceling a sleep instance is done by dropping the returned future. No additional","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975153,"byte_end":10975238,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ cleanup work is required.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975239,"byte_end":10975268,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975269,"byte_end":10975272,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975273,"byte_end":10975287,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975288,"byte_end":10975291,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Wait 100ms and print \"100 ms have elapsed\".","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975292,"byte_end":10975339,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975340,"byte_end":10975343,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975344,"byte_end":10975351,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ use tokio::time::{sleep, Duration};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975352,"byte_end":10975391,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975392,"byte_end":10975395,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975396,"byte_end":10975414,"line_start":48,"line_end":48,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975415,"byte_end":10975436,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     sleep(Duration::from_millis(100)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975437,"byte_end":10975485,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/     println!(\"100 ms have elapsed\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975486,"byte_end":10975526,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975527,"byte_end":10975532,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975533,"byte_end":10975540,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975541,"byte_end":10975544,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`interval`]: crate::time::interval()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975545,"byte_end":10975586,"line_start":55,"line_end":55,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":7003},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10975886,"byte_end":10975891,"line_start":65,"line_end":65,"column_start":16,"column_end":21},"name":"Sleep","qualname":"::time::driver::sleep::Sleep","value":"Sleep {  }","parent":null,"children":[{"krate":0,"index":7004},{"krate":0,"index":7005}],"decl_id":null,"docs":" Future returned by [`sleep`](sleep) and\n [`sleep_until`](sleep_until).\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6391},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976337,"byte_end":10976345,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"deadline","qualname":"<Sleep>::deadline","value":"pub fn deadline(&Self) -> Instant","parent":null,"children":[],"decl_id":null,"docs":" Returns the instant at which the future will complete.\n","sig":null,"attributes":[{"value":"/ Returns the instant at which the future will complete.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976267,"byte_end":10976325,"line_start":82,"line_end":82,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":6392},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976540,"byte_end":10976550,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"is_elapsed","qualname":"<Sleep>::is_elapsed","value":"pub fn is_elapsed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `Sleep` has elapsed.","sig":null,"attributes":[{"value":"/ Returns `true` if `Sleep` has elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976399,"byte_end":10976441,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976446,"byte_end":10976449,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ A `Sleep` instance is elapsed when the requested duration has elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976454,"byte_end":10976528,"line_start":89,"line_end":89,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":6393},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976932,"byte_end":10976937,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"reset","qualname":"<Sleep>::reset","value":"pub fn reset(Pin<&mut Self>, Instant)","parent":null,"children":[],"decl_id":null,"docs":" Resets the `Sleep` instance to a new deadline.","sig":null,"attributes":[{"value":"/ Resets the `Sleep` instance to a new deadline.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976611,"byte_end":10976661,"line_start":94,"line_end":94,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976666,"byte_end":10976669,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Calling this function allows changing the instant at which the `Sleep`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976674,"byte_end":10976748,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ future completes without having to create new associated state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976753,"byte_end":10976820,"line_start":97,"line_end":97,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976825,"byte_end":10976828,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function can be called both before and after the future has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976833,"byte_end":10976901,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ completed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976906,"byte_end":10976920,"line_start":100,"line_end":100,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":6465},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::time::error","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","parent":null,"children":[{"krate":0,"index":6466},{"krate":0,"index":6467},{"krate":0,"index":6468},{"krate":0,"index":6658},{"krate":0,"index":6664},{"krate":0,"index":6663},{"krate":0,"index":6661},{"krate":0,"index":6666},{"krate":0,"index":6685},{"krate":0,"index":6683},{"krate":0,"index":6682},{"krate":0,"index":6679},{"krate":0,"index":6680},{"krate":0,"index":6676},{"krate":0,"index":6677},{"krate":0,"index":6469},{"krate":0,"index":6687},{"krate":0,"index":6694},{"krate":0,"index":6690},{"krate":0,"index":6691},{"krate":0,"index":6696},{"krate":0,"index":6699},{"krate":0,"index":6471},{"krate":0,"index":6478},{"krate":0,"index":6479},{"krate":0,"index":6482},{"krate":0,"index":6484},{"krate":0,"index":6486},{"krate":0,"index":6487}],"decl_id":null,"docs":" Time error types.\n","sig":null,"attributes":[{"value":"/ Time error types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978226,"byte_end":10978247,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":6658},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979434,"byte_end":10979439,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"Error","qualname":"::time::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Errors encountered by the timer implementation.","sig":null,"attributes":[{"value":"/ Errors encountered by the timer implementation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978299,"byte_end":10978350,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978351,"byte_end":10978354,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Currently, there are two different errors that can occur:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978355,"byte_end":10978416,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978417,"byte_end":10978420,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `shutdown` occurs when a timer operation is attempted, but the timer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978421,"byte_end":10978495,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/   instance has been dropped. In this case, the operation will never be able","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978496,"byte_end":10978575,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/   to complete and the `shutdown` error is returned. This is a permanent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978576,"byte_end":10978651,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/   error, i.e., once this error is observed, timer operations will never","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978652,"byte_end":10978727,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/   succeed in the future.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978728,"byte_end":10978756,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978757,"byte_end":10978760,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * `at_capacity` occurs when a timer operation is attempted, but the timer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978761,"byte_end":10978838,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/   instance is currently handling its maximum number of outstanding sleep instances.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978839,"byte_end":10978926,"line_start":18,"line_end":18,"column_start":1,"column_end":88}},{"value":"/   In this case, the operation is not able to be performed at the current","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10978927,"byte_end":10979003,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/   moment, and `at_capacity` is returned. This is a transient error, i.e., at","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979004,"byte_end":10979084,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/   some point in the future, if the operation is attempted again, it might","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979085,"byte_end":10979162,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   succeed. Callers that observe this error should attempt to [shed load]. One","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979163,"byte_end":10979244,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/   way to do this would be dropping the future that issued the timer operation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979245,"byte_end":10979327,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979328,"byte_end":10979331,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [shed load]: https://en.wikipedia.org/wiki/Load_Shedding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979332,"byte_end":10979392,"line_start":25,"line_end":25,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6687},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979743,"byte_end":10979750,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Elapsed","qualname":"::time::error::Elapsed","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned by `Timeout`.\n","sig":null,"attributes":[{"value":"/ Error returned by `Timeout`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979671,"byte_end":10979703,"line_start":43,"line_end":43,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":6472},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979927,"byte_end":10979935,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<Error>::shutdown","value":"pub fn shutdown() -> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates an error representing a shutdown timer.\n","sig":null,"attributes":[{"value":"/ Creates an error representing a shutdown timer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979864,"byte_end":10979915,"line_start":55,"line_end":55,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":6473},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980067,"byte_end":10980078,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"is_shutdown","qualname":"<Error>::is_shutdown","value":"pub fn is_shutdown(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the error was caused by the timer being shutdown.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the error was caused by the timer being shutdown.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979984,"byte_end":10980055,"line_start":60,"line_end":60,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":6474},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980214,"byte_end":10980225,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"at_capacity","qualname":"<Error>::at_capacity","value":"pub fn at_capacity() -> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates an error representing a timer at capacity.\n","sig":null,"attributes":[{"value":"/ Creates an error representing a timer at capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980148,"byte_end":10980202,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":6475},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980362,"byte_end":10980376,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"is_at_capacity","qualname":"<Error>::is_at_capacity","value":"pub fn is_at_capacity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the error was caused by the timer being at capacity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the error was caused by the timer being at capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980276,"byte_end":10980350,"line_start":70,"line_end":70,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":6476},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980515,"byte_end":10980522,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"invalid","qualname":"<Error>::invalid","value":"pub fn invalid() -> Error","parent":null,"children":[],"decl_id":null,"docs":" Create an error representing a misconfigured timer.\n","sig":null,"attributes":[{"value":"/ Create an error representing a misconfigured timer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980448,"byte_end":10980503,"line_start":75,"line_end":75,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":6477},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980658,"byte_end":10980668,"line_start":81,"line_end":81,"column_start":12,"column_end":22},"name":"is_invalid","qualname":"<Error>::is_invalid","value":"pub fn is_invalid(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the error was caused by the timer being misconfigured.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the error was caused by the timer being misconfigured.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980570,"byte_end":10980646,"line_start":80,"line_end":80,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":6701},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983046,"byte_end":10983053,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"Instant","qualname":"::time::instant::Instant","value":"Instant {  }","parent":null,"children":[{"krate":0,"index":6702}],"decl_id":null,"docs":" A measurement of a monotonically nondecreasing clock.\n Opaque and useful only with `Duration`.","sig":null,"attributes":[{"value":"/ A measurement of a monotonically nondecreasing clock.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10981755,"byte_end":10981812,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/ Opaque and useful only with `Duration`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10981813,"byte_end":10981856,"line_start":8,"line_end":8,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10981857,"byte_end":10981860,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Instants are always guaranteed to be no less than any previously measured","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10981861,"byte_end":10981938,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ instant when created, and are often useful for tasks such as measuring","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10981939,"byte_end":10982013,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ benchmarks or timing how long an operation takes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982014,"byte_end":10982067,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982068,"byte_end":10982071,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Note, however, that instants are not guaranteed to be **steady**. In other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982072,"byte_end":10982150,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ words, each tick of the underlying clock may not be the same length (e.g.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982151,"byte_end":10982228,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ some seconds may be longer than others). An instant may jump forwards or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982229,"byte_end":10982305,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ experience time dilation (slow down or speed up), but it will never go","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982306,"byte_end":10982380,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ backwards.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982381,"byte_end":10982395,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982396,"byte_end":10982399,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Instants are opaque types that can only be compared to one another. There is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982400,"byte_end":10982480,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ no method to get \"the number of seconds\" from an instant. Instead, it only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982481,"byte_end":10982559,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ allows measuring the duration between two instants (or comparing two","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982560,"byte_end":10982632,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ instants).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982633,"byte_end":10982647,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982648,"byte_end":10982651,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The size of an `Instant` struct may vary depending on the target operating","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982652,"byte_end":10982730,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ system.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982731,"byte_end":10982742,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982743,"byte_end":10982746,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982747,"byte_end":10982757,"line_start":28,"line_end":28,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982758,"byte_end":10982761,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This type wraps the inner `std` variant and is used to align the Tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982762,"byte_end":10982836,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ clock for uses of `now()`. This can be useful for testing where you can","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982837,"byte_end":10982912,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ take advantage of `time::pause()` and `time::advance()`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10982913,"byte_end":10982973,"line_start":32,"line_end":32,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":6494},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983300,"byte_end":10983303,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"now","qualname":"<Instant>::now","value":"pub fn now() -> Instant","parent":null,"children":[],"decl_id":null,"docs":" Returns an instant corresponding to \"now\".","sig":null,"attributes":[{"value":"/ Returns an instant corresponding to \"now\".","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983107,"byte_end":10983153,"line_start":39,"line_end":39,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983158,"byte_end":10983161,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983166,"byte_end":10983180,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983185,"byte_end":10983188,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983193,"byte_end":10983200,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use tokio::time::Instant;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983205,"byte_end":10983234,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983239,"byte_end":10983242,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let now = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983247,"byte_end":10983276,"line_start":46,"line_end":46,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983281,"byte_end":10983288,"line_start":47,"line_end":47,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6495},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983429,"byte_end":10983437,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"from_std","qualname":"<Instant>::from_std","value":"pub fn from_std(std::time::Instant) -> Instant","parent":null,"children":[],"decl_id":null,"docs":" Create a `tokio::time::Instant` from a `std::time::Instant`.\n","sig":null,"attributes":[{"value":"/ Create a `tokio::time::Instant` from a `std::time::Instant`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983353,"byte_end":10983417,"line_start":52,"line_end":52,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6496},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983573,"byte_end":10983581,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"into_std","qualname":"<Instant>::into_std","value":"pub fn into_std(Self) -> std::time::Instant","parent":null,"children":[],"decl_id":null,"docs":" Convert the value into a `std::time::Instant`.\n","sig":null,"attributes":[{"value":"/ Convert the value into a `std::time::Instant`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983511,"byte_end":10983561,"line_start":57,"line_end":57,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":6497},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983825,"byte_end":10983839,"line_start":67,"line_end":67,"column_start":12,"column_end":26},"name":"duration_since","qualname":"<Instant>::duration_since","value":"pub fn duration_since(&Self, Instant) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of time elapsed from another instant to this one.","sig":null,"attributes":[{"value":"/ Returns the amount of time elapsed from another instant to this one.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983640,"byte_end":10983712,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983717,"byte_end":10983720,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983725,"byte_end":10983737,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983742,"byte_end":10983745,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This function will panic if `earlier` is later than `self`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983750,"byte_end":10983813,"line_start":66,"line_end":66,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":6498},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984522,"byte_end":10984544,"line_start":88,"line_end":88,"column_start":12,"column_end":34},"name":"checked_duration_since","qualname":"<Instant>::checked_duration_since","value":"pub fn checked_duration_since(&Self, Instant) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of time elapsed from another instant to this one, or\n None if that instant is later than this one.","sig":null,"attributes":[{"value":"/ Returns the amount of time elapsed from another instant to this one, or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983935,"byte_end":10984010,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ None if that instant is later than this one.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984015,"byte_end":10984063,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984068,"byte_end":10984071,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984076,"byte_end":10984090,"line_start":74,"line_end":74,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984095,"byte_end":10984098,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984103,"byte_end":10984110,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use tokio::time::{Duration, Instant, sleep};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984115,"byte_end":10984163,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984168,"byte_end":10984171,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984176,"byte_end":10984194,"line_start":79,"line_end":79,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984199,"byte_end":10984220,"line_start":80,"line_end":80,"column_start":5,"column_end":26}},{"value":"/     let now = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984225,"byte_end":10984258,"line_start":81,"line_end":81,"column_start":5,"column_end":38}},{"value":"/     sleep(Duration::new(1, 0)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984263,"byte_end":10984304,"line_start":82,"line_end":82,"column_start":5,"column_end":46}},{"value":"/     let new_now = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984309,"byte_end":10984346,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/     println!(\"{:?}\", new_now.checked_duration_since(now));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984351,"byte_end":10984413,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"/     println!(\"{:?}\", now.checked_duration_since(new_now)); // None","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984418,"byte_end":10984488,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984493,"byte_end":10984498,"line_start":86,"line_end":86,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984503,"byte_end":10984510,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6499},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985259,"byte_end":10985284,"line_start":109,"line_end":109,"column_start":12,"column_end":37},"name":"saturating_duration_since","qualname":"<Instant>::saturating_duration_since","value":"pub fn saturating_duration_since(&Self, Instant) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of time elapsed from another instant to this one, or\n zero duration if that instant is earlier than this one.","sig":null,"attributes":[{"value":"/ Returns the amount of time elapsed from another instant to this one, or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984656,"byte_end":10984731,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ zero duration if that instant is earlier than this one.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984736,"byte_end":10984795,"line_start":93,"line_end":93,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984800,"byte_end":10984803,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984808,"byte_end":10984822,"line_start":95,"line_end":95,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984827,"byte_end":10984830,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984835,"byte_end":10984842,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"/ use tokio::time::{Duration, Instant, sleep};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984847,"byte_end":10984895,"line_start":98,"line_end":98,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984900,"byte_end":10984903,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984908,"byte_end":10984926,"line_start":100,"line_end":100,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984931,"byte_end":10984952,"line_start":101,"line_end":101,"column_start":5,"column_end":26}},{"value":"/     let now = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984957,"byte_end":10984990,"line_start":102,"line_end":102,"column_start":5,"column_end":38}},{"value":"/     sleep(Duration::new(1, 0)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10984995,"byte_end":10985036,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/     let new_now = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985041,"byte_end":10985078,"line_start":104,"line_end":104,"column_start":5,"column_end":42}},{"value":"/     println!(\"{:?}\", new_now.saturating_duration_since(now));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985083,"byte_end":10985148,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/     println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985153,"byte_end":10985225,"line_start":106,"line_end":106,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985230,"byte_end":10985235,"line_start":107,"line_end":107,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985240,"byte_end":10985247,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6500},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986047,"byte_end":10986054,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"elapsed","qualname":"<Instant>::elapsed","value":"pub fn elapsed(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of time elapsed since this instant was created.","sig":null,"attributes":[{"value":"/ Returns the amount of time elapsed since this instant was created.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985391,"byte_end":10985461,"line_start":113,"line_end":113,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985466,"byte_end":10985469,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985474,"byte_end":10985486,"line_start":115,"line_end":115,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985491,"byte_end":10985494,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This function may panic if the current time is earlier than this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985499,"byte_end":10985567,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ instant, which is something that can happen if an `Instant` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985572,"byte_end":10985638,"line_start":118,"line_end":118,"column_start":5,"column_end":71}},{"value":"/ produced synthetically.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985643,"byte_end":10985670,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985675,"byte_end":10985678,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985683,"byte_end":10985697,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985702,"byte_end":10985705,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985710,"byte_end":10985717,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use tokio::time::{Duration, Instant, sleep};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985722,"byte_end":10985770,"line_start":124,"line_end":124,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985775,"byte_end":10985778,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985783,"byte_end":10985801,"line_start":126,"line_end":126,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985806,"byte_end":10985827,"line_start":127,"line_end":127,"column_start":5,"column_end":26}},{"value":"/     let instant = Instant::now();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985832,"byte_end":10985869,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"/     let three_secs = Duration::from_secs(3);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985874,"byte_end":10985922,"line_start":129,"line_end":129,"column_start":5,"column_end":53}},{"value":"/     sleep(three_secs).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985927,"byte_end":10985959,"line_start":130,"line_end":130,"column_start":5,"column_end":37}},{"value":"/     assert!(instant.elapsed() >= three_secs);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10985964,"byte_end":10986013,"line_start":131,"line_end":131,"column_start":5,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986018,"byte_end":10986023,"line_start":132,"line_end":132,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986028,"byte_end":10986035,"line_start":133,"line_end":133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6501},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986335,"byte_end":10986346,"line_start":141,"line_end":141,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Instant>::checked_add","value":"pub fn checked_add(&Self, Duration) -> Option<Instant>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(t)` where `t` is the time `self + duration` if `t` can be\n represented as `Instant` (which means it's inside the bounds of the\n underlying data structure), `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some(t)` where `t` is the time `self + duration` if `t` can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986118,"byte_end":10986193,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/ represented as `Instant` (which means it's inside the bounds of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986198,"byte_end":10986269,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ underlying data structure), `None` otherwise.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986274,"byte_end":10986323,"line_start":140,"line_end":140,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":6502},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986685,"byte_end":10986696,"line_start":148,"line_end":148,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Instant>::checked_sub","value":"pub fn checked_sub(&Self, Duration) -> Option<Instant>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(t)` where `t` is the time `self - duration` if `t` can be\n represented as `Instant` (which means it's inside the bounds of the\n underlying data structure), `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some(t)` where `t` is the time `self - duration` if `t` can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986468,"byte_end":10986543,"line_start":145,"line_end":145,"column_start":5,"column_end":80}},{"value":"/ represented as `Instant` (which means it's inside the bounds of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986548,"byte_end":10986619,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ underlying data structure), `None` otherwise.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986624,"byte_end":10986673,"line_start":147,"line_end":147,"column_start":5,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":6538},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990140,"byte_end":10990148,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"interval","qualname":"::time::interval::interval","value":"pub fn interval(Duration) -> Interval","parent":null,"children":[],"decl_id":null,"docs":" Creates new `Interval` that yields with interval of `duration`. The first\n tick completes immediately.","sig":null,"attributes":[{"value":"/ Creates new `Interval` that yields with interval of `duration`. The first","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988418,"byte_end":10988495,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ tick completes immediately.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988496,"byte_end":10988527,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988528,"byte_end":10988531,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ An interval will tick indefinitely. At any time, the `Interval` value can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988532,"byte_end":10988612,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ dropped. This cancels the interval.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988613,"byte_end":10988652,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988653,"byte_end":10988656,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This function is equivalent to `interval_at(Instant::now(), period)`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988657,"byte_end":10988730,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988731,"byte_end":10988734,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988735,"byte_end":10988747,"line_start":16,"line_end":16,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988748,"byte_end":10988751,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This function panics if `period` is zero.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988752,"byte_end":10988797,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988798,"byte_end":10988801,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988802,"byte_end":10988816,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988817,"byte_end":10988820,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988821,"byte_end":10988828,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use tokio::time::{self, Duration};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988829,"byte_end":10988867,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988868,"byte_end":10988871,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988872,"byte_end":10988890,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988891,"byte_end":10988912,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/     let mut interval = time::interval(Duration::from_millis(10));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988913,"byte_end":10988982,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988983,"byte_end":10988986,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10988987,"byte_end":10989017,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989018,"byte_end":10989048,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989049,"byte_end":10989079,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989080,"byte_end":10989083,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // approximately 20ms have elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989084,"byte_end":10989127,"line_start":33,"line_end":33,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989128,"byte_end":10989133,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989134,"byte_end":10989141,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989142,"byte_end":10989145,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A simple example using `interval` to execute a task every two seconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989146,"byte_end":10989220,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989221,"byte_end":10989224,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The difference between `interval` and [`sleep`] is that an `interval`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989225,"byte_end":10989298,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ measures the time since the last tick, which means that `.tick().await`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989299,"byte_end":10989374,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ may wait for a shorter time than the duration specified for the interval","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989375,"byte_end":10989451,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ if some time has passed between calls to `.tick().await`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989452,"byte_end":10989513,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989514,"byte_end":10989517,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If the tick in the example below was replaced with [`sleep`], the task","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989518,"byte_end":10989592,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ would only be executed once every three seconds, and not every two","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989593,"byte_end":10989663,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/ seconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989664,"byte_end":10989676,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989677,"byte_end":10989680,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989681,"byte_end":10989688,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use tokio::time;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989689,"byte_end":10989709,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989710,"byte_end":10989713,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ async fn task_that_takes_a_second() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989714,"byte_end":10989755,"line_start":51,"line_end":51,"column_start":1,"column_end":42}},{"value":"/     println!(\"hello\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989756,"byte_end":10989782,"line_start":52,"line_end":52,"column_start":1,"column_end":27}},{"value":"/     time::sleep(time::Duration::from_secs(1)).await","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989783,"byte_end":10989838,"line_start":53,"line_end":53,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989839,"byte_end":10989844,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989845,"byte_end":10989848,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989849,"byte_end":10989867,"line_start":56,"line_end":56,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989868,"byte_end":10989889,"line_start":57,"line_end":57,"column_start":1,"column_end":22}},{"value":"/     let mut interval = time::interval(time::Duration::from_secs(2));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989890,"byte_end":10989962,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/     for _i in 0..5 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989963,"byte_end":10989987,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/         interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10989988,"byte_end":10990022,"line_start":60,"line_end":60,"column_start":1,"column_end":35}},{"value":"/         task_that_takes_a_second().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990023,"byte_end":10990068,"line_start":61,"line_end":61,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990069,"byte_end":10990078,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990079,"byte_end":10990084,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990085,"byte_end":10990092,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990093,"byte_end":10990096,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ [`sleep`]: crate::time::sleep()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990097,"byte_end":10990132,"line_start":66,"line_end":66,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":6539},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991037,"byte_end":10991048,"line_start":100,"line_end":100,"column_start":8,"column_end":19},"name":"interval_at","qualname":"::time::interval::interval_at","value":"pub fn interval_at(Instant, Duration) -> Interval","parent":null,"children":[],"decl_id":null,"docs":" Creates new `Interval` that yields with interval of `period` with the\n first tick completing at `start`.","sig":null,"attributes":[{"value":"/ Creates new `Interval` that yields with interval of `period` with the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990298,"byte_end":10990371,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ first tick completing at `start`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990372,"byte_end":10990409,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990410,"byte_end":10990413,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ An interval will tick indefinitely. At any time, the `Interval` value can be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990414,"byte_end":10990494,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ dropped. This cancels the interval.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990495,"byte_end":10990534,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990535,"byte_end":10990538,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990539,"byte_end":10990551,"line_start":79,"line_end":79,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990552,"byte_end":10990555,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This function panics if `period` is zero.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990556,"byte_end":10990601,"line_start":81,"line_end":81,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990602,"byte_end":10990605,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990606,"byte_end":10990620,"line_start":83,"line_end":83,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990621,"byte_end":10990624,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990625,"byte_end":10990632,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ use tokio::time::{interval_at, Duration, Instant};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990633,"byte_end":10990687,"line_start":86,"line_end":86,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990688,"byte_end":10990691,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990692,"byte_end":10990710,"line_start":88,"line_end":88,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990711,"byte_end":10990732,"line_start":89,"line_end":89,"column_start":1,"column_end":22}},{"value":"/     let start = Instant::now() + Duration::from_millis(50);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990733,"byte_end":10990796,"line_start":90,"line_end":90,"column_start":1,"column_end":64}},{"value":"/     let mut interval = interval_at(start, Duration::from_millis(10));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990797,"byte_end":10990870,"line_start":91,"line_end":91,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990871,"byte_end":10990874,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990875,"byte_end":10990905,"line_start":93,"line_end":93,"column_start":1,"column_end":31}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990906,"byte_end":10990936,"line_start":94,"line_end":94,"column_start":1,"column_end":31}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990937,"byte_end":10990967,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990968,"byte_end":10990971,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/     // approximately 70ms have elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10990972,"byte_end":10991015,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991016,"byte_end":10991021,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991022,"byte_end":10991029,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6724},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991364,"byte_end":10991372,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"Interval","qualname":"::time::interval::Interval","value":"Interval {  }","parent":null,"children":[{"krate":0,"index":6725},{"krate":0,"index":6726}],"decl_id":null,"docs":" Stream returned by [`interval`](interval) and [`interval_at`](interval_at).\n","sig":null,"attributes":[{"value":"/ Stream returned by [`interval`](interval) and [`interval_at`](interval_at).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991256,"byte_end":10991335,"line_start":109,"line_end":109,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":6541},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992105,"byte_end":10992109,"line_start":140,"line_end":140,"column_start":18,"column_end":22},"name":"tick","qualname":"<Interval>::tick","value":"pub async fn tick<'_>(&'_ mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Completes when the next instant in the interval has been reached.","sig":null,"attributes":[{"value":"/ Completes when the next instant in the interval has been reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991583,"byte_end":10991652,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991657,"byte_end":10991660,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991665,"byte_end":10991679,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991684,"byte_end":10991687,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991692,"byte_end":10991699,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/ use tokio::time;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991704,"byte_end":10991724,"line_start":125,"line_end":125,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991729,"byte_end":10991732,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991737,"byte_end":10991765,"line_start":127,"line_end":127,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991770,"byte_end":10991773,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991778,"byte_end":10991796,"line_start":129,"line_end":129,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991801,"byte_end":10991822,"line_start":130,"line_end":130,"column_start":5,"column_end":26}},{"value":"/     let mut interval = time::interval(Duration::from_millis(10));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991827,"byte_end":10991896,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991901,"byte_end":10991904,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991909,"byte_end":10991939,"line_start":133,"line_end":133,"column_start":5,"column_end":35}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991944,"byte_end":10991974,"line_start":134,"line_end":134,"column_start":5,"column_end":35}},{"value":"/     interval.tick().await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991979,"byte_end":10992009,"line_start":135,"line_end":135,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992014,"byte_end":10992017,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/     // approximately 20ms have elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992022,"byte_end":10992065,"line_start":137,"line_end":137,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992070,"byte_end":10992075,"line_start":138,"line_end":138,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992080,"byte_end":10992087,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6545},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992785,"byte_end":10992794,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"poll_tick","qualname":"<Interval>::poll_tick","value":"pub fn poll_tick(&mut Self, &mut Context) -> Poll<Instant>","parent":null,"children":[],"decl_id":null,"docs":" Poll for the next instant in the interval to be reached.","sig":null,"attributes":[{"value":"/ Poll for the next instant in the interval to be reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992192,"byte_end":10992252,"line_start":144,"line_end":144,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992257,"byte_end":10992260,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ This method can return the following values:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992265,"byte_end":10992313,"line_start":146,"line_end":146,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992318,"byte_end":10992321,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/  * `Poll::Pending` if the next instant has not yet been reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992326,"byte_end":10992394,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/  * `Poll::Ready(instant)` if the next instant has been reached.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992399,"byte_end":10992466,"line_start":149,"line_end":149,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992471,"byte_end":10992474,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ When this method returns `Poll::Pending`, the current task is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992479,"byte_end":10992554,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ to receive a wakeup when the instant has elapsed. Note that on multiple","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992559,"byte_end":10992634,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ calls to `poll_tick`, only the `Waker` from the `Context` passed to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992639,"byte_end":10992714,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ most recent call is scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10992719,"byte_end":10992773,"line_start":154,"line_end":154,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":6563},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994641,"byte_end":10994648,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"timeout","qualname":"::time::timeout::timeout","value":"pub fn timeout<T>(Duration, T) -> Timeout<T> where T: Future","parent":null,"children":[],"decl_id":null,"docs":" Require a `Future` to complete before the specified duration has elapsed.","sig":null,"attributes":[{"value":"/ Require a `Future` to complete before the specified duration has elapsed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993626,"byte_end":10993703,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993704,"byte_end":10993707,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If the future completes before the duration has elapsed, then the completed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993708,"byte_end":10993787,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ value is returned. Otherwise, an error is returned and the future is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993788,"byte_end":10993860,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ canceled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993861,"byte_end":10993874,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993875,"byte_end":10993878,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Cancelation","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993879,"byte_end":10993896,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993897,"byte_end":10993900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Cancelling a timeout is done by dropping the future. No additional cleanup","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993901,"byte_end":10993979,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ or other work is required.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10993980,"byte_end":10994010,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994011,"byte_end":10994014,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The original future may be obtained by calling [`Timeout::into_inner`]. This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994015,"byte_end":10994095,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ consumes the `Timeout`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994096,"byte_end":10994123,"line_start":26,"line_end":26,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994124,"byte_end":10994127,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994128,"byte_end":10994142,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994143,"byte_end":10994146,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Create a new `Timeout` set to expire in 10 milliseconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994147,"byte_end":10994207,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994208,"byte_end":10994211,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994212,"byte_end":10994223,"line_start":32,"line_end":32,"column_start":1,"column_end":12}},{"value":"/ use tokio::time::timeout;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994224,"byte_end":10994253,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994254,"byte_end":10994283,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994284,"byte_end":10994287,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994288,"byte_end":10994316,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994317,"byte_end":10994320,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # async fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994321,"byte_end":10994343,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/ let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994344,"byte_end":10994382,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ # tx.send(()).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994383,"byte_end":10994410,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994411,"byte_end":10994414,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Wrap the future with a `Timeout` set to expire in 10 milliseconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994415,"byte_end":10994488,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ if let Err(_) = timeout(Duration::from_millis(10), rx).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994489,"byte_end":10994555,"line_start":43,"line_end":43,"column_start":1,"column_end":67}},{"value":"/     println!(\"did not receive value within 10 ms\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994556,"byte_end":10994611,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994612,"byte_end":10994617,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994618,"byte_end":10994625,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994626,"byte_end":10994633,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":6565},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995860,"byte_end":10995870,"line_start":90,"line_end":90,"column_start":8,"column_end":18},"name":"timeout_at","qualname":"::time::timeout::timeout_at","value":"pub fn timeout_at<T>(Instant, T) -> Timeout<T> where T: Future","parent":null,"children":[],"decl_id":null,"docs":" Require a `Future` to complete before the specified instant in time.","sig":null,"attributes":[{"value":"/ Require a `Future` to complete before the specified instant in time.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994829,"byte_end":10994901,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994902,"byte_end":10994905,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ If the future completes before the instant is reached, then the completed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994906,"byte_end":10994983,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ value is returned. Otherwise, an error is returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10994984,"byte_end":10995039,"line_start":59,"line_end":59,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995040,"byte_end":10995043,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Cancelation","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995044,"byte_end":10995061,"line_start":61,"line_end":61,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995062,"byte_end":10995065,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Cancelling a timeout is done by dropping the future. No additional cleanup","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995066,"byte_end":10995144,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ or other work is required.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995145,"byte_end":10995175,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995176,"byte_end":10995179,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The original future may be obtained by calling [`Timeout::into_inner`]. This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995180,"byte_end":10995260,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ consumes the `Timeout`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995261,"byte_end":10995288,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995289,"byte_end":10995292,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995293,"byte_end":10995307,"line_start":69,"line_end":69,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995308,"byte_end":10995311,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Create a new `Timeout` set to expire in 10 milliseconds.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995312,"byte_end":10995372,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995373,"byte_end":10995376,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995377,"byte_end":10995388,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ use tokio::time::{Instant, timeout_at};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995389,"byte_end":10995432,"line_start":74,"line_end":74,"column_start":1,"column_end":44}},{"value":"/ use tokio::sync::oneshot;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995433,"byte_end":10995462,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995463,"byte_end":10995466,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995467,"byte_end":10995495,"line_start":77,"line_end":77,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995496,"byte_end":10995499,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # async fn dox() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995500,"byte_end":10995522,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"/ let (tx, rx) = oneshot::channel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995523,"byte_end":10995561,"line_start":80,"line_end":80,"column_start":1,"column_end":39}},{"value":"/ # tx.send(()).unwrap();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995562,"byte_end":10995589,"line_start":81,"line_end":81,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995590,"byte_end":10995593,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // Wrap the future with a `Timeout` set to expire 10 milliseconds into the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995594,"byte_end":10995672,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ // future.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995673,"byte_end":10995687,"line_start":84,"line_end":84,"column_start":1,"column_end":15}},{"value":"/ if let Err(_) = timeout_at(Instant::now() + Duration::from_millis(10), rx).await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995688,"byte_end":10995774,"line_start":85,"line_end":85,"column_start":1,"column_end":87}},{"value":"/     println!(\"did not receive value within 10 ms\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995775,"byte_end":10995830,"line_start":86,"line_end":86,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995831,"byte_end":10995836,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995837,"byte_end":10995844,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10995845,"byte_end":10995852,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6965},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996245,"byte_end":10996252,"line_start":106,"line_end":106,"column_start":16,"column_end":23},"name":"Timeout","qualname":"::time::timeout::Timeout","value":"Timeout {  }","parent":null,"children":[{"krate":0,"index":6967},{"krate":0,"index":6968}],"decl_id":null,"docs":" Future returned by [`timeout`](timeout) and [`timeout_at`](timeout_at).\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.4/src/lib.rs","byte_start":11272782,"byte_end":11272791,"line_start":431,"line_end":431,"column_start":11,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6570},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996548,"byte_end":10996555,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Timeout<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value in this timeout.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value in this timeout.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996475,"byte_end":10996536,"line_start":119,"line_end":119,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":6571},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996683,"byte_end":10996690,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Timeout<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value in this timeout.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value in this timeout.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996602,"byte_end":10996671,"line_start":124,"line_end":124,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":6572},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996819,"byte_end":10996829,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Timeout<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this timeout, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this timeout, returning the underlying value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996749,"byte_end":10996807,"line_start":129,"line_end":129,"column_start":5,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":632},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135368,"byte_end":135374,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Handle","qualname":"::util::linked_list::Link::Handle","value":"type Handle;","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Handle to the list entry.","sig":null,"attributes":[{"value":"/ Handle to the list entry.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135277,"byte_end":135306,"line_start":43,"line_end":43,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135311,"byte_end":135314,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This is usually a pointer-ish type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135319,"byte_end":135358,"line_start":45,"line_end":45,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":633},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135404,"byte_end":135410,"line_start":49,"line_end":49,"column_start":10,"column_end":16},"name":"Target","qualname":"::util::linked_list::Link::Target","value":"type Target;","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Node type\n","sig":null,"attributes":[{"value":"/ Node type","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":135381,"byte_end":135394,"line_start":48,"line_end":48,"column_start":5,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":671},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16429,"byte_end":16435,"line_start":444,"line_end":444,"column_start":9,"column_end":15},"name":"stream","qualname":"::stream","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":" Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\n release, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\n crate.","sig":null,"attributes":[{"value":"/ Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14934,"byte_end":15015,"line_start":407,"line_end":407,"column_start":1,"column_end":82}},{"value":"/ release, most of the Tokio stream utilities have been moved into the [`tokio-stream`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15016,"byte_end":15105,"line_start":408,"line_end":408,"column_start":1,"column_end":90}},{"value":"/ crate.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15106,"byte_end":15116,"line_start":409,"line_end":409,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15117,"byte_end":15120,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ # Why was `Stream` not included in Tokio 1.0?","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15121,"byte_end":15170,"line_start":411,"line_end":411,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15171,"byte_end":15174,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ Originally, we had planned to ship Tokio 1.0 with a stable `Stream` type","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15175,"byte_end":15251,"line_start":413,"line_end":413,"column_start":1,"column_end":77}},{"value":"/ but unfortunetly the [RFC] had not been merged in time for `Stream` to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15252,"byte_end":15326,"line_start":414,"line_end":414,"column_start":1,"column_end":75}},{"value":"/ reach `std` on a stable compiler in time for the 1.0 release of Tokio. For","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15327,"byte_end":15405,"line_start":415,"line_end":415,"column_start":1,"column_end":79}},{"value":"/ this reason, the team has decided to move all `Stream` based utilities to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15406,"byte_end":15483,"line_start":416,"line_end":416,"column_start":1,"column_end":78}},{"value":"/ the [`tokio-stream`] crate. While this is not ideal, once `Stream` has made","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15484,"byte_end":15563,"line_start":417,"line_end":417,"column_start":1,"column_end":80}},{"value":"/ it into the standard library and the MSRV period has passed, we will implement","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15564,"byte_end":15646,"line_start":418,"line_end":418,"column_start":1,"column_end":83}},{"value":"/ stream for our different types.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15647,"byte_end":15682,"line_start":419,"line_end":419,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15683,"byte_end":15686,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ While this may seem unfortunate, not all is lost as you can get much of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15687,"byte_end":15766,"line_start":421,"line_end":421,"column_start":1,"column_end":80}},{"value":"/ `Stream` support with `async/await` and `while let` loops. It is also possible","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15767,"byte_end":15849,"line_start":422,"line_end":422,"column_start":1,"column_end":83}},{"value":"/ to create a `impl Stream` from `async fn` using the [`async-stream`] crate.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15850,"byte_end":15929,"line_start":423,"line_end":423,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15930,"byte_end":15933,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ [`tokio-stream`]: https://docs.rs/tokio-stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15934,"byte_end":15984,"line_start":425,"line_end":425,"column_start":1,"column_end":51}},{"value":"/ [`async-stream`]: https://docs.rs/async-stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":15985,"byte_end":16035,"line_start":426,"line_end":426,"column_start":1,"column_end":51}},{"value":"/ [RFC]: https://github.com/rust-lang/rfcs/pull/2996","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16036,"byte_end":16090,"line_start":427,"line_end":427,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16091,"byte_end":16094,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16095,"byte_end":16108,"line_start":429,"line_end":429,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16109,"byte_end":16112,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ Convert a [`sync::mpsc::Receiver`] to an `impl Stream`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16113,"byte_end":16172,"line_start":431,"line_end":431,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16173,"byte_end":16176,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16177,"byte_end":16195,"line_start":433,"line_end":433,"column_start":1,"column_end":19}},{"value":"/ use tokio::sync::mpsc;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16196,"byte_end":16222,"line_start":434,"line_end":434,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16223,"byte_end":16226,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ let (tx, mut rx) = mpsc::channel::<usize>(16);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16227,"byte_end":16277,"line_start":436,"line_end":436,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16278,"byte_end":16281,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/ let stream = async_stream::stream! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16282,"byte_end":16322,"line_start":438,"line_end":438,"column_start":1,"column_end":41}},{"value":"/     while let Some(item) = rx.recv().await {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16323,"byte_end":16371,"line_start":439,"line_end":439,"column_start":1,"column_end":49}},{"value":"/         yield item;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16372,"byte_end":16395,"line_start":440,"line_end":440,"column_start":1,"column_end":24}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16396,"byte_end":16405,"line_start":441,"line_end":441,"column_start":1,"column_end":10}},{"value":"/ };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16406,"byte_end":16412,"line_start":442,"line_end":442,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":16413,"byte_end":16420,"line_start":443,"line_end":443,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30324,"byte_end":30333,"line_start":30,"line_end":30,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30349,"byte_end":30358,"line_start":32,"line_end":32,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30708,"byte_end":30713,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32340,"byte_end":32346,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32560,"byte_end":32566,"line_start":25,"line_end":25,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32708,"byte_end":32714,"line_start":31,"line_end":31,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997249,"byte_end":9997254,"line_start":13,"line_end":13,"column_start":19,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997281,"byte_end":9997286,"line_start":15,"line_end":15,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45551,"byte_end":45554,"line_start":77,"line_end":77,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45714,"byte_end":45717,"line_start":85,"line_end":85,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":46346,"byte_end":46352,"line_start":109,"line_end":109,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":49392,"byte_end":49395,"line_start":72,"line_end":72,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":49538,"byte_end":49541,"line_start":80,"line_end":80,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":50210,"byte_end":50216,"line_start":108,"line_end":108,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53210,"byte_end":53213,"line_start":61,"line_end":61,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53356,"byte_end":53359,"line_start":69,"line_end":69,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53750,"byte_end":53756,"line_start":83,"line_end":83,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":63226,"byte_end":63229,"line_start":213,"line_end":213,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":63377,"byte_end":63380,"line_start":221,"line_end":221,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":64257,"byte_end":64260,"line_start":255,"line_end":255,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":65058,"byte_end":65064,"line_start":286,"line_end":286,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":65867,"byte_end":65873,"line_start":316,"line_end":316,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":66679,"byte_end":66685,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":67486,"byte_end":67492,"line_start":376,"line_end":376,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69533,"byte_end":69540,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":77601,"byte_end":77608,"line_start":258,"line_end":258,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008382,"byte_end":10008390,"line_start":16,"line_end":16,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010531,"byte_end":10010539,"line_start":92,"line_end":92,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010682,"byte_end":10010690,"line_start":101,"line_end":101,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010818,"byte_end":10010826,"line_start":108,"line_end":108,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011411,"byte_end":10011416,"line_start":18,"line_end":18,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10015833,"byte_end":10015838,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016582,"byte_end":10016587,"line_start":196,"line_end":196,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016748,"byte_end":10016753,"line_start":205,"line_end":205,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016881,"byte_end":10016886,"line_start":212,"line_end":212,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10017040,"byte_end":10017045,"line_start":221,"line_end":221,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10017192,"byte_end":10017197,"line_start":230,"line_end":230,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019645,"byte_end":10019657,"line_start":50,"line_end":50,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019682,"byte_end":10019694,"line_start":51,"line_end":51,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019738,"byte_end":10019750,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10025290,"byte_end":10025302,"line_start":213,"line_end":213,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10028705,"byte_end":10028716,"line_start":104,"line_end":104,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10028976,"byte_end":10028987,"line_start":115,"line_end":115,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10029167,"byte_end":10029178,"line_start":124,"line_end":124,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037205,"byte_end":10037216,"line_start":360,"line_end":360,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037305,"byte_end":10037316,"line_start":366,"line_end":366,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037341,"byte_end":10037352,"line_start":367,"line_end":367,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037386,"byte_end":10037397,"line_start":370,"line_end":370,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10038320,"byte_end":10038326,"line_start":395,"line_end":395,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10038821,"byte_end":10038830,"line_start":414,"line_end":414,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043504,"byte_end":10043513,"line_start":523,"line_end":523,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043878,"byte_end":10043887,"line_start":536,"line_end":536,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043920,"byte_end":10043929,"line_start":537,"line_end":537,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10000924,"byte_end":10000930,"line_start":111,"line_end":111,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10003736,"byte_end":10003742,"line_start":203,"line_end":203,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10003857,"byte_end":10003862,"line_start":209,"line_end":209,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004306,"byte_end":10004312,"line_start":224,"line_end":224,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004711,"byte_end":10004717,"line_start":245,"line_end":245,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004867,"byte_end":10004873,"line_start":254,"line_end":254,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10005745,"byte_end":10005751,"line_start":282,"line_end":282,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006568,"byte_end":10006574,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006652,"byte_end":10006658,"line_start":309,"line_end":309,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006793,"byte_end":10006798,"line_start":317,"line_end":317,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10007755,"byte_end":10007764,"line_start":347,"line_end":347,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10047450,"byte_end":10047461,"line_start":76,"line_end":76,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10050070,"byte_end":10050081,"line_start":143,"line_end":143,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051624,"byte_end":10051635,"line_start":190,"line_end":190,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051778,"byte_end":10051789,"line_start":198,"line_end":198,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051961,"byte_end":10051972,"line_start":204,"line_end":204,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058828,"byte_end":10058835,"line_start":164,"line_end":164,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1169},{"krate":0,"index":1171},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1185},{"krate":0,"index":1189},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070803,"byte_end":10070810,"line_start":458,"line_end":458,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070964,"byte_end":10070971,"line_start":464,"line_end":464,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071182,"byte_end":10071189,"line_start":472,"line_end":472,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071289,"byte_end":10071306,"line_start":478,"line_end":478,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073773,"byte_end":10073793,"line_start":539,"line_end":539,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076303,"byte_end":10076320,"line_start":600,"line_end":600,"column_start":60,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076577,"byte_end":10076597,"line_start":608,"line_end":608,"column_start":60,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078639,"byte_end":10078647,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079564,"byte_end":10079573,"line_start":92,"line_end":92,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079823,"byte_end":10079831,"line_start":100,"line_end":100,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10080126,"byte_end":10080135,"line_start":111,"line_end":111,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10080814,"byte_end":10080819,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081212,"byte_end":10081217,"line_start":147,"line_end":147,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081470,"byte_end":10081475,"line_start":155,"line_end":155,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081598,"byte_end":10081606,"line_start":161,"line_end":161,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081643,"byte_end":10081652,"line_start":162,"line_end":162,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081689,"byte_end":10081697,"line_start":163,"line_end":163,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081734,"byte_end":10081743,"line_start":164,"line_end":164,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081786,"byte_end":10081794,"line_start":166,"line_end":166,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081962,"byte_end":10081971,"line_start":172,"line_end":172,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/seek.rs","byte_start":10082928,"byte_end":10082932,"line_start":34,"line_end":34,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10094779,"byte_end":10094780,"line_start":257,"line_end":257,"column_start":52,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10134107,"byte_end":10134108,"line_start":1115,"line_end":1115,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_seek_ext.rs","byte_start":10136217,"byte_end":10136218,"line_start":72,"line_end":72,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10171465,"byte_end":10171466,"line_start":1004,"line_end":1004,"column_start":48,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172834,"byte_end":10172843,"line_start":36,"line_end":36,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174700,"byte_end":10174709,"line_start":98,"line_end":98,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10175519,"byte_end":10175528,"line_start":120,"line_end":120,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10176441,"byte_end":10176450,"line_start":144,"line_end":144,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10176961,"byte_end":10176970,"line_start":162,"line_end":162,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178459,"byte_end":10178468,"line_start":25,"line_end":25,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180305,"byte_end":10180314,"line_start":81,"line_end":81,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180456,"byte_end":10180465,"line_start":87,"line_end":87,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181177,"byte_end":10181186,"line_start":117,"line_end":117,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181716,"byte_end":10181725,"line_start":135,"line_end":135,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1548}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181980,"byte_end":10181989,"line_start":145,"line_end":145,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10183925,"byte_end":10183934,"line_start":40,"line_end":40,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10186212,"byte_end":10186221,"line_start":116,"line_end":116,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187111,"byte_end":10187120,"line_start":145,"line_end":145,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187374,"byte_end":10187383,"line_start":155,"line_end":155,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187670,"byte_end":10187679,"line_start":165,"line_end":165,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10188857,"byte_end":10188862,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190002,"byte_end":10190007,"line_start":69,"line_end":69,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190286,"byte_end":10190291,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190877,"byte_end":10190882,"line_start":107,"line_end":107,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy.rs","byte_start":10193717,"byte_end":10193721,"line_start":73,"line_end":73,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy_buf.rs","byte_start":10197415,"byte_end":10197422,"line_start":67,"line_end":67,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10199689,"byte_end":10199694,"line_start":49,"line_end":49,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10199908,"byte_end":10199913,"line_start":60,"line_end":60,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10200146,"byte_end":10200151,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/flush.rs","byte_start":10201278,"byte_end":10201283,"line_start":36,"line_end":36,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202279,"byte_end":10202284,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203536,"byte_end":10203541,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207819,"byte_end":10207831,"line_start":91,"line_end":91,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10208375,"byte_end":10208387,"line_start":107,"line_end":107,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209085,"byte_end":10209097,"line_start":134,"line_end":134,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209248,"byte_end":10209252,"line_start":143,"line_end":143,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209658,"byte_end":10209662,"line_start":162,"line_end":162,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10210528,"byte_end":10210532,"line_start":189,"line_end":189,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read.rs","byte_start":10212713,"byte_end":10212717,"line_start":43,"line_end":43,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_buf.rs","byte_start":10213851,"byte_end":10213858,"line_start":35,"line_end":35,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1802},{"krate":0,"index":1803}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_exact.rs","byte_start":10216239,"byte_end":10216248,"line_start":47,"line_end":47,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1825},{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_line.rs","byte_start":10225338,"byte_end":10225346,"line_start":111,"line_end":111,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1866},{"krate":0,"index":1867}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_end.rs","byte_start":10228835,"byte_end":10228844,"line_start":104,"line_end":104,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1894},{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_string.rs","byte_start":10231454,"byte_end":10231466,"line_start":71,"line_end":71,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_until.rs","byte_start":10233857,"byte_end":10233866,"line_start":72,"line_end":72,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/repeat.rs","byte_start":10235444,"byte_end":10235450,"line_start":49,"line_end":49,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/shutdown.rs","byte_start":10236829,"byte_end":10236837,"line_start":36,"line_end":36,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10238477,"byte_end":10238481,"line_start":52,"line_end":52,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10238991,"byte_end":10238995,"line_start":73,"line_end":73,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1982}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10239960,"byte_end":10239965,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2000}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240704,"byte_end":10240709,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243022,"byte_end":10243026,"line_start":28,"line_end":28,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244654,"byte_end":10244658,"line_start":77,"line_end":77,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10245302,"byte_end":10245306,"line_start":102,"line_end":102,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write.rs","byte_start":10247105,"byte_end":10247110,"line_start":36,"line_end":36,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2055},{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_all.rs","byte_start":10248145,"byte_end":10248153,"line_start":34,"line_end":34,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_buf.rs","byte_start":10249638,"byte_end":10249646,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80776,"byte_end":80786,"line_start":53,"line_end":53,"column_start":24,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80826,"byte_end":80836,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81138,"byte_end":81150,"line_start":67,"line_end":67,"column_start":24,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81190,"byte_end":81202,"line_start":69,"line_end":69,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81499,"byte_end":81511,"line_start":80,"line_end":80,"column_start":24,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81551,"byte_end":81563,"line_start":82,"line_end":82,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":85894,"byte_end":85900,"line_start":228,"line_end":228,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":85944,"byte_end":85950,"line_start":230,"line_end":230,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87503,"byte_end":87513,"line_start":285,"line_end":285,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2604},{"krate":0,"index":2605}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":88152,"byte_end":88161,"line_start":303,"line_end":303,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2609}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257297,"byte_end":10257308,"line_start":53,"line_end":53,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265604,"byte_end":10265615,"line_start":304,"line_end":304,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265941,"byte_end":10265952,"line_start":316,"line_end":316,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10266158,"byte_end":10266169,"line_start":327,"line_end":327,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269681,"byte_end":10269690,"line_start":89,"line_end":89,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2707}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282331,"byte_end":10282340,"line_start":487,"line_end":487,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2709}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282475,"byte_end":10282484,"line_start":494,"line_end":494,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282594,"byte_end":10282603,"line_start":501,"line_end":501,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2713}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285307,"byte_end":10285315,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2729},{"krate":0,"index":2730}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10288118,"byte_end":10288126,"line_start":139,"line_end":139,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2735}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10288342,"byte_end":10288351,"line_start":149,"line_end":149,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10289268,"byte_end":10289276,"line_start":182,"line_end":182,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2743}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10289370,"byte_end":10289379,"line_start":188,"line_end":188,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292265,"byte_end":10292277,"line_start":86,"line_end":86,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2769}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292480,"byte_end":10292492,"line_start":95,"line_end":95,"column_start":16,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292502,"byte_end":10292515,"line_start":97,"line_end":97,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":2774}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295697,"byte_end":10295710,"line_start":194,"line_end":194,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295911,"byte_end":10295925,"line_start":204,"line_end":204,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2781},{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296608,"byte_end":10296622,"line_start":223,"line_end":223,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2784}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296786,"byte_end":10296800,"line_start":231,"line_end":231,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10297847,"byte_end":10297860,"line_start":268,"line_end":268,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2792}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10297956,"byte_end":10297970,"line_start":274,"line_end":274,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300495,"byte_end":10300504,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2835},{"krate":0,"index":2840},{"krate":0,"index":2843},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2863},{"krate":0,"index":2866},{"krate":0,"index":2869},{"krate":0,"index":2871},{"krate":0,"index":2874},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10330749,"byte_end":10330758,"line_start":956,"line_end":956,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2893},{"krate":0,"index":2894}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10331116,"byte_end":10331125,"line_start":970,"line_end":970,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2896}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10331335,"byte_end":10331344,"line_start":980,"line_end":980,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10332170,"byte_end":10332179,"line_start":1013,"line_end":1013,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2904}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10332383,"byte_end":10332392,"line_start":1024,"line_end":1024,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2909}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337154,"byte_end":10337163,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2935},{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2959},{"krate":0,"index":2961},{"krate":0,"index":2963},{"krate":0,"index":2966},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2973},{"krate":0,"index":2977},{"krate":0,"index":2979},{"krate":0,"index":2981},{"krate":0,"index":2985},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374805,"byte_end":10374814,"line_start":1213,"line_end":1213,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3013},{"krate":0,"index":3014}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10375139,"byte_end":10375148,"line_start":1225,"line_end":1225,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3016}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10375357,"byte_end":10375366,"line_start":1236,"line_end":1236,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3021}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378755,"byte_end":10378767,"line_start":86,"line_end":86,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3095},{"krate":0,"index":3098},{"krate":0,"index":3101},{"krate":0,"index":3104},{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3108},{"krate":0,"index":3109},{"krate":0,"index":3110},{"krate":0,"index":3112},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3125},{"krate":0,"index":3127},{"krate":0,"index":3132},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3140},{"krate":0,"index":3142},{"krate":0,"index":3143},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411289,"byte_end":10411301,"line_start":1086,"line_end":1086,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3150},{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411645,"byte_end":10411657,"line_start":1098,"line_end":1098,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3153}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411772,"byte_end":10411784,"line_start":1104,"line_end":1104,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3155}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413297,"byte_end":10413309,"line_start":48,"line_end":48,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3175},{"krate":0,"index":3177},{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3184}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416363,"byte_end":10416375,"line_start":124,"line_end":124,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3186},{"krate":0,"index":3187}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416710,"byte_end":10416722,"line_start":136,"line_end":136,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416837,"byte_end":10416849,"line_start":142,"line_end":142,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418630,"byte_end":10418638,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3206}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418854,"byte_end":10418863,"line_start":60,"line_end":60,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3212}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10419649,"byte_end":10419657,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10419753,"byte_end":10419762,"line_start":96,"line_end":96,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3216}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422677,"byte_end":10422689,"line_start":85,"line_end":85,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3239}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422892,"byte_end":10422904,"line_start":94,"line_end":94,"column_start":16,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422914,"byte_end":10422927,"line_start":96,"line_end":96,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3242}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423343,"byte_end":10423356,"line_start":107,"line_end":107,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423557,"byte_end":10423571,"line_start":117,"line_end":117,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3246},{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424269,"byte_end":10424283,"line_start":136,"line_end":136,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3249}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424447,"byte_end":10424461,"line_start":144,"line_end":144,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3253},{"krate":0,"index":3254},{"krate":0,"index":3255}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10425505,"byte_end":10425518,"line_start":181,"line_end":181,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10425616,"byte_end":10425630,"line_start":187,"line_end":187,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425851,"byte_end":10425861,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3271},{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426413,"byte_end":10426423,"line_start":27,"line_end":27,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3274}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427842,"byte_end":10427852,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3314},{"krate":0,"index":3319},{"krate":0,"index":3322},{"krate":0,"index":3325},{"krate":0,"index":3327},{"krate":0,"index":3329},{"krate":0,"index":3332},{"krate":0,"index":3334},{"krate":0,"index":3336},{"krate":0,"index":3337},{"krate":0,"index":3338},{"krate":0,"index":3339},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3346}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445055,"byte_end":10445065,"line_start":503,"line_end":503,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3348},{"krate":0,"index":3349}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445378,"byte_end":10445388,"line_start":515,"line_end":515,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3351}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445598,"byte_end":10445608,"line_start":525,"line_end":525,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3353},{"krate":0,"index":3354},{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":3357}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10446373,"byte_end":10446383,"line_start":556,"line_end":556,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10447646,"byte_end":10447656,"line_start":594,"line_end":594,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3363}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10447771,"byte_end":10447781,"line_start":600,"line_end":600,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3365}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448168,"byte_end":10448173,"line_start":14,"line_end":14,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3375}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":91768,"byte_end":91777,"line_start":9,"line_end":9,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":91951,"byte_end":91960,"line_start":16,"line_end":16,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":92107,"byte_end":92116,"line_start":24,"line_end":24,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":92229,"byte_end":92238,"line_start":30,"line_end":30,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92582,"byte_end":92591,"line_start":10,"line_end":10,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92616,"byte_end":92625,"line_start":11,"line_end":11,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92635,"byte_end":92644,"line_start":13,"line_end":13,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":93136,"byte_end":93145,"line_start":30,"line_end":30,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":93430,"byte_end":93439,"line_start":40,"line_end":40,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93780,"byte_end":93789,"line_start":10,"line_end":10,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93814,"byte_end":93823,"line_start":11,"line_end":11,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93833,"byte_end":93842,"line_start":13,"line_end":13,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":94027,"byte_end":94036,"line_start":20,"line_end":20,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":94321,"byte_end":94330,"line_start":30,"line_end":30,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96445,"byte_end":96453,"line_start":10,"line_end":10,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96478,"byte_end":96486,"line_start":11,"line_end":11,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96496,"byte_end":96504,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96685,"byte_end":96693,"line_start":20,"line_end":20,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96977,"byte_end":96985,"line_start":30,"line_end":30,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97325,"byte_end":97336,"line_start":10,"line_end":10,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97361,"byte_end":97372,"line_start":11,"line_end":11,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97382,"byte_end":97393,"line_start":13,"line_end":13,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98082,"byte_end":98093,"line_start":35,"line_end":35,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98383,"byte_end":98394,"line_start":45,"line_end":45,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98558,"byte_end":98569,"line_start":52,"line_end":52,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/mutex.rs","byte_start":98900,"byte_end":98905,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/unsafe_cell.rs","byte_start":99583,"byte_end":99593,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10454081,"byte_end":10454087,"line_start":13,"line_end":13,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3488},{"krate":0,"index":3489}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10455044,"byte_end":10455050,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3493}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10455264,"byte_end":10455270,"line_start":63,"line_end":63,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":104757,"byte_end":104767,"line_start":40,"line_end":40,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":105032,"byte_end":105042,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":105568,"byte_end":105573,"line_start":78,"line_end":78,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110338,"byte_end":110348,"line_start":203,"line_end":203,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110457,"byte_end":110469,"line_start":211,"line_end":211,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110824,"byte_end":110840,"line_start":229,"line_end":229,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112103,"byte_end":112119,"line_start":272,"line_end":272,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112714,"byte_end":112726,"line_start":295,"line_end":295,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112906,"byte_end":112911,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103804,"byte_end":103807,"line_start":106,"line_end":106,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103896,"byte_end":103899,"line_start":112,"line_end":112,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10475764,"byte_end":10475776,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10478722,"byte_end":10478743,"line_start":114,"line_end":114,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3998}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10479459,"byte_end":10479464,"line_start":141,"line_end":141,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4001},{"krate":0,"index":4004}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10481104,"byte_end":10481109,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3536}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10481239,"byte_end":10481244,"line_start":198,"line_end":198,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3538}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10488976,"byte_end":10488982,"line_start":69,"line_end":69,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10489007,"byte_end":10489013,"line_start":70,"line_end":70,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10489372,"byte_end":10489376,"line_start":85,"line_end":85,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3594}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10490154,"byte_end":10490158,"line_start":108,"line_end":108,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3598},{"krate":0,"index":3600},{"krate":0,"index":3602},{"krate":0,"index":3604},{"krate":0,"index":3606},{"krate":0,"index":3608},{"krate":0,"index":3611},{"krate":0,"index":3613},{"krate":0,"index":3615}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496539,"byte_end":10496548,"line_start":18,"line_end":18,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499274,"byte_end":10499283,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3639}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499526,"byte_end":10499535,"line_start":124,"line_end":124,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3641}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499812,"byte_end":10499821,"line_start":133,"line_end":133,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499855,"byte_end":10499860,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3644}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10500538,"byte_end":10500545,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3675}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10501022,"byte_end":10501029,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3679},{"krate":0,"index":3690},{"krate":0,"index":3694},{"krate":0,"index":3697},{"krate":0,"index":3700},{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3705},{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3711}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10503200,"byte_end":10503205,"line_start":94,"line_end":94,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3689}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517460,"byte_end":10517470,"line_start":150,"line_end":150,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517507,"byte_end":10517517,"line_start":151,"line_end":151,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517533,"byte_end":10517543,"line_start":153,"line_end":153,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3728},{"krate":0,"index":3729}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518778,"byte_end":10518788,"line_start":200,"line_end":200,"column_start":19,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518815,"byte_end":10518825,"line_start":202,"line_end":202,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3734},{"krate":0,"index":3735}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10520051,"byte_end":10520061,"line_start":241,"line_end":241,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3738}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10520327,"byte_end":10520337,"line_start":253,"line_end":253,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10521584,"byte_end":10521591,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3767},{"krate":0,"index":3770},{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3776}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10523122,"byte_end":10523129,"line_start":94,"line_end":94,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3778}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10523219,"byte_end":10523226,"line_start":100,"line_end":100,"column_start":15,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10525908,"byte_end":10525913,"line_start":62,"line_end":62,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3820},{"krate":0,"index":3821},{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3828},{"krate":0,"index":3830},{"krate":0,"index":3831},{"krate":0,"index":3833},{"krate":0,"index":3837},{"krate":0,"index":3839},{"krate":0,"index":3841},{"krate":0,"index":3843},{"krate":0,"index":3846},{"krate":0,"index":3847}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10534769,"byte_end":10534777,"line_start":344,"line_end":344,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3856},{"krate":0,"index":3857},{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3863},{"krate":0,"index":3864},{"krate":0,"index":3865},{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3868}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10536654,"byte_end":10536659,"line_start":427,"line_end":427,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3870}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10536818,"byte_end":10536826,"line_start":434,"line_end":434,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3872}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/waker.rs","byte_start":10538644,"byte_end":10538652,"line_start":39,"line_end":39,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3898},{"krate":0,"index":3899}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482239,"byte_end":10482243,"line_start":43,"line_end":43,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482274,"byte_end":10482278,"line_start":44,"line_end":44,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482415,"byte_end":10482423,"line_start":50,"line_end":50,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482464,"byte_end":10482472,"line_start":51,"line_end":51,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10484459,"byte_end":10484463,"line_start":122,"line_end":122,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3947},{"krate":0,"index":3948}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485359,"byte_end":10485363,"line_start":161,"line_end":161,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3951}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485532,"byte_end":10485540,"line_start":168,"line_end":168,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3954},{"krate":0,"index":3955}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485826,"byte_end":10485830,"line_start":181,"line_end":181,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3958}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486070,"byte_end":10486074,"line_start":191,"line_end":191,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3961}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486226,"byte_end":10486234,"line_start":197,"line_end":197,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3964}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486450,"byte_end":10486454,"line_start":206,"line_end":206,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3967},{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3970},{"krate":0,"index":3971}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10542364,"byte_end":10542378,"line_start":96,"line_end":96,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4085},{"krate":0,"index":4088}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10544617,"byte_end":10544622,"line_start":173,"line_end":173,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4091}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10547245,"byte_end":10547250,"line_start":245,"line_end":245,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4109}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10547943,"byte_end":10547957,"line_start":269,"line_end":269,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4113}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549176,"byte_end":10549190,"line_start":307,"line_end":307,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4117}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549356,"byte_end":10549363,"line_start":315,"line_end":315,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4119},{"krate":0,"index":4121},{"krate":0,"index":4122}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549893,"byte_end":10549900,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4124}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10550068,"byte_end":10550071,"line_start":344,"line_end":344,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4126},{"krate":0,"index":4128},{"krate":0,"index":4131}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551160,"byte_end":10551166,"line_start":380,"line_end":380,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4134},{"krate":0,"index":4135}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551628,"byte_end":10551638,"line_start":401,"line_end":401,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4143}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551913,"byte_end":10551923,"line_start":409,"line_end":409,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4147}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10556407,"byte_end":10556419,"line_start":102,"line_end":102,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4204},{"krate":0,"index":4205},{"krate":0,"index":4206}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10558994,"byte_end":10559006,"line_start":172,"line_end":172,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4210}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10559092,"byte_end":10559104,"line_start":178,"line_end":178,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4212}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10559265,"byte_end":10559272,"line_start":186,"line_end":186,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4214},{"krate":0,"index":4215}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10561704,"byte_end":10561709,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4218}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10564948,"byte_end":10564955,"line_start":360,"line_end":360,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4220}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/schedule.rs","byte_start":10565458,"byte_end":10565470,"line_start":11,"line_end":11,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4232},{"krate":0,"index":4233},{"krate":0,"index":4234}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/shutdown.rs","byte_start":10566343,"byte_end":10566351,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4241}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568100,"byte_end":10568112,"line_start":10,"line_end":10,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4254}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568338,"byte_end":10568350,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568380,"byte_end":10568392,"line_start":20,"line_end":20,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4260},{"krate":0,"index":4261}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571507,"byte_end":10571514,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4296},{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4302},{"krate":0,"index":4304},{"krate":0,"index":4305},{"krate":0,"index":4307},{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10582383,"byte_end":10582390,"line_start":446,"line_end":446,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4418}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10582952,"byte_end":10582959,"line_start":470,"line_end":470,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4420}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10584945,"byte_end":10584952,"line_start":533,"line_end":533,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4317}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/context.rs","byte_start":10587421,"byte_end":10587431,"line_start":73,"line_end":73,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4329}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/driver.rs","byte_start":10591883,"byte_end":10591889,"line_start":167,"line_end":167,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4347}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/driver.rs","byte_start":10592454,"byte_end":10592460,"line_start":187,"line_end":187,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594161,"byte_end":10594167,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4371},{"krate":0,"index":4372},{"krate":0,"index":4373},{"krate":0,"index":4374},{"krate":0,"index":4376}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599567,"byte_end":10599582,"line_start":208,"line_end":208,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4383}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599730,"byte_end":10599745,"line_start":214,"line_end":214,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4385}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599903,"byte_end":10599918,"line_start":220,"line_end":220,"column_start":23,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/spawner.rs","byte_start":10600303,"byte_end":10600310,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4392}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/spawner.rs","byte_start":10600552,"byte_end":10600559,"line_start":32,"line_end":32,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4486}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10465323,"byte_end":10465330,"line_start":289,"line_end":289,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4496},{"krate":0,"index":4499},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4503}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":117677,"byte_end":117683,"line_start":65,"line_end":65,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":119043,"byte_end":119053,"line_start":108,"line_end":108,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":120024,"byte_end":120040,"line_start":156,"line_end":156,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4537}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":120172,"byte_end":120188,"line_start":162,"line_end":162,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4539}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":121928,"byte_end":121934,"line_start":203,"line_end":203,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4544},{"krate":0,"index":4545}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618584,"byte_end":10618591,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4551},{"krate":0,"index":4552}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621870,"byte_end":10621887,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4556}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629118,"byte_end":10629127,"line_start":216,"line_end":216,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4593}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629303,"byte_end":10629312,"line_start":222,"line_end":222,"column_start":47,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629960,"byte_end":10629969,"line_start":241,"line_end":241,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4597}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630274,"byte_end":10630283,"line_start":250,"line_end":250,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631206,"byte_end":10631218,"line_start":276,"line_end":276,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4600}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631596,"byte_end":10631608,"line_start":286,"line_end":286,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10633866,"byte_end":10633872,"line_start":382,"line_end":382,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4641}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10633999,"byte_end":10634005,"line_start":388,"line_end":388,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4645}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634166,"byte_end":10634170,"line_start":394,"line_end":394,"column_start":61,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634240,"byte_end":10634244,"line_start":395,"line_end":395,"column_start":61,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637017,"byte_end":10637023,"line_start":485,"line_end":485,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637060,"byte_end":10637066,"line_start":486,"line_end":486,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637104,"byte_end":10637112,"line_start":488,"line_end":488,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637149,"byte_end":10637157,"line_start":489,"line_end":489,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637173,"byte_end":10637179,"line_start":491,"line_end":491,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4665},{"krate":0,"index":4667},{"krate":0,"index":4668},{"krate":0,"index":4669}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10642789,"byte_end":10642793,"line_start":678,"line_end":678,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4675}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643185,"byte_end":10643191,"line_start":693,"line_end":693,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4678}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643371,"byte_end":10643377,"line_start":702,"line_end":702,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4681}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643531,"byte_end":10643539,"line_start":710,"line_end":710,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4684}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648402,"byte_end":10648410,"line_start":828,"line_end":828,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4688},{"krate":0,"index":4691}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652602,"byte_end":10652610,"line_start":945,"line_end":945,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4694}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10653236,"byte_end":10653240,"line_start":968,"line_end":968,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4698},{"krate":0,"index":4699}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10654082,"byte_end":10654086,"line_start":998,"line_end":998,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4703},{"krate":0,"index":4704}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10654772,"byte_end":10654776,"line_start":1019,"line_end":1019,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4708}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10655565,"byte_end":10655571,"line_start":1048,"line_end":1048,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4712},{"krate":0,"index":4713},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4716}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10655986,"byte_end":10655992,"line_start":1065,"line_end":1065,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4719}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656136,"byte_end":10656144,"line_start":1071,"line_end":1071,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4722}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656279,"byte_end":10656288,"line_start":1077,"line_end":1077,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4726}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656461,"byte_end":10656470,"line_start":1086,"line_end":1086,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4731}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10663352,"byte_end":10663357,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4781},{"krate":0,"index":4782},{"krate":0,"index":4783},{"krate":0,"index":4784},{"krate":0,"index":4786},{"krate":0,"index":4788},{"krate":0,"index":4789},{"krate":0,"index":4790},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4798}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10673339,"byte_end":10673345,"line_start":362,"line_end":362,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4803}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10673827,"byte_end":10673833,"line_start":379,"line_end":379,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4806},{"krate":0,"index":4807}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676953,"byte_end":10676961,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4835},{"krate":0,"index":4836},{"krate":0,"index":4841},{"krate":0,"index":4842},{"krate":0,"index":4843}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682030,"byte_end":10682038,"line_start":261,"line_end":261,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4846}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682234,"byte_end":10682242,"line_start":269,"line_end":269,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682258,"byte_end":10682264,"line_start":271,"line_end":271,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4851},{"krate":0,"index":4852},{"krate":0,"index":4855},{"krate":0,"index":4858},{"krate":0,"index":4859},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4864}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693066,"byte_end":10693072,"line_start":604,"line_end":604,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4869}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693204,"byte_end":10693210,"line_start":612,"line_end":612,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4872}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693422,"byte_end":10693428,"line_start":622,"line_end":622,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4875}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694678,"byte_end":10694684,"line_start":665,"line_end":665,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4879}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10695011,"byte_end":10695017,"line_start":680,"line_end":680,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4883}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10695678,"byte_end":10695680,"line_start":19,"line_end":19,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4914}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10695973,"byte_end":10695975,"line_start":30,"line_end":30,"column_start":51,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4922}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10696912,"byte_end":10696916,"line_start":68,"line_end":68,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4940}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697549,"byte_end":10697557,"line_start":92,"line_end":92,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4947}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697823,"byte_end":10697827,"line_start":101,"line_end":101,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697876,"byte_end":10697880,"line_start":102,"line_end":102,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10698387,"byte_end":10698389,"line_start":124,"line_end":124,"column_start":12,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4960},{"krate":0,"index":4961},{"krate":0,"index":4962},{"krate":0,"index":4963}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10698821,"byte_end":10698823,"line_start":144,"line_end":144,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4967},{"krate":0,"index":4968}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10699373,"byte_end":10699375,"line_start":162,"line_end":162,"column_start":22,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4974}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10699714,"byte_end":10699716,"line_start":174,"line_end":174,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4978}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10700039,"byte_end":10700041,"line_start":190,"line_end":190,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4982},{"krate":0,"index":4983},{"krate":0,"index":4985}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10703432,"byte_end":10703434,"line_start":287,"line_end":287,"column_start":32,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4992}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10703846,"byte_end":10703850,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4998}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10704035,"byte_end":10704039,"line_start":315,"line_end":315,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":5002}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10705040,"byte_end":10705051,"line_start":355,"line_end":355,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5015},{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10706792,"byte_end":10706794,"line_start":54,"line_end":54,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":5047},{"krate":0,"index":5048},{"krate":0,"index":5049},{"krate":0,"index":5051}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10712498,"byte_end":10712500,"line_start":211,"line_end":211,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5054}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10712777,"byte_end":10712779,"line_start":220,"line_end":220,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":5057},{"krate":0,"index":5058},{"krate":0,"index":5059},{"krate":0,"index":5060}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10716178,"byte_end":10716180,"line_start":331,"line_end":331,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5063}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716838,"byte_end":10716853,"line_start":16,"line_end":16,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5077}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716994,"byte_end":10717009,"line_start":24,"line_end":24,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5080}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717467,"byte_end":10717484,"line_start":41,"line_end":41,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5086}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718483,"byte_end":10718500,"line_start":71,"line_end":71,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5098},{"krate":0,"index":5099},{"krate":0,"index":5100}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721798,"byte_end":10721813,"line_start":179,"line_end":179,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5103},{"krate":0,"index":5104},{"krate":0,"index":5105},{"krate":0,"index":5110},{"krate":0,"index":5113}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725503,"byte_end":10725512,"line_start":10,"line_end":10,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5123}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725672,"byte_end":10725681,"line_start":16,"line_end":16,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726167,"byte_end":10726179,"line_start":33,"line_end":33,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726212,"byte_end":10726224,"line_start":35,"line_end":35,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5130}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726564,"byte_end":10726576,"line_start":48,"line_end":48,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5133}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726805,"byte_end":10726814,"line_start":60,"line_end":60,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5135}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726944,"byte_end":10726953,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728454,"byte_end":10728470,"line_start":116,"line_end":116,"column_start":35,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728507,"byte_end":10728523,"line_start":118,"line_end":118,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5826}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734894,"byte_end":10734899,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734953,"byte_end":10734958,"line_start":160,"line_end":160,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735012,"byte_end":10735022,"line_start":161,"line_end":161,"column_start":25,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735087,"byte_end":10735102,"line_start":162,"line_end":162,"column_start":25,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735389,"byte_end":10735401,"line_start":172,"line_end":172,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5167}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735538,"byte_end":10735550,"line_start":178,"line_end":178,"column_start":16,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736358,"byte_end":10736363,"line_start":204,"line_end":204,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":5171},{"krate":0,"index":5172},{"krate":0,"index":5175},{"krate":0,"index":5178},{"krate":0,"index":5182},{"krate":0,"index":5183},{"krate":0,"index":5184},{"krate":0,"index":5185}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742116,"byte_end":10742121,"line_start":407,"line_end":407,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5188}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742205,"byte_end":10742210,"line_start":413,"line_end":413,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5191}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742334,"byte_end":10742339,"line_start":422,"line_end":422,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5194}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742734,"byte_end":10742744,"line_start":438,"line_end":438,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5197}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742845,"byte_end":10742855,"line_start":444,"line_end":444,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5200},{"krate":0,"index":5201}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743002,"byte_end":10743012,"line_start":451,"line_end":451,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5204}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743169,"byte_end":10743179,"line_start":457,"line_end":457,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5207}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743345,"byte_end":10743355,"line_start":463,"line_end":463,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5210}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743533,"byte_end":10743548,"line_start":471,"line_end":471,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5213}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743645,"byte_end":10743660,"line_start":477,"line_end":477,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5216},{"krate":0,"index":5217}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743803,"byte_end":10743818,"line_start":484,"line_end":484,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5220}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743971,"byte_end":10743986,"line_start":490,"line_end":490,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5223}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10744148,"byte_end":10744163,"line_start":496,"line_end":496,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5226}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749026,"byte_end":10749034,"line_start":156,"line_end":156,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749067,"byte_end":10749075,"line_start":157,"line_end":157,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749905,"byte_end":10749911,"line_start":195,"line_end":195,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":5264},{"krate":0,"index":5265},{"krate":0,"index":5266},{"krate":0,"index":5267}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10758487,"byte_end":10758493,"line_start":455,"line_end":455,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5271}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10760403,"byte_end":10760411,"line_start":510,"line_end":510,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5274}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10760924,"byte_end":10760932,"line_start":526,"line_end":526,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":5276},{"krate":0,"index":5277}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10766628,"byte_end":10766636,"line_start":668,"line_end":668,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5280}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10769691,"byte_end":10769697,"line_start":732,"line_end":732,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5286},{"krate":0,"index":5287}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771573,"byte_end":10771582,"line_start":54,"line_end":54,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5313}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771744,"byte_end":10771753,"line_start":60,"line_end":60,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771822,"byte_end":10771834,"line_start":64,"line_end":64,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5316}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772133,"byte_end":10772145,"line_start":73,"line_end":73,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773931,"byte_end":10773937,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5329},{"krate":0,"index":5332},{"krate":0,"index":5337},{"krate":0,"index":5338}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781600,"byte_end":10781606,"line_start":395,"line_end":395,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5342}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781745,"byte_end":10781753,"line_start":403,"line_end":403,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5345},{"krate":0,"index":5346}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786144,"byte_end":10786152,"line_start":552,"line_end":552,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5349}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786299,"byte_end":10786307,"line_start":560,"line_end":560,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5352},{"krate":0,"index":5353}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786770,"byte_end":10786775,"line_start":576,"line_end":576,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5356},{"krate":0,"index":5357},{"krate":0,"index":5359},{"krate":0,"index":5360},{"krate":0,"index":5362},{"krate":0,"index":5366},{"krate":0,"index":5370},{"krate":0,"index":5372},{"krate":0,"index":5374},{"krate":0,"index":5376}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791147,"byte_end":10791152,"line_start":722,"line_end":722,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791189,"byte_end":10791194,"line_start":723,"line_end":723,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791219,"byte_end":10791224,"line_start":725,"line_end":725,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5384}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791593,"byte_end":10791598,"line_start":743,"line_end":743,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5388}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791993,"byte_end":10791998,"line_start":758,"line_end":758,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":5395},{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5401},{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5405},{"krate":0,"index":5406},{"krate":0,"index":5407}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10793711,"byte_end":10793716,"line_start":824,"line_end":824,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5409}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10797775,"byte_end":10797784,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5450},{"krate":0,"index":5451},{"krate":0,"index":5452},{"krate":0,"index":5453},{"krate":0,"index":5454},{"krate":0,"index":5455},{"krate":0,"index":5456},{"krate":0,"index":5458},{"krate":0,"index":5459},{"krate":0,"index":5460},{"krate":0,"index":5461},{"krate":0,"index":5465}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10808809,"byte_end":10808818,"line_start":397,"line_end":397,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5469}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10809017,"byte_end":10809023,"line_start":405,"line_end":405,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":5471},{"krate":0,"index":5472}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10809889,"byte_end":10809896,"line_start":434,"line_end":434,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5474},{"krate":0,"index":5475}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10810574,"byte_end":10810581,"line_start":458,"line_end":458,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5478},{"krate":0,"index":5479}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10811380,"byte_end":10811387,"line_start":488,"line_end":488,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":5483}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812637,"byte_end":10812644,"line_start":518,"line_end":518,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812691,"byte_end":10812703,"line_start":522,"line_end":522,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5486}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812796,"byte_end":10812808,"line_start":528,"line_end":528,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5488}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812952,"byte_end":10812964,"line_start":534,"line_end":534,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813011,"byte_end":10813026,"line_start":538,"line_end":538,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":5491},{"krate":0,"index":5492}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813544,"byte_end":10813559,"line_start":553,"line_end":553,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5494}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813845,"byte_end":10813860,"line_start":562,"line_end":562,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813953,"byte_end":10813959,"line_start":567,"line_end":567,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5497},{"krate":0,"index":5498},{"krate":0,"index":5499},{"krate":0,"index":5500},{"krate":0,"index":5501}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816629,"byte_end":10816638,"line_start":61,"line_end":61,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5512},{"krate":0,"index":5513},{"krate":0,"index":5514},{"krate":0,"index":5515},{"krate":0,"index":5518},{"krate":0,"index":5521},{"krate":0,"index":5522},{"krate":0,"index":5523},{"krate":0,"index":5526},{"krate":0,"index":5527}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822976,"byte_end":10822991,"line_start":234,"line_end":234,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":5530}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823236,"byte_end":10823256,"line_start":243,"line_end":243,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5532}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823510,"byte_end":10823525,"line_start":252,"line_end":252,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5535}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823633,"byte_end":10823653,"line_start":258,"line_end":258,"column_start":15,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5537}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827008,"byte_end":10827023,"line_start":96,"line_end":96,"column_start":13,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5559},{"krate":0,"index":5562}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830441,"byte_end":10830456,"line_start":201,"line_end":201,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5568}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830636,"byte_end":10830651,"line_start":210,"line_end":210,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5572}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830827,"byte_end":10830842,"line_start":219,"line_end":219,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5576}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831306,"byte_end":10831322,"line_start":239,"line_end":239,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5586}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832942,"byte_end":10832958,"line_start":292,"line_end":292,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5590}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10833138,"byte_end":10833154,"line_start":301,"line_end":301,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5594}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10833330,"byte_end":10833346,"line_start":310,"line_end":310,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5598}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834422,"byte_end":10834428,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834482,"byte_end":10834488,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834722,"byte_end":10834737,"line_start":350,"line_end":350,"column_start":25,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834795,"byte_end":10834810,"line_start":351,"line_end":351,"column_start":25,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834875,"byte_end":10834891,"line_start":352,"line_end":352,"column_start":25,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835204,"byte_end":10835220,"line_start":357,"line_end":357,"column_start":25,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835278,"byte_end":10835284,"line_start":359,"line_end":359,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5613},{"krate":0,"index":5614},{"krate":0,"index":5618},{"krate":0,"index":5622},{"krate":0,"index":5623}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839672,"byte_end":10839687,"line_start":512,"line_end":512,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5626},{"krate":0,"index":5627}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839818,"byte_end":10839834,"line_start":520,"line_end":520,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5630},{"krate":0,"index":5631}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839968,"byte_end":10839984,"line_start":528,"line_end":528,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5634}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10840098,"byte_end":10840104,"line_start":534,"line_end":534,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5637}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10840196,"byte_end":10840202,"line_start":540,"line_end":540,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5640}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10846477,"byte_end":10846488,"line_start":135,"line_end":135,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5664},{"krate":0,"index":5665},{"krate":0,"index":5666},{"krate":0,"index":5670},{"krate":0,"index":5671}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852311,"byte_end":10852322,"line_start":279,"line_end":279,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5674}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852408,"byte_end":10852419,"line_start":285,"line_end":285,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5676}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852552,"byte_end":10852563,"line_start":291,"line_end":291,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852588,"byte_end":10852599,"line_start":292,"line_end":292,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852695,"byte_end":10852700,"line_start":299,"line_end":299,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5683},{"krate":0,"index":5684}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856733,"byte_end":10856742,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5705}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856922,"byte_end":10856931,"line_start":131,"line_end":131,"column_start":47,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857124,"byte_end":10857133,"line_start":139,"line_end":139,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5709}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857295,"byte_end":10857304,"line_start":145,"line_end":145,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858510,"byte_end":10858518,"line_start":195,"line_end":195,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5716},{"krate":0,"index":5717}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861051,"byte_end":10861059,"line_start":282,"line_end":282,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5724}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861397,"byte_end":10861405,"line_start":295,"line_end":295,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5727}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861775,"byte_end":10861781,"line_start":306,"line_end":306,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5730},{"krate":0,"index":5731},{"krate":0,"index":5732},{"krate":0,"index":5733}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864365,"byte_end":10864371,"line_start":396,"line_end":396,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5738}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864561,"byte_end":10864564,"line_start":405,"line_end":405,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5741},{"krate":0,"index":5742}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/yield_now.rs","byte_start":10876836,"byte_end":10876844,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6180},{"krate":0,"index":6181}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884057,"byte_end":10884065,"line_start":222,"line_end":222,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":6059},{"krate":0,"index":6060},{"krate":0,"index":6062},{"krate":0,"index":6064},{"krate":0,"index":6068},{"krate":0,"index":6070},{"krate":0,"index":6073}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10892016,"byte_end":10892024,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":6077}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10892163,"byte_end":10892171,"line_start":456,"line_end":456,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6079},{"krate":0,"index":6080}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10893136,"byte_end":10893144,"line_start":480,"line_end":480,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6083}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10893225,"byte_end":10893233,"line_start":486,"line_end":486,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":6085}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10894100,"byte_end":10894108,"line_start":516,"line_end":516,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6089},{"krate":0,"index":6090}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10894993,"byte_end":10894999,"line_start":547,"line_end":547,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":6094},{"krate":0,"index":6096}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10895562,"byte_end":10895565,"line_start":566,"line_end":566,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6098},{"krate":0,"index":6100},{"krate":0,"index":6103}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899072,"byte_end":10899080,"line_start":100,"line_end":100,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6126},{"krate":0,"index":6130},{"krate":0,"index":6133}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900856,"byte_end":10900864,"line_start":165,"line_end":165,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6139}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901072,"byte_end":10901080,"line_start":173,"line_end":173,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6143}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901401,"byte_end":10901416,"line_start":188,"line_end":188,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6147},{"krate":0,"index":6148}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901717,"byte_end":10901722,"line_start":198,"line_end":198,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6157}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902340,"byte_end":10902341,"line_start":222,"line_end":222,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902526,"byte_end":10902537,"line_start":230,"line_end":230,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6164}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902681,"byte_end":10902692,"line_start":236,"line_end":236,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6166}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902839,"byte_end":10902850,"line_start":242,"line_end":242,"column_start":16,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/clock.rs","byte_start":10906417,"byte_end":10906422,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6587},{"krate":0,"index":6588},{"krate":0,"index":6589},{"krate":0,"index":6590}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932605,"byte_end":10932614,"line_start":171,"line_end":171,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6237}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932698,"byte_end":10932707,"line_start":177,"line_end":177,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6239}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932853,"byte_end":10932862,"line_start":183,"line_end":183,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6241},{"krate":0,"index":6242},{"krate":0,"index":6243},{"krate":0,"index":6244},{"krate":0,"index":6245},{"krate":0,"index":6247},{"krate":0,"index":6248},{"krate":0,"index":6250},{"krate":0,"index":6251},{"krate":0,"index":6252}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10939884,"byte_end":10939894,"line_start":374,"line_end":374,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10939919,"byte_end":10939929,"line_start":375,"line_end":375,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10941370,"byte_end":10941381,"line_start":411,"line_end":411,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":6257},{"krate":0,"index":6258},{"krate":0,"index":6259},{"krate":0,"index":6260},{"krate":0,"index":6261},{"krate":0,"index":6262},{"krate":0,"index":6263},{"krate":0,"index":6264},{"krate":0,"index":6265}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10944904,"byte_end":10944921,"line_start":509,"line_end":509,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6271}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945222,"byte_end":10945239,"line_start":518,"line_end":518,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":6273}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945478,"byte_end":10945489,"line_start":528,"line_end":528,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945514,"byte_end":10945525,"line_start":529,"line_end":529,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945564,"byte_end":10945575,"line_start":531,"line_end":531,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6277},{"krate":0,"index":6278},{"krate":0,"index":6279},{"krate":0,"index":6280},{"krate":0,"index":6281}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10946093,"byte_end":10946103,"line_start":553,"line_end":553,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6283},{"krate":0,"index":6284},{"krate":0,"index":6285},{"krate":0,"index":6286},{"krate":0,"index":6287},{"krate":0,"index":6288}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10948979,"byte_end":10948990,"line_start":628,"line_end":628,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":6290},{"krate":0,"index":6291},{"krate":0,"index":6292},{"krate":0,"index":6293},{"krate":0,"index":6294},{"krate":0,"index":6295}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10951381,"byte_end":10951391,"line_start":688,"line_end":688,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6297}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10951896,"byte_end":10951902,"line_start":12,"line_end":12,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":6310},{"krate":0,"index":6311},{"krate":0,"index":6312}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10952473,"byte_end":10952479,"line_start":31,"line_end":31,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6629}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10954548,"byte_end":10954554,"line_start":80,"line_end":80,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6314}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/level.rs","byte_start":10966852,"byte_end":10966857,"line_start":42,"line_end":42,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":6336},{"krate":0,"index":6338},{"krate":0,"index":6339},{"krate":0,"index":6340},{"krate":0,"index":6341},{"krate":0,"index":6342}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/level.rs","byte_start":10972925,"byte_end":10972930,"line_start":233,"line_end":233,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6344}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/mod.rs","byte_start":10956175,"byte_end":10956180,"line_start":52,"line_end":52,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":6356},{"krate":0,"index":6357},{"krate":0,"index":6358},{"krate":0,"index":6359},{"krate":0,"index":6360},{"krate":0,"index":6362},{"krate":0,"index":6364},{"krate":0,"index":6365},{"krate":0,"index":6367},{"krate":0,"index":6368},{"krate":0,"index":6369},{"krate":0,"index":6370},{"krate":0,"index":6371}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976057,"byte_end":10976062,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":6390},{"krate":0,"index":6391},{"krate":0,"index":6392},{"krate":0,"index":6393},{"krate":0,"index":6394}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10977450,"byte_end":10977455,"line_start":120,"line_end":120,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":6397},{"krate":0,"index":6398}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10915577,"byte_end":10915586,"line_start":102,"line_end":102,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6417},{"krate":0,"index":6418},{"krate":0,"index":6419},{"krate":0,"index":6421},{"krate":0,"index":6422}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10917001,"byte_end":10917007,"line_start":157,"line_end":157,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6432},{"krate":0,"index":6433},{"krate":0,"index":6434}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10920013,"byte_end":10920019,"line_start":246,"line_end":246,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":6438},{"krate":0,"index":6439},{"krate":0,"index":6443},{"krate":0,"index":6444}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10924713,"byte_end":10924719,"line_start":379,"line_end":379,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6448},{"krate":0,"index":6449},{"krate":0,"index":6450},{"krate":0,"index":6451},{"krate":0,"index":6452},{"krate":0,"index":6453}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925450,"byte_end":10925456,"line_start":417,"line_end":417,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6456}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925582,"byte_end":10925587,"line_start":428,"line_end":428,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":6458}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925895,"byte_end":10925900,"line_start":441,"line_end":441,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6460}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979606,"byte_end":10979611,"line_start":37,"line_end":37,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6470}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979852,"byte_end":10979857,"line_start":54,"line_end":54,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":6472},{"krate":0,"index":6473},{"krate":0,"index":6474},{"krate":0,"index":6475},{"krate":0,"index":6476},{"krate":0,"index":6477}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980757,"byte_end":10980762,"line_start":86,"line_end":86,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980789,"byte_end":10980794,"line_start":88,"line_end":88,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6480}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981256,"byte_end":10981263,"line_start":102,"line_end":102,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6483}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981351,"byte_end":10981358,"line_start":108,"line_end":108,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6485}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981502,"byte_end":10981509,"line_start":114,"line_end":114,"column_start":28,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981546,"byte_end":10981551,"line_start":116,"line_end":116,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6488}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983093,"byte_end":10983100,"line_start":38,"line_end":38,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6494},{"krate":0,"index":6495},{"krate":0,"index":6496},{"krate":0,"index":6497},{"krate":0,"index":6498},{"krate":0,"index":6499},{"krate":0,"index":6500},{"krate":0,"index":6501},{"krate":0,"index":6502}],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986850,"byte_end":10986857,"line_start":153,"line_end":153,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6504}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986986,"byte_end":10986993,"line_start":159,"line_end":159,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6506}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987108,"byte_end":10987115,"line_start":165,"line_end":165,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6508},{"krate":0,"index":6509}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987280,"byte_end":10987287,"line_start":173,"line_end":173,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6511}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987392,"byte_end":10987399,"line_start":179,"line_end":179,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6513},{"krate":0,"index":6514}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987540,"byte_end":10987547,"line_start":187,"line_end":187,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6516},{"krate":0,"index":6517}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987708,"byte_end":10987715,"line_start":195,"line_end":195,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6519}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987822,"byte_end":10987829,"line_start":201,"line_end":201,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6521}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991568,"byte_end":10991576,"line_start":119,"line_end":119,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":6541},{"krate":0,"index":6545}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996345,"byte_end":10996352,"line_start":114,"line_end":114,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6569},{"krate":0,"index":6570},{"krate":0,"index":6571},{"krate":0,"index":6572}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996890,"byte_end":10996897,"line_start":135,"line_end":135,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6575},{"krate":0,"index":6576}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/bit.rs","byte_start":10997542,"byte_end":10997546,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":6732},{"krate":0,"index":6733},{"krate":0,"index":6734},{"krate":0,"index":6735},{"krate":0,"index":6736},{"krate":0,"index":6737},{"krate":0,"index":6738}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/bit.rs","byte_start":10998974,"byte_end":10998978,"line_start":53,"line_end":53,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6740}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004128,"byte_end":11004132,"line_start":142,"line_end":142,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004169,"byte_end":11004173,"line_start":143,"line_end":143,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004210,"byte_end":11004220,"line_start":144,"line_end":144,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004257,"byte_end":11004267,"line_start":145,"line_end":145,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004304,"byte_end":11004307,"line_start":146,"line_end":146,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004344,"byte_end":11004347,"line_start":147,"line_end":147,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004963,"byte_end":11004967,"line_start":173,"line_end":173,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6814},{"krate":0,"index":6815},{"krate":0,"index":6816},{"krate":0,"index":6817},{"krate":0,"index":6819}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11010573,"byte_end":11010577,"line_start":321,"line_end":321,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6822}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11010716,"byte_end":11010725,"line_start":327,"line_end":327,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6825}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011292,"byte_end":11011301,"line_start":346,"line_end":346,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6828}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011459,"byte_end":11011462,"line_start":352,"line_end":352,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6831},{"krate":0,"index":6832}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011724,"byte_end":11011727,"line_start":362,"line_end":362,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":6835}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011994,"byte_end":11011997,"line_start":370,"line_end":370,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6838}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11012118,"byte_end":11012122,"line_start":376,"line_end":376,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":6841}],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11014629,"byte_end":11014633,"line_start":451,"line_end":451,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6845},{"krate":0,"index":6846}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11014977,"byte_end":11014981,"line_start":464,"line_end":464,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6849}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11015329,"byte_end":11015333,"line_start":480,"line_end":480,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6852}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11015695,"byte_end":11015705,"line_start":494,"line_end":494,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6855},{"krate":0,"index":6856}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11016642,"byte_end":11016652,"line_start":524,"line_end":524,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6859}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11016795,"byte_end":11016800,"line_start":533,"line_end":533,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":6862}],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11017683,"byte_end":11017687,"line_start":563,"line_end":563,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":6866}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11018247,"byte_end":11018252,"line_start":578,"line_end":578,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":6869}],"docs":"","sig":null,"attributes":[]},{"id":615,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11018578,"byte_end":11018585,"line_start":588,"line_end":588,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6871},{"krate":0,"index":6872},{"krate":0,"index":6873}],"docs":"","sig":null,"attributes":[]},{"id":616,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":134704,"byte_end":134714,"line_start":29,"line_end":29,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":617,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":134784,"byte_end":134794,"line_start":30,"line_end":30,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136094,"byte_end":136102,"line_start":70,"line_end":70,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136139,"byte_end":136147,"line_start":71,"line_end":71,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136198,"byte_end":136208,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136443,"byte_end":136453,"line_start":86,"line_end":86,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139302,"byte_end":139312,"line_start":176,"line_end":176,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139669,"byte_end":139679,"line_start":191,"line_end":191,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":624,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139866,"byte_end":139876,"line_start":198,"line_end":198,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":625,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":141048,"byte_end":141058,"line_start":244,"line_end":244,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":6910}],"docs":"","sig":null,"attributes":[]},{"id":626,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":141427,"byte_end":141438,"line_start":258,"line_end":258,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6916},{"krate":0,"index":6917}],"docs":"","sig":null,"attributes":[]},{"id":627,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":142112,"byte_end":142120,"line_start":283,"line_end":283,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":628,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":142319,"byte_end":142327,"line_start":293,"line_end":293,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":629,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/wake.rs","byte_start":11026187,"byte_end":11026195,"line_start":23,"line_end":23,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6931},{"krate":0,"index":6932}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14320,"byte_end":14326,"line_start":351,"line_end":351,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/mod.rs","byte_start":17995,"byte_end":18002,"line_start":35,"line_end":35,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":75}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14379,"byte_end":14381,"line_start":359,"line_end":359,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14391,"byte_end":14394,"line_start":360,"line_end":360,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":280}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":78948,"byte_end":78951,"line_start":34,"line_end":34,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":2635}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/mod.rs","byte_start":79138,"byte_end":79142,"line_start":44,"line_end":44,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":3073}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/mod.rs","byte_start":10375735,"byte_end":10375743,"line_start":3,"line_end":3,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3074}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14559,"byte_end":14566,"line_start":373,"line_end":373,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":3524}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14797,"byte_end":14801,"line_start":390,"line_end":390,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":4546}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616154,"byte_end":10616163,"line_start":434,"line_end":434,"column_start":13,"column_end":22},"ref_id":{"krate":0,"index":4560}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616178,"byte_end":10616182,"line_start":436,"line_end":436,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":4735}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/mod.rs","byte_start":10660752,"byte_end":10660757,"line_start":85,"line_end":85,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5118}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616340,"byte_end":10616347,"line_start":444,"line_end":444,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":5291}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mod.rs","byte_start":10616691,"byte_end":10616696,"line_start":458,"line_end":458,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":5690}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14846,"byte_end":14850,"line_start":396,"line_end":396,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":614}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/lib.rs","byte_start":14914,"byte_end":14918,"line_start":402,"line_end":402,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":6207}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/mod.rs","byte_start":10905611,"byte_end":10905616,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6465}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30324,"byte_end":30333,"line_start":30,"line_end":30,"column_start":25,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30349,"byte_end":30358,"line_start":32,"line_end":32,"column_start":9,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/macros/scoped_tls.rs","byte_start":30708,"byte_end":30713,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32340,"byte_end":32346,"line_start":15,"line_end":15,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":2119}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32560,"byte_end":32566,"line_start":25,"line_end":25,"column_start":24,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/poll_fn.rs","byte_start":32708,"byte_end":32714,"line_start":31,"line_end":31,"column_start":23,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997249,"byte_end":9997254,"line_start":13,"line_end":13,"column_start":19,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":2119}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/future/ready.rs","byte_start":9997281,"byte_end":9997286,"line_start":15,"line_end":15,"column_start":20,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":43092,"byte_end":43101,"line_start":23,"line_end":23,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45551,"byte_end":45554,"line_start":77,"line_end":77,"column_start":57,"column_end":60},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":103},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":45714,"byte_end":45717,"line_start":85,"line_end":85,"column_start":26,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":2,"index":34759},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_buf_read.rs","byte_start":46346,"byte_end":46352,"line_start":109,"line_end":109,"column_start":51,"column_end":57},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":49392,"byte_end":49395,"line_start":72,"line_end":72,"column_start":51,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":103},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":49538,"byte_end":49541,"line_start":80,"line_end":80,"column_start":23,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":2,"index":34759},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_read.rs","byte_start":50210,"byte_end":50216,"line_start":108,"line_end":108,"column_start":48,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53210,"byte_end":53213,"line_start":61,"line_end":61,"column_start":51,"column_end":54},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":103},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53356,"byte_end":53359,"line_start":69,"line_end":69,"column_start":23,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":2,"index":34759},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_seek.rs","byte_start":53750,"byte_end":53756,"line_start":83,"line_end":83,"column_start":48,"column_end":54},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":63226,"byte_end":63229,"line_start":213,"line_end":213,"column_start":53,"column_end":56},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":103},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":63377,"byte_end":63380,"line_start":221,"line_end":221,"column_start":24,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":2,"index":34759},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":64257,"byte_end":64260,"line_start":255,"line_end":255,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":5,"index":5335},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":65058,"byte_end":65064,"line_start":286,"line_end":286,"column_start":25,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":65867,"byte_end":65873,"line_start":316,"line_end":316,"column_start":25,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":66679,"byte_end":66685,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_write.rs","byte_start":67486,"byte_end":67492,"line_start":376,"line_end":376,"column_start":25,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":7193},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":69533,"byte_end":69540,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/read_buf.rs","byte_start":77601,"byte_end":77608,"line_start":258,"line_end":258,"column_start":21,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":248},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10008382,"byte_end":10008390,"line_start":16,"line_end":16,"column_start":6,"column_end":14},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010531,"byte_end":10010539,"line_start":92,"line_end":92,"column_start":21,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":969},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010682,"byte_end":10010690,"line_start":101,"line_end":101,"column_start":27,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":969},"to":{"krate":2,"index":2230}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/interest.rs","byte_start":10010818,"byte_end":10010826,"line_start":108,"line_end":108,"column_start":21,"column_end":29},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":969},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10011411,"byte_end":10011416,"line_start":18,"line_end":18,"column_start":6,"column_end":11},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10015833,"byte_end":10015838,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016582,"byte_end":10016587,"line_start":196,"line_end":196,"column_start":28,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016748,"byte_end":10016753,"line_start":205,"line_end":205,"column_start":34,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":2230}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10016881,"byte_end":10016886,"line_start":212,"line_end":212,"column_start":29,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":2199}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10017040,"byte_end":10017045,"line_start":221,"line_end":221,"column_start":26,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":2148}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/ready.rs","byte_start":10017192,"byte_end":10017197,"line_start":230,"line_end":230,"column_start":21,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019645,"byte_end":10019657,"line_start":50,"line_end":50,"column_start":22,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1003},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019682,"byte_end":10019694,"line_start":51,"line_end":51,"column_start":22,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1003},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10019738,"byte_end":10019750,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/registration.rs","byte_start":10025290,"byte_end":10025302,"line_start":213,"line_end":213,"column_start":10,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10028705,"byte_end":10028716,"line_start":104,"line_end":104,"column_start":16,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1028},"to":{"krate":0,"index":6768}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10028976,"byte_end":10028987,"line_start":115,"line_end":115,"column_start":18,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10029167,"byte_end":10029178,"line_start":124,"line_end":124,"column_start":6,"column_end":17},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037205,"byte_end":10037216,"line_start":360,"line_end":360,"column_start":15,"column_end":26},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037305,"byte_end":10037316,"line_start":366,"line_end":366,"column_start":22,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037341,"byte_end":10037352,"line_start":367,"line_end":367,"column_start":22,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10037386,"byte_end":10037397,"line_start":370,"line_end":370,"column_start":10,"column_end":21},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10038320,"byte_end":10038326,"line_start":395,"line_end":395,"column_start":39,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1055},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10038821,"byte_end":10038830,"line_start":414,"line_end":414,"column_start":21,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043504,"byte_end":10043513,"line_start":523,"line_end":523,"column_start":19,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043878,"byte_end":10043887,"line_start":536,"line_end":536,"column_start":26,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/scheduled_io.rs","byte_start":10043920,"byte_end":10043929,"line_start":537,"line_end":537,"column_start":26,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10000924,"byte_end":10000930,"line_start":111,"line_end":111,"column_start":6,"column_end":12},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10003736,"byte_end":10003742,"line_start":203,"line_end":203,"column_start":15,"column_end":21},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":879},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10003857,"byte_end":10003862,"line_start":209,"line_end":209,"column_start":15,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004306,"byte_end":10004312,"line_start":224,"line_end":224,"column_start":15,"column_end":21},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":879},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004711,"byte_end":10004717,"line_start":245,"line_end":245,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":879},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10004867,"byte_end":10004873,"line_start":254,"line_end":254,"column_start":10,"column_end":16},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10005745,"byte_end":10005751,"line_start":282,"line_end":282,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006568,"byte_end":10006574,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1082},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006652,"byte_end":10006658,"line_start":309,"line_end":309,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1082},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10006793,"byte_end":10006798,"line_start":317,"line_end":317,"column_start":6,"column_end":11},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/driver/mod.rs","byte_start":10007755,"byte_end":10007764,"line_start":347,"line_end":347,"column_start":6,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10047450,"byte_end":10047461,"line_start":76,"line_end":76,"column_start":17,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10050070,"byte_end":10050081,"line_start":143,"line_end":143,"column_start":21,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051624,"byte_end":10051635,"line_start":190,"line_end":190,"column_start":27,"column_end":38},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051778,"byte_end":10051789,"line_start":198,"line_end":198,"column_start":45,"column_end":56},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/poll_evented.rs","byte_start":10051961,"byte_end":10051972,"line_start":204,"line_end":204,"column_start":26,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10058828,"byte_end":10058835,"line_start":164,"line_end":164,"column_start":18,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070803,"byte_end":10070810,"line_start":458,"line_end":458,"column_start":30,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10070964,"byte_end":10070971,"line_start":464,"line_end":464,"column_start":56,"column_end":63},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1143},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071182,"byte_end":10071189,"line_start":472,"line_end":472,"column_start":27,"column_end":34},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1143},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10071289,"byte_end":10071306,"line_start":478,"line_end":478,"column_start":26,"column_end":43},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10073773,"byte_end":10073793,"line_start":539,"line_end":539,"column_start":26,"column_end":46},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076303,"byte_end":10076320,"line_start":600,"line_end":600,"column_start":60,"column_end":77},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1147},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/async_fd.rs","byte_start":10076577,"byte_end":10076597,"line_start":608,"line_end":608,"column_start":60,"column_end":80},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10078639,"byte_end":10078647,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079564,"byte_end":10079573,"line_start":92,"line_end":92,"column_start":9,"column_end":18},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10079823,"byte_end":10079831,"line_start":100,"line_end":100,"column_start":34,"column_end":42},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1348},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10080126,"byte_end":10080135,"line_start":111,"line_end":111,"column_start":36,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1351},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10080814,"byte_end":10080819,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081212,"byte_end":10081217,"line_start":147,"line_end":147,"column_start":9,"column_end":14},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081470,"byte_end":10081475,"line_start":155,"line_end":155,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1262},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081598,"byte_end":10081606,"line_start":161,"line_end":161,"column_start":31,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1348},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081643,"byte_end":10081652,"line_start":162,"line_end":162,"column_start":31,"column_end":40},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1351},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081689,"byte_end":10081697,"line_start":163,"line_end":163,"column_start":31,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1348},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081734,"byte_end":10081743,"line_start":164,"line_end":164,"column_start":31,"column_end":40},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1351},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081786,"byte_end":10081794,"line_start":166,"line_end":166,"column_start":36,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1348},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/split.rs","byte_start":10081962,"byte_end":10081971,"line_start":172,"line_end":172,"column_start":36,"column_end":45},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1351},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/seek.rs","byte_start":10082928,"byte_end":10082932,"line_start":34,"line_end":34,"column_start":20,"column_end":24},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":9841},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10085746,"byte_end":10085758,"line_start":11,"line_end":11,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":113},"to":{"krate":0,"index":2110}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_buf_read_ext.rs","byte_start":10094779,"byte_end":10094780,"line_start":257,"line_end":257,"column_start":52,"column_end":53},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1371},"to":{"krate":0,"index":2110}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10096701,"byte_end":10096710,"line_start":61,"line_end":61,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":2118}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_read_ext.rs","byte_start":10134107,"byte_end":10134108,"line_start":1115,"line_end":1115,"column_start":46,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1418},"to":{"krate":0,"index":2118}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_seek_ext.rs","byte_start":10135033,"byte_end":10135042,"line_start":33,"line_end":33,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":166},"to":{"krate":0,"index":2169}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_seek_ext.rs","byte_start":10136217,"byte_end":10136218,"line_start":72,"line_end":72,"column_start":46,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1427},"to":{"krate":0,"index":2169}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10138170,"byte_end":10138180,"line_start":65,"line_end":65,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":192},"to":{"krate":0,"index":2172}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/async_write_ext.rs","byte_start":10171465,"byte_end":10171466,"line_start":1004,"line_end":1004,"column_start":48,"column_end":49},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1468},"to":{"krate":0,"index":2172}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10172834,"byte_end":10172843,"line_start":36,"line_end":36,"column_start":20,"column_end":29},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":9789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10174700,"byte_end":10174709,"line_start":98,"line_end":98,"column_start":34,"column_end":43},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":9789},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10175519,"byte_end":10175528,"line_start":120,"line_end":120,"column_start":37,"column_end":46},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":9789},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10176441,"byte_end":10176450,"line_start":144,"line_end":144,"column_start":48,"column_end":57},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":9789},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_reader.rs","byte_start":10176961,"byte_end":10176970,"line_start":162,"line_end":162,"column_start":36,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":9789},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10178459,"byte_end":10178468,"line_start":25,"line_end":25,"column_start":34,"column_end":43},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":9758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180305,"byte_end":10180314,"line_start":81,"line_end":81,"column_start":45,"column_end":54},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":9758},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10180456,"byte_end":10180465,"line_start":87,"line_end":87,"column_start":45,"column_end":54},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":9758},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181177,"byte_end":10181186,"line_start":117,"line_end":117,"column_start":49,"column_end":58},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":9758},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181716,"byte_end":10181725,"line_start":135,"line_end":135,"column_start":48,"column_end":57},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":9758},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_stream.rs","byte_start":10181980,"byte_end":10181989,"line_start":145,"line_end":145,"column_start":51,"column_end":60},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":9758},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10183925,"byte_end":10183934,"line_start":40,"line_end":40,"column_start":21,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":9712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10186212,"byte_end":10186221,"line_start":116,"line_end":116,"column_start":36,"column_end":45},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":9712},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187111,"byte_end":10187120,"line_start":145,"line_end":145,"column_start":47,"column_end":56},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":9712},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187374,"byte_end":10187383,"line_start":155,"line_end":155,"column_start":53,"column_end":62},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":9712},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/buf_writer.rs","byte_start":10187670,"byte_end":10187679,"line_start":165,"line_end":165,"column_start":36,"column_end":45},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":9712},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10188857,"byte_end":10188862,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":9663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190002,"byte_end":10190007,"line_start":69,"line_end":69,"column_start":27,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":9663},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190286,"byte_end":10190291,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":9663},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/chain.rs","byte_start":10190877,"byte_end":10190882,"line_start":107,"line_end":107,"column_start":29,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":9663},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy.rs","byte_start":10193717,"byte_end":10193721,"line_start":73,"line_end":73,"column_start":23,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2218},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/copy_buf.rs","byte_start":10197415,"byte_end":10197422,"line_start":67,"line_end":67,"column_start":23,"column_end":30},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2246},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10199689,"byte_end":10199694,"line_start":49,"line_end":49,"column_start":20,"column_end":25},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2258},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10199908,"byte_end":10199913,"line_start":60,"line_end":60,"column_start":23,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2258},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/empty.rs","byte_start":10200146,"byte_end":10200151,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2258},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/flush.rs","byte_start":10201278,"byte_end":10201283,"line_start":36,"line_end":36,"column_start":20,"column_end":25},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":9621},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10202279,"byte_end":10202284,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":9571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/lines.rs","byte_start":10203536,"byte_end":10203541,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":9571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10207819,"byte_end":10207831,"line_start":91,"line_end":91,"column_start":20,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2261},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10208375,"byte_end":10208387,"line_start":107,"line_end":107,"column_start":21,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2261},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209085,"byte_end":10209097,"line_start":134,"line_end":134,"column_start":15,"column_end":27},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2261},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209248,"byte_end":10209252,"line_start":143,"line_end":143,"column_start":6,"column_end":10},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10209658,"byte_end":10209662,"line_start":162,"line_end":162,"column_start":20,"column_end":24},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2266},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/mem.rs","byte_start":10210528,"byte_end":10210532,"line_start":189,"line_end":189,"column_start":21,"column_end":25},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2266},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read.rs","byte_start":10212713,"byte_end":10212717,"line_start":43,"line_end":43,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":9520},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_buf.rs","byte_start":10213851,"byte_end":10213858,"line_start":35,"line_end":35,"column_start":23,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":9460},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_exact.rs","byte_start":10216239,"byte_end":10216248,"line_start":47,"line_end":47,"column_start":20,"column_end":29},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":9405},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_line.rs","byte_start":10225338,"byte_end":10225346,"line_start":111,"line_end":111,"column_start":51,"column_end":59},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":8486},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_end.rs","byte_start":10228835,"byte_end":10228844,"line_start":104,"line_end":104,"column_start":20,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":8429},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_to_string.rs","byte_start":10231454,"byte_end":10231466,"line_start":71,"line_end":71,"column_start":20,"column_end":32},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":8368},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/read_until.rs","byte_start":10233857,"byte_end":10233866,"line_start":72,"line_end":72,"column_start":51,"column_end":60},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":8307},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/repeat.rs","byte_start":10235444,"byte_end":10235450,"line_start":49,"line_end":49,"column_start":20,"column_end":26},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/shutdown.rs","byte_start":10236829,"byte_end":10236837,"line_start":36,"line_end":36,"column_start":20,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":8258},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10238477,"byte_end":10238481,"line_start":52,"line_end":52,"column_start":21,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2423},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/sink.rs","byte_start":10238991,"byte_end":10238995,"line_start":73,"line_end":73,"column_start":21,"column_end":25},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2423},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10239960,"byte_end":10239965,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":8208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/split.rs","byte_start":10240704,"byte_end":10240709,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":8208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10243022,"byte_end":10243026,"line_start":28,"line_end":28,"column_start":20,"column_end":24},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":8168},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10244654,"byte_end":10244658,"line_start":77,"line_end":77,"column_start":34,"column_end":38},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":8168},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/take.rs","byte_start":10245302,"byte_end":10245306,"line_start":102,"line_end":102,"column_start":40,"column_end":44},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":8168},"to":{"krate":0,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write.rs","byte_start":10247105,"byte_end":10247110,"line_start":36,"line_end":36,"column_start":20,"column_end":25},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":8117},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_all.rs","byte_start":10248145,"byte_end":10248153,"line_start":34,"line_end":34,"column_start":20,"column_end":28},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":8064},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/io/util/write_buf.rs","byte_start":10249638,"byte_end":10249646,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":8004},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80106,"byte_end":80123,"line_start":22,"line_end":22,"column_start":34,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":340},"to":{"krate":0,"index":291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80776,"byte_end":80786,"line_start":53,"line_end":53,"column_start":24,"column_end":34},"kind":{"Impl":{"id":148}},"from":{"krate":1,"index":7343},"to":{"krate":0,"index":291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":80826,"byte_end":80836,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":149}},"from":{"krate":1,"index":7343},"to":{"krate":0,"index":340}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81138,"byte_end":81150,"line_start":67,"line_end":67,"column_start":24,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":1,"index":7371},"to":{"krate":0,"index":291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81190,"byte_end":81202,"line_start":69,"line_end":69,"column_start":36,"column_end":48},"kind":{"Impl":{"id":151}},"from":{"krate":1,"index":7371},"to":{"krate":0,"index":340}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81499,"byte_end":81511,"line_start":80,"line_end":80,"column_start":24,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":1,"index":7374},"to":{"krate":0,"index":291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":81551,"byte_end":81563,"line_start":82,"line_end":82,"column_start":36,"column_end":48},"kind":{"Impl":{"id":153}},"from":{"krate":1,"index":7374},"to":{"krate":0,"index":340}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":85894,"byte_end":85900,"line_start":228,"line_end":228,"column_start":28,"column_end":34},"kind":{"Impl":{"id":156}},"from":{"krate":5,"index":5817},"to":{"krate":0,"index":291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":85944,"byte_end":85950,"line_start":230,"line_end":230,"column_start":40,"column_end":46},"kind":{"Impl":{"id":157}},"from":{"krate":5,"index":5817},"to":{"krate":0,"index":340}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":87503,"byte_end":87513,"line_start":285,"line_end":285,"column_start":25,"column_end":35},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2610},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/addr.rs","byte_start":88152,"byte_end":88161,"line_start":303,"line_end":303,"column_start":27,"column_end":36},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2624},"to":{"krate":2,"index":5619}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10257297,"byte_end":10257308,"line_start":53,"line_end":53,"column_start":6,"column_end":17},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3033},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265604,"byte_end":10265615,"line_start":304,"line_end":304,"column_start":36,"column_end":47},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3033},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10265941,"byte_end":10265952,"line_start":316,"line_end":316,"column_start":21,"column_end":32},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3033},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/listener.rs","byte_start":10266158,"byte_end":10266169,"line_start":327,"line_end":327,"column_start":22,"column_end":33},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3033},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10269681,"byte_end":10269690,"line_start":89,"line_end":89,"column_start":6,"column_end":15},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282331,"byte_end":10282340,"line_start":487,"line_end":487,"column_start":21,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282475,"byte_end":10282484,"line_start":494,"line_end":494,"column_start":18,"column_end":27},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3035},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/socket.rs","byte_start":10282594,"byte_end":10282603,"line_start":501,"line_end":501,"column_start":20,"column_end":29},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3035},"to":{"krate":1,"index":8866}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10285307,"byte_end":10285315,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10288118,"byte_end":10288126,"line_start":139,"line_end":139,"column_start":20,"column_end":28},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3037},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10288342,"byte_end":10288351,"line_start":149,"line_end":149,"column_start":21,"column_end":30},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3044},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10289268,"byte_end":10289276,"line_start":182,"line_end":182,"column_start":27,"column_end":35},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3037},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split.rs","byte_start":10289370,"byte_end":10289379,"line_start":188,"line_end":188,"column_start":27,"column_end":36},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3044},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292265,"byte_end":10292277,"line_start":86,"line_end":86,"column_start":23,"column_end":35},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3060},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292480,"byte_end":10292492,"line_start":95,"line_end":95,"column_start":16,"column_end":28},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3060},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10292502,"byte_end":10292515,"line_start":97,"line_end":97,"column_start":6,"column_end":19},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295697,"byte_end":10295710,"line_start":194,"line_end":194,"column_start":20,"column_end":33},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3051},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10295911,"byte_end":10295925,"line_start":204,"line_end":204,"column_start":6,"column_end":20},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296608,"byte_end":10296622,"line_start":223,"line_end":223,"column_start":15,"column_end":29},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10296786,"byte_end":10296800,"line_start":231,"line_end":231,"column_start":21,"column_end":35},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3055},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10297847,"byte_end":10297860,"line_start":268,"line_end":268,"column_start":27,"column_end":40},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3051},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/split_owned.rs","byte_start":10297956,"byte_end":10297970,"line_start":274,"line_end":274,"column_start":27,"column_end":41},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10300495,"byte_end":10300504,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10330749,"byte_end":10330758,"line_start":956,"line_end":956,"column_start":39,"column_end":48},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3066},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10331116,"byte_end":10331125,"line_start":970,"line_end":970,"column_start":20,"column_end":29},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3066},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10331335,"byte_end":10331344,"line_start":980,"line_end":980,"column_start":21,"column_end":30},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3066},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10332170,"byte_end":10332179,"line_start":1013,"line_end":1013,"column_start":21,"column_end":30},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3066},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/tcp/stream.rs","byte_start":10332383,"byte_end":10332392,"line_start":1024,"line_end":1024,"column_start":22,"column_end":31},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3066},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10337154,"byte_end":10337163,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10374805,"byte_end":10374814,"line_start":1213,"line_end":1213,"column_start":39,"column_end":48},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3068},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10375139,"byte_end":10375148,"line_start":1225,"line_end":1225,"column_start":21,"column_end":30},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3068},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/udp.rs","byte_start":10375357,"byte_end":10375366,"line_start":1236,"line_end":1236,"column_start":22,"column_end":31},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3068},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10378755,"byte_end":10378767,"line_start":86,"line_end":86,"column_start":6,"column_end":18},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3395},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411289,"byte_end":10411301,"line_start":1086,"line_end":1086,"column_start":52,"column_end":64},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3395},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411645,"byte_end":10411657,"line_start":1098,"line_end":1098,"column_start":21,"column_end":33},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3395},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/datagram/socket.rs","byte_start":10411772,"byte_end":10411784,"line_start":1104,"line_end":1104,"column_start":18,"column_end":30},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3395},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10413297,"byte_end":10413309,"line_start":48,"line_end":48,"column_start":6,"column_end":18},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416363,"byte_end":10416375,"line_start":124,"line_end":124,"column_start":52,"column_end":64},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3399},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416710,"byte_end":10416722,"line_start":136,"line_end":136,"column_start":21,"column_end":33},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3399},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/listener.rs","byte_start":10416837,"byte_end":10416849,"line_start":142,"line_end":142,"column_start":18,"column_end":30},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3399},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418630,"byte_end":10418638,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3402},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10418854,"byte_end":10418863,"line_start":60,"line_end":60,"column_start":21,"column_end":30},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3409},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10419649,"byte_end":10419657,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3402},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split.rs","byte_start":10419753,"byte_end":10419762,"line_start":96,"line_end":96,"column_start":28,"column_end":37},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3409},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422677,"byte_end":10422689,"line_start":85,"line_end":85,"column_start":23,"column_end":35},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3425},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422892,"byte_end":10422904,"line_start":94,"line_end":94,"column_start":16,"column_end":28},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3425},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10422914,"byte_end":10422927,"line_start":96,"line_end":96,"column_start":6,"column_end":19},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423343,"byte_end":10423356,"line_start":107,"line_end":107,"column_start":20,"column_end":33},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":3416},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10423557,"byte_end":10423571,"line_start":117,"line_end":117,"column_start":6,"column_end":20},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424269,"byte_end":10424283,"line_start":136,"line_end":136,"column_start":15,"column_end":29},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":3420},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10424447,"byte_end":10424461,"line_start":144,"line_end":144,"column_start":21,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3420},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10425505,"byte_end":10425518,"line_start":181,"line_end":181,"column_start":28,"column_end":41},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":3416},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/split_owned.rs","byte_start":10425616,"byte_end":10425630,"line_start":187,"line_end":187,"column_start":28,"column_end":42},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3420},"to":{"krate":2,"index":1987}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10425851,"byte_end":10425861,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":3267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/socketaddr.rs","byte_start":10426413,"byte_end":10426423,"line_start":27,"line_end":27,"column_start":21,"column_end":31},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":3267},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10427842,"byte_end":10427852,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":3431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445055,"byte_end":10445065,"line_start":503,"line_end":503,"column_start":35,"column_end":45},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3431},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445378,"byte_end":10445388,"line_start":515,"line_end":515,"column_start":20,"column_end":30},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3431},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10445598,"byte_end":10445608,"line_start":525,"line_end":525,"column_start":21,"column_end":31},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":3431},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10446373,"byte_end":10446383,"line_start":556,"line_end":556,"column_start":6,"column_end":16},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":3431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10447646,"byte_end":10447656,"line_start":594,"line_end":594,"column_start":21,"column_end":31},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":3431},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/stream.rs","byte_start":10447771,"byte_end":10447781,"line_start":600,"line_end":600,"column_start":18,"column_end":28},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":3431},"to":{"krate":1,"index":8864}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/net/unix/ucred.rs","byte_start":10448168,"byte_end":10448173,"line_start":14,"line_end":14,"column_start":6,"column_end":11},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":91768,"byte_end":91777,"line_start":9,"line_end":9,"column_start":9,"column_end":18},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":91951,"byte_end":91960,"line_start":16,"line_end":16,"column_start":19,"column_end":28},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":92107,"byte_end":92116,"line_start":24,"line_end":24,"column_start":22,"column_end":31},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_ptr.rs","byte_start":92229,"byte_end":92238,"line_start":30,"line_end":30,"column_start":24,"column_end":33},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92582,"byte_end":92591,"line_start":10,"line_end":10,"column_start":22,"column_end":31},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":375},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92616,"byte_end":92625,"line_start":11,"line_end":11,"column_start":22,"column_end":31},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":375},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":92635,"byte_end":92644,"line_start":13,"line_end":13,"column_start":6,"column_end":15},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":93136,"byte_end":93145,"line_start":30,"line_end":30,"column_start":16,"column_end":25},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":375},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u16.rs","byte_start":93430,"byte_end":93439,"line_start":40,"line_end":40,"column_start":21,"column_end":30},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":375},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93780,"byte_end":93789,"line_start":10,"line_end":10,"column_start":22,"column_end":31},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93814,"byte_end":93823,"line_start":11,"line_end":11,"column_start":22,"column_end":31},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":93833,"byte_end":93842,"line_start":13,"line_end":13,"column_start":6,"column_end":15},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":94027,"byte_end":94036,"line_start":20,"line_end":20,"column_start":16,"column_end":25},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u32.rs","byte_start":94321,"byte_end":94330,"line_start":30,"line_end":30,"column_start":21,"column_end":30},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96445,"byte_end":96453,"line_start":10,"line_end":10,"column_start":22,"column_end":30},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96478,"byte_end":96486,"line_start":11,"line_end":11,"column_start":22,"column_end":30},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96496,"byte_end":96504,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96685,"byte_end":96693,"line_start":20,"line_end":20,"column_start":16,"column_end":24},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_u8.rs","byte_start":96977,"byte_end":96985,"line_start":30,"line_end":30,"column_start":21,"column_end":29},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97325,"byte_end":97336,"line_start":10,"line_end":10,"column_start":22,"column_end":33},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97361,"byte_end":97372,"line_start":11,"line_end":11,"column_start":22,"column_end":33},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":97382,"byte_end":97393,"line_start":13,"line_end":13,"column_start":6,"column_end":17},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98082,"byte_end":98093,"line_start":35,"line_end":35,"column_start":21,"column_end":32},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98383,"byte_end":98394,"line_start":45,"line_end":45,"column_start":24,"column_end":35},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/atomic_usize.rs","byte_start":98558,"byte_end":98569,"line_start":52,"line_end":52,"column_start":21,"column_end":32},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":425},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/mutex.rs","byte_start":98900,"byte_end":98905,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/loom/std/unsafe_cell.rs","byte_start":99583,"byte_end":99593,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10454081,"byte_end":10454087,"line_start":13,"line_end":13,"column_start":21,"column_end":27},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3472},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10455044,"byte_end":10455050,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3472},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/either.rs","byte_start":10455264,"byte_end":10455270,"line_start":63,"line_end":63,"column_start":27,"column_end":33},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":3472},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":104757,"byte_end":104767,"line_start":40,"line_end":40,"column_start":6,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":105032,"byte_end":105042,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":3498},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":105568,"byte_end":105573,"line_start":78,"line_end":78,"column_start":6,"column_end":11},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110338,"byte_end":110348,"line_start":203,"line_end":203,"column_start":18,"column_end":28},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3498},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110457,"byte_end":110469,"line_start":211,"line_end":211,"column_start":17,"column_end":29},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3502},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":110824,"byte_end":110840,"line_start":229,"line_end":229,"column_start":6,"column_end":22},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":3518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112103,"byte_end":112119,"line_start":272,"line_end":272,"column_start":15,"column_end":31},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":3518},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112714,"byte_end":112726,"line_start":295,"line_end":295,"column_start":6,"column_end":18},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":3502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/thread.rs","byte_start":112906,"byte_end":112911,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":3508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103324,"byte_end":103328,"line_start":92,"line_end":92,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2090},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103331,"byte_end":103335,"line_start":92,"line_end":92,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2078},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103804,"byte_end":103807,"line_start":106,"line_end":106,"column_start":17,"column_end":20},"kind":{"Impl":{"id":262}},"from":{"krate":5,"index":103},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/park/mod.rs","byte_start":103896,"byte_end":103899,"line_start":112,"line_end":112,"column_start":17,"column_end":20},"kind":{"Impl":{"id":263}},"from":{"krate":5,"index":4500},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10475764,"byte_end":10475776,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":3973},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10478722,"byte_end":10478743,"line_start":114,"line_end":114,"column_start":19,"column_end":40},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":3994},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10479459,"byte_end":10479464,"line_start":141,"line_end":141,"column_start":10,"column_end":15},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":3533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10481104,"byte_end":10481109,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":3533},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/enter.rs","byte_start":10481239,"byte_end":10481244,"line_start":198,"line_end":198,"column_start":15,"column_end":20},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":3533},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10488976,"byte_end":10488982,"line_start":69,"line_end":69,"column_start":22,"column_end":28},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":3571},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10489007,"byte_end":10489013,"line_start":70,"line_end":70,"column_start":22,"column_end":28},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3571},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10489372,"byte_end":10489376,"line_start":85,"line_end":85,"column_start":30,"column_end":34},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/core.rs","byte_start":10490154,"byte_end":10490158,"line_start":108,"line_end":108,"column_start":30,"column_end":34},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":3566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10496539,"byte_end":10496548,"line_start":18,"line_end":18,"column_start":6,"column_end":15},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":4012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499274,"byte_end":10499283,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":4012},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499526,"byte_end":10499535,"line_start":124,"line_end":124,"column_start":21,"column_end":30},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":4012},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499812,"byte_end":10499821,"line_start":133,"line_end":133,"column_start":28,"column_end":37},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":4012},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/error.rs","byte_start":10499855,"byte_end":10499860,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"kind":{"Impl":{"id":277}},"from":{"krate":1,"index":2761},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10500538,"byte_end":10500545,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10501022,"byte_end":10501029,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/harness.rs","byte_start":10503200,"byte_end":10503205,"line_start":94,"line_end":94,"column_start":51,"column_end":56},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":3681},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517460,"byte_end":10517470,"line_start":150,"line_end":150,"column_start":31,"column_end":41},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517507,"byte_end":10517517,"line_start":151,"line_end":151,"column_start":31,"column_end":41},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10517533,"byte_end":10517543,"line_start":153,"line_end":153,"column_start":9,"column_end":19},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":4014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518778,"byte_end":10518788,"line_start":200,"line_end":200,"column_start":19,"column_end":29},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":2119}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10518815,"byte_end":10518825,"line_start":202,"line_end":202,"column_start":20,"column_end":30},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10520051,"byte_end":10520061,"line_start":241,"line_end":241,"column_start":18,"column_end":28},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/join.rs","byte_start":10520327,"byte_end":10520337,"line_start":253,"line_end":253,"column_start":24,"column_end":34},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":4014},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10521584,"byte_end":10521591,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":3755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10523122,"byte_end":10523129,"line_start":94,"line_end":94,"column_start":16,"column_end":23},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":3755},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/raw.rs","byte_start":10523219,"byte_end":10523226,"line_start":100,"line_end":100,"column_start":15,"column_end":22},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":3755},"to":{"krate":2,"index":2088}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10525908,"byte_end":10525913,"line_start":62,"line_end":62,"column_start":6,"column_end":11},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":3804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10534769,"byte_end":10534777,"line_start":344,"line_end":344,"column_start":6,"column_end":14},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":4018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10536654,"byte_end":10536659,"line_start":427,"line_end":427,"column_start":21,"column_end":26},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3804},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/state.rs","byte_start":10536818,"byte_end":10536826,"line_start":434,"line_end":434,"column_start":21,"column_end":29},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/waker.rs","byte_start":10538644,"byte_end":10538652,"line_start":39,"line_end":39,"column_start":24,"column_end":32},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":3888},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482239,"byte_end":10482243,"line_start":43,"line_end":43,"column_start":25,"column_end":29},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":3922},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482274,"byte_end":10482278,"line_start":44,"line_end":44,"column_start":25,"column_end":29},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3922},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482415,"byte_end":10482423,"line_start":50,"line_end":50,"column_start":35,"column_end":43},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":3930},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482464,"byte_end":10482472,"line_start":51,"line_end":51,"column_start":35,"column_end":43},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":3930},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482597,"byte_end":10482601,"line_start":56,"line_end":56,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2090},"to":{"krate":0,"index":3940}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10482604,"byte_end":10482609,"line_start":56,"line_end":56,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":3940}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10484459,"byte_end":10484463,"line_start":122,"line_end":122,"column_start":18,"column_end":22},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":3922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485359,"byte_end":10485363,"line_start":161,"line_end":161,"column_start":19,"column_end":23},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":3922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485532,"byte_end":10485540,"line_start":168,"line_end":168,"column_start":19,"column_end":27},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10485826,"byte_end":10485830,"line_start":181,"line_end":181,"column_start":27,"column_end":31},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":3922},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486070,"byte_end":10486074,"line_start":191,"line_end":191,"column_start":24,"column_end":28},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3922},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486226,"byte_end":10486234,"line_start":197,"line_end":197,"column_start":24,"column_end":32},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3930},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/task/mod.rs","byte_start":10486450,"byte_end":10486454,"line_start":206,"line_end":206,"column_start":38,"column_end":42},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":3922},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10542364,"byte_end":10542378,"line_start":96,"line_end":96,"column_start":15,"column_end":29},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":4058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10544617,"byte_end":10544622,"line_start":173,"line_end":173,"column_start":15,"column_end":20},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":4063},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10547245,"byte_end":10547250,"line_start":245,"line_end":245,"column_start":28,"column_end":33},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":4102},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10547943,"byte_end":10547957,"line_start":269,"line_end":269,"column_start":24,"column_end":38},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":4058},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549176,"byte_end":10549190,"line_start":307,"line_end":307,"column_start":30,"column_end":44},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":4058},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549356,"byte_end":10549363,"line_start":315,"line_end":315,"column_start":6,"column_end":13},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":4394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10549893,"byte_end":10549900,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":4394},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10550068,"byte_end":10550071,"line_start":344,"line_end":344,"column_start":19,"column_end":22},"kind":{"Impl":{"id":314}},"from":{"krate":5,"index":4500},"to":{"krate":0,"index":3940}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551160,"byte_end":10551166,"line_start":380,"line_end":380,"column_start":15,"column_end":21},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":4072},"to":{"krate":0,"index":6927}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551628,"byte_end":10551638,"line_start":401,"line_end":401,"column_start":15,"column_end":25},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":4136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/basic_scheduler.rs","byte_start":10551913,"byte_end":10551923,"line_start":409,"line_end":409,"column_start":24,"column_end":34},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":4136},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10556407,"byte_end":10556419,"line_start":102,"line_end":102,"column_start":6,"column_end":18},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":4173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10558994,"byte_end":10559006,"line_start":172,"line_end":172,"column_start":15,"column_end":27},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":4173},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10559092,"byte_end":10559104,"line_start":178,"line_end":178,"column_start":21,"column_end":33},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":4173},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10559265,"byte_end":10559272,"line_start":186,"line_end":186,"column_start":6,"column_end":13},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":4403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10561704,"byte_end":10561709,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":4176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/pool.rs","byte_start":10564948,"byte_end":10564955,"line_start":360,"line_end":360,"column_start":21,"column_end":28},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":4403},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/schedule.rs","byte_start":10565458,"byte_end":10565470,"line_start":11,"line_end":11,"column_start":25,"column_end":37},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":4229},"to":{"krate":0,"index":3940}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/shutdown.rs","byte_start":10566343,"byte_end":10566351,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568100,"byte_end":10568112,"line_start":10,"line_end":10,"column_start":9,"column_end":21},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568338,"byte_end":10568350,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4249},"to":{"krate":2,"index":2119}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/blocking/task.rs","byte_start":10568380,"byte_end":10568392,"line_start":20,"line_end":20,"column_start":23,"column_end":35},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4249},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10571507,"byte_end":10571514,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":4277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10582383,"byte_end":10582390,"line_start":446,"line_end":446,"column_start":10,"column_end":17},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":4277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10582952,"byte_end":10582959,"line_start":470,"line_end":470,"column_start":10,"column_end":17},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":4277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/builder.rs","byte_start":10584945,"byte_end":10584952,"line_start":533,"line_end":533,"column_start":21,"column_end":28},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4277},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/context.rs","byte_start":10587421,"byte_end":10587431,"line_start":73,"line_end":73,"column_start":15,"column_end":25},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":4431},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/driver.rs","byte_start":10591883,"byte_end":10591889,"line_start":167,"line_end":167,"column_start":6,"column_end":12},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":4452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/driver.rs","byte_start":10592454,"byte_end":10592460,"line_start":187,"line_end":187,"column_start":15,"column_end":21},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":4452},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10594161,"byte_end":10594167,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":4456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599567,"byte_end":10599582,"line_start":208,"line_end":208,"column_start":21,"column_end":36},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":4379},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599730,"byte_end":10599745,"line_start":214,"line_end":214,"column_start":23,"column_end":38},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":4379},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/handle.rs","byte_start":10599903,"byte_end":10599918,"line_start":220,"line_end":220,"column_start":23,"column_end":38},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":4379},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/spawner.rs","byte_start":10600303,"byte_end":10600310,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/spawner.rs","byte_start":10600552,"byte_end":10600559,"line_start":32,"line_end":32,"column_start":10,"column_end":17},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":4477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/runtime/mod.rs","byte_start":10465323,"byte_end":10465330,"line_start":289,"line_end":289,"column_start":10,"column_end":17},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":4504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":117677,"byte_end":117683,"line_start":65,"line_end":65,"column_start":6,"column_end":12},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":119043,"byte_end":119053,"line_start":108,"line_end":108,"column_start":23,"column_end":33},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":606},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":120024,"byte_end":120040,"line_start":156,"line_end":156,"column_start":10,"column_end":26},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":4533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":120172,"byte_end":120188,"line_start":162,"line_end":162,"column_start":19,"column_end":35},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":4533},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/coop.rs","byte_start":121928,"byte_end":121934,"line_start":203,"line_end":203,"column_start":10,"column_end":16},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10618584,"byte_end":10618591,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":5743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/barrier.rs","byte_start":10621870,"byte_end":10621887,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":5755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629118,"byte_end":10629127,"line_start":216,"line_end":216,"column_start":30,"column_end":39},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":5762},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629303,"byte_end":10629312,"line_start":222,"line_end":222,"column_start":47,"column_end":56},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":5762},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10629960,"byte_end":10629969,"line_start":241,"line_end":241,"column_start":27,"column_end":36},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":5769},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10630274,"byte_end":10630283,"line_start":250,"line_end":250,"column_start":32,"column_end":41},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":5769},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631206,"byte_end":10631218,"line_start":276,"line_end":276,"column_start":27,"column_end":39},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":5781},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10631596,"byte_end":10631608,"line_start":286,"line_end":286,"column_start":32,"column_end":44},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":5781},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10633866,"byte_end":10633872,"line_start":382,"line_end":382,"column_start":32,"column_end":38},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":4635},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10633999,"byte_end":10634005,"line_start":388,"line_end":388,"column_start":36,"column_end":42},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4635},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634166,"byte_end":10634170,"line_start":394,"line_end":394,"column_start":61,"column_end":65},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":4629},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10634240,"byte_end":10634244,"line_start":395,"line_end":395,"column_start":61,"column_end":65},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4629},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637017,"byte_end":10637023,"line_start":485,"line_end":485,"column_start":31,"column_end":37},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4582},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637060,"byte_end":10637066,"line_start":486,"line_end":486,"column_start":31,"column_end":37},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":4582},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637104,"byte_end":10637112,"line_start":488,"line_end":488,"column_start":31,"column_end":39},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":4585},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637149,"byte_end":10637157,"line_start":489,"line_end":489,"column_start":31,"column_end":39},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":4585},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10637173,"byte_end":10637179,"line_start":491,"line_end":491,"column_start":9,"column_end":15},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":4582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10642789,"byte_end":10642793,"line_start":678,"line_end":678,"column_start":6,"column_end":10},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":4609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643185,"byte_end":10643191,"line_start":693,"line_end":693,"column_start":19,"column_end":25},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":4582},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643371,"byte_end":10643377,"line_start":702,"line_end":702,"column_start":18,"column_end":24},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4582},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10643531,"byte_end":10643539,"line_start":710,"line_end":710,"column_start":9,"column_end":17},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10648402,"byte_end":10648410,"line_start":828,"line_end":828,"column_start":16,"column_end":24},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10652602,"byte_end":10652610,"line_start":945,"line_end":945,"column_start":18,"column_end":26},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4585},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10653236,"byte_end":10653240,"line_start":968,"line_end":968,"column_start":12,"column_end":16},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":4629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10654082,"byte_end":10654086,"line_start":998,"line_end":998,"column_start":23,"column_end":27},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":4629},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10654772,"byte_end":10654776,"line_start":1019,"line_end":1019,"column_start":21,"column_end":25},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4629},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10655565,"byte_end":10655571,"line_start":1048,"line_end":1048,"column_start":35,"column_end":41},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":4620},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10655986,"byte_end":10655992,"line_start":1065,"line_end":1065,"column_start":24,"column_end":30},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":4582},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656136,"byte_end":10656144,"line_start":1071,"line_end":1071,"column_start":24,"column_end":32},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":4585},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656279,"byte_end":10656288,"line_start":1077,"line_end":1077,"column_start":13,"column_end":22},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":4625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/broadcast.rs","byte_start":10656461,"byte_end":10656470,"line_start":1086,"line_end":1086,"column_start":22,"column_end":31},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":4625},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10663352,"byte_end":10663357,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":4752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10673339,"byte_end":10673345,"line_start":362,"line_end":362,"column_start":9,"column_end":15},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":4766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/block.rs","byte_start":10673827,"byte_end":10673833,"line_start":379,"line_end":379,"column_start":31,"column_end":37},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":4766},"to":{"krate":2,"index":2359}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10676953,"byte_end":10676961,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":4827},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682030,"byte_end":10682038,"line_start":261,"line_end":261,"column_start":24,"column_end":32},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":4827},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682234,"byte_end":10682242,"line_start":269,"line_end":269,"column_start":19,"column_end":27},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":4827},"to":{"krate":2,"index":2119}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10682258,"byte_end":10682264,"line_start":271,"line_end":271,"column_start":9,"column_end":15},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":4820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693066,"byte_end":10693072,"line_start":604,"line_end":604,"column_start":19,"column_end":25},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":4820},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693204,"byte_end":10693210,"line_start":612,"line_end":612,"column_start":24,"column_end":30},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":4820},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10693422,"byte_end":10693428,"line_start":622,"line_end":622,"column_start":9,"column_end":15},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":4823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10694678,"byte_end":10694684,"line_start":665,"line_end":665,"column_start":18,"column_end":24},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":4823},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/bounded.rs","byte_start":10695011,"byte_end":10695017,"line_start":680,"line_end":680,"column_start":24,"column_end":30},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":4823},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10695678,"byte_end":10695680,"line_start":19,"line_end":19,"column_start":39,"column_end":41},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":4907},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10695973,"byte_end":10695975,"line_start":30,"line_end":30,"column_start":51,"column_end":53},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":4915},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10696912,"byte_end":10696916,"line_start":68,"line_end":68,"column_start":27,"column_end":31},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697549,"byte_end":10697557,"line_start":92,"line_end":92,"column_start":24,"column_end":32},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":4941},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697823,"byte_end":10697827,"line_start":101,"line_end":101,"column_start":40,"column_end":44},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10697876,"byte_end":10697880,"line_start":102,"line_end":102,"column_start":40,"column_end":44},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10698387,"byte_end":10698389,"line_start":124,"line_end":124,"column_start":12,"column_end":14},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":4907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10698821,"byte_end":10698823,"line_start":144,"line_end":144,"column_start":23,"column_end":25},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":4907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10699373,"byte_end":10699375,"line_start":162,"line_end":162,"column_start":22,"column_end":24},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":4907},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10699714,"byte_end":10699716,"line_start":174,"line_end":174,"column_start":21,"column_end":23},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":4907},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10700039,"byte_end":10700041,"line_start":190,"line_end":190,"column_start":23,"column_end":25},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":4915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10703432,"byte_end":10703434,"line_start":287,"line_end":287,"column_start":32,"column_end":34},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":4915},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10703846,"byte_end":10703850,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10704035,"byte_end":10704039,"line_start":315,"line_end":315,"column_start":21,"column_end":25},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/chan.rs","byte_start":10705040,"byte_end":10705051,"line_start":355,"line_end":355,"column_start":20,"column_end":31},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":425},"to":{"krate":0,"index":4923}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10706792,"byte_end":10706794,"line_start":54,"line_end":54,"column_start":9,"column_end":11},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":5034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10712498,"byte_end":10712500,"line_start":211,"line_end":211,"column_start":24,"column_end":26},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":5034},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10712777,"byte_end":10712779,"line_start":220,"line_end":220,"column_start":9,"column_end":11},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":5038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/list.rs","byte_start":10716178,"byte_end":10716180,"line_start":331,"line_end":331,"column_start":24,"column_end":26},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":5038},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716838,"byte_end":10716853,"line_start":16,"line_end":16,"column_start":19,"column_end":34},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":5072},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10716994,"byte_end":10717009,"line_start":24,"line_end":24,"column_start":24,"column_end":39},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":5072},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10717467,"byte_end":10717484,"line_start":41,"line_end":41,"column_start":24,"column_end":41},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":5081},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10718483,"byte_end":10718500,"line_start":71,"line_end":71,"column_start":9,"column_end":26},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":5081},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/unbounded.rs","byte_start":10721798,"byte_end":10721813,"line_start":179,"line_end":179,"column_start":9,"column_end":24},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":5072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725503,"byte_end":10725512,"line_start":10,"line_end":10,"column_start":26,"column_end":35},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":5799},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10725672,"byte_end":10725681,"line_start":16,"line_end":16,"column_start":43,"column_end":52},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":5799},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726167,"byte_end":10726179,"line_start":33,"line_end":33,"column_start":31,"column_end":43},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":5806},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726212,"byte_end":10726224,"line_start":35,"line_end":35,"column_start":26,"column_end":38},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":5806},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726564,"byte_end":10726576,"line_start":48,"line_end":48,"column_start":32,"column_end":44},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":5806},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726805,"byte_end":10726814,"line_start":60,"line_end":60,"column_start":23,"column_end":32},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":5817},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10726944,"byte_end":10726953,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":5817},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728454,"byte_end":10728470,"line_start":116,"line_end":116,"column_start":35,"column_end":51},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":5827},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mpsc/error.rs","byte_start":10728507,"byte_end":10728523,"line_start":118,"line_end":118,"column_start":30,"column_end":46},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":5827},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734894,"byte_end":10734899,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10734953,"byte_end":10734958,"line_start":160,"line_end":160,"column_start":25,"column_end":30},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735012,"byte_end":10735022,"line_start":161,"line_end":161,"column_start":25,"column_end":35},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735087,"byte_end":10735102,"line_start":162,"line_end":162,"column_start":25,"column_end":40},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735389,"byte_end":10735401,"line_start":172,"line_end":172,"column_start":23,"column_end":35},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":5838},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10735538,"byte_end":10735550,"line_start":178,"line_end":178,"column_start":16,"column_end":28},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":5838},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10736358,"byte_end":10736363,"line_start":204,"line_end":204,"column_start":17,"column_end":22},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":5147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742116,"byte_end":10742121,"line_start":407,"line_end":407,"column_start":21,"column_end":26},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742205,"byte_end":10742210,"line_start":413,"line_end":413,"column_start":21,"column_end":26},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742334,"byte_end":10742339,"line_start":422,"line_end":422,"column_start":29,"column_end":34},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":5147},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742734,"byte_end":10742744,"line_start":438,"line_end":438,"column_start":26,"column_end":36},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10742845,"byte_end":10742855,"line_start":444,"line_end":444,"column_start":27,"column_end":37},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743002,"byte_end":10743012,"line_start":451,"line_end":451,"column_start":30,"column_end":40},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743169,"byte_end":10743179,"line_start":457,"line_end":457,"column_start":45,"column_end":55},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743345,"byte_end":10743355,"line_start":463,"line_end":463,"column_start":49,"column_end":59},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743533,"byte_end":10743548,"line_start":471,"line_end":471,"column_start":26,"column_end":41},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743645,"byte_end":10743660,"line_start":477,"line_end":477,"column_start":27,"column_end":42},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743803,"byte_end":10743818,"line_start":484,"line_end":484,"column_start":30,"column_end":45},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10743971,"byte_end":10743986,"line_start":490,"line_end":490,"column_start":45,"column_end":60},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/mutex.rs","byte_start":10744148,"byte_end":10744163,"line_start":496,"line_end":496,"column_start":49,"column_end":64},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":5155},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749026,"byte_end":10749034,"line_start":156,"line_end":156,"column_start":26,"column_end":34},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749067,"byte_end":10749075,"line_start":157,"line_end":157,"column_start":26,"column_end":34},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10749905,"byte_end":10749911,"line_start":195,"line_end":195,"column_start":6,"column_end":12},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":5843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10758487,"byte_end":10758493,"line_start":455,"line_end":455,"column_start":18,"column_end":24},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":5843},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10760403,"byte_end":10760411,"line_start":510,"line_end":510,"column_start":6,"column_end":14},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":5865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10760924,"byte_end":10760932,"line_start":526,"line_end":526,"column_start":17,"column_end":25},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10766628,"byte_end":10766636,"line_start":668,"line_end":668,"column_start":15,"column_end":23},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/notify.rs","byte_start":10769691,"byte_end":10769697,"line_start":732,"line_end":732,"column_start":35,"column_end":41},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771573,"byte_end":10771582,"line_start":54,"line_end":54,"column_start":27,"column_end":36},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":5895},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771744,"byte_end":10771753,"line_start":60,"line_end":60,"column_start":32,"column_end":41},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":5895},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10771822,"byte_end":10771834,"line_start":64,"line_end":64,"column_start":27,"column_end":39},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":5907},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10772133,"byte_end":10772145,"line_start":73,"line_end":73,"column_start":32,"column_end":44},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":5907},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10773931,"byte_end":10773937,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":5883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781600,"byte_end":10781606,"line_start":395,"line_end":395,"column_start":18,"column_end":24},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":5883},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10781745,"byte_end":10781753,"line_start":403,"line_end":403,"column_start":9,"column_end":17},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":5889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786144,"byte_end":10786152,"line_start":552,"line_end":552,"column_start":18,"column_end":26},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":5889},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786299,"byte_end":10786307,"line_start":560,"line_end":560,"column_start":20,"column_end":28},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":5889},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10786770,"byte_end":10786775,"line_start":576,"line_end":576,"column_start":9,"column_end":14},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":5319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791147,"byte_end":10791152,"line_start":722,"line_end":722,"column_start":31,"column_end":36},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":5319},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791189,"byte_end":10791194,"line_start":723,"line_end":723,"column_start":31,"column_end":36},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":5319},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791219,"byte_end":10791224,"line_start":725,"line_end":725,"column_start":18,"column_end":23},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":5319},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791593,"byte_end":10791598,"line_start":743,"line_end":743,"column_start":36,"column_end":41},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":5319},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10791993,"byte_end":10791998,"line_start":758,"line_end":758,"column_start":6,"column_end":11},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":5920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/oneshot.rs","byte_start":10793711,"byte_end":10793716,"line_start":824,"line_end":824,"column_start":21,"column_end":26},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":5920},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10797775,"byte_end":10797784,"line_start":107,"line_end":107,"column_start":6,"column_end":15},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":5432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10808809,"byte_end":10808818,"line_start":397,"line_end":397,"column_start":21,"column_end":30},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":5432},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10809017,"byte_end":10809023,"line_start":405,"line_end":405,"column_start":6,"column_end":12},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":5444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10809889,"byte_end":10809896,"line_start":434,"line_end":434,"column_start":17,"column_end":24},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":5438},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10810574,"byte_end":10810581,"line_start":458,"line_end":458,"column_start":10,"column_end":17},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":5438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10811380,"byte_end":10811387,"line_start":488,"line_end":488,"column_start":15,"column_end":22},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":5438},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812637,"byte_end":10812644,"line_start":518,"line_end":518,"column_start":22,"column_end":29},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":5438},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812691,"byte_end":10812703,"line_start":522,"line_end":522,"column_start":6,"column_end":18},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":5936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812796,"byte_end":10812808,"line_start":528,"line_end":528,"column_start":23,"column_end":35},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":5936},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10812952,"byte_end":10812964,"line_start":534,"line_end":534,"column_start":28,"column_end":40},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":5936},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813011,"byte_end":10813026,"line_start":538,"line_end":538,"column_start":6,"column_end":21},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":5926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813544,"byte_end":10813559,"line_start":553,"line_end":553,"column_start":23,"column_end":38},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":5926},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813845,"byte_end":10813860,"line_start":562,"line_end":562,"column_start":28,"column_end":43},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":5926},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/batch_semaphore.rs","byte_start":10813953,"byte_end":10813959,"line_start":567,"line_end":567,"column_start":35,"column_end":41},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":5444},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10816629,"byte_end":10816638,"line_start":61,"line_end":61,"column_start":6,"column_end":15},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":5941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10822976,"byte_end":10822991,"line_start":234,"line_end":234,"column_start":10,"column_end":25},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":5945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823236,"byte_end":10823256,"line_start":243,"line_end":243,"column_start":6,"column_end":26},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":5952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823510,"byte_end":10823525,"line_start":252,"line_end":252,"column_start":19,"column_end":34},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":5945},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/semaphore.rs","byte_start":10823633,"byte_end":10823653,"line_start":258,"line_end":258,"column_start":15,"column_end":35},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":5952},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10827008,"byte_end":10827023,"line_start":96,"line_end":96,"column_start":13,"column_end":28},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":5550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830441,"byte_end":10830456,"line_start":201,"line_end":201,"column_start":36,"column_end":51},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830636,"byte_end":10830651,"line_start":210,"line_end":210,"column_start":38,"column_end":53},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10830827,"byte_end":10830842,"line_start":219,"line_end":219,"column_start":30,"column_end":45},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10831306,"byte_end":10831322,"line_start":239,"line_end":239,"column_start":21,"column_end":37},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":5577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10832942,"byte_end":10832958,"line_start":292,"line_end":292,"column_start":36,"column_end":52},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10833138,"byte_end":10833154,"line_start":301,"line_end":301,"column_start":38,"column_end":54},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10833330,"byte_end":10833346,"line_start":310,"line_end":310,"column_start":30,"column_end":46},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834422,"byte_end":10834428,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":5957},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834482,"byte_end":10834488,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":5957},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834722,"byte_end":10834737,"line_start":350,"line_end":350,"column_start":25,"column_end":40},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834795,"byte_end":10834810,"line_start":351,"line_end":351,"column_start":25,"column_end":40},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10834875,"byte_end":10834891,"line_start":352,"line_end":352,"column_start":25,"column_end":41},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835204,"byte_end":10835220,"line_start":357,"line_end":357,"column_start":25,"column_end":41},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10835278,"byte_end":10835284,"line_start":359,"line_end":359,"column_start":17,"column_end":23},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":5957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839672,"byte_end":10839687,"line_start":512,"line_end":512,"column_start":32,"column_end":47},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":5550},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839818,"byte_end":10839834,"line_start":520,"line_end":520,"column_start":32,"column_end":48},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10839968,"byte_end":10839984,"line_start":528,"line_end":528,"column_start":35,"column_end":51},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":5577},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10840098,"byte_end":10840104,"line_start":534,"line_end":534,"column_start":21,"column_end":27},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":5957},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/rwlock.rs","byte_start":10840196,"byte_end":10840202,"line_start":540,"line_end":540,"column_start":29,"column_end":35},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":5957},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10846477,"byte_end":10846488,"line_start":135,"line_end":135,"column_start":6,"column_end":17},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":5657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852311,"byte_end":10852322,"line_start":279,"line_end":279,"column_start":18,"column_end":29},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":5657},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852408,"byte_end":10852419,"line_start":285,"line_end":285,"column_start":21,"column_end":32},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":5657},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852552,"byte_end":10852563,"line_start":291,"line_end":291,"column_start":22,"column_end":33},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":5657},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852588,"byte_end":10852599,"line_start":292,"line_end":292,"column_start":22,"column_end":33},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":5657},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/task/atomic_waker.rs","byte_start":10852695,"byte_end":10852700,"line_start":299,"line_end":299,"column_start":19,"column_end":24},"kind":{"Impl":{"id":512}},"from":{"krate":2,"index":9726},"to":{"krate":0,"index":5679}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856733,"byte_end":10856742,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":5995},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10856922,"byte_end":10856931,"line_start":131,"line_end":131,"column_start":47,"column_end":56},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":5995},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857124,"byte_end":10857133,"line_start":139,"line_end":139,"column_start":27,"column_end":36},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":6001},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10857295,"byte_end":10857304,"line_start":145,"line_end":145,"column_start":32,"column_end":41},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":6001},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10858510,"byte_end":10858518,"line_start":195,"line_end":195,"column_start":9,"column_end":17},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":5964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861051,"byte_end":10861059,"line_start":282,"line_end":282,"column_start":19,"column_end":27},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":5964},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861397,"byte_end":10861405,"line_start":295,"line_end":295,"column_start":18,"column_end":26},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":5964},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10861775,"byte_end":10861781,"line_start":306,"line_end":306,"column_start":9,"column_end":15},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":5971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864365,"byte_end":10864371,"line_start":396,"line_end":396,"column_start":18,"column_end":24},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":5971},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/sync/watch.rs","byte_start":10864561,"byte_end":10864564,"line_start":405,"line_end":405,"column_start":24,"column_end":27},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":5977},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/yield_now.rs","byte_start":10876836,"byte_end":10876844,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":6177},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10884057,"byte_end":10884065,"line_start":222,"line_end":222,"column_start":6,"column_end":14},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10892016,"byte_end":10892024,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10892163,"byte_end":10892171,"line_start":456,"line_end":456,"column_start":17,"column_end":25},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10893136,"byte_end":10893144,"line_start":480,"line_end":480,"column_start":18,"column_end":26},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10893225,"byte_end":10893233,"line_start":486,"line_end":486,"column_start":15,"column_end":23},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10894100,"byte_end":10894108,"line_start":516,"line_end":516,"column_start":28,"column_end":36},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":7087},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10894993,"byte_end":10894999,"line_start":547,"line_end":547,"column_start":6,"column_end":12},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":6052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/local.rs","byte_start":10895562,"byte_end":10895565,"line_start":566,"line_end":566,"column_start":25,"column_end":28},"kind":{"Impl":{"id":531}},"from":{"krate":5,"index":4500},"to":{"krate":0,"index":3940}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10899072,"byte_end":10899080,"line_start":100,"line_end":100,"column_start":18,"column_end":26},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":6121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10900856,"byte_end":10900864,"line_start":165,"line_end":165,"column_start":25,"column_end":33},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":6121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901072,"byte_end":10901080,"line_start":173,"line_end":173,"column_start":33,"column_end":41},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":6121},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901401,"byte_end":10901416,"line_start":188,"line_end":188,"column_start":40,"column_end":55},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":7031},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10901717,"byte_end":10901722,"line_start":198,"line_end":198,"column_start":26,"column_end":31},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":6149},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902340,"byte_end":10902341,"line_start":222,"line_end":222,"column_start":37,"column_end":38},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":6162},"to":{"krate":0,"index":6160}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902526,"byte_end":10902537,"line_start":230,"line_end":230,"column_start":21,"column_end":32},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":6194},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902681,"byte_end":10902692,"line_start":236,"line_end":236,"column_start":23,"column_end":34},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":6194},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/task/task_local.rs","byte_start":10902839,"byte_end":10902850,"line_start":242,"line_end":242,"column_start":16,"column_end":27},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":6194},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/clock.rs","byte_start":10906417,"byte_end":10906422,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":6591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932605,"byte_end":10932614,"line_start":171,"line_end":171,"column_start":18,"column_end":27},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":6232},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932698,"byte_end":10932707,"line_start":177,"line_end":177,"column_start":26,"column_end":35},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":6232},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10932853,"byte_end":10932862,"line_start":183,"line_end":183,"column_start":6,"column_end":15},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":6232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10939884,"byte_end":10939894,"line_start":374,"line_end":374,"column_start":22,"column_end":32},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":6596},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10939919,"byte_end":10939929,"line_start":375,"line_end":375,"column_start":22,"column_end":32},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":6596},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10941370,"byte_end":10941381,"line_start":411,"line_end":411,"column_start":6,"column_end":17},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":6607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10944904,"byte_end":10944921,"line_start":509,"line_end":509,"column_start":26,"column_end":43},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":6266},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945222,"byte_end":10945239,"line_start":518,"line_end":518,"column_start":6,"column_end":23},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":6266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945478,"byte_end":10945489,"line_start":528,"line_end":528,"column_start":22,"column_end":33},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":6607},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945514,"byte_end":10945525,"line_start":529,"line_end":529,"column_start":22,"column_end":33},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":6607},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10945564,"byte_end":10945575,"line_start":531,"line_end":531,"column_start":35,"column_end":46},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":6607},"to":{"krate":0,"index":631}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10946093,"byte_end":10946103,"line_start":553,"line_end":553,"column_start":6,"column_end":16},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":6596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10948979,"byte_end":10948990,"line_start":628,"line_end":628,"column_start":6,"column_end":17},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":6603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/entry.rs","byte_start":10951381,"byte_end":10951391,"line_start":688,"line_end":688,"column_start":15,"column_end":25},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":6596},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10951896,"byte_end":10951902,"line_start":12,"line_end":12,"column_start":6,"column_end":12},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":6623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10952473,"byte_end":10952479,"line_start":31,"line_end":31,"column_start":10,"column_end":16},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":6623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/handle.rs","byte_start":10954548,"byte_end":10954554,"line_start":80,"line_end":80,"column_start":21,"column_end":27},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":6623},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/level.rs","byte_start":10966852,"byte_end":10966857,"line_start":42,"line_end":42,"column_start":6,"column_end":11},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":6329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/level.rs","byte_start":10972925,"byte_end":10972930,"line_start":233,"line_end":233,"column_start":21,"column_end":26},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":6329},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/wheel/mod.rs","byte_start":10956175,"byte_end":10956180,"line_start":52,"line_end":52,"column_start":6,"column_end":11},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":6636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10976057,"byte_end":10976062,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":7003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/sleep.rs","byte_start":10977450,"byte_end":10977455,"line_start":120,"line_end":120,"column_start":17,"column_end":22},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":7003},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10915577,"byte_end":10915586,"line_start":102,"line_end":102,"column_start":6,"column_end":15},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":6651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10917001,"byte_end":10917007,"line_start":157,"line_end":157,"column_start":9,"column_end":15},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":6643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10920013,"byte_end":10920019,"line_start":246,"line_end":246,"column_start":6,"column_end":12},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":6623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10924713,"byte_end":10924719,"line_start":379,"line_end":379,"column_start":18,"column_end":24},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":6643},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925450,"byte_end":10925456,"line_start":417,"line_end":417,"column_start":18,"column_end":24},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":6643},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925582,"byte_end":10925587,"line_start":428,"line_end":428,"column_start":6,"column_end":11},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":6423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/driver/mod.rs","byte_start":10925895,"byte_end":10925900,"line_start":441,"line_end":441,"column_start":21,"column_end":26},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":6423},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979606,"byte_end":10979611,"line_start":37,"line_end":37,"column_start":21,"column_end":26},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":6658},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10979852,"byte_end":10979857,"line_start":54,"line_end":54,"column_start":6,"column_end":11},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":6658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980757,"byte_end":10980762,"line_start":86,"line_end":86,"column_start":23,"column_end":28},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":6658},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10980789,"byte_end":10980794,"line_start":88,"line_end":88,"column_start":23,"column_end":28},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":6658},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981256,"byte_end":10981263,"line_start":102,"line_end":102,"column_start":6,"column_end":13},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":6687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981351,"byte_end":10981358,"line_start":108,"line_end":108,"column_start":23,"column_end":30},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":6687},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981502,"byte_end":10981509,"line_start":114,"line_end":114,"column_start":28,"column_end":35},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":6687},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/error.rs","byte_start":10981546,"byte_end":10981551,"line_start":116,"line_end":116,"column_start":33,"column_end":38},"kind":{"Impl":{"id":578}},"from":{"krate":1,"index":2761},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10983093,"byte_end":10983100,"line_start":38,"line_end":38,"column_start":6,"column_end":13},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":6701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986850,"byte_end":10986857,"line_start":153,"line_end":153,"column_start":35,"column_end":42},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10986986,"byte_end":10986993,"line_start":159,"line_end":159,"column_start":35,"column_end":42},"kind":{"Impl":{"id":581}},"from":{"krate":1,"index":8281},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987108,"byte_end":10987115,"line_start":165,"line_end":165,"column_start":29,"column_end":36},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":2143}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987280,"byte_end":10987287,"line_start":173,"line_end":173,"column_start":35,"column_end":42},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":2174}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987392,"byte_end":10987399,"line_start":179,"line_end":179,"column_start":19,"column_end":26},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":2148}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987540,"byte_end":10987547,"line_start":187,"line_end":187,"column_start":29,"column_end":36},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":2148}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987708,"byte_end":10987715,"line_start":195,"line_end":195,"column_start":35,"column_end":42},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":2178}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/instant.rs","byte_start":10987822,"byte_end":10987829,"line_start":201,"line_end":201,"column_start":21,"column_end":28},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":6701},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/interval.rs","byte_start":10991568,"byte_end":10991576,"line_start":119,"line_end":119,"column_start":6,"column_end":14},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":6724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996345,"byte_end":10996352,"line_start":114,"line_end":114,"column_start":9,"column_end":16},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":6965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/time/timeout.rs","byte_start":10996890,"byte_end":10996897,"line_start":135,"line_end":135,"column_start":20,"column_end":27},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":6965},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/bit.rs","byte_start":10997542,"byte_end":10997546,"line_start":9,"line_end":9,"column_start":6,"column_end":10},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":6876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/bit.rs","byte_start":10998974,"byte_end":10998978,"line_start":53,"line_end":53,"column_start":21,"column_end":25},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":6876},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11002921,"byte_end":11002928,"line_start":87,"line_end":87,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2066},"to":{"krate":0,"index":6768}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004128,"byte_end":11004132,"line_start":142,"line_end":142,"column_start":31,"column_end":35},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":6776},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004169,"byte_end":11004173,"line_start":143,"line_end":143,"column_start":31,"column_end":35},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":6776},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004210,"byte_end":11004220,"line_start":144,"line_end":144,"column_start":31,"column_end":41},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":6783},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004257,"byte_end":11004267,"line_start":145,"line_end":145,"column_start":31,"column_end":41},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":6783},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004304,"byte_end":11004307,"line_start":146,"line_end":146,"column_start":31,"column_end":34},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":6770},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004344,"byte_end":11004347,"line_start":147,"line_end":147,"column_start":31,"column_end":34},"kind":{"Impl":{"id":598}},"from":{"krate":0,"index":6770},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11004963,"byte_end":11004967,"line_start":173,"line_end":173,"column_start":9,"column_end":13},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":6758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11010573,"byte_end":11010577,"line_start":321,"line_end":321,"column_start":24,"column_end":28},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":6758},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11010716,"byte_end":11010725,"line_start":327,"line_end":327,"column_start":16,"column_end":25},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":6764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011292,"byte_end":11011301,"line_start":346,"line_end":346,"column_start":24,"column_end":33},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":6764},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011459,"byte_end":11011462,"line_start":352,"line_end":352,"column_start":24,"column_end":27},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":6770},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011724,"byte_end":11011727,"line_start":362,"line_end":362,"column_start":18,"column_end":21},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":6770},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11011994,"byte_end":11011997,"line_start":370,"line_end":370,"column_start":36,"column_end":39},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":6770},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11012118,"byte_end":11012122,"line_start":376,"line_end":376,"column_start":16,"column_end":20},"kind":{"Impl":{"id":606}},"from":{"krate":0,"index":6776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11014629,"byte_end":11014633,"line_start":451,"line_end":451,"column_start":9,"column_end":13},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":6776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11014977,"byte_end":11014981,"line_start":464,"line_end":464,"column_start":21,"column_end":25},"kind":{"Impl":{"id":608}},"from":{"krate":0,"index":6776},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11015329,"byte_end":11015333,"line_start":480,"line_end":480,"column_start":9,"column_end":13},"kind":{"Impl":{"id":609}},"from":{"krate":0,"index":6776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11015695,"byte_end":11015705,"line_start":494,"line_end":494,"column_start":9,"column_end":19},"kind":{"Impl":{"id":610}},"from":{"krate":0,"index":6783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11016642,"byte_end":11016652,"line_start":524,"line_end":524,"column_start":21,"column_end":31},"kind":{"Impl":{"id":611}},"from":{"krate":0,"index":6783},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11016795,"byte_end":11016800,"line_start":533,"line_end":533,"column_start":9,"column_end":14},"kind":{"Impl":{"id":612}},"from":{"krate":0,"index":6787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11017683,"byte_end":11017687,"line_start":563,"line_end":563,"column_start":16,"column_end":20},"kind":{"Impl":{"id":613}},"from":{"krate":0,"index":6804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11018247,"byte_end":11018252,"line_start":578,"line_end":578,"column_start":9,"column_end":14},"kind":{"Impl":{"id":614}},"from":{"krate":0,"index":6808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/slab.rs","byte_start":11018578,"byte_end":11018585,"line_start":588,"line_end":588,"column_start":6,"column_end":13},"kind":{"Impl":{"id":615}},"from":{"krate":0,"index":6886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":134704,"byte_end":134714,"line_start":29,"line_end":29,"column_start":31,"column_end":41},"kind":{"Impl":{"id":616}},"from":{"krate":0,"index":621},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":134784,"byte_end":134794,"line_start":30,"line_end":30,"column_start":31,"column_end":41},"kind":{"Impl":{"id":617}},"from":{"krate":0,"index":621},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136094,"byte_end":136102,"line_start":70,"line_end":70,"column_start":31,"column_end":39},"kind":{"Impl":{"id":618}},"from":{"krate":0,"index":637},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136139,"byte_end":136147,"line_start":71,"line_end":71,"column_start":31,"column_end":39},"kind":{"Impl":{"id":619}},"from":{"krate":0,"index":637},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136198,"byte_end":136208,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"kind":{"Impl":{"id":620}},"from":{"krate":0,"index":621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":136443,"byte_end":136453,"line_start":86,"line_end":86,"column_start":15,"column_end":25},"kind":{"Impl":{"id":621}},"from":{"krate":0,"index":621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139302,"byte_end":139312,"line_start":176,"line_end":176,"column_start":30,"column_end":40},"kind":{"Impl":{"id":622}},"from":{"krate":0,"index":621},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139669,"byte_end":139679,"line_start":191,"line_end":191,"column_start":15,"column_end":25},"kind":{"Impl":{"id":623}},"from":{"krate":0,"index":621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":139866,"byte_end":139876,"line_start":198,"line_end":198,"column_start":27,"column_end":37},"kind":{"Impl":{"id":624}},"from":{"krate":0,"index":621},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":141048,"byte_end":141058,"line_start":244,"line_end":244,"column_start":19,"column_end":29},"kind":{"Impl":{"id":625}},"from":{"krate":0,"index":621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":141427,"byte_end":141438,"line_start":258,"line_end":258,"column_start":33,"column_end":44},"kind":{"Impl":{"id":626}},"from":{"krate":0,"index":6901},"to":{"krate":2,"index":5619}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":142112,"byte_end":142120,"line_start":283,"line_end":283,"column_start":9,"column_end":17},"kind":{"Impl":{"id":627}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/linked_list.rs","byte_start":142319,"byte_end":142327,"line_start":293,"line_end":293,"column_start":24,"column_end":32},"kind":{"Impl":{"id":628}},"from":{"krate":0,"index":637},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/wake.rs","byte_start":11025865,"byte_end":11025869,"line_start":8,"line_end":8,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2078},"to":{"krate":0,"index":6927}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/wake.rs","byte_start":11025872,"byte_end":11025876,"line_start":8,"line_end":8,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2090},"to":{"krate":0,"index":6927}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.0.2/src/util/wake.rs","byte_start":11026187,"byte_end":11026195,"line_start":23,"line_end":23,"column_start":16,"column_end":24},"kind":{"Impl":{"id":629}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2278}}]}