{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2","program":"/Users/AlexF/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","tokio_util","--edition=2018","/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"codec\"","--cfg","feature=\"default\"","-C","metadata=dd1c773290d2d6f7","-C","extra-filename=-dd1c773290d2d6f7","--out-dir","/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps","-L","dependency=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps","--extern","async_stream=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libasync_stream-839035104829b5c6.rmeta","--extern","bytes=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libbytes-82d292964be852e7.rmeta","--extern","futures_core=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libfutures_core-81a55397060a371b.rmeta","--extern","futures_sink=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libfutures_sink-97d2c5601a93ac56.rmeta","--extern","log=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/liblog-188b685e0b96bcf0.rmeta","--extern","pin_project_lite=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libpin_project_lite-5395d5460189e857.rmeta","--extern","tokio=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libtokio-b47697636f46fa20.rmeta","--extern","tokio_stream=/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libtokio_stream-f2a1aa6dc453405b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/AlexF/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/AlexF/doomline/Rust/projects/postgres/target/rls/debug/deps/libtokio_util-dd1c773290d2d6f7.rmeta"},"prelude":{"crate_id":{"name":"tokio_util","disambiguator":[12629119090262625996,12799866836192281884]},"crate_root":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src","external_crates":[{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11263399830942021807,3354326593337767418]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","num":2,"id":{"name":"core","disambiguator":[6552575213732972370,4857478896615676938]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9368402477752345001,16510660328274119402]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11979046517868875526,4248718423519269454]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5389889921351115945,6106823979989002352]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18147862036360416397,10602909980673647499]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17806817554892560348,14725492049942068312]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[764992845537178953,4386711774585810915]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6726354693825255046,1562708793232137953]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13802537688027037173,7865830378773675775]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12634588057184811132,13278508508218871713]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5580722395240640672,9810153816205700700]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[451124501899321987,10206045407480806854]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[4126279991979072403,11569616848169612015]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[1864816784851368348,2345431951253805751]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":16,"id":{"name":"futures_core","disambiguator":[4514719759544758100,8714355533131835884]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":17,"id":{"name":"tokio","disambiguator":[10030187288099224404,11177545360678261205]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":18,"id":{"name":"mio","disambiguator":[10875641806814574164,6783483307320677095]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","num":19,"id":{"name":"log","disambiguator":[6324800999915998487,506396420814187729]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":20,"id":{"name":"cfg_if","disambiguator":[2842719152716346652,13309214462252251415]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":21,"id":{"name":"libc","disambiguator":[2624980415912832056,1321477192649819246]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","num":22,"id":{"name":"pin_project_lite","disambiguator":[4780974279005373656,15252840094548328595]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","num":23,"id":{"name":"bytes","disambiguator":[12372896624429361894,2693718667056552145]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":24,"id":{"name":"memchr","disambiguator":[2558111070204424716,3945823243777761199]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":25,"id":{"name":"async_stream","disambiguator":[8069613321742051124,12514996651220083773]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","num":26,"id":{"name":"async_stream_impl","disambiguator":[14817766838172035481,8939314230040458541]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","num":27,"id":{"name":"tokio_stream","disambiguator":[12429870438692909061,16303197346562595445]}},{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","num":28,"id":{"name":"futures_sink","disambiguator":[12071075083415889299,7028240411106585829]}}],"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":0,"byte_end":5436,"line_start":1,"line_end":200,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":635},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366551,"byte_end":11366561,"line_start":262,"line_end":262,"column_start":28,"column_end":38},"alias_span":null,"name":"BytesCodec","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366600,"byte_end":11366607,"line_start":265,"line_end":265,"column_start":24,"column_end":31},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366646,"byte_end":11366653,"line_start":268,"line_end":268,"column_start":24,"column_end":31},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":921},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366815,"byte_end":11366821,"line_start":275,"line_end":275,"column_start":24,"column_end":30},"alias_span":null,"name":"Framed","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":668},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366823,"byte_end":11366834,"line_start":275,"line_end":275,"column_start":32,"column_end":43},"alias_span":null,"name":"FramedParts","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":880},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366882,"byte_end":11366892,"line_start":278,"line_end":278,"column_start":28,"column_end":38},"alias_span":null,"name":"FramedRead","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":839},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366941,"byte_end":11366952,"line_start":281,"line_end":281,"column_start":29,"column_end":40},"alias_span":null,"name":"FramedWrite","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":692},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11367014,"byte_end":11367034,"line_start":284,"line_end":284,"column_start":34,"column_end":54},"alias_span":null,"name":"LengthDelimitedCodec","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":547},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11367036,"byte_end":11367061,"line_start":284,"line_end":284,"column_start":56,"column_end":81},"alias_span":null,"name":"LengthDelimitedCodecError","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11367110,"byte_end":11367120,"line_start":287,"line_end":287,"column_start":29,"column_end":39},"alias_span":null,"name":"LinesCodec","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":742},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11367122,"byte_end":11367137,"line_start":287,"line_end":287,"column_start":41,"column_end":56},"alias_span":null,"name":"LinesCodecError","value":"","parent":{"krate":0,"index":249}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","byte_start":6572,"byte_end":6589,"line_start":4,"line_end":4,"column_start":30,"column_end":47},"alias_span":null,"name":"CancellationToken","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","byte_start":6591,"byte_end":6616,"line_start":4,"line_end":4,"column_start":49,"column_end":74},"alias_span":null,"name":"WaitForCancellationFuture","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","byte_start":6699,"byte_end":6712,"line_start":9,"line_end":9,"column_start":25,"column_end":38},"alias_span":null,"name":"PollSemaphore","value":"","parent":{"krate":0,"index":11}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":0,"byte_end":5436,"line_start":1,"line_end":200,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":9},{"krate":0,"index":249},{"krate":0,"index":11},{"krate":0,"index":177},{"krate":0,"index":224}],"decl_id":null,"docs":" Utilities for working with Tokio.","sig":null,"attributes":[{"value":"allow(clippy :: needless_doctest_main)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":60,"byte_end":100,"line_start":2,"line_end":2,"column_start":1,"column_end":41}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":101,"byte_end":207,"line_start":3,"line_end":8,"column_start":1,"column_end":3}},{"value":"/ Utilities for working with Tokio.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":416,"byte_end":453,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":454,"byte_end":457,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This crate is not versioned in lockstep with the core","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":458,"byte_end":515,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ [`tokio`] crate. However, `tokio-util` _will_ respect Rust's","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":516,"byte_end":580,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/ semantic versioning policy, especially with regard to breaking changes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":581,"byte_end":656,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":657,"byte_end":660,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`tokio`]: https://docs.rs/tokio","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":661,"byte_end":697,"line_start":22,"line_end":22,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":249},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"codec","qualname":"::codec","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" Adaptors from AsyncRead/AsyncWrite to Stream/Sink","sig":null,"attributes":[{"value":"cfg(feature = \"codec\")","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/cfg.rs","byte_start":5512,"byte_end":5537,"line_start":4,"line_end":4,"column_start":13,"column_end":38}},{"value":"/ Adaptors from AsyncRead/AsyncWrite to Stream/Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356279,"byte_end":11356332,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356333,"byte_end":11356336,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356337,"byte_end":11356412,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\".","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356413,"byte_end":11356478,"line_start":4,"line_end":4,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356479,"byte_end":11356482,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module contains adapters to go from streams of bytes, [`AsyncRead`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356483,"byte_end":11356563,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ [`AsyncWrite`], to framed streams implementing [`Sink`] and [`Stream`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356564,"byte_end":11356639,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ Framed streams are also known as transports.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356640,"byte_end":11356688,"line_start":8,"line_end":8,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356689,"byte_end":11356692,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # The Decoder trait","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356693,"byte_end":11356716,"line_start":10,"line_end":10,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356717,"byte_end":11356720,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ A [`Decoder`] is used together with [`FramedRead`] or [`Framed`] to turn an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356721,"byte_end":11356800,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AsyncRead`] into a [`Stream`]. The job of the decoder trait is to specify","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356801,"byte_end":11356880,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ how sequences of bytes are turned into a sequence of frames, and to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356881,"byte_end":11356952,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ determine where the boundaries between frames are.  The job of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11356953,"byte_end":11357023,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ `FramedRead` is to repeatedly switch between reading more data from the IO","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357024,"byte_end":11357102,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ resource, and asking the decoder whether we have received enough data to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357103,"byte_end":11357179,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ decode another frame of data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357180,"byte_end":11357213,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357214,"byte_end":11357217,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The main method on the `Decoder` trait is the [`decode`] method. This method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357218,"byte_end":11357298,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ takes as argument the data that has been read so far, and when it is called,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357299,"byte_end":11357379,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ it will be in one of the following situations:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357380,"byte_end":11357430,"line_start":22,"line_end":22,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357431,"byte_end":11357434,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/  1. The buffer contains less than a full frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357435,"byte_end":11357486,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/  2. The buffer contains exactly a full frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357487,"byte_end":11357536,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/  3. The buffer contains more than a full frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357537,"byte_end":11357588,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357589,"byte_end":11357592,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In the first situation, the decoder should return `Ok(None)`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357593,"byte_end":11357658,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357659,"byte_end":11357662,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In the second situation, the decoder should clear the provided buffer and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357663,"byte_end":11357740,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ return `Ok(Some(the_decoded_frame))`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357741,"byte_end":11357782,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357783,"byte_end":11357786,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In the third situation, the decoder should use a method such as [`split_to`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357787,"byte_end":11357867,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ or [`advance`] to modify the buffer such that the frame is removed from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357868,"byte_end":11357947,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ buffer, but any data in the buffer after that frame should still remain in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11357948,"byte_end":11358026,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the buffer. The decoder should also return `Ok(Some(the_decoded_frame))` in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358027,"byte_end":11358106,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ this case.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358107,"byte_end":11358121,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358122,"byte_end":11358125,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Finally the decoder may return an error if the data is invalid in some way.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358126,"byte_end":11358205,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ The decoder should _not_ return an error just because it has yet to receive","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358206,"byte_end":11358285,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ a full frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358286,"byte_end":11358303,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358304,"byte_end":11358307,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ It is guaranteed that, from one call to `decode` to another, the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358308,"byte_end":11358385,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ buffer will contain the exact same data as before, except that if more data","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358386,"byte_end":11358465,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/ has arrived through the IO resource, that data will have been appended to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358466,"byte_end":11358543,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ the buffer.  This means that reading frames from a `FramedRead` is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358544,"byte_end":11358614,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ essentially equivalent to the following loop:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358615,"byte_end":11358664,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358665,"byte_end":11358668,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358669,"byte_end":11358682,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::AsyncReadExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358683,"byte_end":11358715,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/ # // This uses async_stream to create an example that compiles.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358716,"byte_end":11358783,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/ # fn foo() -> impl futures_core::Stream<Item = std::io::Result<bytes::BytesMut>> { async_stream::try_stream! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358784,"byte_end":11358898,"line_start":52,"line_end":52,"column_start":1,"column_end":115}},{"value":"/ # use tokio_util::codec::Decoder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358899,"byte_end":11358936,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ # let mut decoder = tokio_util::codec::BytesCodec::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358937,"byte_end":11358998,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ # let io_resource = &mut &[0u8, 1, 2, 3][..];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11358999,"byte_end":11359048,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359049,"byte_end":11359052,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ let mut buf = bytes::BytesMut::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359053,"byte_end":11359094,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359095,"byte_end":11359105,"line_start":58,"line_end":58,"column_start":1,"column_end":11}},{"value":"/     // The read_buf call will append to buf rather than overwrite existing data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359106,"byte_end":11359190,"line_start":59,"line_end":59,"column_start":1,"column_end":85}},{"value":"/     let len = io_resource.read_buf(&mut buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359191,"byte_end":11359247,"line_start":60,"line_end":60,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359248,"byte_end":11359251,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     if len == 0 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359252,"byte_end":11359273,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/         while let Some(frame) = decoder.decode_eof(&mut buf)? {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359274,"byte_end":11359341,"line_start":63,"line_end":63,"column_start":1,"column_end":68}},{"value":"/             yield frame;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359342,"byte_end":11359370,"line_start":64,"line_end":64,"column_start":1,"column_end":29}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359371,"byte_end":11359384,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/         break;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359385,"byte_end":11359403,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359404,"byte_end":11359413,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359414,"byte_end":11359417,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/     while let Some(frame) = decoder.decode(&mut buf)? {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359418,"byte_end":11359477,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"/         yield frame;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359478,"byte_end":11359502,"line_start":70,"line_end":70,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359503,"byte_end":11359512,"line_start":71,"line_end":71,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359513,"byte_end":11359518,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/ # }}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359519,"byte_end":11359527,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359528,"byte_end":11359535,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ The example above uses `yield` whenever the `Stream` produces an item.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359536,"byte_end":11359610,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359611,"byte_end":11359614,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ## Example decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359615,"byte_end":11359637,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359638,"byte_end":11359641,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ As an example, consider a protocol that can be used to send strings where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359642,"byte_end":11359719,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ each frame is a four byte integer that contains the length of the frame,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359720,"byte_end":11359796,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ followed by that many bytes of string data. The decoder fails with an error","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359797,"byte_end":11359876,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ if the string data is not valid utf-8 or too long.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359877,"byte_end":11359931,"line_start":82,"line_end":82,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359932,"byte_end":11359935,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Such a decoder can be written like this:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359936,"byte_end":11359980,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359981,"byte_end":11359988,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ use tokio_util::codec::Decoder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11359989,"byte_end":11360024,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/ use bytes::{BytesMut, Buf};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360025,"byte_end":11360056,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360057,"byte_end":11360060,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ struct MyStringDecoder {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360061,"byte_end":11360090,"line_start":89,"line_end":89,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360091,"byte_end":11360094,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ const MAX: usize = 8 * 1024 * 1024;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360095,"byte_end":11360134,"line_start":91,"line_end":91,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360135,"byte_end":11360138,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ impl Decoder for MyStringDecoder {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360139,"byte_end":11360177,"line_start":93,"line_end":93,"column_start":1,"column_end":39}},{"value":"/     type Item = String;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360178,"byte_end":11360205,"line_start":94,"line_end":94,"column_start":1,"column_end":28}},{"value":"/     type Error = std::io::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360206,"byte_end":11360242,"line_start":95,"line_end":95,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360243,"byte_end":11360246,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/     fn decode(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360247,"byte_end":11360265,"line_start":97,"line_end":97,"column_start":1,"column_end":19}},{"value":"/         &mut self,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360266,"byte_end":11360288,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/         src: &mut BytesMut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360289,"byte_end":11360319,"line_start":99,"line_end":99,"column_start":1,"column_end":31}},{"value":"/     ) -> Result<Option<Self::Item>, Self::Error> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360320,"byte_end":11360374,"line_start":100,"line_end":100,"column_start":1,"column_end":55}},{"value":"/         if src.len() < 4 {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360375,"byte_end":11360405,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"/             // Not enough data to read length marker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360406,"byte_end":11360463,"line_start":102,"line_end":102,"column_start":1,"column_end":58}},{"value":"/             return Ok(None);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360464,"byte_end":11360496,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360497,"byte_end":11360510,"line_start":104,"line_end":104,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360511,"byte_end":11360514,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/         // Read length marker.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360515,"byte_end":11360549,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/         let mut length_bytes = [0u8; 4];","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360550,"byte_end":11360594,"line_start":107,"line_end":107,"column_start":1,"column_end":45}},{"value":"/         length_bytes.copy_from_slice(&src[..4]);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360595,"byte_end":11360647,"line_start":108,"line_end":108,"column_start":1,"column_end":53}},{"value":"/         let length = u32::from_le_bytes(length_bytes) as usize;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360648,"byte_end":11360715,"line_start":109,"line_end":109,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360716,"byte_end":11360719,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/         // Check that the length is not too large to avoid a denial of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360720,"byte_end":11360794,"line_start":111,"line_end":111,"column_start":1,"column_end":75}},{"value":"/         // service attack where the server runs out of memory.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360795,"byte_end":11360861,"line_start":112,"line_end":112,"column_start":1,"column_end":67}},{"value":"/         if length > MAX {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360862,"byte_end":11360891,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/             return Err(std::io::Error::new(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360892,"byte_end":11360939,"line_start":114,"line_end":114,"column_start":1,"column_end":48}},{"value":"/                 std::io::ErrorKind::InvalidData,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360940,"byte_end":11360992,"line_start":115,"line_end":115,"column_start":1,"column_end":53}},{"value":"/                 format!(\"Frame of length {} is too large.\", length)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11360993,"byte_end":11361064,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/             ));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361065,"byte_end":11361084,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361085,"byte_end":11361098,"line_start":118,"line_end":118,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361099,"byte_end":11361102,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/         if src.len() < 4 + length {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361103,"byte_end":11361142,"line_start":120,"line_end":120,"column_start":1,"column_end":40}},{"value":"/             // The full string has not yet arrived.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361143,"byte_end":11361198,"line_start":121,"line_end":121,"column_start":1,"column_end":56}},{"value":"/             //","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361199,"byte_end":11361217,"line_start":122,"line_end":122,"column_start":1,"column_end":19}},{"value":"/             // We reserve more space in the buffer. This is not strictly","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361218,"byte_end":11361294,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/             // necessary, but is a good idea performance-wise.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361295,"byte_end":11361361,"line_start":124,"line_end":124,"column_start":1,"column_end":67}},{"value":"/             src.reserve(4 + length - src.len());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361362,"byte_end":11361414,"line_start":125,"line_end":125,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361415,"byte_end":11361418,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/             // We inform the Framed that we need more bytes to form the next","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361419,"byte_end":11361499,"line_start":127,"line_end":127,"column_start":1,"column_end":81}},{"value":"/             // frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361500,"byte_end":11361525,"line_start":128,"line_end":128,"column_start":1,"column_end":26}},{"value":"/             return Ok(None);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361526,"byte_end":11361558,"line_start":129,"line_end":129,"column_start":1,"column_end":33}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361559,"byte_end":11361572,"line_start":130,"line_end":130,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361573,"byte_end":11361576,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/         // Use advance to modify src such that it no longer contains","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361577,"byte_end":11361649,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"/         // this frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361650,"byte_end":11361676,"line_start":133,"line_end":133,"column_start":1,"column_end":27}},{"value":"/         let data = src[4..4 + length].to_vec();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361677,"byte_end":11361728,"line_start":134,"line_end":134,"column_start":1,"column_end":52}},{"value":"/         src.advance(4 + length);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361729,"byte_end":11361765,"line_start":135,"line_end":135,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361766,"byte_end":11361769,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/         // Convert the data to a string, or fail if it is not valid utf-8.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361770,"byte_end":11361848,"line_start":137,"line_end":137,"column_start":1,"column_end":79}},{"value":"/         match String::from_utf8(data) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361849,"byte_end":11361892,"line_start":138,"line_end":138,"column_start":1,"column_end":44}},{"value":"/             Ok(string) => Ok(Some(string)),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361893,"byte_end":11361940,"line_start":139,"line_end":139,"column_start":1,"column_end":48}},{"value":"/             Err(utf8_error) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361941,"byte_end":11361977,"line_start":140,"line_end":140,"column_start":1,"column_end":37}},{"value":"/                 Err(std::io::Error::new(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11361978,"byte_end":11362022,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/                     std::io::ErrorKind::InvalidData,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362023,"byte_end":11362079,"line_start":142,"line_end":142,"column_start":1,"column_end":57}},{"value":"/                     utf8_error.utf8_error(),","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362080,"byte_end":11362128,"line_start":143,"line_end":143,"column_start":1,"column_end":49}},{"value":"/                 ))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362129,"byte_end":11362151,"line_start":144,"line_end":144,"column_start":1,"column_end":23}},{"value":"/             },","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362152,"byte_end":11362170,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362171,"byte_end":11362184,"line_start":146,"line_end":146,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362185,"byte_end":11362194,"line_start":147,"line_end":147,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362195,"byte_end":11362200,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362201,"byte_end":11362208,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362209,"byte_end":11362212,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ # The Encoder trait","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362213,"byte_end":11362236,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362237,"byte_end":11362240,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ An [`Encoder`] is used together with [`FramedWrite`] or [`Framed`] to turn","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362241,"byte_end":11362319,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ an [`AsyncWrite`] into a [`Sink`]. The job of the encoder trait is to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362320,"byte_end":11362393,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/ specify how frames are turned into a sequences of bytes.  The job of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362394,"byte_end":11362470,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ `FramedWrite` is to take the resulting sequence of bytes and write it to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362471,"byte_end":11362551,"line_start":156,"line_end":156,"column_start":1,"column_end":81}},{"value":"/ IO resource.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362552,"byte_end":11362568,"line_start":157,"line_end":157,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362569,"byte_end":11362572,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ The main method on the `Encoder` trait is the [`encode`] method. This method","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362573,"byte_end":11362653,"line_start":159,"line_end":159,"column_start":1,"column_end":81}},{"value":"/ takes an item that is being written, and a buffer to write the item to. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362654,"byte_end":11362733,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ buffer may already contain data, and in this case, the encoder should append","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362734,"byte_end":11362814,"line_start":161,"line_end":161,"column_start":1,"column_end":81}},{"value":"/ the new frame the to buffer rather than overwrite the existing data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362815,"byte_end":11362887,"line_start":162,"line_end":162,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362888,"byte_end":11362891,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ It is guaranteed that, from one call to `encode` to another, the provided","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362892,"byte_end":11362969,"line_start":164,"line_end":164,"column_start":1,"column_end":78}},{"value":"/ buffer will contain the exact same data as before, except that some of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11362970,"byte_end":11363048,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/ data may have been removed from the front of the buffer. Writing to a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363049,"byte_end":11363122,"line_start":166,"line_end":166,"column_start":1,"column_end":74}},{"value":"/ `FramedWrite` is essentially equivalent to the following loop:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363123,"byte_end":11363189,"line_start":167,"line_end":167,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363190,"byte_end":11363193,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363194,"byte_end":11363207,"line_start":169,"line_end":169,"column_start":1,"column_end":14}},{"value":"/ use tokio::io::AsyncWriteExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363208,"byte_end":11363241,"line_start":170,"line_end":170,"column_start":1,"column_end":34}},{"value":"/ use bytes::Buf; // for advance","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363242,"byte_end":11363276,"line_start":171,"line_end":171,"column_start":1,"column_end":35}},{"value":"/ # use tokio_util::codec::Encoder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363277,"byte_end":11363314,"line_start":172,"line_end":172,"column_start":1,"column_end":38}},{"value":"/ # async fn next_frame() -> bytes::Bytes { bytes::Bytes::new() }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363315,"byte_end":11363382,"line_start":173,"line_end":173,"column_start":1,"column_end":68}},{"value":"/ # async fn no_more_frames() { }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363383,"byte_end":11363418,"line_start":174,"line_end":174,"column_start":1,"column_end":36}},{"value":"/ # #[tokio::main] async fn main() -> std::io::Result<()> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363419,"byte_end":11363480,"line_start":175,"line_end":175,"column_start":1,"column_end":62}},{"value":"/ # let mut io_resource = tokio::io::sink();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363481,"byte_end":11363527,"line_start":176,"line_end":176,"column_start":1,"column_end":47}},{"value":"/ # let mut encoder = tokio_util::codec::BytesCodec::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363528,"byte_end":11363589,"line_start":177,"line_end":177,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363590,"byte_end":11363593,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ const MAX: usize = 8192;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363594,"byte_end":11363622,"line_start":179,"line_end":179,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363623,"byte_end":11363626,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ let mut buf = bytes::BytesMut::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363627,"byte_end":11363668,"line_start":181,"line_end":181,"column_start":1,"column_end":42}},{"value":"/ loop {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363669,"byte_end":11363679,"line_start":182,"line_end":182,"column_start":1,"column_end":11}},{"value":"/     tokio::select! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363680,"byte_end":11363704,"line_start":183,"line_end":183,"column_start":1,"column_end":25}},{"value":"/         num_written = io_resource.write(&buf), if !buf.is_empty() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363705,"byte_end":11363779,"line_start":184,"line_end":184,"column_start":1,"column_end":75}},{"value":"/             buf.advance(num_written?);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363780,"byte_end":11363822,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/         },","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363823,"byte_end":11363837,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/         frame = next_frame(), if buf.len() < MAX => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363838,"byte_end":11363895,"line_start":187,"line_end":187,"column_start":1,"column_end":58}},{"value":"/             encoder.encode(frame, &mut buf)?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363896,"byte_end":11363945,"line_start":188,"line_end":188,"column_start":1,"column_end":50}},{"value":"/         },","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363946,"byte_end":11363960,"line_start":189,"line_end":189,"column_start":1,"column_end":15}},{"value":"/         _ = no_more_frames() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363961,"byte_end":11363998,"line_start":190,"line_end":190,"column_start":1,"column_end":38}},{"value":"/             io_resource.write_all(&buf).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11363999,"byte_end":11364050,"line_start":191,"line_end":191,"column_start":1,"column_end":52}},{"value":"/             io_resource.shutdown().await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364051,"byte_end":11364097,"line_start":192,"line_end":192,"column_start":1,"column_end":47}},{"value":"/             return Ok(());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364098,"byte_end":11364128,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/         },","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364129,"byte_end":11364143,"line_start":194,"line_end":194,"column_start":1,"column_end":15}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364144,"byte_end":11364153,"line_start":195,"line_end":195,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364154,"byte_end":11364159,"line_start":196,"line_end":196,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364160,"byte_end":11364167,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364168,"byte_end":11364175,"line_start":198,"line_end":198,"column_start":1,"column_end":8}},{"value":"/ Here the `next_frame` method corresponds to any frames you write to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364176,"byte_end":11364251,"line_start":199,"line_end":199,"column_start":1,"column_end":76}},{"value":"/ `FramedWrite`. The `no_more_frames` method corresponds to closing the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364252,"byte_end":11364325,"line_start":200,"line_end":200,"column_start":1,"column_end":74}},{"value":"/ `FramedWrite` with [`SinkExt::close`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364326,"byte_end":11364368,"line_start":201,"line_end":201,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364369,"byte_end":11364372,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Example encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364373,"byte_end":11364395,"line_start":203,"line_end":203,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364396,"byte_end":11364399,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ As an example, consider a protocol that can be used to send strings where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364400,"byte_end":11364477,"line_start":205,"line_end":205,"column_start":1,"column_end":78}},{"value":"/ each frame is a four byte integer that contains the length of the frame,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364478,"byte_end":11364554,"line_start":206,"line_end":206,"column_start":1,"column_end":77}},{"value":"/ followed by that many bytes of string data. The encoder will fail if the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364555,"byte_end":11364631,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ string is too long.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364632,"byte_end":11364655,"line_start":208,"line_end":208,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364656,"byte_end":11364659,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Such an encoder can be written like this:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364660,"byte_end":11364705,"line_start":210,"line_end":210,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364706,"byte_end":11364713,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ use tokio_util::codec::Encoder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364714,"byte_end":11364749,"line_start":212,"line_end":212,"column_start":1,"column_end":36}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364750,"byte_end":11364774,"line_start":213,"line_end":213,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364775,"byte_end":11364778,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ struct MyStringEncoder {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364779,"byte_end":11364808,"line_start":215,"line_end":215,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364809,"byte_end":11364812,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ const MAX: usize = 8 * 1024 * 1024;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364813,"byte_end":11364852,"line_start":217,"line_end":217,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364853,"byte_end":11364856,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ impl Encoder<String> for MyStringEncoder {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364857,"byte_end":11364903,"line_start":219,"line_end":219,"column_start":1,"column_end":47}},{"value":"/     type Error = std::io::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364904,"byte_end":11364940,"line_start":220,"line_end":220,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364941,"byte_end":11364944,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/     fn encode(&mut self, item: String, dst: &mut BytesMut) -> Result<(), Self::Error> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11364945,"byte_end":11365036,"line_start":222,"line_end":222,"column_start":1,"column_end":92}},{"value":"/         // Don't send a string if it is longer than the other end will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365037,"byte_end":11365111,"line_start":223,"line_end":223,"column_start":1,"column_end":75}},{"value":"/         // accept.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365112,"byte_end":11365134,"line_start":224,"line_end":224,"column_start":1,"column_end":23}},{"value":"/         if item.len() > MAX {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365135,"byte_end":11365168,"line_start":225,"line_end":225,"column_start":1,"column_end":34}},{"value":"/             return Err(std::io::Error::new(","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365169,"byte_end":11365216,"line_start":226,"line_end":226,"column_start":1,"column_end":48}},{"value":"/                 std::io::ErrorKind::InvalidData,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365217,"byte_end":11365269,"line_start":227,"line_end":227,"column_start":1,"column_end":53}},{"value":"/                 format!(\"Frame of length {} is too large.\", item.len())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365270,"byte_end":11365345,"line_start":228,"line_end":228,"column_start":1,"column_end":76}},{"value":"/             ));","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365346,"byte_end":11365365,"line_start":229,"line_end":229,"column_start":1,"column_end":20}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365366,"byte_end":11365379,"line_start":230,"line_end":230,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365380,"byte_end":11365383,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/         // Convert the length into a byte array.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365384,"byte_end":11365436,"line_start":232,"line_end":232,"column_start":1,"column_end":53}},{"value":"/         // The cast to u32 cannot overflow due to the length check above.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365437,"byte_end":11365514,"line_start":233,"line_end":233,"column_start":1,"column_end":78}},{"value":"/         let len_slice = u32::to_le_bytes(item.len() as u32);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365515,"byte_end":11365579,"line_start":234,"line_end":234,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365580,"byte_end":11365583,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/         // Reserve space in the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365584,"byte_end":11365627,"line_start":236,"line_end":236,"column_start":1,"column_end":44}},{"value":"/         dst.reserve(4 + item.len());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365628,"byte_end":11365668,"line_start":237,"line_end":237,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365669,"byte_end":11365672,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/         // Write the length and string to the buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365673,"byte_end":11365730,"line_start":239,"line_end":239,"column_start":1,"column_end":58}},{"value":"/         dst.extend_from_slice(&len_slice);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365731,"byte_end":11365777,"line_start":240,"line_end":240,"column_start":1,"column_end":47}},{"value":"/         dst.extend_from_slice(item.as_bytes());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365778,"byte_end":11365829,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/         Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365830,"byte_end":11365848,"line_start":242,"line_end":242,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365849,"byte_end":11365858,"line_start":243,"line_end":243,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365859,"byte_end":11365864,"line_start":244,"line_end":244,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365865,"byte_end":11365872,"line_start":245,"line_end":245,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365873,"byte_end":11365876,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ [`AsyncRead`]: tokio::io::AsyncRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365877,"byte_end":11365916,"line_start":247,"line_end":247,"column_start":1,"column_end":40}},{"value":"/ [`AsyncWrite`]: tokio::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365917,"byte_end":11365958,"line_start":248,"line_end":248,"column_start":1,"column_end":42}},{"value":"/ [`Stream`]: tokio_stream::Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365959,"byte_end":11365995,"line_start":249,"line_end":249,"column_start":1,"column_end":37}},{"value":"/ [`Sink`]: futures_sink::Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11365996,"byte_end":11366028,"line_start":250,"line_end":250,"column_start":1,"column_end":33}},{"value":"/ [`SinkExt::close`]: https://docs.rs/futures/0.3/futures/sink/trait.SinkExt.html#method.close","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366029,"byte_end":11366125,"line_start":251,"line_end":251,"column_start":1,"column_end":97}},{"value":"/ [`FramedRead`]: struct@crate::codec::FramedRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366126,"byte_end":11366177,"line_start":252,"line_end":252,"column_start":1,"column_end":52}},{"value":"/ [`FramedWrite`]: struct@crate::codec::FramedWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366178,"byte_end":11366231,"line_start":253,"line_end":253,"column_start":1,"column_end":54}},{"value":"/ [`Framed`]: struct@crate::codec::Framed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366232,"byte_end":11366275,"line_start":254,"line_end":254,"column_start":1,"column_end":44}},{"value":"/ [`Decoder`]: trait@crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366276,"byte_end":11366320,"line_start":255,"line_end":255,"column_start":1,"column_end":45}},{"value":"/ [`decode`]: fn@crate::codec::Decoder::decode","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366321,"byte_end":11366369,"line_start":256,"line_end":256,"column_start":1,"column_end":49}},{"value":"/ [`encode`]: fn@crate::codec::Encoder::encode","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366370,"byte_end":11366418,"line_start":257,"line_end":257,"column_start":1,"column_end":49}},{"value":"/ [`split_to`]: fn@bytes::BytesMut::split_to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366419,"byte_end":11366465,"line_start":258,"line_end":258,"column_start":1,"column_end":47}},{"value":"/ [`advance`]: fn@bytes::Buf::advance","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366466,"byte_end":11366505,"line_start":259,"line_end":259,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":635},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368423,"byte_end":11368433,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"BytesCodec","qualname":"::codec::bytes_codec::BytesCodec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A simple [`Decoder`] and [`Encoder`] implementation that just ships bytes around.","sig":null,"attributes":[{"value":"/ A simple [`Decoder`] and [`Encoder`] implementation that just ships bytes around.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367266,"byte_end":11367351,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367352,"byte_end":11367355,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Decoder`]: crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367356,"byte_end":11367394,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/ [`Encoder`]: crate::codec::Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367395,"byte_end":11367433,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367434,"byte_end":11367437,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367438,"byte_end":11367451,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367452,"byte_end":11367455,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Turn an [`AsyncRead`] into a stream of `Result<`[`BytesMut`]`, `[`Error`]`>`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367456,"byte_end":11367537,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367538,"byte_end":11367541,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`AsyncRead`]: tokio::io::AsyncRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367542,"byte_end":11367581,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/ [`BytesMut`]: bytes::BytesMut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367582,"byte_end":11367615,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/ [`Error`]: std::io::Error","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367616,"byte_end":11367645,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367646,"byte_end":11367649,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367650,"byte_end":11367657,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # mod hidden {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367658,"byte_end":11367676,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/ # #[allow(unused_imports)]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367677,"byte_end":11367707,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/ use tokio::fs::File;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367708,"byte_end":11367732,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367733,"byte_end":11367740,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367741,"byte_end":11367770,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/ use tokio_util::codec::{FramedRead, BytesCodec};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367771,"byte_end":11367823,"line_start":26,"line_end":26,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367824,"byte_end":11367827,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # enum File {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367828,"byte_end":11367846,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ # impl File {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367847,"byte_end":11367864,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/ #     async fn open(_name: &str) -> Result<impl AsyncRead, std::io::Error> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367865,"byte_end":11367945,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ #         use std::io::Cursor;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367946,"byte_end":11367980,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ #         Ok(Cursor::new(vec![0, 1, 2, 3, 4, 5]))","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11367981,"byte_end":11368034,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ #     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368035,"byte_end":11368046,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368047,"byte_end":11368054,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368055,"byte_end":11368060,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ # #[tokio::main(flavor = \"current_thread\")]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368061,"byte_end":11368108,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"/ # async fn main() -> Result<(), std::io::Error> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368109,"byte_end":11368162,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ let my_async_read = File::open(\"filename.txt\").await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368163,"byte_end":11368221,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/ let my_stream_of_bytes = FramedRead::new(my_async_read, BytesCodec::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368222,"byte_end":11368301,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ # Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368302,"byte_end":11368314,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368315,"byte_end":11368322,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368323,"byte_end":11368330,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368331,"byte_end":11368334,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368535,"byte_end":11368538,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<BytesCodec>::new","value":"pub fn new() -> BytesCodec","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesCodec` for shipping around raw bytes.\n","sig":null,"attributes":[{"value":"/ Creates a new `BytesCodec` for shipping around raw bytes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368462,"byte_end":11368523,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":275},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369850,"byte_end":11369857,"line_start":21,"line_end":21,"column_start":11,"column_end":18},"name":"Decoder","qualname":"::codec::decoder::Decoder","value":"Decoder","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" Decoding of frames via buffers.","sig":null,"attributes":[{"value":"/ Decoding of frames via buffers.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369253,"byte_end":11369288,"line_start":8,"line_end":8,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369289,"byte_end":11369292,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This trait is used when constructing an instance of [`Framed`] or","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369293,"byte_end":11369362,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`FramedRead`]. An implementation of `Decoder` takes a byte stream that has","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369363,"byte_end":11369442,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ already been buffered in `src` and decodes the data into a stream of","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369443,"byte_end":11369515,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ `Self::Item` frames.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369516,"byte_end":11369540,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369541,"byte_end":11369544,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Implementations are able to track state on `self`, which enables","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369545,"byte_end":11369613,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ implementing stateful streaming parsers. In many cases, though, this type","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369614,"byte_end":11369691,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ will simply be a unit struct (e.g. `struct HttpDecoder`).","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369692,"byte_end":11369753,"line_start":17,"line_end":17,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369754,"byte_end":11369757,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Framed`]: crate::codec::Framed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369758,"byte_end":11369794,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"/ [`FramedRead`]: crate::codec::FramedRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369795,"byte_end":11369839,"line_start":20,"line_end":20,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369905,"byte_end":11369909,"line_start":23,"line_end":23,"column_start":10,"column_end":14},"name":"Item","qualname":"::codec::decoder::Decoder::Item","value":"type Item;","parent":{"krate":0,"index":275},"children":[],"decl_id":null,"docs":" The type of decoded frames.\n","sig":null,"attributes":[{"value":"/ The type of decoded frames.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369864,"byte_end":11369895,"line_start":22,"line_end":22,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370675,"byte_end":11370680,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Error","qualname":"::codec::decoder::Decoder::Error","value":"type Error: From<io::Error>;","parent":{"krate":0,"index":275},"children":[],"decl_id":null,"docs":" The type of unrecoverable frame decoding errors.","sig":null,"attributes":[{"value":"/ The type of unrecoverable frame decoding errors.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369916,"byte_end":11369968,"line_start":25,"line_end":25,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369973,"byte_end":11369976,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ If an individual message is ill-formed but can be ignored without","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11369981,"byte_end":11370050,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"/ interfering with the processing of future messages, it may be more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370055,"byte_end":11370125,"line_start":28,"line_end":28,"column_start":5,"column_end":75}},{"value":"/ useful to report the failure as an `Item`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370130,"byte_end":11370176,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370181,"byte_end":11370184,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ `From<io::Error>` is required in the interest of making `Error` suitable","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370189,"byte_end":11370265,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"/ for returning directly from a [`FramedRead`], and to enable the default","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370270,"byte_end":11370345,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ implementation of `decode_eof` to yield an `io::Error` when the decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370350,"byte_end":11370425,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ fails to consume all available data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370430,"byte_end":11370470,"line_start":34,"line_end":34,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370475,"byte_end":11370478,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Note that implementors of this trait can simply indicate `type Error =","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370483,"byte_end":11370557,"line_start":36,"line_end":36,"column_start":5,"column_end":79}},{"value":"/ io::Error` to use I/O errors as this type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370562,"byte_end":11370608,"line_start":37,"line_end":37,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370613,"byte_end":11370616,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ [`FramedRead`]: crate::codec::FramedRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370621,"byte_end":11370665,"line_start":39,"line_end":39,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373616,"byte_end":11373622,"line_start":110,"line_end":110,"column_start":8,"column_end":14},"name":"decode","qualname":"::codec::decoder::Decoder::decode","value":"pub fn decode(&mut Self, &mut BytesMut)\n-> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":275},"children":[],"decl_id":null,"docs":" Attempts to decode a frame from the provided buffer of bytes.","sig":null,"attributes":[{"value":"/ Attempts to decode a frame from the provided buffer of bytes.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370704,"byte_end":11370769,"line_start":42,"line_end":42,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370774,"byte_end":11370777,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This method is called by [`FramedRead`] whenever bytes are ready to be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370782,"byte_end":11370856,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ parsed. The provided buffer of bytes is what's been read so far, and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370861,"byte_end":11370933,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ this instance of `Decode` can determine whether an entire frame is in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11370938,"byte_end":11371011,"line_start":46,"line_end":46,"column_start":5,"column_end":78}},{"value":"/ the buffer and is ready to be returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371016,"byte_end":11371059,"line_start":47,"line_end":47,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371064,"byte_end":11371067,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ If an entire frame is available, then this instance will remove those","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371072,"byte_end":11371145,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ bytes from the buffer provided and return them as a decoded","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371150,"byte_end":11371213,"line_start":50,"line_end":50,"column_start":5,"column_end":68}},{"value":"/ frame. Note that removing bytes from the provided buffer doesn't always","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371218,"byte_end":11371293,"line_start":51,"line_end":51,"column_start":5,"column_end":80}},{"value":"/ necessarily copy the bytes, so this should be an efficient operation in","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371298,"byte_end":11371373,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ most circumstances.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371378,"byte_end":11371401,"line_start":53,"line_end":53,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371406,"byte_end":11371409,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If the bytes look valid, but a frame isn't fully available yet, then","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371414,"byte_end":11371486,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ `Ok(None)` is returned. This indicates to the [`Framed`] instance that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371491,"byte_end":11371565,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ it needs to read some more bytes before calling this method again.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371570,"byte_end":11371640,"line_start":57,"line_end":57,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371645,"byte_end":11371648,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that the bytes provided may be empty. If a previous call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371653,"byte_end":11371721,"line_start":59,"line_end":59,"column_start":5,"column_end":73}},{"value":"/ `decode` consumed all the bytes in the buffer then `decode` will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371726,"byte_end":11371797,"line_start":60,"line_end":60,"column_start":5,"column_end":76}},{"value":"/ called again until it returns `Ok(None)`, indicating that more bytes need to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371802,"byte_end":11371882,"line_start":61,"line_end":61,"column_start":5,"column_end":85}},{"value":"/ be read.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371887,"byte_end":11371899,"line_start":62,"line_end":62,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371904,"byte_end":11371907,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Finally, if the bytes in the buffer are malformed then an error is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371912,"byte_end":11371982,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ returned indicating why. This informs [`Framed`] that the stream is now","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11371987,"byte_end":11372062,"line_start":65,"line_end":65,"column_start":5,"column_end":80}},{"value":"/ corrupt and should be terminated.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372067,"byte_end":11372104,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372109,"byte_end":11372112,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ [`Framed`]: crate::codec::Framed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372117,"byte_end":11372153,"line_start":68,"line_end":68,"column_start":5,"column_end":41}},{"value":"/ [`FramedRead`]: crate::codec::FramedRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372158,"byte_end":11372202,"line_start":69,"line_end":69,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372207,"byte_end":11372210,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Buffer management","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372215,"byte_end":11372238,"line_start":71,"line_end":71,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372243,"byte_end":11372246,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Before returning from the function, implementations should ensure that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372251,"byte_end":11372325,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ the buffer has appropriate capacity in anticipation of future calls to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372330,"byte_end":11372404,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ `decode`. Failing to do so leads to inefficiency.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372409,"byte_end":11372462,"line_start":75,"line_end":75,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372467,"byte_end":11372470,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ For example, if frames have a fixed length, or if the length of the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372475,"byte_end":11372546,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ current frame is known from a header, a possible buffer management","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372551,"byte_end":11372621,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/ strategy is:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372626,"byte_end":11372642,"line_start":79,"line_end":79,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372647,"byte_end":11372650,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372655,"byte_end":11372668,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ # use std::io;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372673,"byte_end":11372691,"line_start":82,"line_end":82,"column_start":5,"column_end":23}},{"value":"/ #","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372696,"byte_end":11372701,"line_start":83,"line_end":83,"column_start":5,"column_end":10}},{"value":"/ # use bytes::BytesMut;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372706,"byte_end":11372732,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ # use tokio_util::codec::Decoder;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372737,"byte_end":11372774,"line_start":85,"line_end":85,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372779,"byte_end":11372784,"line_start":86,"line_end":86,"column_start":5,"column_end":10}},{"value":"/ # struct MyCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372789,"byte_end":11372810,"line_start":87,"line_end":87,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372815,"byte_end":11372820,"line_start":88,"line_end":88,"column_start":5,"column_end":10}},{"value":"/ impl Decoder for MyCodec {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372825,"byte_end":11372855,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/     // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372860,"byte_end":11372874,"line_start":90,"line_end":90,"column_start":5,"column_end":19}},{"value":"/     # type Item = BytesMut;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372879,"byte_end":11372910,"line_start":91,"line_end":91,"column_start":5,"column_end":36}},{"value":"/     # type Error = io::Error;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372915,"byte_end":11372948,"line_start":92,"line_end":92,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372953,"byte_end":11372956,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/     fn decode(&mut self, src: &mut BytesMut) -> Result<Option<Self::Item>, Self::Error> {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11372961,"byte_end":11373054,"line_start":94,"line_end":94,"column_start":5,"column_end":98}},{"value":"/         // ...","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373059,"byte_end":11373077,"line_start":95,"line_end":95,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373082,"byte_end":11373085,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/         // Reserve enough to complete decoding of the current frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373090,"byte_end":11373162,"line_start":97,"line_end":97,"column_start":5,"column_end":77}},{"value":"/         let current_frame_len: usize = 1000; // Example.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373167,"byte_end":11373227,"line_start":98,"line_end":98,"column_start":5,"column_end":65}},{"value":"/         // And to start decoding the next frame.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373232,"byte_end":11373284,"line_start":99,"line_end":99,"column_start":5,"column_end":57}},{"value":"/         let next_frame_header_len: usize = 10; // Example.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373289,"byte_end":11373351,"line_start":100,"line_end":100,"column_start":5,"column_end":67}},{"value":"/         src.reserve(current_frame_len + next_frame_header_len);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373356,"byte_end":11373423,"line_start":101,"line_end":101,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373428,"byte_end":11373431,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/         return Ok(None);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373436,"byte_end":11373464,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"/     }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373469,"byte_end":11373478,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373483,"byte_end":11373488,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373493,"byte_end":11373500,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373505,"byte_end":11373508,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ An optimal buffer management strategy minimizes reallocations and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373513,"byte_end":11373582,"line_start":108,"line_end":108,"column_start":5,"column_end":74}},{"value":"/ over-allocations.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373587,"byte_end":11373608,"line_start":109,"line_end":109,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374481,"byte_end":11374491,"line_start":125,"line_end":125,"column_start":8,"column_end":18},"name":"decode_eof","qualname":"::codec::decoder::Decoder::decode_eof","value":"pub fn decode_eof(&mut Self, &mut BytesMut)\n-> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":275},"children":[],"decl_id":null,"docs":" A default method available to be called when there are no more bytes\n available to be read from the underlying I/O.","sig":null,"attributes":[{"value":"/ A default method available to be called when there are no more bytes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373703,"byte_end":11373775,"line_start":112,"line_end":112,"column_start":5,"column_end":77}},{"value":"/ available to be read from the underlying I/O.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373780,"byte_end":11373829,"line_start":113,"line_end":113,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373834,"byte_end":11373837,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This method defaults to calling `decode` and returns an error if","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373842,"byte_end":11373910,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` is returned while there is unconsumed data in `buf`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373915,"byte_end":11373982,"line_start":116,"line_end":116,"column_start":5,"column_end":72}},{"value":"/ Typically this doesn't need to be implemented unless the framing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11373987,"byte_end":11374055,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ protocol differs near the end of the stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374060,"byte_end":11374108,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374113,"byte_end":11374116,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Note that the `buf` argument may be empty. If a previous call to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374121,"byte_end":11374189,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ `decode_eof` consumed all the bytes in the buffer, `decode_eof` will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374194,"byte_end":11374269,"line_start":121,"line_end":121,"column_start":5,"column_end":80}},{"value":"/ called again until it returns `None`, indicating that there are no more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374274,"byte_end":11374349,"line_start":122,"line_end":122,"column_start":5,"column_end":80}},{"value":"/ frames to yield. This behavior enables returning finalization frames","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374354,"byte_end":11374426,"line_start":123,"line_end":123,"column_start":5,"column_end":77}},{"value":"/ that may not be based on inbound data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374431,"byte_end":11374473,"line_start":124,"line_end":124,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11376099,"byte_end":11376105,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"framed","qualname":"::codec::decoder::Decoder::framed","value":"pub fn framed<T: AsyncRead + AsyncWrite + Sized>(Self, T) -> Framed<T, Self>\nwhere Self: Sized","parent":{"krate":0,"index":275},"children":[],"decl_id":null,"docs":" Provides a [`Stream`] and [`Sink`] interface for reading and writing to this\n `Io` object, using `Decode` and `Encode` to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a [`Stream`] and [`Sink`] interface for reading and writing to this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374909,"byte_end":11374989,"line_start":138,"line_end":138,"column_start":5,"column_end":85}},{"value":"/ `Io` object, using `Decode` and `Encode` to read and write the raw data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11374994,"byte_end":11375070,"line_start":139,"line_end":139,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375075,"byte_end":11375078,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375083,"byte_end":11375158,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375163,"byte_end":11375233,"line_start":142,"line_end":142,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375238,"byte_end":11375309,"line_start":143,"line_end":143,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375314,"byte_end":11375386,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375391,"byte_end":11375449,"line_start":145,"line_end":145,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375454,"byte_end":11375457,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375462,"byte_end":11375531,"line_start":147,"line_end":147,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375536,"byte_end":11375611,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375616,"byte_end":11375692,"line_start":149,"line_end":149,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375697,"byte_end":11375719,"line_start":150,"line_end":150,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375724,"byte_end":11375727,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375732,"byte_end":11375805,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the [`Framed`] returned by this method, which will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375810,"byte_end":11375883,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375888,"byte_end":11375964,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375969,"byte_end":11375972,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: tokio_stream::Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11375977,"byte_end":11376013,"line_start":156,"line_end":156,"column_start":5,"column_end":41}},{"value":"/ [`Sink`]: futures_sink::Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11376018,"byte_end":11376050,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/ [`Framed`]: crate::codec::Framed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/decoder.rs","byte_start":11376055,"byte_end":11376091,"line_start":158,"line_end":158,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":286},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376439,"byte_end":11376446,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"Encoder","qualname":"::codec::encoder::Encoder","value":"Encoder<Item>","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"decl_id":null,"docs":" Trait of helper objects to write out messages as bytes, for use with\n [`FramedWrite`].","sig":null,"attributes":[{"value":"/ Trait of helper objects to write out messages as bytes, for use with","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376284,"byte_end":11376356,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"/ [`FramedWrite`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376357,"byte_end":11376377,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376378,"byte_end":11376381,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`FramedWrite`]: crate::codec::FramedWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376382,"byte_end":11376428,"line_start":7,"line_end":7,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":288},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376711,"byte_end":11376716,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Error","qualname":"::codec::encoder::Encoder::Error","value":"type Error: From<io::Error>;","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" The type of encoding errors.","sig":null,"attributes":[{"value":"/ The type of encoding errors.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376459,"byte_end":11376491,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376496,"byte_end":11376499,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ [`FramedWrite`] requires `Encoder`s errors to implement `From<io::Error>`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376504,"byte_end":11376581,"line_start":11,"line_end":11,"column_start":5,"column_end":82}},{"value":"/ in the interest letting it return `Error`s directly.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376586,"byte_end":11376642,"line_start":12,"line_end":12,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376647,"byte_end":11376650,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ [`FramedWrite`]: crate::codec::FramedWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376655,"byte_end":11376701,"line_start":14,"line_end":14,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11377067,"byte_end":11377073,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"encode","qualname":"::codec::encoder::Encoder::encode","value":"pub fn encode(&mut Self, Item, &mut BytesMut) -> Result<(), Self::Error>","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" Encodes a frame into the buffer provided.","sig":null,"attributes":[{"value":"/ Encodes a frame into the buffer provided.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376740,"byte_end":11376785,"line_start":17,"line_end":17,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376790,"byte_end":11376793,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ This method will encode `item` into the byte buffer provided by `dst`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376798,"byte_end":11376872,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/ The `dst` provided is an internal buffer of the [`FramedWrite`] instance and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376877,"byte_end":11376957,"line_start":20,"line_end":20,"column_start":5,"column_end":85}},{"value":"/ will be written out when possible.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11376962,"byte_end":11377000,"line_start":21,"line_end":21,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11377005,"byte_end":11377008,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ [`FramedWrite`]: crate::codec::FramedWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/encoder.rs","byte_start":11377013,"byte_end":11377059,"line_start":23,"line_end":23,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384254,"byte_end":11384260,"line_start":27,"line_end":27,"column_start":16,"column_end":22},"name":"Framed","qualname":"::codec::framed::Framed","value":"Framed {  }","parent":null,"children":[{"krate":0,"index":924}],"decl_id":null,"docs":" A unified [`Stream`] and [`Sink`] interface to an underlying I/O object, using\n the `Encoder` and `Decoder` traits to encode and decode frames.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385743,"byte_end":11385746,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<Framed<T, U>>::new","value":"pub fn new(T, U) -> Framed<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Provides a [`Stream`] and [`Sink`] interface for reading and writing to this\n I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a [`Stream`] and [`Sink`] interface for reading and writing to this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384402,"byte_end":11384482,"line_start":37,"line_end":37,"column_start":5,"column_end":85}},{"value":"/ I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384487,"byte_end":11384568,"line_start":38,"line_end":38,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384573,"byte_end":11384576,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384581,"byte_end":11384656,"line_start":40,"line_end":40,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384661,"byte_end":11384731,"line_start":41,"line_end":41,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the codec","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384736,"byte_end":11384805,"line_start":42,"line_end":42,"column_start":5,"column_end":74}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384810,"byte_end":11384882,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384887,"byte_end":11384945,"line_start":44,"line_end":44,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384950,"byte_end":11384953,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both [`Stream`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384958,"byte_end":11385029,"line_start":46,"line_end":46,"column_start":5,"column_end":76}},{"value":"/ [`Sink`]; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385034,"byte_end":11385111,"line_start":47,"line_end":47,"column_start":5,"column_end":82}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385116,"byte_end":11385192,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385197,"byte_end":11385219,"line_start":49,"line_end":49,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385224,"byte_end":11385227,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385232,"byte_end":11385305,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ calling [`split`] on the `Framed` returned by this method, which will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385310,"byte_end":11385383,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385388,"byte_end":11385464,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385469,"byte_end":11385472,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: tokio_stream::Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385477,"byte_end":11385513,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ [`Sink`]: futures_sink::Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385518,"byte_end":11385550,"line_start":56,"line_end":56,"column_start":5,"column_end":37}},{"value":"/ [`Decode`]: crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385555,"byte_end":11385592,"line_start":57,"line_end":57,"column_start":5,"column_end":42}},{"value":"/ [`Encoder`]: crate::codec::Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385597,"byte_end":11385635,"line_start":58,"line_end":58,"column_start":5,"column_end":43}},{"value":"/ [`split`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.split","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385640,"byte_end":11385731,"line_start":59,"line_end":59,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387354,"byte_end":11387367,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Framed<T, U>>::with_capacity","value":"pub fn with_capacity(T, U, usize) -> Framed<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Provides a [`Stream`] and [`Sink`] interface for reading and writing to this\n I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data,\n with a specific read buffer initial capacity.","sig":null,"attributes":[{"value":"/ Provides a [`Stream`] and [`Sink`] interface for reading and writing to this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11385959,"byte_end":11386039,"line_start":70,"line_end":70,"column_start":5,"column_end":85}},{"value":"/ I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386044,"byte_end":11386125,"line_start":71,"line_end":71,"column_start":5,"column_end":86}},{"value":"/ with a specific read buffer initial capacity.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386130,"byte_end":11386179,"line_start":72,"line_end":72,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386184,"byte_end":11386187,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386192,"byte_end":11386267,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386272,"byte_end":11386342,"line_start":75,"line_end":75,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the codec","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386347,"byte_end":11386416,"line_start":76,"line_end":76,"column_start":5,"column_end":74}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386421,"byte_end":11386493,"line_start":77,"line_end":77,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386498,"byte_end":11386556,"line_start":78,"line_end":78,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386561,"byte_end":11386564,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both [`Stream`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386569,"byte_end":11386640,"line_start":80,"line_end":80,"column_start":5,"column_end":76}},{"value":"/ [`Sink`]; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386645,"byte_end":11386722,"line_start":81,"line_end":81,"column_start":5,"column_end":82}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386727,"byte_end":11386803,"line_start":82,"line_end":82,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386808,"byte_end":11386830,"line_start":83,"line_end":83,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386835,"byte_end":11386838,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386843,"byte_end":11386916,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ calling [`split`] on the `Framed` returned by this method, which will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386921,"byte_end":11386994,"line_start":86,"line_end":86,"column_start":5,"column_end":78}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11386999,"byte_end":11387075,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387080,"byte_end":11387083,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: tokio_stream::Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387088,"byte_end":11387124,"line_start":89,"line_end":89,"column_start":5,"column_end":41}},{"value":"/ [`Sink`]: futures_sink::Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387129,"byte_end":11387161,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/ [`Decode`]: crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387166,"byte_end":11387203,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/ [`Encoder`]: crate::codec::Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387208,"byte_end":11387246,"line_start":92,"line_end":92,"column_start":5,"column_end":43}},{"value":"/ [`split`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.split","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387251,"byte_end":11387342,"line_start":93,"line_end":93,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389470,"byte_end":11389480,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Framed<T, U>>::from_parts","value":"pub fn from_parts(FramedParts<T, U>) -> Framed<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Provides a [`Stream`] and [`Sink`] interface for reading and writing to this\n I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a [`Stream`] and [`Sink`] interface for reading and writing to this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387893,"byte_end":11387973,"line_start":113,"line_end":113,"column_start":5,"column_end":85}},{"value":"/ I/O object, using [`Decoder`] and [`Encoder`] to read and write the raw data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387978,"byte_end":11388059,"line_start":114,"line_end":114,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388064,"byte_end":11388067,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388072,"byte_end":11388147,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388152,"byte_end":11388222,"line_start":117,"line_end":117,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388227,"byte_end":11388298,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388303,"byte_end":11388375,"line_start":119,"line_end":119,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388380,"byte_end":11388438,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388443,"byte_end":11388446,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both [`Stream`] and","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388451,"byte_end":11388522,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/ [`Sink`]; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388527,"byte_end":11388604,"line_start":123,"line_end":123,"column_start":5,"column_end":82}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388609,"byte_end":11388685,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388690,"byte_end":11388712,"line_start":125,"line_end":125,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388717,"byte_end":11388720,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This objects takes a stream and a readbuffer and a writebuffer. These field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388725,"byte_end":11388804,"line_start":127,"line_end":127,"column_start":5,"column_end":84}},{"value":"/ can be obtained from an existing `Framed` with the [`into_parts`] method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388809,"byte_end":11388886,"line_start":128,"line_end":128,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388891,"byte_end":11388894,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388899,"byte_end":11388972,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ calling [`split`] on the `Framed` returned by this method, which will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11388977,"byte_end":11389050,"line_start":131,"line_end":131,"column_start":5,"column_end":78}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389055,"byte_end":11389131,"line_start":132,"line_end":132,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389136,"byte_end":11389139,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ [`Stream`]: tokio_stream::Stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389144,"byte_end":11389180,"line_start":134,"line_end":134,"column_start":5,"column_end":41}},{"value":"/ [`Sink`]: futures_sink::Sink","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389185,"byte_end":11389217,"line_start":135,"line_end":135,"column_start":5,"column_end":37}},{"value":"/ [`Decoder`]: crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389222,"byte_end":11389260,"line_start":136,"line_end":136,"column_start":5,"column_end":43}},{"value":"/ [`Encoder`]: crate::codec::Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389265,"byte_end":11389303,"line_start":137,"line_end":137,"column_start":5,"column_end":43}},{"value":"/ [`into_parts`]: crate::codec::Framed::into_parts()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389308,"byte_end":11389362,"line_start":138,"line_end":138,"column_start":5,"column_end":59}},{"value":"/ [`split`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.split","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389367,"byte_end":11389458,"line_start":139,"line_end":139,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390115,"byte_end":11390122,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Framed<T, U>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389832,"byte_end":11389895,"line_start":153,"line_end":153,"column_start":5,"column_end":68}},{"value":"/ `Framed`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389900,"byte_end":11389913,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389918,"byte_end":11389921,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11389926,"byte_end":11390001,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390006,"byte_end":11390076,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390081,"byte_end":11390103,"line_start":158,"line_end":158,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390466,"byte_end":11390473,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Framed<T, U>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390175,"byte_end":11390246,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ `Framed`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390251,"byte_end":11390264,"line_start":164,"line_end":164,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390269,"byte_end":11390272,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390277,"byte_end":11390352,"line_start":166,"line_end":166,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390357,"byte_end":11390427,"line_start":167,"line_end":167,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390432,"byte_end":11390454,"line_start":168,"line_end":168,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390836,"byte_end":11390847,"line_start":179,"line_end":179,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<Framed<T, U>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pinned mutable reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a pinned mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390538,"byte_end":11390616,"line_start":173,"line_end":173,"column_start":5,"column_end":83}},{"value":"/ `Framed`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390621,"byte_end":11390634,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390639,"byte_end":11390642,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390647,"byte_end":11390722,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390727,"byte_end":11390797,"line_start":177,"line_end":177,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390802,"byte_end":11390824,"line_start":178,"line_end":178,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391194,"byte_end":11391199,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"codec","qualname":"<Framed<T, U>>::codec","value":"pub fn codec(&Self) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying codec wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying codec wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11390943,"byte_end":11391001,"line_start":183,"line_end":183,"column_start":5,"column_end":63}},{"value":"/ `Framed`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391006,"byte_end":11391019,"line_start":184,"line_end":184,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391024,"byte_end":11391027,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying codec","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391032,"byte_end":11391106,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ as it may corrupt the stream of frames otherwise being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391111,"byte_end":11391182,"line_start":187,"line_end":187,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391511,"byte_end":11391520,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"codec_mut","qualname":"<Framed<T, U>>::codec_mut","value":"pub fn codec_mut(&mut Self) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying codec wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying codec wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391252,"byte_end":11391318,"line_start":192,"line_end":192,"column_start":5,"column_end":71}},{"value":"/ `Framed`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391323,"byte_end":11391336,"line_start":193,"line_end":193,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391341,"byte_end":11391344,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying codec","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391349,"byte_end":11391423,"line_start":195,"line_end":195,"column_start":5,"column_end":79}},{"value":"/ as it may corrupt the stream of frames otherwise being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391428,"byte_end":11391499,"line_start":196,"line_end":196,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391640,"byte_end":11391651,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<Framed<T, U>>::read_buffer","value":"pub fn read_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the read buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391585,"byte_end":11391628,"line_start":201,"line_end":201,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391786,"byte_end":11391801,"line_start":207,"line_end":207,"column_start":12,"column_end":27},"name":"read_buffer_mut","qualname":"<Framed<T, U>>::read_buffer_mut","value":"pub fn read_buffer_mut(&mut Self) -> &mut BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the read buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391723,"byte_end":11391774,"line_start":206,"line_end":206,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391941,"byte_end":11391953,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<Framed<T, U>>::write_buffer","value":"pub fn write_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the write buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the write buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11391885,"byte_end":11391929,"line_start":211,"line_end":211,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392090,"byte_end":11392106,"line_start":217,"line_end":217,"column_start":12,"column_end":28},"name":"write_buffer_mut","qualname":"<Framed<T, U>>::write_buffer_mut","value":"pub fn write_buffer_mut(&mut Self) -> &mut BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the write buffer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the write buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392026,"byte_end":11392078,"line_start":216,"line_end":216,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392456,"byte_end":11392466,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Framed<T, U>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Framed`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `Framed`, returning its underlying I/O stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392191,"byte_end":11392254,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392259,"byte_end":11392262,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392267,"byte_end":11392342,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392347,"byte_end":11392417,"line_start":224,"line_end":224,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392422,"byte_end":11392444,"line_start":225,"line_end":225,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392838,"byte_end":11392848,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<Framed<T, U>>::into_parts","value":"pub fn into_parts(Self) -> FramedParts<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Framed`, returning its underlying I/O stream, the buffer\n with unprocessed data, and the codec.","sig":null,"attributes":[{"value":"/ Consumes the `Framed`, returning its underlying I/O stream, the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392516,"byte_end":11392590,"line_start":230,"line_end":230,"column_start":5,"column_end":79}},{"value":"/ with unprocessed data, and the codec.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392595,"byte_end":11392636,"line_start":231,"line_end":231,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392641,"byte_end":11392644,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392649,"byte_end":11392724,"line_start":233,"line_end":233,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392729,"byte_end":11392799,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11392804,"byte_end":11392826,"line_start":235,"line_end":235,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":668},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394822,"byte_end":11394833,"line_start":306,"line_end":306,"column_start":12,"column_end":23},"name":"FramedParts","qualname":"::codec::framed::FramedParts","value":"FramedParts { io, codec, read_buf, write_buf }","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675}],"decl_id":null,"docs":" `FramedParts` contains an export of the data of a Framed transport.\n It can be used to construct a new [`Framed`] with a different codec.\n It contains all current buffers and the inner transport.","sig":null,"attributes":[{"value":"/ `FramedParts` contains an export of the data of a Framed transport.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394507,"byte_end":11394578,"line_start":299,"line_end":299,"column_start":1,"column_end":72}},{"value":"/ It can be used to construct a new [`Framed`] with a different codec.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394579,"byte_end":11394651,"line_start":300,"line_end":300,"column_start":1,"column_end":73}},{"value":"/ It contains all current buffers and the inner transport.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394652,"byte_end":11394712,"line_start":301,"line_end":301,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394713,"byte_end":11394716,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ [`Framed`]: crate::codec::Framed","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394717,"byte_end":11394753,"line_start":303,"line_end":303,"column_start":1,"column_end":37}},{"value":"allow(clippy :: manual_non_exhaustive)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394771,"byte_end":11394810,"line_start":305,"line_end":305,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":671},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394919,"byte_end":11394921,"line_start":308,"line_end":308,"column_start":9,"column_end":11},"name":"io","qualname":"::codec::framed::FramedParts::io","value":"T","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" The inner transport used to read bytes to and write bytes to\n","sig":null,"attributes":[{"value":"/ The inner transport used to read bytes to and write bytes to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394846,"byte_end":11394910,"line_start":307,"line_end":307,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":672},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394953,"byte_end":11394958,"line_start":311,"line_end":311,"column_start":9,"column_end":14},"name":"codec","qualname":"::codec::framed::FramedParts::codec","value":"U","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" The codec\n","sig":null,"attributes":[{"value":"/ The codec","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394931,"byte_end":11394944,"line_start":310,"line_end":310,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":673},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395023,"byte_end":11395031,"line_start":314,"line_end":314,"column_start":9,"column_end":17},"name":"read_buf","qualname":"::codec::framed::FramedParts::read_buf","value":"bytes::BytesMut","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" The buffer with read but unprocessed data.\n","sig":null,"attributes":[{"value":"/ The buffer with read but unprocessed data.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394968,"byte_end":11395014,"line_start":313,"line_end":313,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":674},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395118,"byte_end":11395127,"line_start":317,"line_end":317,"column_start":9,"column_end":18},"name":"write_buf","qualname":"::codec::framed::FramedParts::write_buf","value":"bytes::BytesMut","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" A buffer with unprocessed data which are not written yet.\n","sig":null,"attributes":[{"value":"/ A buffer with unprocessed data which are not written yet.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395048,"byte_end":11395109,"line_start":316,"line_end":316,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395360,"byte_end":11395363,"line_start":326,"line_end":326,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedParts<T, U>>::new","value":"pub fn new<I>(T, U) -> FramedParts<T, U> where U: Encoder<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new, default, `FramedParts`\n","sig":null,"attributes":[{"value":"/ Create a new, default, `FramedParts`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395308,"byte_end":11395348,"line_start":325,"line_end":325,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":880},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396092,"byte_end":11396102,"line_start":19,"line_end":19,"column_start":16,"column_end":26},"name":"FramedRead","qualname":"::codec::framed_read::FramedRead","value":"FramedRead {  }","parent":null,"children":[{"krate":0,"index":883}],"decl_id":null,"docs":" A [`Stream`] of messages decoded from an [`AsyncRead`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396353,"byte_end":11396356,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedRead<T, D>>::new","value":"pub fn new(T, D) -> FramedRead<T, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FramedRead` with the given `decoder`.\n","sig":null,"attributes":[{"value":"/ Creates a new `FramedRead` with the given `decoder`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396285,"byte_end":11396341,"line_start":32,"line_end":32,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396704,"byte_end":11396717,"line_start":45,"line_end":45,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<FramedRead<T, D>>::with_capacity","value":"pub fn with_capacity(T, D, usize) -> FramedRead<T, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FramedRead` with the given `decoder` and a buffer of `capacity`\n initial size.\n","sig":null,"attributes":[{"value":"/ Creates a new `FramedRead` with the given `decoder` and a buffer of `capacity`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396588,"byte_end":11396670,"line_start":43,"line_end":43,"column_start":5,"column_end":87}},{"value":"/ initial size.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396675,"byte_end":11396692,"line_start":44,"line_end":44,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397431,"byte_end":11397438,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FramedRead<T, D>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `FramedRead`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397144,"byte_end":11397207,"line_start":61,"line_end":61,"column_start":5,"column_end":68}},{"value":"/ `FramedRead`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397212,"byte_end":11397229,"line_start":62,"line_end":62,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397234,"byte_end":11397237,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397242,"byte_end":11397317,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397322,"byte_end":11397392,"line_start":65,"line_end":65,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397397,"byte_end":11397419,"line_start":66,"line_end":66,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397786,"byte_end":11397793,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FramedRead<T, D>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `FramedRead`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397491,"byte_end":11397562,"line_start":71,"line_end":71,"column_start":5,"column_end":76}},{"value":"/ `FramedRead`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397567,"byte_end":11397584,"line_start":72,"line_end":72,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397589,"byte_end":11397592,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397597,"byte_end":11397672,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397677,"byte_end":11397747,"line_start":75,"line_end":75,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397752,"byte_end":11397774,"line_start":76,"line_end":76,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398160,"byte_end":11398171,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<FramedRead<T, D>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pinned mutable reference to the underlying I/O stream wrapped by\n `FramedRead`.","sig":null,"attributes":[{"value":"/ Returns a pinned mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397858,"byte_end":11397936,"line_start":81,"line_end":81,"column_start":5,"column_end":83}},{"value":"/ `FramedRead`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397941,"byte_end":11397958,"line_start":82,"line_end":82,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397963,"byte_end":11397966,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397971,"byte_end":11398046,"line_start":84,"line_end":84,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398051,"byte_end":11398121,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398126,"byte_end":11398148,"line_start":86,"line_end":86,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398536,"byte_end":11398546,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FramedRead<T, D>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `FramedRead`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `FramedRead`, returning its underlying I/O stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398267,"byte_end":11398334,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398339,"byte_end":11398342,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398347,"byte_end":11398422,"line_start":93,"line_end":93,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398427,"byte_end":11398497,"line_start":94,"line_end":94,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398502,"byte_end":11398524,"line_start":95,"line_end":95,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398658,"byte_end":11398665,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"decoder","qualname":"<FramedRead<T, D>>::decoder","value":"pub fn decoder(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying decoder.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398596,"byte_end":11398646,"line_start":100,"line_end":100,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398788,"byte_end":11398799,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"decoder_mut","qualname":"<FramedRead<T, D>>::decoder_mut","value":"pub fn decoder_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying decoder.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398718,"byte_end":11398776,"line_start":105,"line_end":105,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398919,"byte_end":11398930,"line_start":111,"line_end":111,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<FramedRead<T, D>>::read_buffer","value":"pub fn read_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the read buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398864,"byte_end":11398907,"line_start":110,"line_end":110,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11399060,"byte_end":11399075,"line_start":116,"line_end":116,"column_start":12,"column_end":27},"name":"read_buffer_mut","qualname":"<FramedRead<T, D>>::read_buffer_mut","value":"pub fn read_buffer_mut(&mut Self) -> &mut BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the read buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11398997,"byte_end":11399048,"line_start":115,"line_end":115,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":839},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401176,"byte_end":11401187,"line_start":19,"line_end":19,"column_start":16,"column_end":27},"name":"FramedWrite","qualname":"::codec::framed_write::FramedWrite","value":"FramedWrite {  }","parent":null,"children":[{"krate":0,"index":842}],"decl_id":null,"docs":" A [`Sink`] of frames encoded to an `AsyncWrite`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401394,"byte_end":11401397,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedWrite<T, E>>::new","value":"pub fn new(T, E) -> FramedWrite<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FramedWrite` with the given `encoder`.\n","sig":null,"attributes":[{"value":"/ Creates a new `FramedWrite` with the given `encoder`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401325,"byte_end":11401382,"line_start":29,"line_end":29,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401955,"byte_end":11401962,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FramedWrite<T, E>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `FramedWrite`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401667,"byte_end":11401730,"line_start":42,"line_end":42,"column_start":5,"column_end":68}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401735,"byte_end":11401753,"line_start":43,"line_end":43,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401758,"byte_end":11401761,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401766,"byte_end":11401841,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401846,"byte_end":11401916,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401921,"byte_end":11401943,"line_start":47,"line_end":47,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402311,"byte_end":11402318,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FramedWrite<T, E>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `FramedWrite`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402015,"byte_end":11402086,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402091,"byte_end":11402109,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402114,"byte_end":11402117,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402122,"byte_end":11402197,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402202,"byte_end":11402272,"line_start":56,"line_end":56,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402277,"byte_end":11402299,"line_start":57,"line_end":57,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402686,"byte_end":11402697,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"get_pin_mut","qualname":"<FramedWrite<T, E>>::get_pin_mut","value":"pub fn get_pin_mut(Pin<&mut Self>) -> Pin<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pinned mutable reference to the underlying I/O stream wrapped by\n `FramedWrite`.","sig":null,"attributes":[{"value":"/ Returns a pinned mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402383,"byte_end":11402461,"line_start":62,"line_end":62,"column_start":5,"column_end":83}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402466,"byte_end":11402484,"line_start":63,"line_end":63,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402489,"byte_end":11402492,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402497,"byte_end":11402572,"line_start":65,"line_end":65,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402577,"byte_end":11402647,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402652,"byte_end":11402674,"line_start":67,"line_end":67,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403063,"byte_end":11403073,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FramedWrite<T, E>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `FramedWrite`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `FramedWrite`, returning its underlying I/O stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402793,"byte_end":11402861,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402866,"byte_end":11402869,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402874,"byte_end":11402949,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11402954,"byte_end":11403024,"line_start":75,"line_end":75,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403029,"byte_end":11403051,"line_start":76,"line_end":76,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403185,"byte_end":11403192,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"encoder","qualname":"<FramedWrite<T, E>>::encoder","value":"pub fn encoder(&Self) -> &E","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying encoder.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying encoder.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403123,"byte_end":11403173,"line_start":81,"line_end":81,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403315,"byte_end":11403326,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"encoder_mut","qualname":"<FramedWrite<T, E>>::encoder_mut","value":"pub fn encoder_mut(&mut Self) -> &mut E","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying encoder.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying encoder.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403245,"byte_end":11403303,"line_start":86,"line_end":86,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403447,"byte_end":11403459,"line_start":92,"line_end":92,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<FramedWrite<T, E>>::write_buffer","value":"pub fn write_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the write buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the write buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403391,"byte_end":11403435,"line_start":91,"line_end":91,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403590,"byte_end":11403606,"line_start":97,"line_end":97,"column_start":12,"column_end":28},"name":"write_buffer_mut","qualname":"<FramedWrite<T, E>>::write_buffer_mut","value":"pub fn write_buffer_mut(&mut Self) -> &mut BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the write buffer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the write buffer.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403526,"byte_end":11403578,"line_start":96,"line_end":96,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":525},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"length_delimited","qualname":"::codec::length_delimited","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":680},{"krate":0,"index":690},{"krate":0,"index":688},{"krate":0,"index":687},{"krate":0,"index":547},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":706},{"krate":0,"index":704},{"krate":0,"index":703},{"krate":0,"index":549},{"krate":0,"index":556},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591}],"decl_id":null,"docs":" Frame a stream of bytes based on a length prefix","sig":null,"attributes":[{"value":"/ Frame a stream of bytes based on a length prefix","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405133,"byte_end":11405185,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405186,"byte_end":11405189,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Many protocols delimit their frames by prefacing frame data with a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405190,"byte_end":11405260,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ frame head that specifies the length of the frame. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405261,"byte_end":11405319,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ `length_delimited` module provides utilities for handling the length","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405320,"byte_end":11405392,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"/ based framing. This allows the consumer to work with entire frames","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405393,"byte_end":11405463,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ without having to worry about buffering or other framing logic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405464,"byte_end":11405531,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405532,"byte_end":11405535,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Getting started","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405536,"byte_end":11405557,"line_start":9,"line_end":9,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405558,"byte_end":11405561,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ If implementing a protocol from scratch, using length delimited framing","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405562,"byte_end":11405637,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ is an easy way to get started. [`LengthDelimitedCodec::new()`] will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405638,"byte_end":11405709,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ return a length delimited codec using default configuration values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405710,"byte_end":11405781,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ This can then be used to construct a framer to adapt a full-duplex","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405782,"byte_end":11405852,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ byte stream into a stream of frames.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405853,"byte_end":11405893,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405894,"byte_end":11405897,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405898,"byte_end":11405905,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use tokio::io::{AsyncRead, AsyncWrite};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405906,"byte_end":11405949,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ use tokio_util::codec::{Framed, LengthDelimitedCodec};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11405950,"byte_end":11406008,"line_start":19,"line_end":19,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406009,"byte_end":11406012,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ fn bind_transport<T: AsyncRead + AsyncWrite>(io: T)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406013,"byte_end":11406068,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/     -> Framed<T, LengthDelimitedCodec>","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406069,"byte_end":11406111,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/ {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406112,"byte_end":11406117,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/     Framed::new(io, LengthDelimitedCodec::new())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406118,"byte_end":11406170,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406171,"byte_end":11406176,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406177,"byte_end":11406199,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406200,"byte_end":11406207,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406208,"byte_end":11406211,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The returned transport implements `Sink + Stream` for `BytesMut`. It","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406212,"byte_end":11406284,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ encodes the frame with a big-endian `u32` header denoting the frame","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406285,"byte_end":11406356,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ payload length:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406357,"byte_end":11406376,"line_start":31,"line_end":31,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406377,"byte_end":11406380,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406381,"byte_end":11406392,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ +----------+--------------------------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406393,"byte_end":11406442,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ | len: u32 |          frame payload         |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406443,"byte_end":11406492,"line_start":35,"line_end":35,"column_start":1,"column_end":50}},{"value":"/ +----------+--------------------------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406493,"byte_end":11406542,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406543,"byte_end":11406550,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406551,"byte_end":11406554,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Specifically, given the following:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406555,"byte_end":11406593,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406594,"byte_end":11406597,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406598,"byte_end":11406605,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use tokio::io::{AsyncRead, AsyncWrite};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406606,"byte_end":11406649,"line_start":42,"line_end":42,"column_start":1,"column_end":44}},{"value":"/ use tokio_util::codec::{Framed, LengthDelimitedCodec};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406650,"byte_end":11406708,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406709,"byte_end":11406712,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ use futures::SinkExt;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406713,"byte_end":11406738,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406739,"byte_end":11406760,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406761,"byte_end":11406764,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ async fn write_frame<T>(io: T) -> Result<(), Box<dyn std::error::Error>>","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406765,"byte_end":11406841,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ where","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406842,"byte_end":11406851,"line_start":49,"line_end":49,"column_start":1,"column_end":10}},{"value":"/     T: AsyncRead + AsyncWrite + Unpin,","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406852,"byte_end":11406894,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"/ {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406895,"byte_end":11406900,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/     let mut transport = Framed::new(io, LengthDelimitedCodec::new());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406901,"byte_end":11406974,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/     let frame = Bytes::from(\"hello world\");","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11406975,"byte_end":11407022,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407023,"byte_end":11407026,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     transport.send(frame).await?;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407027,"byte_end":11407064,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/     Ok(())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407065,"byte_end":11407079,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407080,"byte_end":11407085,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407086,"byte_end":11407093,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407094,"byte_end":11407097,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The encoded frame will look like this:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407098,"byte_end":11407140,"line_start":60,"line_end":60,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407141,"byte_end":11407144,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407145,"byte_end":11407156,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/ +---- len: u32 ----+---- data ----+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407157,"byte_end":11407196,"line_start":63,"line_end":63,"column_start":1,"column_end":40}},{"value":"/ | \\x00\\x00\\x00\\x0b |  hello world |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407197,"byte_end":11407236,"line_start":64,"line_end":64,"column_start":1,"column_end":40}},{"value":"/ +------------------+--------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407237,"byte_end":11407276,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407277,"byte_end":11407284,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407285,"byte_end":11407288,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Decoding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407289,"byte_end":11407303,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407304,"byte_end":11407307,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`FramedRead`] adapts an [`AsyncRead`] into a `Stream` of [`BytesMut`],","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407308,"byte_end":11407383,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ such that each yielded [`BytesMut`] value contains the contents of an","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407384,"byte_end":11407457,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/ entire frame. There are many configuration parameters enabling","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407458,"byte_end":11407524,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/ [`FramedRead`] to handle a wide range of protocols. Here are some","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407525,"byte_end":11407594,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ examples that will cover the various options at a high level.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407595,"byte_end":11407660,"line_start":74,"line_end":74,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407661,"byte_end":11407664,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ## Example 1","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407665,"byte_end":11407681,"line_start":76,"line_end":76,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407682,"byte_end":11407685,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ The following will parse a `u16` length field at offset 0, including the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407686,"byte_end":11407762,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407763,"byte_end":11407804,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407805,"byte_end":11407808,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407809,"byte_end":11407816,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407817,"byte_end":11407848,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407849,"byte_end":11407899,"line_start":83,"line_end":83,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407900,"byte_end":11407941,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407942,"byte_end":11407977,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(0) // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11407978,"byte_end":11408026,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408027,"byte_end":11408058,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(0)   // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408059,"byte_end":11408107,"line_start":88,"line_end":88,"column_start":1,"column_end":49}},{"value":"/     .num_skip(0) // Do not strip frame header","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408108,"byte_end":11408157,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408158,"byte_end":11408180,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408181,"byte_end":11408188,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408189,"byte_end":11408211,"line_start":92,"line_end":92,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408212,"byte_end":11408219,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408220,"byte_end":11408223,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408224,"byte_end":11408272,"line_start":95,"line_end":95,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408273,"byte_end":11408276,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408277,"byte_end":11408288,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/          INPUT                           DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408289,"byte_end":11408341,"line_start":98,"line_end":98,"column_start":1,"column_end":53}},{"value":"/ +-- len ---+--- Payload ---+     +-- len ---+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408342,"byte_end":11408407,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"/ | \\x00\\x0B |  Hello world  | --> | \\x00\\x0B |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408408,"byte_end":11408473,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"/ +----------+---------------+     +----------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408474,"byte_end":11408539,"line_start":101,"line_end":101,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408540,"byte_end":11408547,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408548,"byte_end":11408551,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ The value of the length field is 11 (`\\x0B`) which represents the length","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408552,"byte_end":11408628,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"/ of the payload, `hello world`. By default, [`FramedRead`] assumes that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408629,"byte_end":11408703,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/ the length field represents the number of bytes that **follows** the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408704,"byte_end":11408776,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"/ length field. Thus, the entire frame has a length of 13: 2 bytes for the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408777,"byte_end":11408853,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/ frame head + 11 bytes for the payload.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408854,"byte_end":11408896,"line_start":108,"line_end":108,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408897,"byte_end":11408900,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ## Example 2","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408901,"byte_end":11408917,"line_start":110,"line_end":110,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408918,"byte_end":11408921,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The following will parse a `u16` length field at offset 0, omitting the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408922,"byte_end":11408997,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11408998,"byte_end":11409039,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409040,"byte_end":11409043,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409044,"byte_end":11409051,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409052,"byte_end":11409083,"line_start":116,"line_end":116,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409084,"byte_end":11409134,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409135,"byte_end":11409176,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409177,"byte_end":11409212,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(0) // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409213,"byte_end":11409261,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409262,"byte_end":11409293,"line_start":121,"line_end":121,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(0)   // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409294,"byte_end":11409342,"line_start":122,"line_end":122,"column_start":1,"column_end":49}},{"value":"/     // `num_skip` is not needed, the default is to skip","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409343,"byte_end":11409402,"line_start":123,"line_end":123,"column_start":1,"column_end":60}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409403,"byte_end":11409425,"line_start":124,"line_end":124,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409426,"byte_end":11409433,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409434,"byte_end":11409456,"line_start":126,"line_end":126,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409457,"byte_end":11409464,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409465,"byte_end":11409468,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409469,"byte_end":11409517,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409518,"byte_end":11409521,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409522,"byte_end":11409533,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"/          INPUT                        DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409534,"byte_end":11409583,"line_start":132,"line_end":132,"column_start":1,"column_end":50}},{"value":"/ +-- len ---+--- Payload ---+     +--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409584,"byte_end":11409638,"line_start":133,"line_end":133,"column_start":1,"column_end":55}},{"value":"/ | \\x00\\x0B |  Hello world  | --> |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409639,"byte_end":11409693,"line_start":134,"line_end":134,"column_start":1,"column_end":55}},{"value":"/ +----------+---------------+     +---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409694,"byte_end":11409748,"line_start":135,"line_end":135,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409749,"byte_end":11409756,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409757,"byte_end":11409760,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This is similar to the first example, the only difference is that the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409761,"byte_end":11409834,"line_start":138,"line_end":138,"column_start":1,"column_end":74}},{"value":"/ frame head is **not** included in the yielded `BytesMut` value.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409835,"byte_end":11409902,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409903,"byte_end":11409906,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ## Example 3","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409907,"byte_end":11409923,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409924,"byte_end":11409927,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ The following will parse a `u16` length field at offset 0, including the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11409928,"byte_end":11410004,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/ frame head in the yielded `BytesMut`. In this case, the length field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410005,"byte_end":11410077,"line_start":144,"line_end":144,"column_start":1,"column_end":73}},{"value":"/ **includes** the frame head length.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410078,"byte_end":11410117,"line_start":145,"line_end":145,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410118,"byte_end":11410121,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410122,"byte_end":11410129,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410130,"byte_end":11410161,"line_start":148,"line_end":148,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410162,"byte_end":11410212,"line_start":149,"line_end":149,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410213,"byte_end":11410254,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410255,"byte_end":11410290,"line_start":151,"line_end":151,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(0) // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410291,"byte_end":11410339,"line_start":152,"line_end":152,"column_start":1,"column_end":49}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410340,"byte_end":11410371,"line_start":153,"line_end":153,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(-2)  // size of head","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410372,"byte_end":11410419,"line_start":154,"line_end":154,"column_start":1,"column_end":48}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410420,"byte_end":11410440,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410441,"byte_end":11410463,"line_start":156,"line_end":156,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410464,"byte_end":11410471,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410472,"byte_end":11410494,"line_start":158,"line_end":158,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410495,"byte_end":11410502,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410503,"byte_end":11410506,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410507,"byte_end":11410555,"line_start":161,"line_end":161,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410556,"byte_end":11410559,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410560,"byte_end":11410571,"line_start":163,"line_end":163,"column_start":1,"column_end":12}},{"value":"/          INPUT                           DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410572,"byte_end":11410624,"line_start":164,"line_end":164,"column_start":1,"column_end":53}},{"value":"/ +-- len ---+--- Payload ---+     +-- len ---+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410625,"byte_end":11410690,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ | \\x00\\x0D |  Hello world  | --> | \\x00\\x0D |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410691,"byte_end":11410756,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/ +----------+---------------+     +----------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410757,"byte_end":11410822,"line_start":167,"line_end":167,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410823,"byte_end":11410830,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410831,"byte_end":11410834,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ In most cases, the length field represents the length of the payload","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410835,"byte_end":11410907,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/ only, as shown in the previous examples. However, in some protocols the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410908,"byte_end":11410983,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"/ length field represents the length of the whole frame, including the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11410984,"byte_end":11411056,"line_start":172,"line_end":172,"column_start":1,"column_end":73}},{"value":"/ head. In such cases, we specify a negative `length_adjustment` to adjust","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411057,"byte_end":11411133,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"/ the value provided in the frame head to represent the payload length.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411134,"byte_end":11411207,"line_start":174,"line_end":174,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411208,"byte_end":11411211,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ## Example 4","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411212,"byte_end":11411228,"line_start":176,"line_end":176,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411229,"byte_end":11411232,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ The following will parse a 3 byte length field at offset 0 in a 5 byte","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411233,"byte_end":11411307,"line_start":178,"line_end":178,"column_start":1,"column_end":75}},{"value":"/ frame head, including the frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411308,"byte_end":11411375,"line_start":179,"line_end":179,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411376,"byte_end":11411379,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411380,"byte_end":11411387,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411388,"byte_end":11411419,"line_start":182,"line_end":182,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411420,"byte_end":11411470,"line_start":183,"line_end":183,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411471,"byte_end":11411512,"line_start":184,"line_end":184,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411513,"byte_end":11411548,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(0) // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411549,"byte_end":11411597,"line_start":186,"line_end":186,"column_start":1,"column_end":49}},{"value":"/     .length_field_length(3)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411598,"byte_end":11411629,"line_start":187,"line_end":187,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(2)  // remaining head","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411630,"byte_end":11411678,"line_start":188,"line_end":188,"column_start":1,"column_end":49}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411679,"byte_end":11411699,"line_start":189,"line_end":189,"column_start":1,"column_end":21}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411700,"byte_end":11411722,"line_start":190,"line_end":190,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411723,"byte_end":11411730,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411731,"byte_end":11411753,"line_start":192,"line_end":192,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411754,"byte_end":11411761,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411762,"byte_end":11411765,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411766,"byte_end":11411814,"line_start":195,"line_end":195,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411815,"byte_end":11411818,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411819,"byte_end":11411830,"line_start":197,"line_end":197,"column_start":1,"column_end":12}},{"value":"/                  INPUT","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411831,"byte_end":11411857,"line_start":198,"line_end":198,"column_start":1,"column_end":27}},{"value":"/ +---- len -----+- head -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411858,"byte_end":11411903,"line_start":199,"line_end":199,"column_start":1,"column_end":46}},{"value":"/ | \\x00\\x00\\x0B | \\xCAFE |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411904,"byte_end":11411949,"line_start":200,"line_end":200,"column_start":1,"column_end":46}},{"value":"/ +--------------+--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411950,"byte_end":11411995,"line_start":201,"line_end":201,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11411996,"byte_end":11411999,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/                  DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412000,"byte_end":11412028,"line_start":203,"line_end":203,"column_start":1,"column_end":29}},{"value":"/ +---- len -----+- head -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412029,"byte_end":11412074,"line_start":204,"line_end":204,"column_start":1,"column_end":46}},{"value":"/ | \\x00\\x00\\x0B | \\xCAFE |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412075,"byte_end":11412120,"line_start":205,"line_end":205,"column_start":1,"column_end":46}},{"value":"/ +--------------+--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412121,"byte_end":11412166,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412167,"byte_end":11412174,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412175,"byte_end":11412178,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ A more advanced example that shows a case where there is extra frame","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412179,"byte_end":11412251,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ head data between the length field and the payload. In such cases, it is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412252,"byte_end":11412328,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/ usually desirable to include the frame head as part of the yielded","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412329,"byte_end":11412399,"line_start":211,"line_end":211,"column_start":1,"column_end":71}},{"value":"/ `BytesMut`. This lets consumers of the length delimited framer to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412400,"byte_end":11412469,"line_start":212,"line_end":212,"column_start":1,"column_end":70}},{"value":"/ process the frame head as needed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412470,"byte_end":11412507,"line_start":213,"line_end":213,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412508,"byte_end":11412511,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ The positive `length_adjustment` value lets `FramedRead` factor in the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412512,"byte_end":11412586,"line_start":215,"line_end":215,"column_start":1,"column_end":75}},{"value":"/ additional head into the frame length calculation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412587,"byte_end":11412641,"line_start":216,"line_end":216,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412642,"byte_end":11412645,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ ## Example 5","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412646,"byte_end":11412662,"line_start":218,"line_end":218,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412663,"byte_end":11412666,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ The following will parse a `u16` length field at offset 1 of a 4 byte","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412667,"byte_end":11412740,"line_start":220,"line_end":220,"column_start":1,"column_end":74}},{"value":"/ frame head. The first byte and the length field will be omitted from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412741,"byte_end":11412817,"line_start":221,"line_end":221,"column_start":1,"column_end":77}},{"value":"/ yielded `BytesMut`, but the trailing 2 bytes of the frame head will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412818,"byte_end":11412892,"line_start":222,"line_end":222,"column_start":1,"column_end":75}},{"value":"/ included.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412893,"byte_end":11412906,"line_start":223,"line_end":223,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412907,"byte_end":11412910,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412911,"byte_end":11412918,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412919,"byte_end":11412950,"line_start":226,"line_end":226,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11412951,"byte_end":11413001,"line_start":227,"line_end":227,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413002,"byte_end":11413043,"line_start":228,"line_end":228,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413044,"byte_end":11413079,"line_start":229,"line_end":229,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(1) // length of hdr1","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413080,"byte_end":11413129,"line_start":230,"line_end":230,"column_start":1,"column_end":50}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413130,"byte_end":11413161,"line_start":231,"line_end":231,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(1)  // length of hdr2","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413162,"byte_end":11413210,"line_start":232,"line_end":232,"column_start":1,"column_end":49}},{"value":"/     .num_skip(3) // length of hdr1 + LEN","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413211,"byte_end":11413255,"line_start":233,"line_end":233,"column_start":1,"column_end":45}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413256,"byte_end":11413278,"line_start":234,"line_end":234,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413279,"byte_end":11413286,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413287,"byte_end":11413309,"line_start":236,"line_end":236,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413310,"byte_end":11413317,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413318,"byte_end":11413321,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413322,"byte_end":11413370,"line_start":239,"line_end":239,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413371,"byte_end":11413374,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413375,"byte_end":11413386,"line_start":241,"line_end":241,"column_start":1,"column_end":12}},{"value":"/                  INPUT","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413387,"byte_end":11413413,"line_start":242,"line_end":242,"column_start":1,"column_end":27}},{"value":"/ +- hdr1 -+-- len ---+- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413414,"byte_end":11413464,"line_start":243,"line_end":243,"column_start":1,"column_end":51}},{"value":"/ |  \\xCA  | \\x00\\x0B |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413465,"byte_end":11413515,"line_start":244,"line_end":244,"column_start":1,"column_end":51}},{"value":"/ +--------+----------+--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413516,"byte_end":11413566,"line_start":245,"line_end":245,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413567,"byte_end":11413570,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/          DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413571,"byte_end":11413591,"line_start":247,"line_end":247,"column_start":1,"column_end":21}},{"value":"/ +- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413592,"byte_end":11413622,"line_start":248,"line_end":248,"column_start":1,"column_end":31}},{"value":"/ |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413623,"byte_end":11413653,"line_start":249,"line_end":249,"column_start":1,"column_end":31}},{"value":"/ +--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413654,"byte_end":11413684,"line_start":250,"line_end":250,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413685,"byte_end":11413692,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413693,"byte_end":11413696,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ The length field is situated in the middle of the frame head. In this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413697,"byte_end":11413770,"line_start":253,"line_end":253,"column_start":1,"column_end":74}},{"value":"/ case, the first byte in the frame head could be a version or some other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413771,"byte_end":11413846,"line_start":254,"line_end":254,"column_start":1,"column_end":76}},{"value":"/ identifier that is not needed for processing. On the other hand, the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413847,"byte_end":11413919,"line_start":255,"line_end":255,"column_start":1,"column_end":73}},{"value":"/ second half of the head is needed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413920,"byte_end":11413958,"line_start":256,"line_end":256,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413959,"byte_end":11413962,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ `length_field_offset` indicates how many bytes to skip before starting","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11413963,"byte_end":11414037,"line_start":258,"line_end":258,"column_start":1,"column_end":75}},{"value":"/ to read the length field.  `length_adjustment` is the number of bytes to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414038,"byte_end":11414114,"line_start":259,"line_end":259,"column_start":1,"column_end":77}},{"value":"/ skip starting at the end of the length field. In this case, it is the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414115,"byte_end":11414188,"line_start":260,"line_end":260,"column_start":1,"column_end":74}},{"value":"/ second half of the head.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414189,"byte_end":11414217,"line_start":261,"line_end":261,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414218,"byte_end":11414221,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ ## Example 6","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414222,"byte_end":11414238,"line_start":263,"line_end":263,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414239,"byte_end":11414242,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ The following will parse a `u16` length field at offset 1 of a 4 byte","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414243,"byte_end":11414316,"line_start":265,"line_end":265,"column_start":1,"column_end":74}},{"value":"/ frame head. The first byte and the length field will be omitted from the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414317,"byte_end":11414393,"line_start":266,"line_end":266,"column_start":1,"column_end":77}},{"value":"/ yielded `BytesMut`, but the trailing 2 bytes of the frame head will be","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414394,"byte_end":11414468,"line_start":267,"line_end":267,"column_start":1,"column_end":75}},{"value":"/ included. In this case, the length field **includes** the frame head","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414469,"byte_end":11414541,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"/ length.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414542,"byte_end":11414553,"line_start":269,"line_end":269,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414554,"byte_end":11414557,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414558,"byte_end":11414565,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414566,"byte_end":11414597,"line_start":272,"line_end":272,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414598,"byte_end":11414648,"line_start":273,"line_end":273,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414649,"byte_end":11414690,"line_start":274,"line_end":274,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414691,"byte_end":11414726,"line_start":275,"line_end":275,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(1) // length of hdr1","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414727,"byte_end":11414776,"line_start":276,"line_end":276,"column_start":1,"column_end":50}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414777,"byte_end":11414808,"line_start":277,"line_end":277,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(-3)  // length of hdr1 + LEN, negative","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414809,"byte_end":11414874,"line_start":278,"line_end":278,"column_start":1,"column_end":66}},{"value":"/     .num_skip(3)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414875,"byte_end":11414895,"line_start":279,"line_end":279,"column_start":1,"column_end":21}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414896,"byte_end":11414918,"line_start":280,"line_end":280,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414919,"byte_end":11414926,"line_start":281,"line_end":281,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414927,"byte_end":11414934,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414935,"byte_end":11414938,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414939,"byte_end":11414987,"line_start":284,"line_end":284,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414988,"byte_end":11414991,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11414992,"byte_end":11415003,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/                  INPUT","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415004,"byte_end":11415030,"line_start":287,"line_end":287,"column_start":1,"column_end":27}},{"value":"/ +- hdr1 -+-- len ---+- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415031,"byte_end":11415081,"line_start":288,"line_end":288,"column_start":1,"column_end":51}},{"value":"/ |  \\xCA  | \\x00\\x0F |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415082,"byte_end":11415132,"line_start":289,"line_end":289,"column_start":1,"column_end":51}},{"value":"/ +--------+----------+--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415133,"byte_end":11415183,"line_start":290,"line_end":290,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415184,"byte_end":11415187,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/          DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415188,"byte_end":11415208,"line_start":292,"line_end":292,"column_start":1,"column_end":21}},{"value":"/ +- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415209,"byte_end":11415239,"line_start":293,"line_end":293,"column_start":1,"column_end":31}},{"value":"/ |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415240,"byte_end":11415270,"line_start":294,"line_end":294,"column_start":1,"column_end":31}},{"value":"/ +--------+---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415271,"byte_end":11415301,"line_start":295,"line_end":295,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415302,"byte_end":11415309,"line_start":296,"line_end":296,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415310,"byte_end":11415313,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Similar to the example above, the difference is that the length field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415314,"byte_end":11415387,"line_start":298,"line_end":298,"column_start":1,"column_end":74}},{"value":"/ represents the length of the entire frame instead of just the payload.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415388,"byte_end":11415462,"line_start":299,"line_end":299,"column_start":1,"column_end":75}},{"value":"/ The length of `hdr1` and `len` must be counted in `length_adjustment`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415463,"byte_end":11415537,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/ Note that the length of `hdr2` does **not** need to be explicitly set","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415538,"byte_end":11415611,"line_start":301,"line_end":301,"column_start":1,"column_end":74}},{"value":"/ anywhere because it already is factored into the total frame length that","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415612,"byte_end":11415688,"line_start":302,"line_end":302,"column_start":1,"column_end":77}},{"value":"/ is read from the byte stream.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415689,"byte_end":11415722,"line_start":303,"line_end":303,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415723,"byte_end":11415726,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ## Example 7","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415727,"byte_end":11415743,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415744,"byte_end":11415747,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ The following will parse a 3 byte length field at offset 0 in a 4 byte","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415748,"byte_end":11415822,"line_start":307,"line_end":307,"column_start":1,"column_end":75}},{"value":"/ frame head, excluding the 4th byte from the yielded `BytesMut`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415823,"byte_end":11415890,"line_start":308,"line_end":308,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415891,"byte_end":11415894,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415895,"byte_end":11415902,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415903,"byte_end":11415934,"line_start":311,"line_end":311,"column_start":1,"column_end":32}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415935,"byte_end":11415985,"line_start":312,"line_end":312,"column_start":1,"column_end":51}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11415986,"byte_end":11416027,"line_start":313,"line_end":313,"column_start":1,"column_end":42}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416028,"byte_end":11416063,"line_start":314,"line_end":314,"column_start":1,"column_end":36}},{"value":"/     .length_field_offset(0) // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416064,"byte_end":11416112,"line_start":315,"line_end":315,"column_start":1,"column_end":49}},{"value":"/     .length_field_length(3)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416113,"byte_end":11416144,"line_start":316,"line_end":316,"column_start":1,"column_end":32}},{"value":"/     .length_adjustment(0)  // default value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416145,"byte_end":11416192,"line_start":317,"line_end":317,"column_start":1,"column_end":48}},{"value":"/     .num_skip(4) // skip the first 4 bytes","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416193,"byte_end":11416239,"line_start":318,"line_end":318,"column_start":1,"column_end":47}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416240,"byte_end":11416262,"line_start":319,"line_end":319,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416263,"byte_end":11416270,"line_start":320,"line_end":320,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416271,"byte_end":11416293,"line_start":321,"line_end":321,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416294,"byte_end":11416301,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416302,"byte_end":11416305,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ The following frame will be decoded as such:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416306,"byte_end":11416354,"line_start":324,"line_end":324,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416355,"byte_end":11416358,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416359,"byte_end":11416370,"line_start":326,"line_end":326,"column_start":1,"column_end":12}},{"value":"/                  INPUT                       DECODED","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416371,"byte_end":11416427,"line_start":327,"line_end":327,"column_start":1,"column_end":57}},{"value":"/ +------- len ------+--- Payload ---+    +--- Payload ---+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416428,"byte_end":11416489,"line_start":328,"line_end":328,"column_start":1,"column_end":62}},{"value":"/ | \\x00\\x00\\x0B\\xFF |  Hello world  | => |  Hello world  |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416490,"byte_end":11416551,"line_start":329,"line_end":329,"column_start":1,"column_end":62}},{"value":"/ +------------------+---------------+    +---------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416552,"byte_end":11416613,"line_start":330,"line_end":330,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416614,"byte_end":11416621,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416622,"byte_end":11416625,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ A simple example where there are unused bytes between the length field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416626,"byte_end":11416700,"line_start":333,"line_end":333,"column_start":1,"column_end":75}},{"value":"/ and the payload.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416701,"byte_end":11416721,"line_start":334,"line_end":334,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416722,"byte_end":11416725,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ # Encoding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416726,"byte_end":11416740,"line_start":336,"line_end":336,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416741,"byte_end":11416744,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ [`FramedWrite`] adapts an [`AsyncWrite`] into a `Sink` of [`BytesMut`],","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416745,"byte_end":11416820,"line_start":338,"line_end":338,"column_start":1,"column_end":76}},{"value":"/ such that each submitted [`BytesMut`] is prefaced by a length field.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416821,"byte_end":11416893,"line_start":339,"line_end":339,"column_start":1,"column_end":73}},{"value":"/ There are fewer configuration options than [`FramedRead`]. Given","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416894,"byte_end":11416962,"line_start":340,"line_end":340,"column_start":1,"column_end":69}},{"value":"/ protocols that have more complex frame heads, an encoder should probably","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11416963,"byte_end":11417039,"line_start":341,"line_end":341,"column_start":1,"column_end":77}},{"value":"/ be written by hand using [`Encoder`].","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417040,"byte_end":11417081,"line_start":342,"line_end":342,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417082,"byte_end":11417085,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example, given a `FramedWrite` with the following","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417086,"byte_end":11417156,"line_start":344,"line_end":344,"column_start":1,"column_end":71}},{"value":"/ configuration:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417157,"byte_end":11417175,"line_start":345,"line_end":345,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417176,"byte_end":11417179,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417180,"byte_end":11417187,"line_start":347,"line_end":347,"column_start":1,"column_end":8}},{"value":"/ # use tokio::io::AsyncWrite;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417188,"byte_end":11417220,"line_start":348,"line_end":348,"column_start":1,"column_end":33}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417221,"byte_end":11417271,"line_start":349,"line_end":349,"column_start":1,"column_end":51}},{"value":"/ # fn write_frame<T: AsyncWrite>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417272,"byte_end":11417316,"line_start":350,"line_end":350,"column_start":1,"column_end":45}},{"value":"/ # let _ =","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417317,"byte_end":11417330,"line_start":351,"line_end":351,"column_start":1,"column_end":14}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417331,"byte_end":11417366,"line_start":352,"line_end":352,"column_start":1,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417367,"byte_end":11417398,"line_start":353,"line_end":353,"column_start":1,"column_end":32}},{"value":"/     .new_write(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417399,"byte_end":11417422,"line_start":354,"line_end":354,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417423,"byte_end":11417430,"line_start":355,"line_end":355,"column_start":1,"column_end":8}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417431,"byte_end":11417453,"line_start":356,"line_end":356,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417454,"byte_end":11417461,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417462,"byte_end":11417465,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ A payload of `hello world` will be encoded as:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417466,"byte_end":11417516,"line_start":359,"line_end":359,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417517,"byte_end":11417520,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417521,"byte_end":11417532,"line_start":361,"line_end":361,"column_start":1,"column_end":12}},{"value":"/ +- len: u16 -+---- data ----+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417533,"byte_end":11417566,"line_start":362,"line_end":362,"column_start":1,"column_end":34}},{"value":"/ |  \\x00\\x0b  |  hello world |","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417567,"byte_end":11417600,"line_start":363,"line_end":363,"column_start":1,"column_end":34}},{"value":"/ +------------+--------------+","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417601,"byte_end":11417634,"line_start":364,"line_end":364,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417635,"byte_end":11417642,"line_start":365,"line_end":365,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417643,"byte_end":11417646,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ [`LengthDelimitedCodec::new()`]: method@LengthDelimitedCodec::new","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417647,"byte_end":11417716,"line_start":367,"line_end":367,"column_start":1,"column_end":70}},{"value":"/ [`FramedRead`]: struct@FramedRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417717,"byte_end":11417754,"line_start":368,"line_end":368,"column_start":1,"column_end":38}},{"value":"/ [`FramedWrite`]: struct@FramedWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417755,"byte_end":11417794,"line_start":369,"line_end":369,"column_start":1,"column_end":40}},{"value":"/ [`AsyncRead`]: trait@tokio::io::AsyncRead","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417795,"byte_end":11417840,"line_start":370,"line_end":370,"column_start":1,"column_end":46}},{"value":"/ [`AsyncWrite`]: trait@tokio::io::AsyncWrite","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417841,"byte_end":11417888,"line_start":371,"line_end":371,"column_start":1,"column_end":48}},{"value":"/ [`Encoder`]: trait@Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417889,"byte_end":11417919,"line_start":372,"line_end":372,"column_start":1,"column_end":31}},{"value":"/ [`BytesMut`]: bytes::BytesMut","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11417920,"byte_end":11417953,"line_start":373,"line_end":373,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":680},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418515,"byte_end":11418522,"line_start":390,"line_end":390,"column_start":12,"column_end":19},"name":"Builder","qualname":"::codec::length_delimited::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"decl_id":null,"docs":" Configure length delimited `LengthDelimitedCodec`s.","sig":null,"attributes":[{"value":"/ Configure length delimited `LengthDelimitedCodec`s.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418197,"byte_end":11418252,"line_start":384,"line_end":384,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418253,"byte_end":11418256,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ `Builder` enables constructing configured length delimited codecs. Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418257,"byte_end":11418332,"line_start":386,"line_end":386,"column_start":1,"column_end":76}},{"value":"/ that not all configuration settings apply to both encoding and decoding. See","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418333,"byte_end":11418413,"line_start":387,"line_end":387,"column_start":1,"column_end":81}},{"value":"/ the documentation for specific methods for more detail.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11418414,"byte_end":11418473,"line_start":388,"line_end":388,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":547},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419193,"byte_end":11419218,"line_start":412,"line_end":412,"column_start":12,"column_end":37},"name":"LengthDelimitedCodecError","qualname":"::codec::length_delimited::LengthDelimitedCodecError","value":"LengthDelimitedCodecError {  }","parent":null,"children":[{"krate":0,"index":548}],"decl_id":null,"docs":" An error when the number of bytes read is more than max frame length.\n","sig":null,"attributes":[{"value":"/ An error when the number of bytes read is more than max frame length.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419108,"byte_end":11419181,"line_start":411,"line_end":411,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":692},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419563,"byte_end":11419583,"line_start":425,"line_end":425,"column_start":12,"column_end":32},"name":"LengthDelimitedCodec","qualname":"::codec::length_delimited::LengthDelimitedCodec","value":"LengthDelimitedCodec {  }","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694}],"decl_id":null,"docs":" A codec for frames delimited by a frame head specifying their lengths.","sig":null,"attributes":[{"value":"/ A codec for frames delimited by a frame head specifying their lengths.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419239,"byte_end":11419313,"line_start":416,"line_end":416,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419314,"byte_end":11419317,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ This allows the consumer to work with entire frames without having to worry","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419318,"byte_end":11419397,"line_start":418,"line_end":418,"column_start":1,"column_end":80}},{"value":"/ about buffering or other framing logic.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419398,"byte_end":11419441,"line_start":419,"line_end":419,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419442,"byte_end":11419445,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ See [module level] documentation for more detail.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419446,"byte_end":11419499,"line_start":421,"line_end":421,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419500,"byte_end":11419503,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ [module level]: index.html","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419504,"byte_end":11419534,"line_start":423,"line_end":423,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419927,"byte_end":11419930,"line_start":443,"line_end":443,"column_start":12,"column_end":15},"name":"new","qualname":"<LengthDelimitedCodec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `LengthDelimitedCodec` with the default configuration values.\n","sig":null,"attributes":[{"value":"/ Creates a new `LengthDelimitedCodec` with the default configuration values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419836,"byte_end":11419915,"line_start":442,"line_end":442,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420157,"byte_end":11420164,"line_start":452,"line_end":452,"column_start":12,"column_end":19},"name":"builder","qualname":"<LengthDelimitedCodec>::builder","value":"pub fn builder() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new length delimited codec builder with default configuration\n values.\n","sig":null,"attributes":[{"value":"/ Creates a new length delimited codec builder with default configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420054,"byte_end":11420129,"line_start":450,"line_end":450,"column_start":5,"column_end":80}},{"value":"/ values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420134,"byte_end":11420145,"line_start":451,"line_end":451,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420386,"byte_end":11420402,"line_start":460,"line_end":460,"column_start":12,"column_end":28},"name":"max_frame_length","qualname":"<LengthDelimitedCodec>::max_frame_length","value":"pub fn max_frame_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current max frame setting","sig":null,"attributes":[{"value":"/ Returns the current max frame setting","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420214,"byte_end":11420255,"line_start":456,"line_end":456,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420260,"byte_end":11420263,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This is the largest size this codec will accept from the wire. Larger","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420268,"byte_end":11420341,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ frames will be rejected.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420346,"byte_end":11420374,"line_start":459,"line_end":459,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420823,"byte_end":11420843,"line_start":470,"line_end":470,"column_start":12,"column_end":32},"name":"set_max_frame_length","qualname":"<LengthDelimitedCodec>::set_max_frame_length","value":"pub fn set_max_frame_length(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Updates the max frame setting.","sig":null,"attributes":[{"value":"/ Updates the max frame setting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420467,"byte_end":11420501,"line_start":464,"line_end":464,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420506,"byte_end":11420509,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ The change takes effect the next time a frame is decoded. In other","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420514,"byte_end":11420584,"line_start":466,"line_end":466,"column_start":5,"column_end":75}},{"value":"/ words, if a frame is currently in process of being decoded with a frame","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420589,"byte_end":11420664,"line_start":467,"line_end":467,"column_start":5,"column_end":80}},{"value":"/ size greater than `val` but less than the max frame length in effect","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420669,"byte_end":11420741,"line_start":468,"line_end":468,"column_start":5,"column_end":77}},{"value":"/ before calling this function, then the frame will be allowed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11420746,"byte_end":11420811,"line_start":469,"line_end":469,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426119,"byte_end":11426122,"line_start":652,"line_end":652,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"pub fn new() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new length delimited codec builder with default configuration\n values.","sig":null,"attributes":[{"value":"/ Creates a new length delimited codec builder with default configuration","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425577,"byte_end":11425652,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ values.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425657,"byte_end":11425668,"line_start":634,"line_end":634,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425673,"byte_end":11425676,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425681,"byte_end":11425695,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425700,"byte_end":11425703,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425708,"byte_end":11425715,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425720,"byte_end":11425751,"line_start":639,"line_end":639,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425756,"byte_end":11425804,"line_start":640,"line_end":640,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425809,"byte_end":11425812,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425817,"byte_end":11425858,"line_start":642,"line_end":642,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425863,"byte_end":11425898,"line_start":643,"line_end":643,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425903,"byte_end":11425934,"line_start":644,"line_end":644,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425939,"byte_end":11425970,"line_start":645,"line_end":645,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425975,"byte_end":11426004,"line_start":646,"line_end":646,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426009,"byte_end":11426029,"line_start":647,"line_end":647,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426034,"byte_end":11426056,"line_start":648,"line_end":648,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426061,"byte_end":11426068,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426073,"byte_end":11426095,"line_start":650,"line_end":650,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426100,"byte_end":11426107,"line_start":651,"line_end":651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427307,"byte_end":11427317,"line_start":693,"line_end":693,"column_start":12,"column_end":22},"name":"big_endian","qualname":"<Builder>::big_endian","value":"pub fn big_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a big endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a big endian integer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426786,"byte_end":11426835,"line_start":674,"line_end":674,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426840,"byte_end":11426843,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ This is the default setting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426848,"byte_end":11426880,"line_start":676,"line_end":676,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426885,"byte_end":11426888,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426893,"byte_end":11426961,"line_start":678,"line_end":678,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426966,"byte_end":11426969,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426974,"byte_end":11426988,"line_start":680,"line_end":680,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11426993,"byte_end":11426996,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427001,"byte_end":11427008,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427013,"byte_end":11427044,"line_start":683,"line_end":683,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427049,"byte_end":11427097,"line_start":684,"line_end":684,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427102,"byte_end":11427105,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427110,"byte_end":11427151,"line_start":686,"line_end":686,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427156,"byte_end":11427191,"line_start":687,"line_end":687,"column_start":5,"column_end":40}},{"value":"/     .big_endian()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427196,"byte_end":11427217,"line_start":688,"line_end":688,"column_start":5,"column_end":26}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427222,"byte_end":11427244,"line_start":689,"line_end":689,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427249,"byte_end":11427256,"line_start":690,"line_end":690,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427261,"byte_end":11427283,"line_start":691,"line_end":691,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427288,"byte_end":11427295,"line_start":692,"line_end":692,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427949,"byte_end":11427962,"line_start":717,"line_end":717,"column_start":12,"column_end":25},"name":"little_endian","qualname":"<Builder>::little_endian","value":"pub fn little_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a little endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a little endian integer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427416,"byte_end":11427468,"line_start":698,"line_end":698,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427473,"byte_end":11427476,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ The default setting is big endian.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427481,"byte_end":11427519,"line_start":700,"line_end":700,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427524,"byte_end":11427527,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427532,"byte_end":11427600,"line_start":702,"line_end":702,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427605,"byte_end":11427608,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427613,"byte_end":11427627,"line_start":704,"line_end":704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427632,"byte_end":11427635,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427640,"byte_end":11427647,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427652,"byte_end":11427683,"line_start":707,"line_end":707,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427688,"byte_end":11427736,"line_start":708,"line_end":708,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427741,"byte_end":11427744,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427749,"byte_end":11427790,"line_start":710,"line_end":710,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427795,"byte_end":11427830,"line_start":711,"line_end":711,"column_start":5,"column_end":40}},{"value":"/     .little_endian()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427835,"byte_end":11427859,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427864,"byte_end":11427886,"line_start":713,"line_end":713,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427891,"byte_end":11427898,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427903,"byte_end":11427925,"line_start":715,"line_end":715,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11427930,"byte_end":11427937,"line_start":716,"line_end":716,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428595,"byte_end":11428608,"line_start":741,"line_end":741,"column_start":12,"column_end":25},"name":"native_endian","qualname":"<Builder>::native_endian","value":"pub fn native_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a native endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a native endian integer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428062,"byte_end":11428114,"line_start":722,"line_end":722,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428119,"byte_end":11428122,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ The default setting is big endian.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428127,"byte_end":11428165,"line_start":724,"line_end":724,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428170,"byte_end":11428173,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428178,"byte_end":11428246,"line_start":726,"line_end":726,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428251,"byte_end":11428254,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428259,"byte_end":11428273,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428278,"byte_end":11428281,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428286,"byte_end":11428293,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428298,"byte_end":11428329,"line_start":731,"line_end":731,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428334,"byte_end":11428382,"line_start":732,"line_end":732,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428387,"byte_end":11428390,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428395,"byte_end":11428436,"line_start":734,"line_end":734,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428441,"byte_end":11428476,"line_start":735,"line_end":735,"column_start":5,"column_end":40}},{"value":"/     .native_endian()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428481,"byte_end":11428505,"line_start":736,"line_end":736,"column_start":5,"column_end":29}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428510,"byte_end":11428532,"line_start":737,"line_end":737,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428537,"byte_end":11428544,"line_start":738,"line_end":738,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428549,"byte_end":11428571,"line_start":739,"line_end":739,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428576,"byte_end":11428583,"line_start":740,"line_end":740,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429689,"byte_end":11429705,"line_start":775,"line_end":775,"column_start":12,"column_end":28},"name":"max_frame_length","qualname":"<Builder>::max_frame_length","value":"pub fn max_frame_length(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the max frame length","sig":null,"attributes":[{"value":"/ Sets the max frame length","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428777,"byte_end":11428806,"line_start":749,"line_end":749,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428811,"byte_end":11428814,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding. The","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428819,"byte_end":11428891,"line_start":751,"line_end":751,"column_start":5,"column_end":77}},{"value":"/ default value is 8MB.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428896,"byte_end":11428921,"line_start":752,"line_end":752,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428926,"byte_end":11428929,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ When decoding, the length field read from the byte stream is checked","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11428934,"byte_end":11429006,"line_start":754,"line_end":754,"column_start":5,"column_end":77}},{"value":"/ against this setting **before** any adjustments are applied. When","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429011,"byte_end":11429080,"line_start":755,"line_end":755,"column_start":5,"column_end":74}},{"value":"/ encoding, the length of the submitted payload is checked against this","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429085,"byte_end":11429158,"line_start":756,"line_end":756,"column_start":5,"column_end":78}},{"value":"/ setting.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429163,"byte_end":11429175,"line_start":757,"line_end":757,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429180,"byte_end":11429183,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ When frames exceed the max length, an `io::Error` with the custom value","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429188,"byte_end":11429263,"line_start":759,"line_end":759,"column_start":5,"column_end":80}},{"value":"/ of the `LengthDelimitedCodecError` type will be returned.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429268,"byte_end":11429329,"line_start":760,"line_end":760,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429334,"byte_end":11429337,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429342,"byte_end":11429356,"line_start":762,"line_end":762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429361,"byte_end":11429364,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429369,"byte_end":11429376,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429381,"byte_end":11429412,"line_start":765,"line_end":765,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429417,"byte_end":11429465,"line_start":766,"line_end":766,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429470,"byte_end":11429473,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429478,"byte_end":11429519,"line_start":768,"line_end":768,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429524,"byte_end":11429559,"line_start":769,"line_end":769,"column_start":5,"column_end":40}},{"value":"/     .max_frame_length(8 * 1024)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429564,"byte_end":11429599,"line_start":770,"line_end":770,"column_start":5,"column_end":40}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429604,"byte_end":11429626,"line_start":771,"line_end":771,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429631,"byte_end":11429638,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429643,"byte_end":11429665,"line_start":773,"line_end":773,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429670,"byte_end":11429677,"line_start":774,"line_end":774,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430366,"byte_end":11430385,"line_start":799,"line_end":799,"column_start":12,"column_end":31},"name":"length_field_length","qualname":"<Builder>::length_field_length","value":"pub fn length_field_length(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes used to represent the length field","sig":null,"attributes":[{"value":"/ Sets the number of bytes used to represent the length field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429802,"byte_end":11429865,"line_start":780,"line_end":780,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429870,"byte_end":11429873,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The default value is `4`. The max value is `8`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429878,"byte_end":11429929,"line_start":782,"line_end":782,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429934,"byte_end":11429937,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11429942,"byte_end":11430010,"line_start":784,"line_end":784,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430015,"byte_end":11430018,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430023,"byte_end":11430037,"line_start":786,"line_end":786,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430042,"byte_end":11430045,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430050,"byte_end":11430057,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430062,"byte_end":11430093,"line_start":789,"line_end":789,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430098,"byte_end":11430146,"line_start":790,"line_end":790,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430151,"byte_end":11430154,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430159,"byte_end":11430200,"line_start":792,"line_end":792,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430205,"byte_end":11430240,"line_start":793,"line_end":793,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(4)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430245,"byte_end":11430276,"line_start":794,"line_end":794,"column_start":5,"column_end":36}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430281,"byte_end":11430303,"line_start":795,"line_end":795,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430308,"byte_end":11430315,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430320,"byte_end":11430342,"line_start":797,"line_end":797,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430347,"byte_end":11430354,"line_start":798,"line_end":798,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431044,"byte_end":11431063,"line_start":822,"line_end":822,"column_start":12,"column_end":31},"name":"length_field_offset","qualname":"<Builder>::length_field_offset","value":"pub fn length_field_offset(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes in the header before the length field","sig":null,"attributes":[{"value":"/ Sets the number of bytes in the header before the length field","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430554,"byte_end":11430620,"line_start":805,"line_end":805,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430625,"byte_end":11430628,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ This configuration option only applies to decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430633,"byte_end":11430688,"line_start":807,"line_end":807,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430693,"byte_end":11430696,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430701,"byte_end":11430715,"line_start":809,"line_end":809,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430720,"byte_end":11430723,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430728,"byte_end":11430735,"line_start":811,"line_end":811,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430740,"byte_end":11430771,"line_start":812,"line_end":812,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430776,"byte_end":11430824,"line_start":813,"line_end":813,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430829,"byte_end":11430832,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430837,"byte_end":11430878,"line_start":815,"line_end":815,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430883,"byte_end":11430918,"line_start":816,"line_end":816,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(1)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430923,"byte_end":11430954,"line_start":817,"line_end":817,"column_start":5,"column_end":36}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430959,"byte_end":11430981,"line_start":818,"line_end":818,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430986,"byte_end":11430993,"line_start":819,"line_end":819,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11430998,"byte_end":11431020,"line_start":820,"line_end":820,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431025,"byte_end":11431032,"line_start":821,"line_end":821,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431617,"byte_end":11431634,"line_start":843,"line_end":843,"column_start":12,"column_end":29},"name":"length_adjustment","qualname":"<Builder>::length_adjustment","value":"pub fn length_adjustment(&mut Self, isize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Delta between the payload length specified in the header and the real\n payload length","sig":null,"attributes":[{"value":"/ Delta between the payload length specified in the header and the real","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431166,"byte_end":11431239,"line_start":827,"line_end":827,"column_start":5,"column_end":78}},{"value":"/ payload length","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431244,"byte_end":11431262,"line_start":828,"line_end":828,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431267,"byte_end":11431270,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431275,"byte_end":11431289,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431294,"byte_end":11431297,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431302,"byte_end":11431309,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431314,"byte_end":11431345,"line_start":833,"line_end":833,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431350,"byte_end":11431398,"line_start":834,"line_end":834,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431403,"byte_end":11431406,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431411,"byte_end":11431452,"line_start":836,"line_end":836,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431457,"byte_end":11431492,"line_start":837,"line_end":837,"column_start":5,"column_end":40}},{"value":"/     .length_adjustment(-2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431497,"byte_end":11431527,"line_start":838,"line_end":838,"column_start":5,"column_end":35}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431532,"byte_end":11431554,"line_start":839,"line_end":839,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431559,"byte_end":11431566,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431571,"byte_end":11431593,"line_start":841,"line_end":841,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431598,"byte_end":11431605,"line_start":842,"line_end":842,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432284,"byte_end":11432292,"line_start":867,"line_end":867,"column_start":12,"column_end":20},"name":"num_skip","qualname":"<Builder>::num_skip","value":"pub fn num_skip(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes to skip before reading the payload","sig":null,"attributes":[{"value":"/ Sets the number of bytes to skip before reading the payload","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431735,"byte_end":11431798,"line_start":848,"line_end":848,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431803,"byte_end":11431806,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ Default value is `length_field_len + length_field_offset`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431811,"byte_end":11431872,"line_start":850,"line_end":850,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431877,"byte_end":11431880,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ This configuration option only applies to decoding","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431885,"byte_end":11431939,"line_start":852,"line_end":852,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431944,"byte_end":11431947,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431952,"byte_end":11431966,"line_start":854,"line_end":854,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431971,"byte_end":11431974,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431979,"byte_end":11431986,"line_start":856,"line_end":856,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11431991,"byte_end":11432022,"line_start":857,"line_end":857,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432027,"byte_end":11432075,"line_start":858,"line_end":858,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432080,"byte_end":11432083,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432088,"byte_end":11432129,"line_start":860,"line_end":860,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432134,"byte_end":11432169,"line_start":861,"line_end":861,"column_start":5,"column_end":40}},{"value":"/     .num_skip(4)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432174,"byte_end":11432194,"line_start":862,"line_end":862,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432199,"byte_end":11432221,"line_start":863,"line_end":863,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432226,"byte_end":11432233,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432238,"byte_end":11432260,"line_start":865,"line_end":865,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432265,"byte_end":11432272,"line_start":866,"line_end":866,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432812,"byte_end":11432821,"line_start":887,"line_end":887,"column_start":12,"column_end":21},"name":"new_codec","qualname":"<Builder>::new_codec","value":"pub fn new_codec(&Self) -> LengthDelimitedCodec","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `LengthDelimitedCodec`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `LengthDelimitedCodec`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432390,"byte_end":11432453,"line_start":872,"line_end":872,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432458,"byte_end":11432461,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432466,"byte_end":11432480,"line_start":874,"line_end":874,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432485,"byte_end":11432488,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432493,"byte_end":11432500,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432505,"byte_end":11432553,"line_start":877,"line_end":877,"column_start":5,"column_end":53}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432558,"byte_end":11432579,"line_start":878,"line_end":878,"column_start":5,"column_end":26}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432584,"byte_end":11432619,"line_start":879,"line_end":879,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432624,"byte_end":11432655,"line_start":880,"line_end":880,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432660,"byte_end":11432691,"line_start":881,"line_end":881,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432696,"byte_end":11432725,"line_start":882,"line_end":882,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432730,"byte_end":11432750,"line_start":883,"line_end":883,"column_start":5,"column_end":25}},{"value":"/     .new_codec();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432755,"byte_end":11432776,"line_start":884,"line_end":884,"column_start":5,"column_end":26}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432781,"byte_end":11432788,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432793,"byte_end":11432800,"line_start":886,"line_end":886,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433477,"byte_end":11433485,"line_start":912,"line_end":912,"column_start":12,"column_end":20},"name":"new_read","qualname":"<Builder>::new_read","value":"pub fn new_read<T>(&Self, T) -> FramedRead<T, LengthDelimitedCodec> where\nT: AsyncRead","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `FramedRead`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `FramedRead`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11432973,"byte_end":11433026,"line_start":894,"line_end":894,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433031,"byte_end":11433034,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433039,"byte_end":11433053,"line_start":896,"line_end":896,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433058,"byte_end":11433061,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433066,"byte_end":11433073,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433078,"byte_end":11433109,"line_start":899,"line_end":899,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433114,"byte_end":11433162,"line_start":900,"line_end":900,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433167,"byte_end":11433170,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433175,"byte_end":11433216,"line_start":902,"line_end":902,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433221,"byte_end":11433256,"line_start":903,"line_end":903,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433261,"byte_end":11433292,"line_start":904,"line_end":904,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433297,"byte_end":11433328,"line_start":905,"line_end":905,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433333,"byte_end":11433362,"line_start":906,"line_end":906,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433367,"byte_end":11433387,"line_start":907,"line_end":907,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433392,"byte_end":11433414,"line_start":908,"line_end":908,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433419,"byte_end":11433426,"line_start":909,"line_end":909,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433431,"byte_end":11433453,"line_start":910,"line_end":910,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433458,"byte_end":11433465,"line_start":911,"line_end":911,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434058,"byte_end":11434067,"line_start":933,"line_end":933,"column_start":12,"column_end":21},"name":"new_write","qualname":"<Builder>::new_write","value":"pub fn new_write<T>(&Self, T) -> FramedWrite<T, LengthDelimitedCodec> where\nT: AsyncWrite","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `FramedWrite`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `FramedWrite`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433649,"byte_end":11433703,"line_start":919,"line_end":919,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433708,"byte_end":11433711,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433716,"byte_end":11433730,"line_start":921,"line_end":921,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433735,"byte_end":11433738,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433743,"byte_end":11433750,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncWrite;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433755,"byte_end":11433787,"line_start":924,"line_end":924,"column_start":5,"column_end":37}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433792,"byte_end":11433842,"line_start":925,"line_end":925,"column_start":5,"column_end":55}},{"value":"/ # fn write_frame<T: AsyncWrite>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433847,"byte_end":11433891,"line_start":926,"line_end":926,"column_start":5,"column_end":49}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433896,"byte_end":11433931,"line_start":927,"line_end":927,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433936,"byte_end":11433967,"line_start":928,"line_end":928,"column_start":5,"column_end":36}},{"value":"/     .new_write(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11433972,"byte_end":11433995,"line_start":929,"line_end":929,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434000,"byte_end":11434007,"line_start":930,"line_end":930,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434012,"byte_end":11434034,"line_start":931,"line_end":931,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434039,"byte_end":11434046,"line_start":932,"line_end":932,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434676,"byte_end":11434686,"line_start":955,"line_end":955,"column_start":12,"column_end":22},"name":"new_framed","qualname":"<Builder>::new_framed","value":"pub fn new_framed<T>(&Self, T) -> Framed<T, LengthDelimitedCodec> where\nT: AsyncRead + AsyncWrite","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `Framed`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `Framed`","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434228,"byte_end":11434277,"line_start":940,"line_end":940,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434282,"byte_end":11434285,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434290,"byte_end":11434304,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434309,"byte_end":11434312,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434317,"byte_end":11434324,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::{AsyncRead, AsyncWrite};","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434329,"byte_end":11434374,"line_start":945,"line_end":945,"column_start":5,"column_end":50}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434379,"byte_end":11434429,"line_start":946,"line_end":946,"column_start":5,"column_end":55}},{"value":"/ # fn write_frame<T: AsyncRead + AsyncWrite>(io: T) {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434434,"byte_end":11434490,"line_start":947,"line_end":947,"column_start":5,"column_end":61}},{"value":"/ # let _ =","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434495,"byte_end":11434508,"line_start":948,"line_end":948,"column_start":5,"column_end":18}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434513,"byte_end":11434548,"line_start":949,"line_end":949,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434553,"byte_end":11434584,"line_start":950,"line_end":950,"column_start":5,"column_end":36}},{"value":"/     .new_framed(io);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434589,"byte_end":11434613,"line_start":951,"line_end":951,"column_start":5,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434618,"byte_end":11434625,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434630,"byte_end":11434652,"line_start":953,"line_end":953,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11434657,"byte_end":11434664,"line_start":954,"line_end":954,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436065,"byte_end":11436075,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"LinesCodec","qualname":"::codec::lines_codec::LinesCodec","value":"LinesCodec {  }","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"decl_id":null,"docs":" A simple [`Decoder`] and [`Encoder`] implementation that splits up data into lines.","sig":null,"attributes":[{"value":"/ A simple [`Decoder`] and [`Encoder`] implementation that splits up data into lines.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11435822,"byte_end":11435909,"line_start":7,"line_end":7,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11435910,"byte_end":11435913,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Decoder`]: crate::codec::Decoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11435914,"byte_end":11435952,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/ [`Encoder`]: crate::codec::Encoder","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11435953,"byte_end":11435991,"line_start":10,"line_end":10,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437175,"byte_end":11437178,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<LinesCodec>::new","value":"pub fn new() -> LinesCodec","parent":null,"children":[],"decl_id":null,"docs":" Returns a `LinesCodec` for splitting up data into lines.","sig":null,"attributes":[{"value":"/ Returns a `LinesCodec` for splitting up data into lines.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436756,"byte_end":11436816,"line_start":31,"line_end":31,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436821,"byte_end":11436824,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436829,"byte_end":11436839,"line_start":33,"line_end":33,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436844,"byte_end":11436847,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The returned `LinesCodec` will not have an upper bound on the length","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436852,"byte_end":11436924,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ of a buffered line. See the documentation for [`new_with_max_length`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436929,"byte_end":11437002,"line_start":36,"line_end":36,"column_start":5,"column_end":78}},{"value":"/ for information on why this could be a potential security risk.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437007,"byte_end":11437074,"line_start":37,"line_end":37,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437079,"byte_end":11437082,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ [`new_with_max_length`]: crate::codec::LinesCodec::new_with_max_length()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437087,"byte_end":11437163,"line_start":39,"line_end":39,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438309,"byte_end":11438328,"line_start":66,"line_end":66,"column_start":12,"column_end":31},"name":"new_with_max_length","qualname":"<LinesCodec>::new_with_max_length","value":"pub fn new_with_max_length(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `LinesCodec` with a maximum line length limit.","sig":null,"attributes":[{"value":"/ Returns a `LinesCodec` with a maximum line length limit.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437336,"byte_end":11437396,"line_start":48,"line_end":48,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437401,"byte_end":11437404,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If this is set, calls to `LinesCodec::decode` will return a","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437409,"byte_end":11437472,"line_start":50,"line_end":50,"column_start":5,"column_end":68}},{"value":"/ [`LinesCodecError`] when a line exceeds the length limit. Subsequent calls","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437477,"byte_end":11437555,"line_start":51,"line_end":51,"column_start":5,"column_end":83}},{"value":"/ will discard up to `limit` bytes from that line until a newline","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437560,"byte_end":11437627,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/ character is reached, returning `None` until the line over the limit","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437632,"byte_end":11437704,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ has been fully discarded. After that point, calls to `decode` will","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437709,"byte_end":11437779,"line_start":54,"line_end":54,"column_start":5,"column_end":75}},{"value":"/ function as normal.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437784,"byte_end":11437807,"line_start":55,"line_end":55,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437812,"byte_end":11437815,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437820,"byte_end":11437830,"line_start":57,"line_end":57,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437835,"byte_end":11437838,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Setting a length limit is highly recommended for any `LinesCodec` which","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437843,"byte_end":11437918,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/ will be exposed to untrusted input. Otherwise, the size of the buffer","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11437923,"byte_end":11437996,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ that holds the line currently being read is unbounded. An attacker could","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438001,"byte_end":11438077,"line_start":61,"line_end":61,"column_start":5,"column_end":81}},{"value":"/ exploit this unbounded buffer by sending an unbounded amount of input","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438082,"byte_end":11438155,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ without any `\\n` characters, causing unbounded memory consumption.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438160,"byte_end":11438230,"line_start":63,"line_end":63,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438235,"byte_end":11438238,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`LinesCodecError`]: crate::codec::LinesCodecError","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438243,"byte_end":11438297,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438894,"byte_end":11438904,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"max_length","qualname":"<LinesCodec>::max_length","value":"pub fn max_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum line length when decoding.","sig":null,"attributes":[{"value":"/ Returns the maximum line length when decoding.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438456,"byte_end":11438506,"line_start":73,"line_end":73,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438511,"byte_end":11438514,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438519,"byte_end":11438526,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use std::usize;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438531,"byte_end":11438550,"line_start":76,"line_end":76,"column_start":5,"column_end":24}},{"value":"/ use tokio_util::codec::LinesCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438555,"byte_end":11438593,"line_start":77,"line_end":77,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438598,"byte_end":11438601,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ let codec = LinesCodec::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438606,"byte_end":11438640,"line_start":79,"line_end":79,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(codec.max_length(), usize::MAX);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438645,"byte_end":11438692,"line_start":80,"line_end":80,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438697,"byte_end":11438704,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438709,"byte_end":11438716,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/ use tokio_util::codec::LinesCodec;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438721,"byte_end":11438759,"line_start":83,"line_end":83,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438764,"byte_end":11438767,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ let codec = LinesCodec::new_with_max_length(256);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438772,"byte_end":11438825,"line_start":85,"line_end":85,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(codec.max_length(), 256);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438830,"byte_end":11438870,"line_start":86,"line_end":86,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11438875,"byte_end":11438882,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443264,"byte_end":11443285,"line_start":210,"line_end":210,"column_start":5,"column_end":26},"name":"MaxLineLengthExceeded","qualname":"::codec::lines_codec::LinesCodecError::MaxLineLengthExceeded","value":"LinesCodecError::MaxLineLengthExceeded","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" The maximum line length was exceeded.\n","sig":null,"attributes":[{"value":"/ The maximum line length was exceeded.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443218,"byte_end":11443259,"line_start":209,"line_end":209,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":745},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443320,"byte_end":11443322,"line_start":212,"line_end":212,"column_start":5,"column_end":7},"name":"Io","qualname":"::codec::lines_codec::LinesCodecError::Io","value":"LinesCodecError::Io(io::Error)","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" An IO error occured.\n","sig":null,"attributes":[{"value":"/ An IO error occured.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443291,"byte_end":11443315,"line_start":211,"line_end":211,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":742},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443196,"byte_end":11443211,"line_start":208,"line_end":208,"column_start":10,"column_end":25},"name":"LinesCodecError","qualname":"::codec::lines_codec::LinesCodecError","value":"pub enum LinesCodecError {\n\n    /// The maximum line length was exceeded.\n    MaxLineLengthExceeded,\n\n    /// An IO error occured.\n    Io(io::Error),\n}","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":745}],"decl_id":null,"docs":" An error occured while encoding or decoding a line.\n","sig":null,"attributes":[{"value":"/ An error occured while encoding or decoding a line.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443114,"byte_end":11443169,"line_start":206,"line_end":206,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":11},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":149},{"krate":0,"index":176}],"decl_id":null,"docs":" Synchronization primitives\n","sig":null,"attributes":[{"value":"/ Synchronization primitives","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/mod.rs","byte_start":6487,"byte_end":6517,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8354,"byte_end":8371,"line_start":54,"line_end":54,"column_start":12,"column_end":29},"name":"CancellationToken","qualname":"::sync::cancellation_token::CancellationToken","value":"CancellationToken {  }","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" A token which can be used to signal a cancellation request to one or more\n tasks.","sig":null,"attributes":[{"value":"/ A token which can be used to signal a cancellation request to one or more","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7136,"byte_end":7213,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ tasks.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7214,"byte_end":7224,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7225,"byte_end":7228,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Tasks can call [`CancellationToken::cancelled()`] in order to","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7229,"byte_end":7294,"line_start":17,"line_end":17,"column_start":1,"column_end":66}},{"value":"/ obtain a Future which will be resolved when cancellation is requested.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7295,"byte_end":7369,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7370,"byte_end":7373,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Cancellation can be requested through the [`CancellationToken::cancel`] method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7374,"byte_end":7457,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7458,"byte_end":7461,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7462,"byte_end":7476,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7477,"byte_end":7480,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7481,"byte_end":7494,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ use tokio::select;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7495,"byte_end":7517,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ use tokio::scope::CancellationToken;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7518,"byte_end":7558,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7559,"byte_end":7562,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7563,"byte_end":7581,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7582,"byte_end":7603,"line_start":29,"line_end":29,"column_start":1,"column_end":22}},{"value":"/     let token = CancellationToken::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7604,"byte_end":7649,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/     let cloned_token = token.clone();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7650,"byte_end":7691,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7692,"byte_end":7695,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     let join_handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7696,"byte_end":7747,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/         // Wait for either cancellation or a very long time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7748,"byte_end":7811,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/         select! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7812,"byte_end":7833,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/             _ = cloned_token.cancelled() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7834,"byte_end":7883,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/                 // The token was cancelled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7884,"byte_end":7930,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/                 5","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7931,"byte_end":7952,"line_start":38,"line_end":38,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7953,"byte_end":7970,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/             _ = tokio::time::sleep(std::time::Duration::from_secs(9999)) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":7971,"byte_end":8052,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/                 99","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8053,"byte_end":8075,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8076,"byte_end":8093,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8094,"byte_end":8107,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8108,"byte_end":8119,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8120,"byte_end":8123,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8124,"byte_end":8157,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/         tokio::time::sleep(std::time::Duration::from_millis(10)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8158,"byte_end":8233,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/         token.cancel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8234,"byte_end":8261,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8262,"byte_end":8273,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8274,"byte_end":8277,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(5, join_handle.await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8278,"byte_end":8328,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8329,"byte_end":8334,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8335,"byte_end":8342,"line_start":53,"line_end":53,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8791,"byte_end":8816,"line_start":66,"line_end":66,"column_start":12,"column_end":37},"name":"WaitForCancellationFuture","qualname":"::sync::cancellation_token::WaitForCancellationFuture","value":"WaitForCancellationFuture {  }","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"decl_id":null,"docs":" A Future that is resolved once the corresponding [`CancellationToken`]\n was cancelled\n","sig":null,"attributes":[{"value":"/ A Future that is resolved once the corresponding [`CancellationToken`]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8638,"byte_end":8712,"line_start":63,"line_end":63,"column_start":1,"column_end":75}},{"value":"/ was cancelled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8713,"byte_end":8730,"line_start":64,"line_end":64,"column_start":1,"column_end":18}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8731,"byte_end":8779,"line_start":65,"line_end":65,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11324,"byte_end":11327,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<CancellationToken>::new","value":"pub fn new() -> CancellationToken","parent":null,"children":[],"decl_id":null,"docs":" Creates a new CancellationToken in the non-cancelled state.\n","sig":null,"attributes":[{"value":"/ Creates a new CancellationToken in the non-cancelled state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11249,"byte_end":11312,"line_start":139,"line_end":139,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13380,"byte_end":13391,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"child_token","qualname":"<CancellationToken>::child_token","value":"pub fn child_token(&Self) -> CancellationToken","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CancellationToken` which will get cancelled whenever the\n current token gets cancelled.","sig":null,"attributes":[{"value":"/ Creates a `CancellationToken` which will get cancelled whenever the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12117,"byte_end":12188,"line_start":164,"line_end":164,"column_start":5,"column_end":76}},{"value":"/ current token gets cancelled.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12193,"byte_end":12226,"line_start":165,"line_end":165,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12231,"byte_end":12234,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ If the current token is already cancelled, the child token will get","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12239,"byte_end":12310,"line_start":167,"line_end":167,"column_start":5,"column_end":76}},{"value":"/ returned in cancelled state.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12315,"byte_end":12347,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12352,"byte_end":12355,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12360,"byte_end":12374,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12379,"byte_end":12382,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12387,"byte_end":12400,"line_start":172,"line_end":172,"column_start":5,"column_end":18}},{"value":"/ use tokio::select;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12405,"byte_end":12427,"line_start":173,"line_end":173,"column_start":5,"column_end":27}},{"value":"/ use tokio::scope::CancellationToken;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12432,"byte_end":12472,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12477,"byte_end":12480,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12485,"byte_end":12503,"line_start":176,"line_end":176,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12508,"byte_end":12529,"line_start":177,"line_end":177,"column_start":5,"column_end":26}},{"value":"/     let token = CancellationToken::new();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12534,"byte_end":12579,"line_start":178,"line_end":178,"column_start":5,"column_end":50}},{"value":"/     let child_token = token.child_token();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12584,"byte_end":12630,"line_start":179,"line_end":179,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12635,"byte_end":12638,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/     let join_handle = tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12643,"byte_end":12694,"line_start":181,"line_end":181,"column_start":5,"column_end":56}},{"value":"/         // Wait for either cancellation or a very long time","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12699,"byte_end":12762,"line_start":182,"line_end":182,"column_start":5,"column_end":68}},{"value":"/         select! {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12767,"byte_end":12788,"line_start":183,"line_end":183,"column_start":5,"column_end":26}},{"value":"/             _ = child_token.cancelled() => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12793,"byte_end":12841,"line_start":184,"line_end":184,"column_start":5,"column_end":53}},{"value":"/                 // The token was cancelled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12846,"byte_end":12892,"line_start":185,"line_end":185,"column_start":5,"column_end":51}},{"value":"/                 5","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12897,"byte_end":12918,"line_start":186,"line_end":186,"column_start":5,"column_end":26}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12923,"byte_end":12940,"line_start":187,"line_end":187,"column_start":5,"column_end":22}},{"value":"/             _ = tokio::time::sleep(std::time::Duration::from_secs(9999)) => {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":12945,"byte_end":13026,"line_start":188,"line_end":188,"column_start":5,"column_end":86}},{"value":"/                 99","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13031,"byte_end":13053,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/             }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13058,"byte_end":13075,"line_start":190,"line_end":190,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13080,"byte_end":13093,"line_start":191,"line_end":191,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13098,"byte_end":13109,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13114,"byte_end":13117,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/     tokio::spawn(async move {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13122,"byte_end":13155,"line_start":194,"line_end":194,"column_start":5,"column_end":38}},{"value":"/         tokio::time::sleep(std::time::Duration::from_millis(10)).await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13160,"byte_end":13235,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/         token.cancel();","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13240,"byte_end":13267,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/     });","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13272,"byte_end":13283,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13288,"byte_end":13291,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(5, join_handle.await.unwrap());","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13296,"byte_end":13346,"line_start":199,"line_end":199,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13351,"byte_end":13356,"line_start":200,"line_end":200,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":13361,"byte_end":13368,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":15966,"byte_end":15972,"line_start":260,"line_end":260,"column_start":12,"column_end":18},"name":"cancel","qualname":"<CancellationToken>::cancel","value":"pub fn cancel(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Cancel the [`CancellationToken`] and all child tokens which had been\n derived from it.","sig":null,"attributes":[{"value":"/ Cancel the [`CancellationToken`] and all child tokens which had been","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":15777,"byte_end":15849,"line_start":256,"line_end":256,"column_start":5,"column_end":77}},{"value":"/ derived from it.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":15854,"byte_end":15874,"line_start":257,"line_end":257,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":15879,"byte_end":15882,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This will wake up all tasks which are waiting for cancellation.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":15887,"byte_end":15954,"line_start":259,"line_end":259,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":16100,"byte_end":16112,"line_start":265,"line_end":265,"column_start":12,"column_end":24},"name":"is_cancelled","qualname":"<CancellationToken>::is_cancelled","value":"pub fn is_cancelled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `CancellationToken` had been cancelled\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `CancellationToken` had been cancelled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":16024,"byte_end":16088,"line_start":264,"line_end":264,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":16263,"byte_end":16272,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"cancelled","qualname":"<CancellationToken>::cancelled","value":"pub fn cancelled(&Self) -> WaitForCancellationFuture","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Future` that gets fulfilled when cancellation is requested.\n","sig":null,"attributes":[{"value":"/ Returns a `Future` that gets fulfilled when cancellation is requested.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":16177,"byte_end":16251,"line_start":269,"line_end":269,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69567,"byte_end":69580,"line_start":11,"line_end":11,"column_start":12,"column_end":25},"name":"PollSemaphore","qualname":"::sync::poll_semaphore::PollSemaphore","value":"PollSemaphore {  }","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" A wrapper around [`Semaphore`] that provides a `poll_acquire` method.","sig":null,"attributes":[{"value":"/ A wrapper around [`Semaphore`] that provides a `poll_acquire` method.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69436,"byte_end":69509,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69510,"byte_end":69513,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`Semaphore`]: tokio::sync::Semaphore","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69514,"byte_end":69555,"line_start":10,"line_end":10,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69763,"byte_end":69766,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<PollSemaphore>::new","value":"pub fn new(Arc<Semaphore>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `PollSemaphore`.\n","sig":null,"attributes":[{"value":"/ Create a new `PollSemaphore`.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69718,"byte_end":69751,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70217,"byte_end":70222,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"close","qualname":"<PollSemaphore>::close","value":"pub fn close(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the semaphore.\n","sig":null,"attributes":[{"value":"/ Closes the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70180,"byte_end":70205,"line_start":32,"line_end":32,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70328,"byte_end":70339,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"clone_inner","qualname":"<PollSemaphore>::clone_inner","value":"pub fn clone_inner(&Self) -> Arc<Semaphore>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a clone of the inner semaphore.\n","sig":null,"attributes":[{"value":"/ Obtain a clone of the inner semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70274,"byte_end":70316,"line_start":37,"line_end":37,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70454,"byte_end":70464,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PollSemaphore>::into_inner","value":"pub fn into_inner(Self) -> Arc<Semaphore>","parent":null,"children":[],"decl_id":null,"docs":" Get back the inner semaphore.\n","sig":null,"attributes":[{"value":"/ Get back the inner semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70409,"byte_end":70442,"line_start":42,"line_end":42,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71198,"byte_end":71210,"line_start":60,"line_end":60,"column_start":12,"column_end":24},"name":"poll_acquire","qualname":"<PollSemaphore>::poll_acquire","value":"pub fn poll_acquire(&mut Self, &mut Context)\n-> Poll<Option<OwnedSemaphorePermit>>","parent":null,"children":[],"decl_id":null,"docs":" Poll to acquire a permit from the semaphore.","sig":null,"attributes":[{"value":"/ Poll to acquire a permit from the semaphore.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70525,"byte_end":70573,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70578,"byte_end":70581,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ This can return the following values:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70586,"byte_end":70627,"line_start":49,"line_end":49,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70632,"byte_end":70635,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/  - `Poll::Pending` if a permit is not currently available.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70640,"byte_end":70702,"line_start":51,"line_end":51,"column_start":5,"column_end":67}},{"value":"/  - `Poll::Ready(Some(permit))` if a permit was acquired.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70707,"byte_end":70767,"line_start":52,"line_end":52,"column_start":5,"column_end":65}},{"value":"/  - `Poll::Ready(None)` if the semaphore has been closed.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70772,"byte_end":70832,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70837,"byte_end":70840,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ When this method returns `Poll::Pending`, the current task is scheduled","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70845,"byte_end":70920,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ to receive a wakeup when a permit becomes available, or when the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70925,"byte_end":70993,"line_start":56,"line_end":56,"column_start":5,"column_end":73}},{"value":"/ semaphore is closed. Note that on multiple calls to `poll_acquire`, only","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":70998,"byte_end":71074,"line_start":57,"line_end":57,"column_start":5,"column_end":81}},{"value":"/ the `Waker` from the `Context` passed to the most recent call is","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71079,"byte_end":71147,"line_start":58,"line_end":58,"column_start":5,"column_end":73}},{"value":"/ scheduled to receive a wakeup.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71152,"byte_end":71186,"line_start":59,"line_end":59,"column_start":5,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":177},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"either","qualname":"::either","value":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":822},{"krate":0,"index":835},{"krate":0,"index":831},{"krate":0,"index":193},{"krate":0,"index":199},{"krate":0,"index":203},{"krate":0,"index":208},{"krate":0,"index":213},{"krate":0,"index":219}],"decl_id":null,"docs":" Module defining an Either type.\n","sig":null,"attributes":[{"value":"/ Module defining an Either type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":71908,"byte_end":71943,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":825},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73890,"byte_end":73894,"line_start":65,"line_end":65,"column_start":5,"column_end":9},"name":"Left","qualname":"::either::Either::Left","value":"Either::Left(L)","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":828},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73903,"byte_end":73908,"line_start":66,"line_end":66,"column_start":5,"column_end":10},"name":"Right","qualname":"::either::Either::Right","value":"Either::Right(R)","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":822},"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73871,"byte_end":73877,"line_start":64,"line_end":64,"column_start":10,"column_end":16},"name":"Either","qualname":"::either::Either","value":"pub enum Either<L, R> { Left(L), Right(R), }","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":828}],"decl_id":null,"docs":" Combines two different futures, streams, or sinks having the same associated types into a single type.","sig":null,"attributes":[{"value":"/ Combines two different futures, streams, or sinks having the same associated types into a single type.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72120,"byte_end":72226,"line_start":10,"line_end":10,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72227,"byte_end":72230,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type implements common asynchronous traits such as [`Future`] and those in Tokio.","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72231,"byte_end":72321,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72322,"byte_end":72325,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Future`]: std::future::Future","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72326,"byte_end":72361,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72362,"byte_end":72365,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72366,"byte_end":72379,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72380,"byte_end":72383,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The following code will not work:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72384,"byte_end":72421,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72422,"byte_end":72425,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```compile_fail","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72426,"byte_end":72445,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ # fn some_condition() -> bool { true }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72446,"byte_end":72488,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/ # async fn some_async_function() -> u32 { 10 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72489,"byte_end":72539,"line_start":22,"line_end":22,"column_start":1,"column_end":51}},{"value":"/ # async fn other_async_function() -> u32 { 20 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72540,"byte_end":72591,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72592,"byte_end":72610,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72611,"byte_end":72632,"line_start":25,"line_end":25,"column_start":1,"column_end":22}},{"value":"/     let result = if some_condition() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72633,"byte_end":72675,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/         some_async_function()","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72676,"byte_end":72709,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72710,"byte_end":72726,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/         other_async_function() // <- Will print: \"`if` and `else` have incompatible types\"","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72727,"byte_end":72821,"line_start":29,"line_end":29,"column_start":1,"column_end":95}},{"value":"/     };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72822,"byte_end":72832,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72833,"byte_end":72836,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     println!(\"Result is {}\", result.await);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72837,"byte_end":72884,"line_start":32,"line_end":32,"column_start":1,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72885,"byte_end":72890,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72891,"byte_end":72898,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":72899,"byte_end":72902,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73103,"byte_end":73106,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ When the output type is the same, we can wrap each future in `Either` to avoid the","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73107,"byte_end":73193,"line_start":40,"line_end":40,"column_start":1,"column_end":87}},{"value":"/ issue:","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73194,"byte_end":73204,"line_start":41,"line_end":41,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73205,"byte_end":73208,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73209,"byte_end":73216,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ use tokio_util::either::Either;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73217,"byte_end":73252,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/ # fn some_condition() -> bool { true }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73253,"byte_end":73295,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/ # async fn some_async_function() -> u32 { 10 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73296,"byte_end":73346,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ # async fn other_async_function() -> u32 { 20 }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73347,"byte_end":73398,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73399,"byte_end":73402,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73403,"byte_end":73421,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73422,"byte_end":73443,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     let result = if some_condition() {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73444,"byte_end":73486,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/         Either::Left(some_async_function())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73487,"byte_end":73534,"line_start":52,"line_end":52,"column_start":1,"column_end":48}},{"value":"/     } else {","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73535,"byte_end":73551,"line_start":53,"line_end":53,"column_start":1,"column_end":17}},{"value":"/         Either::Right(other_async_function())","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73552,"byte_end":73601,"line_start":54,"line_end":54,"column_start":1,"column_end":50}},{"value":"/     };","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73602,"byte_end":73612,"line_start":55,"line_end":55,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73613,"byte_end":73616,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     let value = result.await;","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73617,"byte_end":73650,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/     println!(\"Result is {}\", value);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73651,"byte_end":73691,"line_start":58,"line_end":58,"column_start":1,"column_end":41}},{"value":"/     # assert_eq!(value, 10);","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73692,"byte_end":73724,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73725,"byte_end":73730,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73731,"byte_end":73738,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":73739,"byte_end":73761,"line_start":62,"line_end":62,"column_start":1,"column_end":23}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368445,"byte_end":11368455,"line_start":47,"line_end":47,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368606,"byte_end":11368616,"line_start":54,"line_end":54,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368943,"byte_end":11368953,"line_start":68,"line_end":68,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378136,"byte_end":11378145,"line_start":46,"line_end":46,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378345,"byte_end":11378355,"line_start":56,"line_end":56,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378506,"byte_end":11378515,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378838,"byte_end":11378848,"line_start":79,"line_end":79,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379094,"byte_end":11379102,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379199,"byte_end":11379207,"line_start":95,"line_end":95,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379318,"byte_end":11379326,"line_start":100,"line_end":100,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379426,"byte_end":11379434,"line_start":105,"line_end":105,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379544,"byte_end":11379554,"line_start":110,"line_end":110,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11381500,"byte_end":11381510,"line_start":164,"line_end":164,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384346,"byte_end":11384352,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387874,"byte_end":11387880,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11393195,"byte_end":11393201,"line_start":248,"line_end":248,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11393517,"byte_end":11393523,"line_start":261,"line_end":261,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394238,"byte_end":11394244,"line_start":286,"line_end":286,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395284,"byte_end":11395295,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396222,"byte_end":11396232,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397121,"byte_end":11397131,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11399228,"byte_end":11399238,"line_start":122,"line_end":122,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11399551,"byte_end":11399561,"line_start":135,"line_end":135,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11400287,"byte_end":11400297,"line_start":158,"line_end":158,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401276,"byte_end":11401287,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401643,"byte_end":11401654,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403763,"byte_end":11403774,"line_start":103,"line_end":103,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11404538,"byte_end":11404549,"line_start":129,"line_end":129,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11404790,"byte_end":11404801,"line_start":140,"line_end":140,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419809,"byte_end":11419829,"line_start":441,"line_end":441,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11423182,"byte_end":11423202,"line_start":549,"line_end":549,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11424089,"byte_end":11424109,"line_start":580,"line_end":580,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425450,"byte_end":11425470,"line_start":624,"line_end":624,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425563,"byte_end":11425570,"line_start":632,"line_end":632,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435169,"byte_end":11435176,"line_start":973,"line_end":973,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435302,"byte_end":11435327,"line_start":981,"line_end":981,"column_start":21,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435485,"byte_end":11435510,"line_start":987,"line_end":987,"column_start":23,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435645,"byte_end":11435670,"line_start":993,"line_end":993,"column_start":19,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436739,"byte_end":11436749,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11439291,"byte_end":11439301,"line_start":106,"line_end":106,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11442712,"byte_end":11442722,"line_start":185,"line_end":185,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443045,"byte_end":11443055,"line_start":200,"line_end":200,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443360,"byte_end":11443375,"line_start":215,"line_end":215,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443657,"byte_end":11443672,"line_start":224,"line_end":224,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443789,"byte_end":11443804,"line_start":230,"line_end":230,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8574,"byte_end":8591,"line_start":60,"line_end":60,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8616,"byte_end":8633,"line_start":61,"line_end":61,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9367,"byte_end":9392,"line_start":78,"line_end":78,"column_start":26,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9466,"byte_end":9483,"line_start":82,"line_end":82,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9708,"byte_end":9725,"line_start":90,"line_end":90,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":10131,"byte_end":10148,"line_start":104,"line_end":104,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11118,"byte_end":11135,"line_start":132,"line_end":132,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11225,"byte_end":11242,"line_start":138,"line_end":138,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":17108,"byte_end":17133,"line_start":301,"line_end":301,"column_start":31,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":17305,"byte_end":17330,"line_start":307,"line_end":307,"column_start":21,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":18765,"byte_end":18790,"line_start":343,"line_end":343,"column_start":19,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":19978,"byte_end":19992,"line_start":377,"line_end":377,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":20326,"byte_end":20343,"line_start":393,"line_end":393,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":20943,"byte_end":20960,"line_start":418,"line_end":418,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":21818,"byte_end":21831,"line_start":446,"line_end":446,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":23016,"byte_end":23038,"line_start":484,"line_end":484,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40557,"byte_end":40565,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40815,"byte_end":40823,"line_start":37,"line_end":37,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40928,"byte_end":40936,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":41245,"byte_end":41255,"line_start":59,"line_end":59,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69698,"byte_end":69711,"line_start":16,"line_end":16,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71351,"byte_end":71364,"line_start":65,"line_end":65,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71578,"byte_end":71591,"line_start":73,"line_end":73,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71709,"byte_end":71722,"line_start":79,"line_end":79,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":74514,"byte_end":74520,"line_start":83,"line_end":83,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":74763,"byte_end":74769,"line_start":95,"line_end":95,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75042,"byte_end":75048,"line_start":109,"line_end":109,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75376,"byte_end":75382,"line_start":123,"line_end":123,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75736,"byte_end":75742,"line_start":137,"line_end":137,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":76294,"byte_end":76300,"line_start":155,"line_end":155,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":758,"byte_end":763,"line_start":30,"line_end":30,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":249}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/mod.rs","byte_start":11366963,"byte_end":11366979,"line_start":283,"line_end":283,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":525}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":907,"byte_end":911,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":11}},{"kind":"Mod","span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/lib.rs","byte_start":922,"byte_end":928,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":177}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368445,"byte_end":11368455,"line_start":47,"line_end":47,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368606,"byte_end":11368616,"line_start":54,"line_end":54,"column_start":18,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":635},"to":{"krate":0,"index":275}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/bytes_codec.rs","byte_start":11368943,"byte_end":11368953,"line_start":68,"line_end":68,"column_start":25,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":635},"to":{"krate":0,"index":286}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378136,"byte_end":11378145,"line_start":46,"line_end":46,"column_start":18,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":313},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378345,"byte_end":11378355,"line_start":56,"line_end":56,"column_start":18,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378506,"byte_end":11378515,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":313},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11378838,"byte_end":11378848,"line_start":79,"line_end":79,"column_start":25,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379094,"byte_end":11379102,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":1747}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379199,"byte_end":11379207,"line_start":95,"line_end":95,"column_start":31,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":1750}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379318,"byte_end":11379326,"line_start":100,"line_end":100,"column_start":29,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":1747}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379426,"byte_end":11379434,"line_start":105,"line_end":105,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":1750}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11379544,"byte_end":11379554,"line_start":110,"line_end":110,"column_start":26,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":971},"to":{"krate":16,"index":68}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_impl.rs","byte_start":11381500,"byte_end":11381510,"line_start":164,"line_end":164,"column_start":30,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":971},"to":{"krate":28,"index":9}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11384346,"byte_end":11384352,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11387874,"byte_end":11387880,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11393195,"byte_end":11393201,"line_start":248,"line_end":248,"column_start":23,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":921},"to":{"krate":16,"index":68}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11393517,"byte_end":11393523,"line_start":261,"line_end":261,"column_start":27,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":921},"to":{"krate":28,"index":9}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11394238,"byte_end":11394244,"line_start":286,"line_end":286,"column_start":27,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":921},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed.rs","byte_start":11395284,"byte_end":11395295,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11396222,"byte_end":11396232,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11397121,"byte_end":11397131,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11399228,"byte_end":11399238,"line_start":122,"line_end":122,"column_start":23,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":880},"to":{"krate":16,"index":68}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11399551,"byte_end":11399561,"line_start":135,"line_end":135,"column_start":27,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":880},"to":{"krate":28,"index":9}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_read.rs","byte_start":11400287,"byte_end":11400297,"line_start":158,"line_end":158,"column_start":27,"column_end":37},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401276,"byte_end":11401287,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11401643,"byte_end":11401654,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11403763,"byte_end":11403774,"line_start":103,"line_end":103,"column_start":27,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":839},"to":{"krate":28,"index":9}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11404538,"byte_end":11404549,"line_start":129,"line_end":129,"column_start":23,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":839},"to":{"krate":16,"index":68}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/framed_write.rs","byte_start":11404790,"byte_end":11404801,"line_start":140,"line_end":140,"column_start":27,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":839},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11419809,"byte_end":11419829,"line_start":441,"line_end":441,"column_start":6,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11423182,"byte_end":11423202,"line_start":549,"line_end":549,"column_start":18,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":692},"to":{"krate":0,"index":275}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11424089,"byte_end":11424109,"line_start":580,"line_end":580,"column_start":25,"column_end":45},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":692},"to":{"krate":0,"index":286}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425450,"byte_end":11425470,"line_start":624,"line_end":624,"column_start":18,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":692},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11425563,"byte_end":11425570,"line_start":632,"line_end":632,"column_start":6,"column_end":13},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435169,"byte_end":11435176,"line_start":973,"line_end":973,"column_start":18,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":680},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435302,"byte_end":11435327,"line_start":981,"line_end":981,"column_start":21,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":547},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435485,"byte_end":11435510,"line_start":987,"line_end":987,"column_start":23,"column_end":48},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":547},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/length_delimited.rs","byte_start":11435645,"byte_end":11435670,"line_start":993,"line_end":993,"column_start":19,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":547},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11436739,"byte_end":11436749,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11439291,"byte_end":11439301,"line_start":106,"line_end":106,"column_start":18,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":708},"to":{"krate":0,"index":275}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11442712,"byte_end":11442722,"line_start":185,"line_end":185,"column_start":24,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":708},"to":{"krate":0,"index":286}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443045,"byte_end":11443055,"line_start":200,"line_end":200,"column_start":18,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443360,"byte_end":11443375,"line_start":215,"line_end":215,"column_start":23,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":742},"to":{"krate":2,"index":6922}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443657,"byte_end":11443672,"line_start":224,"line_end":224,"column_start":26,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":742},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/codec/lines_codec.rs","byte_start":11443789,"byte_end":11443804,"line_start":230,"line_end":230,"column_start":28,"column_end":43},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":1753}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8574,"byte_end":8591,"line_start":60,"line_end":60,"column_start":22,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":8616,"byte_end":8633,"line_start":61,"line_end":61,"column_start":22,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":2090}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9367,"byte_end":9392,"line_start":78,"line_end":78,"column_start":26,"column_end":51},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":2078}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9466,"byte_end":9483,"line_start":82,"line_end":82,"column_start":27,"column_end":44},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":9708,"byte_end":9725,"line_start":90,"line_end":90,"column_start":16,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":10131,"byte_end":10148,"line_start":104,"line_end":104,"column_start":15,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11118,"byte_end":11135,"line_start":132,"line_end":132,"column_start":18,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":26},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":11225,"byte_end":11242,"line_start":138,"line_end":138,"column_start":6,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":26},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":17108,"byte_end":17133,"line_start":301,"line_end":301,"column_start":31,"column_end":56},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":17305,"byte_end":17330,"line_start":307,"line_end":307,"column_start":21,"column_end":46},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":18765,"byte_end":18790,"line_start":343,"line_end":343,"column_start":19,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":2302}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":19978,"byte_end":19992,"line_start":377,"line_end":377,"column_start":6,"column_end":20},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":20326,"byte_end":20343,"line_start":393,"line_end":393,"column_start":6,"column_end":23},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":20943,"byte_end":20960,"line_start":418,"line_end":418,"column_start":6,"column_end":23},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":21818,"byte_end":21831,"line_start":446,"line_end":446,"column_start":6,"column_end":19},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/cancellation_token.rs","byte_start":23016,"byte_end":23038,"line_start":484,"line_end":484,"column_start":6,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40557,"byte_end":40565,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40815,"byte_end":40823,"line_start":37,"line_end":37,"column_start":19,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":805},"to":{"krate":2,"index":2278}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":40928,"byte_end":40936,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":805},"to":{"krate":2,"index":2291}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/intrusive_double_linked_list.rs","byte_start":41245,"byte_end":41255,"line_start":59,"line_end":59,"column_start":9,"column_end":19},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":69698,"byte_end":69711,"line_start":16,"line_end":16,"column_start":6,"column_end":19},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71351,"byte_end":71364,"line_start":65,"line_end":65,"column_start":17,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":160},"to":{"krate":16,"index":68}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71578,"byte_end":71591,"line_start":73,"line_end":73,"column_start":16,"column_end":29},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":160},"to":{"krate":2,"index":1769}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/sync/poll_semaphore.rs","byte_start":71709,"byte_end":71722,"line_start":79,"line_end":79,"column_start":21,"column_end":34},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":160},"to":{"krate":2,"index":6917}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":74514,"byte_end":74520,"line_start":83,"line_end":83,"column_start":26,"column_end":32},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":822},"to":{"krate":2,"index":9541}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":74763,"byte_end":74769,"line_start":95,"line_end":95,"column_start":26,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":822},"to":{"krate":17,"index":141}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75042,"byte_end":75048,"line_start":109,"line_end":109,"column_start":29,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":822},"to":{"krate":17,"index":113}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75376,"byte_end":75382,"line_start":123,"line_end":123,"column_start":26,"column_end":32},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":822},"to":{"krate":17,"index":166}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":75736,"byte_end":75742,"line_start":137,"line_end":137,"column_start":27,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":822},"to":{"krate":17,"index":192}},{"span":{"file_name":"/Users/AlexF/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.6.2/src/either.rs","byte_start":76294,"byte_end":76300,"line_start":155,"line_end":155,"column_start":45,"column_end":51},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":822},"to":{"krate":16,"index":68}}]}